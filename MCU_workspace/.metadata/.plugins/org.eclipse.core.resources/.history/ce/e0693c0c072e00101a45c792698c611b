/*
 * stm32f407xx_usart.c
 *
 *  Created on: Mar 1, 2025
 *      Author: nhduong
 */

#include "stm32f407xx_usart.h"


static void USART_EndTxTransfer(USART_HandleTypeDef *husart);
static void USART_Transmit_TXE(USART_HandleTypeDef *husart);
static void USART_Receive_RXNE(USART_HandleTypeDef *husart);



/**
  * @brief  Enables or disables the clock for the specified USART peripheral.
  * @param  pUSARTx Pointer to USART_RegDef_t structure representing USART1, USART2, USART3, or UART4.
  * @param  state ENABLE (1) to enable the clock, DISABLE (0) to disable it.
  * @retval None
  */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t state)
{
    if(state == ENABLE)
    {
        if(pUSARTx == USART1)
        {
            USART1_PCLK_EN();
        }else if (pUSARTx == USART2)
        {
            USART2_PCLK_EN();
        }else if (pUSARTx == USART3)
        {
            USART3_PCLK_EN();
        }
        else if (pUSARTx == UART4)
        {
            UART4_PCLK_EN();
        }
    }
    else
    {
        if(pUSARTx == USART1)
        {
            USART1_PCLK_DI();
        }else if (pUSARTx == USART2)
        {
            USART2_PCLK_DI();
        }else if (pUSARTx == USART3)
        {
            USART3_PCLK_DI();
        }
        else if (pUSARTx == UART4)
        {
            UART4_PCLK_DI();
        }
    }
}

/**
  * @brief  Configures the baud rate for the specified USART peripheral.
  * @param  pUSARTx Pointer to the USART peripheral (USART1, USART2, USART3, or UART4).
  * @param  BaudRate The desired baud rate to set for the USART communication.
  * @retval None
  */

void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
    uint32_t PCLKx = 0;          // Variable to store the peripheral clock
    uint32_t usartdiv = 0;       // Variable to store USARTDIV value
    uint32_t M_part = 0, F_part = 0; // Variables to store Mantissa and Fraction parts
    uint32_t tempreg = 0;    // Temporary variable to store final BRR value

    // Step 1: Get the peripheral clock (PCLKx)
    if (pUSARTx == USART1 || pUSARTx == USART6)
    {
        PCLKx = RCC_GetPCLK2_Value(); // For USART1 and USART6, use APB2 clock
    }
    else
    {
        PCLKx = RCC_GetPCLK1_Value(); // For other USARTs, use APB1 clock
    }

    // Step 2: Check if OVER8 is enabled and calculate USARTDIV accordingly
    if (pUSARTx->CR1 & (1 << USART_CR1_OVER8))
    {
        // OVER8 = 1 (over-sampling by 8)
        // Formula: usartdiv = (25 * PCLKx) / (2 * BaudRate)
        usartdiv = ((25 * PCLKx) / (2 * BaudRate));
    }
    else
    {
        // OVER8 = 0 (over-sampling by 16)
        // Formula: usartdiv = (25 * PCLKx) / (4 * BaudRate)
        usartdiv = ((25 * PCLKx) / (4 * BaudRate));
    }

    // Step 3: Calculate the Mantissa part (integer part)
    M_part = usartdiv / 100;   // Integer part of USARTDIV (dividing by 100)

    // Step 4: Place Mantissa in the appropriate bit positions of BRR
    tempreg |= M_part << 4;    // Shifting the Mantissa part to the correct position in BRR

    // Step 5: Extract the Fraction part (decimal part)
    F_part = (usartdiv - (M_part * 100)); // Fractional part (subtracting the Mantissa)

    // Step 6: Calculate the fractional value based on OVER8
    if (pUSARTx->CR1 & (1 << USART_CR1_OVER8))
    {
        // OVER8 = 1 (oversampling by 8)
        // Formula: F_part = ((F_part * 8) + 50) / 100 & 0x07
        F_part = (((F_part * 8) + 50) / 100) & ((uint8_t)0x07);
    }
    else
    {
        // OVER8 = 0 (oversampling by 16)
        // Formula: F_part = ((F_part * 16) + 50) / 100 & 0x0F
        F_part = (((F_part * 16) + 50) / 100) & ((uint8_t)0x0F);
    }

    // Step 7: Place Fraction part in the appropriate bit positions of BRR
    tempreg |= F_part;         // Adding the Fraction part to tempreg

    // Step 8: Program the final value to USART_BRR
    pUSARTx->BRR = tempreg;    // Set the BRR register to configure the baud rate
}

void USART_InitGPIO(USART_RegDef_t *BaseAddress){
	GPIO_HandleTypeDef hGPIO;

	if(BaseAddress == USART2){
		hGPIO.pGPIOx = GPIOA;
		hGPIO.Init.Pin = GPIO_PIN_2;
		hGPIO.Init.Mode = GPIO_MODE_AF;
		hGPIO.Init.Speed = GPIO_SPEED_FAST;
		hGPIO.Init.Alternate = 7;
		GPIO_Init(&hGPIO);

		hGPIO.Init.Pin = GPIO_PIN_3;
		GPIO_Init(&hGPIO);
	}

}

/**
  * @brief  Enables and configures the USART peripheral.
  * @param  BaseAddress: Pointer to USART register definition structure.
  * @param  USART_TX_RX_Mode: Mode selection (TX, RX, or TX+RX).
  * @param  NoOfStopBits: Number of stop bits (e.g., 1, 0.5, 2).
  * @param  WordLength: Data word length (e.g., 8 or 9 bits).
  * @param  ParityMode: Parity configuration (None, Even, Odd).
  * @param  BaudRate: Desired baud rate for communication.
  * @retval None
  */

void USART_SetParam(USART_HandleTypeDef USART_Handle, USART_RegDef_t *BaseAddress, uint8_t USART_TX_RX_Mode, uint8_t NoOfStopBits, uint8_t WordLength, uint8_t ParityMode, uint32_t BaudRate){
		USART_Handle.pUSARTx = BaseAddress;
		USART_Handle.Init.Mode = USART_TX_RX_Mode;
		USART_Handle.Init.StopBits = NoOfStopBits;
		USART_Handle.Init.WordLength = WordLength;
		USART_Handle.Init.ParityControl = ParityMode;
		USART_Handle.Init.BaudRate = BaudRate;

		USART_Init(&USART_Handle);
}


/**
  * @brief  Initializes the USART peripheral according to the specified parameters
  *         in the USART_HandleTypeDef and initializes the associated handle.
  * @param  hspi Pointer to an USART_HandleTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_HandleTypeDef *husart)
{
	uint32_t tempreg = 0;

	// Enable peripheral clock
	USART_PeriClockControl(husart->pUSARTx, ENABLE);

/******************************** Configuration of CR1******************************************/
	// Configure USART mode
	if (husart->Init.Mode == USART_MODE_RX)
	{
		// Enable Receive field
		tempreg |= (1 << USART_CR1_RE);

		// Clear Transmit field
		tempreg &= ~(1 << USART_CR1_TE);
	}else if (husart->Init.Mode == USART_MODE_TX)
	{
		// Enable Transmit field
		tempreg |= (1 << USART_CR1_TE);

		// Clear Receive field
		tempreg &= ~(1 << USART_CR1_RE);
	}else {
		// Enable Receive field
		tempreg |= (1 << USART_CR1_RE);

		// Enable Transmit field
		tempreg |= (1 << USART_CR1_TE);
	}

	// Configure Word Length
	tempreg |= husart->Init.WordLength << USART_CR1_M;

	// Configure parity control bit
	if (husart->Init.ParityControl == USART_PARITY_EVEN)
	{
		//Implement the code to enable the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
	}else if (husart->Init.ParityControl == USART_PARITY_ODD)
	{
		//Implement the code to enable the parity control
		tempreg |= ( 1 << USART_CR1_PCE);

		//Implement the code to enable ODD parity
		tempreg |= ( 1 << USART_CR1_PS);
	}else {
		// Clear the parity bit
		tempreg &= ~( 1 << USART_CR1_PCE);
	}
	// Configure Oversampling mode
	tempreg |= husart->Init.Oversampling << USART_CR1_OVER8;

	//Program the CR1 register
	husart->pUSARTx->CR1 = tempreg;

/******************************** Configuration of CR2******************************************/
	tempreg = 0;

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= husart->Init.StopBits << USART_CR2_STOP;

	// Program the CR2 register
	husart->pUSARTx->CR2 = tempreg;

/******************************** Configuration of CR3******************************************/
	tempreg=0;

	//Configuration of USART hardware flow control
	if (husart->Init.HWFlowControl == USART_HW_CTS)
	{
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);

		// Clear the RTS flow control
		tempreg &= ~( 1 << USART_CR3_RTSE);
	}else if (husart->Init.HWFlowControl == USART_HW_RTS)
	{
		//Implement the code to enable RTS flow control
		tempreg |= ( 1 << USART_CR3_RTSE);

		// Clear the CTS flow control
		tempreg &= ~( 1 << USART_CR3_CTSE);
	}else if (husart->Init.HWFlowControl == USART_HW_CTS_RTS) {
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
		tempreg |= ( 1 << USART_CR3_RTSE);
	}else {
		//Implement the code to enable both CTS and RTS Flow control
		tempreg &= ~( 1 << USART_CR3_CTSE);
		tempreg &= ~( 1 << USART_CR3_RTSE);
	}
	husart->pUSARTx->CR3 = tempreg;

/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	USART_SetBaudRate(husart->pUSARTx,husart->Init.BaudRate);
}


/**
  * @brief  De-initializes the USART peripheral registers to their default reset values.
  * @param  husart Pointer to USART_HandleTypeDef structure representing the USART peripheral.
  * @retval None
  */
void USART_DeInit(USART_RegDef_t *pUSARTx)
{
    if (pUSARTx == USART1) {
        USART1_REG_RESET();  // Reset USART1
    } else if (pUSARTx == USART2) {
        USART2_REG_RESET();  // Reset USART2
    } else if (pUSARTx == USART3) {
        USART3_REG_RESET();  // Reset USART3
    } else if (pUSARTx == UART4) {
        UART4_REG_RESET();   // Reset UART4
    }
}

/**
  * @brief  Checks the peripheral control in the USART peripheral.
  * @param  pUSARTx Pointer to the USART peripheral (USART1, USART2, USART3 and UART4).
  * @param  controlState ENABLE (1) to enable the Peripheral, DISABLE (0) to disable it.
  * @retval None
  */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t state)
{
    if (state == ENABLE)
    {
        pUSARTx->CR1 |= (1 << USART_CR1_UE);  // Set the UE bit to enable the USART
    }
    else
    {
        pUSARTx->CR1 &= ~(1 << USART_CR1_UE); // Clear the UE bit to disable the USART
    }
}

/**
  * @brief  Checks the status of a specific flag in the USART Status Register (SR).
  * @param  pUSARTx Pointer to the USART peripheral (USART1, USART2, USART3 and UART4).
  * @param  FlagName The flag to check
  * @retval FLAG_SET(1) or FLAG_RESET(0).
  */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t FlagName)
{
	return (pUSARTx->SR & FlagName) ? FLAG_SET : FLAG_RESET;
}

/**
  * @brief  Transmits in master mode an amount of data in blocking mode.
  * @param  USART Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART.
  * @param  pTxBuffer Pointer to the data buffer containing data to be transmitted.
  * @param  Len The number of bytes to send.
  * @retval None
  */
void USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxBuffer, uint32_t Len)
{
    uint16_t *pData;

    // Loop over until "Len" number of bytes are transferred
    for (uint32_t i = 0; i < Len; i++)
    {
        // Wait until TXE flag is set in the SR (Transmitter Empty)
        while (!USART_GetFlagStatus(husart->pUSARTx, USART_FLAG_TXE));

        // Check Word Length (9 bits or 8 bits)
        if (husart->Init.WordLength == USART_WORDLENGTH_9BITS)
        {
            // 9 BITS: Load DR with 2 bytes. The bits other than first 9 bits
            pData = (uint16_t*)pTxBuffer;
            husart->pUSARTx->DR = (*pData & (uint16_t)0x01FF);

            // Check for USART Parity control
            if (husart->Init.ParityControl == USART_PARITY_NONE)
            {
                // No parity is used in this transfer, so 9 bits of user data will be sent
                // Increment the buffer by 2 bytes
                pTxBuffer += 2;
            }
            else
            {
                // Parity bit is used in this transfer, so 8 bits of user data will be sent
                // The 9th bit will be replaced by the parity bit by the hardware
                pTxBuffer++;
            }
        }
        else
        {
            // 8 BITS data transfer
            husart->pUSARTx->DR = (*pTxBuffer & (uint8_t)0xFF);

            // Increment the buffer address
            pTxBuffer++;
        }
    }

    // Wait until TC flag is set in the SR (Transmission Complete)
    while (!USART_GetFlagStatus(husart->pUSARTx, USART_FLAG_TC));
}

/**
  * @brief  Receives in master mode an amount of data in blocking mode.
  * @param  USART Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART.
  * @param  ppTxBuffer Pointer to the data buffer containing data to be transmitted.
  * @param  Len The number of bytes to receive.
  * @retval None
  */
void  USART_Receive(USART_HandleTypeDef *husart, uint8_t *pRxBuffer, uint32_t Len)
{
    // Loop over until "Len" number of bytes are transferred
    for (uint32_t i = 0; i < Len; i++)
    {
        // Wait until RXNE flag is set in the SR
        while (!USART_GetFlagStatus(husart->pUSARTx, USART_FLAG_RXNE));

        // Check Word Length (9 bits or 8 bits)
        if (husart->Init.WordLength == USART_WORDLENGTH_9BITS)
        {
            // We are going to receive 9-bit data in a frame

            // Check for USART Parity control
            if (husart->Init.ParityControl == USART_PARITY_NONE)
            {
                // No parity is used, so all 9 bits will be user data
                *((uint16_t*)pRxBuffer) = (husart->pUSARTx->DR & (uint16_t)0x01FF);
                pRxBuffer += 2; // Increment the pointer by 2 bytes
            }
            else
            {
                // Parity is used, so 8 bits will be user data and 1 bit is for parity
                *pRxBuffer = (husart->pUSARTx->DR & (uint8_t)0xFF);
                pRxBuffer++; // Increment the pointer by 1 byte
            }
        }
        else
        {
            // We are going to receive 8-bit data in a frame

            // Check for USART Parity control
            if (husart->Init.ParityControl == USART_PARITY_NONE)
            {
                // No parity is used, so all 8 bits will be user data
                *pRxBuffer = (husart->pUSARTx->DR & (uint8_t)0xFF);
            }
            else
            {
                // Parity is used, so 7 bits will be user data and 1 bit is parity
                *pRxBuffer = (uint8_t)(husart->pUSARTx->DR & (uint8_t)0x7F);
            }
            pRxBuffer++; // Increment the pointer by 1 byte
        }
    }
}

/**
  * @brief  Send an amount of data in non-blocking mode
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART.
  * @param  pTxbuffer Pointer to data buffer
  * @param  Len Amount of data to be sent
  * @retval State of the mode
  */
uint8_t USART_Transmit_IT(USART_HandleTypeDef *husart, uint8_t *pTxBuffer, uint32_t Len)
{
  uint8_t state = husart->TxState;

  // Check if USART is not busy with transmission
  if (state != USART_STATE_BUSY_TX)
  {
    // Store the pointer to the data buffer and set the length
    husart->pTxBuffer = pTxBuffer;
    husart->TxLen = Len;

    // Set the USART state to BUSY_TX (indicating the transmission is ongoing)
    husart->TxState = USART_STATE_BUSY_TX;

    // Enable the TXE interrupt (transmit data register empty) for non-blocking transmission
    husart->pUSARTx->CR1 |= (1 << USART_CR1_TXEIE);

    // Enable the TC interrupt (transmission complete) to know when the transmission is complete
    husart->pUSARTx->CR1 |= (1 << USART_CR1_TCIE);
  }

  return state;  // Return the previous state of the USART transmission
}


/**
  * @brief  Receive an amount of data in non-blocking mode.
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART.
  * @param  pRxbuffer Pointer to data buffer
  * @param  Len Amount of data to be received
  * @retval State of the mode
  */
uint8_t USART_Receive_IT(USART_HandleTypeDef *husart, uint8_t *pRxBuffer, uint32_t Len)
{
  uint8_t state = husart->RxState;

  // Check if USART is not currently busy receiving data
  if (state != USART_STATE_BUSY_RX)
  {
    // Store the pointer to the data buffer and set the length
    husart->pTxBuffer = pRxBuffer;
    husart->TxLen = Len;

    // Set the USART state to BUSY_RX (indicating reception is ongoing)
    husart->TxState = USART_STATE_BUSY_RX;

    // Read the DR register to clear the RXNE flag (Receive Data Register Not Empty)
    (void)husart->pUSARTx->DR;

    // Enable the RXNE interrupt (Receive Data Register Not Empty Interrupt) to handle data reception
    husart->pUSARTx->CR1 |= (1 << USART_CR1_RXNEIE);
  }

  return state;  // Return the previous state of the USART reception
}

/**
  * @brief  Clear the status of a specific flag in the USART Status Register (SR).
  * @param  pUSARTx Pointer to the USART peripheral (USART1, USART2, USART3 and UART4).
  * @param  FlagName The flag to check
  * @retval None
  */
void USART_ClearFlag(USART_RegDef_t *pUSARTx, uint16_t FlagName)
{
	pUSARTx->SR &= ~(FlagName);
}

/**
  * @brief  Enables or disables the specified IRQ number.
  * @param  IRQNumber Specifies the IRQ number.
  * @param  state ENABLE or DISABLE the IRQ.
  * @retval None
  */
void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t state)
{

    if(state == ENABLE)
    {
        if(IRQNumber <= 31)
        {
            //program ISER0 register
            *NVIC_ISER0 |= ( 1 << IRQNumber );

        }else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
        {
            //program ISER1 register
            *NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
        }
        else if(IRQNumber >= 64 && IRQNumber < 96 )
        {
            //program ISER2 register //64 to 95
            *NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
        }
    }else
    {
        if(IRQNumber <= 31)
        {
            //program ICER0 register
            *NVIC_ICER0 |= ( 1 << IRQNumber );
        }else if(IRQNumber > 31 && IRQNumber < 64 )
        {
            //program ICER1 register
            *NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
        }
        else if(IRQNumber >= 6 && IRQNumber < 96 )
        {
            //program ICER2 register
            *NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
        }
    }
}

/**
  * @brief  Configures the priority of an IRQ.
  * @param  IRQNumber Specifies the IRQ number.
  * @param  IRQPriority Specifies the priority level (0-255, lower is higher priority).
  * @retval None
  */
void USART_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
    //1. first lets find out the ipr register
    uint8_t iprx = IRQNumber / 4;
    uint8_t iprx_section  = IRQNumber %4 ;

    uint8_t shift_amount = ( 8 * iprx_section) + ( 8 - NO_PR_BITS_IMPLEMENTED) ;

    *(  NVIC_PR_BASEADDR + iprx ) |=  ( IRQPriority << shift_amount );
}

/**
  * @brief  End ongoing Tx transfer on USART peripheral (following error detection or Transmit completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTxTransfer(USART_HandleTypeDef *husart)
{
	// check length
	if (! husart->TxLen)
	{
		//Implement the code to clear the TC flag
		husart->pUSARTx->SR &= ~( 1 << USART_SR_TC);

	  	//Implement the code to clear the TCIE control bit

	  	//Reset the application state
	  	husart->TxState = USART_STATE_READY;

	  	//Reset Buffer address to NULL
	  	husart->pTxBuffer = NULL;

	  	//Reset the length to zero
	  	husart->TxLen = 0;

	  	//Call the application call back with event USART_EVENT_TX_CMPLT
	 	USART_ApplicationEventCallback(husart,USART_EVENT_TX_CMPLT);
	}
}

/**
  * @brief  Handles the TXE (Transmit Data Register Empty) interrupt for the USART peripheral.
  * @param  husart Pointer to the USART_HandleTypeDef structure
  * 			   that contains the configuration information for the specified USART.
  * @retval None
  */
static void USART_Transmit_TXE(USART_HandleTypeDef *husart)
{
	uint16_t *pdata;
  if(husart->TxState == USART_STATE_BUSY_TX)
  {
      //Keep sending data until Txlen reaches to zero
      if(husart->TxLen > 0)
      {
        //Check the USART_WordLength item for 9BIT or 8BIT in a frame
        if(husart->Init.WordLength == USART_WORDLENGTH_9BITS)
        {
          //if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
          pdata = (uint16_t*) husart->pTxBuffer;
          husart->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);

          //check for USART_ParityControl
          if(husart->Init.ParityControl == USART_PARITY_NONE)
          {
            //No parity is used in this transfer , so 9bits of user data will be sent
            //Implement the code to increment pTxBuffer twice
            husart->pTxBuffer += 2;
            husart->TxLen -=2;
          }
          else
          {
            //Parity bit is used in this transfer . so 8bits of user data will be sent
            //The 9th bit will be replaced by parity bit by the hardware
            husart->pTxBuffer++;
            husart->TxLen -=1;
          }
        }
        else
        {
          //This is 8bit data transfer
          husart->pUSARTx->DR = (*husart->pTxBuffer  & (uint8_t)0xFF);

          //Implement the code to increment the buffer address
          husart->pTxBuffer++;
          husart->TxLen -=1;
        }

      }
      if (husart->TxLen == 0 )
      {
        //TxLen is zero
        //Implement the code to clear the TXEIE bit (disable interrupt for TXE flag )
        husart->pUSARTx->CR1 &= ~( 1 << USART_CR1_TXEIE);
      }
  }
}

/**
  * @brief  Handles the RXNE (Receive Data Register Not Empty) interrupt for the USART peripheral.
  * @param  husart Pointer to the USART_HandleTypeDef structure
  * 			   that contains the configuration information for the specified USART.
  * @retval None
  */
static void USART_Receive_RXNE(USART_HandleTypeDef *husart)
{
  if(husart->RxState == USART_STATE_BUSY_RX)
  {
      if(husart->RxLen > 0)
      {
        //Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
        if(husart->Init.WordLength == USART_WORDLENGTH_9BITS)
        {
          //We are going to receive 9bit data in a frame

          //Now, check are we using USART_ParityControl control or not
          if(husart->Init.ParityControl == USART_PARITY_NONE)
          {
            //No parity is used , so all 9bits will be of user data

            //read only first 9 bits so mask the DR with 0x01FF
            *((uint16_t*) husart->pRxBuffer) = (husart->pUSARTx->DR  & (uint16_t)0x01FF);

            //Now increment the pRxBuffer two times
            husart->pRxBuffer += 2;
            husart->RxLen -= 2;
          }
          else
          {
            //Parity is used, so 8bits will be of user data and 1 bit is parity
             *husart->pRxBuffer = (husart->pUSARTx->DR  & (uint8_t)0xFF);
             husart->pRxBuffer++;
             husart->RxLen-=1;
          }
        }
        else
        {
          //We are going to receive 8bit data in a frame

          //Now, check are we using USART_ParityControl control or not
          if(husart->Init.ParityControl == USART_PARITY_NONE)
          {
            //No parity is used , so all 8bits will be of user data

            //read 8 bits from DR
             *husart->pRxBuffer = (uint8_t) (husart->pUSARTx->DR  & (uint8_t)0xFF);
          }

          else
          {
            //Parity is used, so , 7 bits will be of user data and 1 bit is parity

            //read only 7 bits , hence mask the DR with 0X7F
             *husart->pRxBuffer = (uint8_t) (husart->pUSARTx->DR  & (uint8_t)0x7F);

          }

          //Now , increment the pRxBuffer
          husart->pRxBuffer++;
           husart->RxLen -= 1;
        }


      }//if of >0

      if(! husart->RxLen)
      {
        //disable the rxne
        husart->pUSARTx->CR1 &= ~( 1 << USART_CR1_RXNEIE );
        husart->RxState = USART_STATE_READY;
        USART_ApplicationEventCallback(husart,USART_EVENT_RX_CMPLT);
      }
    }
}


/**
  * @brief  Handle USART event and error interrupt request.
  * @param  husart pointer to a USART_HandleTypeDef structure that contains
  *               the configuration information for the specified USART module.
  * @retval None
  */
void USART_IRQHandler(USART_HandleTypeDef *husart)
{

  uint32_t temp1 = 0, temp2 = 0;


/*************************Check for TC flag ********************************************/

    //Implement the code to check the state of TC bit in the SR
  temp1 = husart->pUSARTx->SR & ( 1 << USART_SR_TC);

   //Implement the code to check the state of TCEIE bit
  temp2 = husart->pUSARTx->CR1 & ( 1 << USART_CR1_TCIE);
  if(temp1 && temp2 )
  {
    //this interrupt is because of TC
    //close transmission and call application callback if TxLen is zero
    if ( husart->TxState == USART_STATE_BUSY_TX)
    {
      USART_EndTxTransfer(husart);
    }
  }

/*************************Check for TXE flag ********************************************/

  //Implement the code to check the state of TXE bit in the SR
  temp1 = husart->pUSARTx->SR & ( 1 << USART_SR_TXE);

  //Implement the code to check the state of TXEIE bit in CR1
  temp2 = husart->pUSARTx->CR1 & ( 1 << USART_CR1_TXEIE);
  if(temp1 && temp2 )
  {
    //this interrupt is because of TXE
    USART_Transmit_TXE(husart);
  }

/*************************Check for RXNE flag ********************************************/

  temp1 = husart->pUSARTx->SR & ( 1 << USART_SR_RXNE);
  temp2 = husart->pUSARTx->CR1 & ( 1 << USART_CR1_RXNEIE);
  if(temp1 && temp2 )
  {
    //this interrupt is because of rxne
    USART_Receive_RXNE(husart);
  }

/*************************Check for CTS flag ********************************************/
//Note : CTS feature is not applicable for UART4 and UART5

  //Implement the code to check the status of CTS bit in the SR
  temp1 = husart->pUSARTx->SR & ( 1 << USART_SR_CTS);

  //Implement the code to check the state of CTSE bit in CR1
  temp2 = husart->pUSARTx->CR3 & ( 1 << USART_CR3_CTSE);


  if(temp1  && temp2 )
  {
    //Implement the code to clear the CTS flag in SR
    husart->pUSARTx->SR &=  ~( 1 << USART_SR_CTS);

    //this interrupt is because of cts
    USART_ApplicationEventCallback(husart,USART_EVENT_CTS);
  }

/*************************Check for IDLE detection flag ********************************************/

  //Implement the code to check the status of IDLE flag bit in the SR
  temp1 = husart->pUSARTx->SR & ( 1 << USART_SR_IDLE);

  //Implement the code to check the state of IDLEIE bit in CR1
  temp2 = husart->pUSARTx->CR1 & ( 1 << USART_CR1_IDLEIE);


  if(temp1 && temp2)
  {
    //Implement the code to clear the IDLE flag. Refer to the RM to understand the clear sequence
    temp1 = husart->pUSARTx->SR &= ~( 1 << USART_SR_IDLE);

    //this interrupt is because of idle
    USART_ApplicationEventCallback(husart,USART_EVENT_IDLE);
  }

/*************************Check for Overrun detection flag ********************************************/

  //Implement the code to check the status of ORE flag  in the SR
  temp1 = husart->pUSARTx->SR & USART_SR_ORE;

  //Implement the code to check the status of RXNEIE  bit in the CR1
  temp2 = husart->pUSARTx->CR1 & USART_CR1_RXNEIE;


  if(temp1  && temp2 )
  {
    //Need not to clear the ORE flag here, instead give an api for the application to clear the ORE flag .

    //this interrupt is because of Overrun error
    USART_ApplicationEventCallback(husart,USART_ERR_ORE);
  }

/*************************Check for Error Flag ********************************************/

//Noise Flag, Overrun error and Framing Error in multibuffer communication
//We dont discuss multibuffer communication in this course. please refer to the RM
//The blow code will get executed in only if multibuffer mode is used.

  temp2 =  husart->pUSARTx->CR3 & ( 1 << USART_CR3_EIE) ;

  if(temp2 )
  {
    temp1 = husart->pUSARTx->SR;
    if(temp1 & ( 1 << USART_SR_FE))
    {
      /*
        This bit is set by hardware when a de-synchronization, excessive noise or a break character
        is detected. It is cleared by a software sequence (an read to the USART_SR register
        followed by a read to the USART_DR register).
      */
      USART_ApplicationEventCallback(husart,USART_ERR_FE);
    }

    if(temp1 & ( 1 << USART_SR_NE) )
    {
      /*
        This bit is set by hardware when noise is detected on a received frame. It is cleared by a
        software sequence (an read to the USART_SR register followed by a read to the
        USART_DR register).
      */
      USART_ApplicationEventCallback(husart,USART_ERR_NE);
    }

    if(temp1 & ( 1 << USART_SR_ORE) )
    {
      USART_ApplicationEventCallback(husart,USART_ERR_ORE);
    }
  }
}

__weak void USART_ApplicationEventCallback(USART_HandleTypeDef *husart,uint8_t event)
{

}
