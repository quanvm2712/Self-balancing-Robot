/*
 * stm32f407xx_tim.h
 *
 *  Created on: May 12, 2025
 *      Author: nhduo
 */

#ifndef INC_STM32F407XX_TIM_H_
#define INC_STM32F407XX_TIM_H_

#include "stm32f407xx.h"

/**
  * @brief  TIM Time base Configuration Structure definition
  */
typedef struct
{
  uint32_t Prescaler;         /*!< Specifies the prescaler value used to divide the TIM clock.
                                   This parameter can be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF */

  uint32_t CounterMode;       /*!< Specifies the counter mode.
                                     This parameter can be a value of @ref TIM_Counter_Mode */


  uint32_t Period;            /*!< Specifies the period value to be loaded into the active
                                   Auto-Reload Register at the next update event.
                                   This parameter can be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF.  */

} TIM_Base_InitTypeDef;

/**
  * @brief  TIM Output Compare Configuration Structure definition
  */
typedef struct
{
  uint32_t OCMode;        /*!< Specifies the TIM mode.
                               This parameter can be a value of @ref TIM_Output_Compare_and_PWM_modes */

  uint32_t Pulse;         /*!< Specifies the pulse value to be loaded into the Capture Compare Register.
                               This parameter can be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF */

  uint32_t OCPolarity;    /*!< Specifies the output polarity.
                               This parameter can be a value of @ref TIM_Output_Compare_Polarity */

  uint32_t OCNPolarity;   /*!< Specifies the complementary output polarity.
                               This parameter can be a value of @ref TIM_Output_Compare_N_Polarity
                               @note This parameter is valid only for timer instances supporting break feature. */

  uint32_t OCFastMode;    /*!< Specifies the Fast mode state.
                               This parameter can be a value of @ref TIM_Output_Fast_State
                               @note This parameter is valid only in PWM1 and PWM2 mode. */


  uint32_t OCIdleState;   /*!< Specifies the TIM Output Compare pin state during Idle state.
                               This parameter can be a value of @ref TIM_Output_Compare_Idle_State
                               @note This parameter is valid only for timer instances supporting break feature. */

  uint32_t OCNIdleState;  /*!< Specifies the TIM Output Compare pin state during Idle state.
                               This parameter can be a value of @ref TIM_Output_Compare_N_Idle_State
                               @note This parameter is valid only for timer instances supporting break feature. */
} TIM_OC_InitTypeDef;

/**
  * @brief  TIM Input Capture Configuration Structure definition
  */
typedef struct
{
  uint32_t  ICPolarity;  /*!< Specifies the active edge of the input signal.
                              This parameter can be a value of @ref TIM_Input_Capture_Polarity */

  uint32_t ICSelection;  /*!< Specifies the input.
                              This parameter can be a value of @ref TIM_Input_Capture_Selection */

  uint32_t ICPrescaler;  /*!< Specifies the Input Capture Prescaler.
                              This parameter can be a value of @ref TIM_Input_Capture_Prescaler */

  uint32_t ICFilter;     /*!< Specifies the input capture filter.
                              This parameter can be a number between Min_Data = 0x0 and Max_Data = 0xF */
} TIM_IC_InitTypeDef;


/**
  * @brief  TIM Encoder Configuration Structure definition
  */
typedef struct
{
  uint32_t EncoderMode;   /*!< Specifies the active edge of the input signal.
                               This parameter can be a value of @ref TIM_Encoder_Mode */

  uint32_t IC1Polarity;   /*!< Specifies the active edge of the input signal.
                               This parameter can be a value of @ref TIM_Encoder_Input_Polarity */

  uint32_t IC1Selection;  /*!< Specifies the input.
                               This parameter can be a value of @ref TIM_Input_Capture_Selection */

  uint32_t IC1Prescaler;  /*!< Specifies the Input Capture Prescaler.
                               This parameter can be a value of @ref TIM_Input_Capture_Prescaler */

  uint32_t IC1Filter;     /*!< Specifies the input capture filter.
                               This parameter can be a number between Min_Data = 0x0 and Max_Data = 0xF */

  uint32_t IC2Polarity;   /*!< Specifies the active edge of the input signal.
                               This parameter can be a value of @ref TIM_Encoder_Input_Polarity */

  uint32_t IC2Selection;  /*!< Specifies the input.
                              This parameter can be a value of @ref TIM_Input_Capture_Selection */

  uint32_t IC2Prescaler;  /*!< Specifies the Input Capture Prescaler.
                               This parameter can be a value of @ref TIM_Input_Capture_Prescaler */

  uint32_t IC2Filter;     /*!< Specifies the input capture filter.
                               This parameter can be a number between Min_Data = 0x0 and Max_Data = 0xF */
} TIM_Encoder_InitTypeDef;

/**
  * @brief  TIM Time Base Handle Structure definition
  */
typedef struct
{
  TIM_TypeDef                        *Instance;         /*!< Register base address                             */
  TIM_Base_InitTypeDef               Init;              /*!< TIM Time Base required parameters                 */

} TIM_HandleTypeDef;


/* Time Base functions ********************************************************/
void TIM_Base_Init(TIM_HandleTypeDef *htim);
void TIM_Base_DeInit(TIM_HandleTypeDef *htim);
/* Blocking mode: Polling */
void TIM_Base_Start(TIM_HandleTypeDef *htim);
void TIM_Base_Stop(TIM_HandleTypeDef *htim);
/* Non-Blocking mode: Interrupt */
void TIM_Base_Start_IT(TIM_HandleTypeDef *htim);
void TIM_Base_Stop_IT(TIM_HandleTypeDef *htim);

/* Timer Output Compare functions *********************************************/
void TIM_OC_Init(TIM_HandleTypeDef *htim);
void TIM_OC_DeInit(TIM_HandleTypeDef *htim);
/* Blocking mode: Polling */
void TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel);
void TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);
/* Non-Blocking mode: Interrupt */
void TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);
void TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);

/* Timer PWM functions ********************************************************/
void TIM_PWM_Init(TIM_HandleTypeDef *htim);
void TIM_PWM_DeInit(TIM_HandleTypeDef *htim);
/* Blocking mode: Polling */
void TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel);
void TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);
/* Non-Blocking mode: Interrupt */
void TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);
void TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);

/* Timer Input Capture functions **********************************************/
void TIM_IC_Init(TIM_HandleTypeDef *htim);
void TIM_IC_DeInit(TIM_HandleTypeDef *htim);
void TIM_IC_MspInit(TIM_HandleTypeDef *htim);
void TIM_IC_MspDeInit(TIM_HandleTypeDef *htim);
/* Blocking mode: Polling */
void TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel);
void TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);
/* Non-Blocking mode: Interrupt */
void TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);
void TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);

/* Timer Encoder functions ****************************************************/
void TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig);
void TIM_Encoder_DeInit(TIM_HandleTypeDef *htim);
void TIM_Encoder_MspInit(TIM_HandleTypeDef *htim);
void TIM_Encoder_MspDeInit(TIM_HandleTypeDef *htim);
/* Blocking mode: Polling */
void TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel);
void TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);
/* Non-Blocking mode: Interrupt */
void TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);
void TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);

/* Interrupt Handler functions  ***********************************************/
void TIM_IRQHandler(TIM_HandleTypeDef *htim);

void TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel);
void TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel);
void TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig,
                                           uint32_t Channel);





















#endif /* INC_STM32F407XX_TIM_H_ */
