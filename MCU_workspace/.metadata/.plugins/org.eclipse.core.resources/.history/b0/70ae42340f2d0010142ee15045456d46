/*
 * 010i2c_master_tx_testing.c
 *
 *  Created on: Feb 24, 2019
 *      Author: admin
 */



#include "stm32f407xx.h"

void delay(void)
{
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
}

I2C_HandleTypeDef I2C1_Handle;
float actualTemperature;
float actualHumidity;
uint8_t data[6];
/*
 * PB6-> SCL
 * PB9 or PB7 -> SDA
 */

void I2C1_GPIOInits(void)
{
	GPIO_HandleTypeDef I2CPins;

	/*Note : Internal pull-up resistors are used */

	I2CPins.pGPIOx = GPIOB;
	I2CPins.Init.Mode = GPIO_MODE_AF;
	I2CPins.Init.OPType = GPIO_OPTYPE_OD;
	/*
	 * Note : In the below line use GPIO_NO_PUPD option if you want to use external pullup resistors, then you have to use 3.3K pull up resistors
	 * for both SDA and SCL lines
	 */
	I2CPins.Init.Pull = GPIO_PULLUP;
	I2CPins.Init.Alternate = 4;
	I2CPins. Init.Speed = GPIO_SPEED_FAST;

	//scl
	I2CPins.Init.Pin = GPIO_PIN_6;
	GPIO_Init(&I2CPins);


	//sda
	//Note : since we found a glitch on PB9 , you can also try with PB7
	I2CPins.Init.Pin = GPIO_PIN_7;

	GPIO_Init(&I2CPins);


}

void I2C1_Inits(void)
{
	I2C1_Handle.pI2Cx = I2C1;
	I2C1_Handle.Init.AckControl = I2C_ACK_ENABLE;
	I2C1_Handle.Init.DeviceAddress = AHT20_I2C_ADDRESS;
	I2C1_Handle.Init.DutyCycle = I2C_DUTYCYCLE_2;
	I2C1_Handle.Init.ClockSpeed = I2C_CLOCKSPEED_SM;

	I2C_Init(&I2C1_Handle);

}

int main(void)
{


	//i2c pin inits
	I2C1_GPIOInits();

	//i2c peripheral configuration
	I2C1_Inits();

	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1,ENABLE);

	AHT20_Init();
	while (1)
	{
		delay();
	AHT20_ReadData();
	}

}
