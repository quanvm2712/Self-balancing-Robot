/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include "stm32f407xx.h"
#include "string.h"


/*
 * PB14 --> SPI2_MISO
 * PB15 --> SPI2_MOSI
 * PB13 -> SPI2_SCLK
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void)
{
	GPIO_HandleTypeDef SPIPins;

	SPIPins.pGPIOx = GPIOB;
	SPIPins.Init.Mode = GPIO_MODE_AF;
	SPIPins.Init.Alternate = 5;
	SPIPins.Init.OPType = GPIO_OPTYPE_PP;
	SPIPins.Init.Pull = GPIO_NOPULL;
	SPIPins.Init.Speed = GPIO_SPEED_FAST;

	//SCLK
	SPIPins.Init.Pin = GPIO_PIN_13;
	GPIO_Init(&SPIPins);

	//MOSI
	SPIPins.Init.Pin = GPIO_PIN_15;
	GPIO_Init(&SPIPins);

	//MISO
	//SPIPins.Init.Pin = GPIO_PIN_14;
	//GPIO_Init(&SPIPins);


	//NSS
	SPIPins.Init.Pin = GPIO_PIN_12;
	GPIO_Init(&SPIPins);


}

void SPI2_Inits(void)
{


	SPI_HandleTypeDef SPI2handle;
	SPI2handle.pSPIx = SPI2;
	SPI2handle.Init.Direction = SPI_DIRECTION_FD;
	SPI2handle.Init.Mode = SPI_MODE_MASTER;
	SPI2handle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; //generates sclk of 8MHz
	SPI2handle.Init.DataSize = SPI_DATASIZE_8BIT;
	SPI2handle.Init.CLKPolarity = SPI_POLARITY_HIGH;
	SPI2handle.Init.CLKPhase = SPI_PHASE_2EDGE;
	SPI2handle.Init.NSS = SPI_NSS_SOFT; //software slave management enabled for NSS pin

	SPI_Init(&SPI2handle);
}

int main(void)
{
	uint8_t txData[3] = {0xAA, 0xBB, 0xCC};
	uint8_t rxData[3] = {0};



	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();

	// SPI_SSOEConfig(SPI2,ENABLE);
	SPI_SSIConfig(SPI2, ENABLE);

	// transmit

	// SPI_TransmitReceive(SPI2, txData, rxData, 3);

	SPI_Transmit1(SPI2, txData, 3);
	//SPI_Receive1(SPI2, rxData, 3);
	return 0;

}
