/*
 * stm32f407xx_tim.c
 *
 *  Created on: May 12, 2025
 *      Author: nhduong
 */

#include "stm32f407xx_tim.h"

// TIM_Private_Functions
static void TIM_SetCounterMode(TIM_RegDef_t *TIMx, uint8_t Mode);
static void TIM_CounterControl(TIM_RegDef_t *pTIMx, uint8_t State);

/**
  * @brief  Initializes the TIMx peripheral according to the specified parameters in the TIMx_Init.
  * @param  clockState Specifies whether to ENABLE or DISABLE of the clock for the TIM2 peripheral.
  * @retval None
  */
void TIM_PeriClockControl(TIM_RegDef_t *pTIMx, uint8_t clockState)
{
    if (clockState == ENABLE)
    {
        if (pTIMx == TIM1)       TIM1_CLK_ENABLE();
        else if (pTIMx == TIM2)  TIM2_CLK_ENABLE();
        else if (pTIMx == TIM3)  TIM3_CLK_ENABLE();
        else if (pTIMx == TIM4)  TIM4_CLK_ENABLE();
        else if (pTIMx == TIM5)  TIM5_CLK_ENABLE();
        else if (pTIMx == TIM6)  TIM6_CLK_ENABLE();
        else if (pTIMx == TIM7)  TIM7_CLK_ENABLE();
        else if (pTIMx == TIM8)  TIM8_CLK_ENABLE();
        else if (pTIMx == TIM9)  TIM9_CLK_ENABLE();
        else if (pTIMx == TIM10) TIM10_CLK_ENABLE();
        else if (pTIMx == TIM11) TIM11_CLK_ENABLE();
        else if (pTIMx == TIM12) TIM12_CLK_ENABLE();
        else if (pTIMx == TIM13) TIM13_CLK_ENABLE();
        else if (pTIMx == TIM14) TIM14_CLK_ENABLE();
    }
    else
    {
        if (pTIMx == TIM1)       TIM1_CLK_DISABLE();
        else if (pTIMx == TIM2)  TIM2_CLK_DISABLE();
        else if (pTIMx == TIM3)  TIM3_CLK_DISABLE();
        else if (pTIMx == TIM4)  TIM4_CLK_DISABLE();
        else if (pTIMx == TIM5)  TIM5_CLK_DISABLE();
        else if (pTIMx == TIM6)  TIM6_CLK_DISABLE();
        else if (pTIMx == TIM7)  TIM7_CLK_DISABLE();
        else if (pTIMx == TIM8)  TIM8_CLK_DISABLE();
        else if (pTIMx == TIM9)  TIM9_CLK_DISABLE();
        else if (pTIMx == TIM10) TIM10_CLK_DISABLE();
        else if (pTIMx == TIM11) TIM11_CLK_DISABLE();
        else if (pTIMx == TIM12) TIM12_CLK_DISABLE();
        else if (pTIMx == TIM13) TIM13_CLK_DISABLE();
        else if (pTIMx == TIM14) TIM14_CLK_DISABLE();
    }
}


/**
  * @brief  Time Base configuration
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_SetConfigPWM(TIM_RegDef_t *pTIMx, uint8_t counterMode, uint32_t Prescaler, uint32_t Period, uint32_t DutyCycle)
{
	// Configure counter mode
	TIM_SetCounterMode(pTIMx, counterMode);

	// Config clock
	pTIMx->CR1 &= ~TIM_CR1_CKD;
	pTIMx->CR1 |= 0; // no clock division

	// set Prescaler
	pTIMx->PSC = Prescaler;

	// set Period
	pTIMx->ARR = Period;

	// set duty cycle
	pTIMx->CCR1 = DutyCycle;

	// Enable counter
	TIM_CounterControl(pTIMx, ENABLE);

	// update generation
	pTIMx->EGR = TIM_EGR_UG;

	// Configure  Capture/Compare 1 output Polarity.
	pTIMx->CCER &= ~(1 << 1); // Active as high
	pTIMx->CCER |= (1 << 0); // Capture/Compare 1 output enable.

	// Select PWM mode
	pTIMx->CCMR1 |= 6 << 4; // PWM mode 1


}

void GPIO_InitPWM(GPIO_HandleTypeDef *GPIO_InitStruct)
{
	GPIO_InitStruct->pGPIOx = GPIOA;
	GPIO_InitStruct->Init.Pin = GPIO_PIN_0;
	    GPIO_InitStruct->Init.Mode = GPIO_MODE_AF;
	    GPIO_InitStruct->Init.OPType = GPIO_OPTYPE_PP;
	    GPIO_InitStruct->Init.Pull = GPIO_NOPULL;
	    GPIO_InitStruct->Init.Speed = GPIO_SPEED_LOW;
	    GPIO_InitStruct->Init.Alternate = 1;
	    GPIO_Init(GPIO_InitStruct);
}
/**
  * @brief  Initializes the TIM PWM Time Base according to the specified
  *         parameters in the TIM_HandleTypeDef and initializes the associated handle.
  * @param  htim TIM PWM handle
  * @retval None
  */
void TIM_PWM_Init()
{
	GPIO_HandleTypeDef GPIO_InitStruct;
	GPIO_InitPWM(&GPIO_InitStruct);
	 /* Enable clock for the PWM */
	TIM_PeriClockControl(ENABLE);

	 /* Init the base time for the PWM */
	TIM_SetConfig(TIM2, 15, 999, 500);
}

void TIM_SetChannelPolarity(TIM_RegDef_t *TIMx, uint8_t channel, uint8_t polarity)
{
	switch(channel)
	{
		case TIM_CHANNEL_1:
			if (polarity == TIM_OC_POLARITY_LOW)
			{
				TIMx->CR1 |= (1 << TIM_CCER_CC1P_Pos);
			}else {
				TIMx->CR1 &= ~(1 << TIM_CCER_CC1P_Pos);
			}
			break;

		case TIM_CHANNEL_2:
			if (polarity == TIM_OC_POLARITY_LOW)
			{
				TIMx->CR1 |= (1 << TIM_CCER_CC2P_Pos);
			}else {
				TIMx->CR1 &= ~(1 << TIM_CCER_CC2P_Pos);
			}
			break;

		case TIM_CHANNEL_3:
			if (polarity == TIM_OC_POLARITY_LOW)
			{
				TIMx->CR1 |= (1 << TIM_CCER_CC3P_Pos);
			}else {
				TIMx->CR1 &= (1 << TIM_CCER_CC3P_Pos);
			}
			break;

		case TIM_CHANNEL_4:
			if (polarity == TIM_OC_POLARITY_LOW)
			{
				TIMx->CR1 |= (1 << TIM_CCER_CC4P_Pos)''
			}

	}
}
/**
  * @brief  Time Set counter mode
  * @param  TIMx TIM peripheral
  * @param  Mode
  * @retval None
  */
static void TIM_SetCounterMode(TIM_RegDef_t *TIMx, uint8_t Mode)
{
	// clear bit CMS[1:0] and DIR in CR1 register
	TIMx->CR1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);

	switch(Mode)
	{
		case TIM_COUNTERMODE_UP:
			TIMx->CR1 |= 0;
			break;
		case TIM_COUNTERMODE_DOWN:
			TIMx->CR1 |= TIM_CR1_DIR;
			break;
		case TIM_COUNTERMODE_CENTERALIGNED1:
			TIMx->CR1 |= TIM_CR1_CMS_0; // CMS = 01
			break;
		case TIM_COUNTERMODE_CENTERALIGNED2:
			TIMx->CR1 |= TIM_CR1_CMS_1; // CMS = 02
			break;
		case TIM_COUNTERMODE_CENTERALIGNED3:
			TIMx->CR1 |= TIM_CR1_CMS; // CMS = 03
			break;
		default:
			/* Nothing to do */
			break;
	}
}

/**
  * @brief  Time enable counter
  * @param  TIMx TIM peripheral
  * @param  State ENABLE or DISABLE
  * @retval None
  */
static void TIM_CounterControl(TIM_RegDef_t *pTIMx, uint8_t State)
{
	if (State == ENABLE)
	{
		pTIMx->CR1 |= TIM_CR1_CEN;
	}else {
		pTIMx->CR1 &= ~TIM_CR1_CEN;
	}
}
