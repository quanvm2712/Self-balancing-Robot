#include "SysTick.h"

/**
 * @brief Set the SysTick reload value.
 * @param ReloadValue: The value to load into the STK_LOAD register (max 0x00FFFFFF).
 * @retval None
 */
void SysTick_SetReloadValue(uint32_t ReloadValue){
	SYSTICK->STK_LOAD = ReloadValue;
}

/**
 * @brief Enable the SysTick counter.
 * @param None
 * @retval None
 */
void SysTick_EnableCounter(void){
	SYSTICK->STK_CTRL |= (1<<0);
}

/**
 * @brief Select the clock source for SysTick.
 * @param ClockSource: 0 = external (AHB/8), 1 = internal (AHB).
 * @retval None
 */
void SysTick_SelectClockSource(_Bool ClockSource){
	SYSTICK->STK_CTRL &= ~(1 << 2);
	SYSTICK->STK_CTRL |= ClockSource << 2;
}

/**
 * @brief Configure the SysTick interrupt.
 * @param IsInterruptEnaled: 1 = enable interrupt, 0 = disable interrupt.
 * @retval None
 */
void SysTick_InterruptConfig(_Bool IsInterruptEnaled){
	SYSTICK->STK_CTRL &= ~(1 << 1);
	SYSTICK->STK_CTRL |= (IsInterruptEnaled << 1);
}

/**
 * @brief Clear the SysTick current counter value.
 * @param None
 * @retval None
 */
void SysTick_ClearCounterValue(void){
	SYSTICK->STK_VAL = 0; // Writing any value clears the counter to 0
}


/**
 * @brief Initialize SysTick to generate an interrupt every 1 ms (assuming 16 MHz clock and AHB/8).
 * @param None
 * @retval None
 */
void SysTick_Init(void){
	SysTick_SetReloadValue(1999);
	SysTick_ClearCounterValue();
	SysTick_SelectClockSource(SYSTICK_CLKSOURCE_AHB_DIV_8);
	SysTick_InterruptConfig(SYSTICK_INTERRUPT_ENABLED);

	SysTick_EnableCounter();
}



void SysTick_Handler(void){
	char data = 0;
}
