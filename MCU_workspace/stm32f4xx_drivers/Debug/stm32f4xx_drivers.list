
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d74  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08006f08  08006f08  00007f08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007334  08007334  000091e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007334  08007334  00008334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800733c  0800733c  000091e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800733c  0800733c  0000833c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007340  08007340  00008340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08007344  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091e0  2**0
                  CONTENTS
 10 .bss          000001a0  200001e0  200001e0  000091e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000380  20000380  000091e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003d8d  00000000  00000000  00009210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000e50  00000000  00000000  0000cf9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004d0  00000000  00000000  0000ddf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000387  00000000  00000000  0000e2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004711  00000000  00000000  0000e647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006279  00000000  00000000  00012d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000f431  00000000  00000000  00018fd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00028402  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002788  00000000  00000000  00028448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0002abd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006eec 	.word	0x08006eec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08006eec 	.word	0x08006eec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <SysTick_SetReloadValue>:
/**
 * @brief Set the SysTick reload value.
 * @param ReloadValue: The value to load into the STK_LOAD register (max 0x00FFFFFF).
 * @retval None
 */
void SysTick_SetReloadValue(uint32_t ReloadValue){
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	SYSTICK->STK_LOAD = ReloadValue;
 8000cfc:	4a04      	ldr	r2, [pc, #16]	@ (8000d10 <SysTick_SetReloadValue+0x1c>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6053      	str	r3, [r2, #4]
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000e010 	.word	0xe000e010

08000d14 <SysTick_EnableCounter>:
/**
 * @brief Enable the SysTick counter.
 * @param None
 * @retval None
 */
void SysTick_EnableCounter(void){
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
	SYSTICK->STK_CTRL |= (1<<0);
 8000d18:	4b05      	ldr	r3, [pc, #20]	@ (8000d30 <SysTick_EnableCounter+0x1c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a04      	ldr	r2, [pc, #16]	@ (8000d30 <SysTick_EnableCounter+0x1c>)
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	6013      	str	r3, [r2, #0]
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000e010 	.word	0xe000e010

08000d34 <SysTick_SelectClockSource>:
/**
 * @brief Select the clock source for SysTick.
 * @param ClockSource: 0 = external (AHB/8), 1 = internal (AHB).
 * @retval None
 */
void SysTick_SelectClockSource(_Bool ClockSource){
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
	SYSTICK->STK_CTRL &= ~(1 << 2);
 8000d3e:	4b09      	ldr	r3, [pc, #36]	@ (8000d64 <SysTick_SelectClockSource+0x30>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a08      	ldr	r2, [pc, #32]	@ (8000d64 <SysTick_SelectClockSource+0x30>)
 8000d44:	f023 0304 	bic.w	r3, r3, #4
 8000d48:	6013      	str	r3, [r2, #0]
	SYSTICK->STK_CTRL |= ClockSource << 2;
 8000d4a:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <SysTick_SelectClockSource+0x30>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	4904      	ldr	r1, [pc, #16]	@ (8000d64 <SysTick_SelectClockSource+0x30>)
 8000d54:	4313      	orrs	r3, r2
 8000d56:	600b      	str	r3, [r1, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000e010 	.word	0xe000e010

08000d68 <SysTick_InterruptConfig>:
/**
 * @brief Configure the SysTick interrupt.
 * @param IsInterruptEnaled: 1 = enable interrupt, 0 = disable interrupt.
 * @retval None
 */
void SysTick_InterruptConfig(_Bool IsInterruptEnaled){
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
	SYSTICK->STK_CTRL &= ~(1 << 1);
 8000d72:	4b09      	ldr	r3, [pc, #36]	@ (8000d98 <SysTick_InterruptConfig+0x30>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a08      	ldr	r2, [pc, #32]	@ (8000d98 <SysTick_InterruptConfig+0x30>)
 8000d78:	f023 0302 	bic.w	r3, r3, #2
 8000d7c:	6013      	str	r3, [r2, #0]
	SYSTICK->STK_CTRL |= (IsInterruptEnaled << 1);
 8000d7e:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <SysTick_InterruptConfig+0x30>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	4904      	ldr	r1, [pc, #16]	@ (8000d98 <SysTick_InterruptConfig+0x30>)
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	600b      	str	r3, [r1, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000e010 	.word	0xe000e010

08000d9c <SysTick_ClearCounterValue>:
/**
 * @brief Clear the SysTick current counter value.
 * @param None
 * @retval None
 */
void SysTick_ClearCounterValue(void){
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
	SYSTICK->STK_VAL = 0; // Writing any value clears the counter to 0
 8000da0:	4b03      	ldr	r3, [pc, #12]	@ (8000db0 <SysTick_ClearCounterValue+0x14>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000e010 	.word	0xe000e010

08000db4 <SysTick_Init>:
/**
 * @brief Initialize SysTick to generate an interrupt every 1 ms (assuming 16 MHz clock and AHB/8).
 * @param None
 * @retval None
 */
void SysTick_Init(void){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	SysTick_SetReloadValue((ClockFreq / 1000) - 1);
 8000db8:	4b0a      	ldr	r3, [pc, #40]	@ (8000de4 <SysTick_Init+0x30>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000de8 <SysTick_Init+0x34>)
 8000dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc2:	099b      	lsrs	r3, r3, #6
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ff94 	bl	8000cf4 <SysTick_SetReloadValue>
	SysTick_ClearCounterValue();
 8000dcc:	f7ff ffe6 	bl	8000d9c <SysTick_ClearCounterValue>
	SysTick_SelectClockSource(SYSTICK_CLKSOURCE_AHB_DIV_8);
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f7ff ffaf 	bl	8000d34 <SysTick_SelectClockSource>
	SysTick_InterruptConfig(SYSTICK_INTERRUPT_ENABLED);
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	f7ff ffc6 	bl	8000d68 <SysTick_InterruptConfig>

	SysTick_EnableCounter();
 8000ddc:	f7ff ff9a 	bl	8000d14 <SysTick_EnableCounter>
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000000 	.word	0x20000000
 8000de8:	10624dd3 	.word	0x10624dd3

08000dec <getTick>:
/**
 * @brief Returns the current system tick count in milliseconds.
 * @param None
 * @retval Current tick value (in ms)
 */
uint32_t getTick(void){
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
	return ticks;
 8000df0:	4b03      	ldr	r3, [pc, #12]	@ (8000e00 <getTick+0x14>)
 8000df2:	681b      	ldr	r3, [r3, #0]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	200001fc 	.word	0x200001fc

08000e04 <SysTick_Handler>:
 * @brief SysTick interrupt handler, called every 1 ms.
 * Increments the global tick counter.
 * @param None
 * @retval None
 */
void SysTick_Handler(void){
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
	ticks++;
 8000e08:	4b04      	ldr	r3, [pc, #16]	@ (8000e1c <SysTick_Handler+0x18>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	4a03      	ldr	r2, [pc, #12]	@ (8000e1c <SysTick_Handler+0x18>)
 8000e10:	6013      	str	r3, [r2, #0]
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	200001fc 	.word	0x200001fc

08000e20 <Delay_ms>:
 * @brief Delays execution for the specified number of milliseconds.
 * Uses the system tick counter for timing.
 * @param ms: Number of milliseconds to delay
 * @retval None
 */
void Delay_ms(uint16_t ms){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	80fb      	strh	r3, [r7, #6]
	uint32_t current_ticks = getTick();
 8000e2a:	f7ff ffdf 	bl	8000dec <getTick>
 8000e2e:	60f8      	str	r0, [r7, #12]
	while((uint32_t)(getTick() - current_ticks) < ms);
 8000e30:	bf00      	nop
 8000e32:	f7ff ffdb 	bl	8000dec <getTick>
 8000e36:	4602      	mov	r2, r0
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	1ad2      	subs	r2, r2, r3
 8000e3c:	88fb      	ldrh	r3, [r7, #6]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d3f7      	bcc.n	8000e32 <Delay_ms+0x12>
}
 8000e42:	bf00      	nop
 8000e44:	bf00      	nop
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <GPIO_PeriClockControl>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral .
  * @param  clockState Specifies whether to ENABLE or DISABLE of the clock for the given GPIO peripheral.
  * @retval None
  */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t clockState)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	70fb      	strb	r3, [r7, #3]
    if (clockState == ENABLE) {
 8000e58:	78fb      	ldrb	r3, [r7, #3]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d162      	bne.n	8000f24 <GPIO_PeriClockControl+0xd8>
        if (pGPIOx == GPIOA) {
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a64      	ldr	r2, [pc, #400]	@ (8000ff4 <GPIO_PeriClockControl+0x1a8>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d106      	bne.n	8000e74 <GPIO_PeriClockControl+0x28>
            GPIOA_CLK_ENABLE();
 8000e66:	4b64      	ldr	r3, [pc, #400]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	4a63      	ldr	r2, [pc, #396]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6313      	str	r3, [r2, #48]	@ 0x30
            GPIOH_CLK_DISABLE();
        }else if (pGPIOx == GPIOI) {
            GPIOI_CLK_DISABLE();
        }
    }
}
 8000e72:	e0b9      	b.n	8000fe8 <GPIO_PeriClockControl+0x19c>
        }else if (pGPIOx == GPIOB) {
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a61      	ldr	r2, [pc, #388]	@ (8000ffc <GPIO_PeriClockControl+0x1b0>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d106      	bne.n	8000e8a <GPIO_PeriClockControl+0x3e>
            GPIOB_CLK_ENABLE();
 8000e7c:	4b5e      	ldr	r3, [pc, #376]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e80:	4a5d      	ldr	r2, [pc, #372]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000e82:	f043 0302 	orr.w	r3, r3, #2
 8000e86:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000e88:	e0ae      	b.n	8000fe8 <GPIO_PeriClockControl+0x19c>
        }else if (pGPIOx == GPIOC) {
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a5c      	ldr	r2, [pc, #368]	@ (8001000 <GPIO_PeriClockControl+0x1b4>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d106      	bne.n	8000ea0 <GPIO_PeriClockControl+0x54>
            GPIOC_CLK_ENABLE();
 8000e92:	4b59      	ldr	r3, [pc, #356]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	4a58      	ldr	r2, [pc, #352]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000e9e:	e0a3      	b.n	8000fe8 <GPIO_PeriClockControl+0x19c>
        }else if (pGPIOx == GPIOD) {
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a58      	ldr	r2, [pc, #352]	@ (8001004 <GPIO_PeriClockControl+0x1b8>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d106      	bne.n	8000eb6 <GPIO_PeriClockControl+0x6a>
            GPIOD_CLK_ENABLE();
 8000ea8:	4b53      	ldr	r3, [pc, #332]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eac:	4a52      	ldr	r2, [pc, #328]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000eae:	f043 0308 	orr.w	r3, r3, #8
 8000eb2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000eb4:	e098      	b.n	8000fe8 <GPIO_PeriClockControl+0x19c>
        }else if (pGPIOx == GPIOE) {
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a53      	ldr	r2, [pc, #332]	@ (8001008 <GPIO_PeriClockControl+0x1bc>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d106      	bne.n	8000ecc <GPIO_PeriClockControl+0x80>
            GPIOE_CLK_ENABLE();
 8000ebe:	4b4e      	ldr	r3, [pc, #312]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	4a4d      	ldr	r2, [pc, #308]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000ec4:	f043 0310 	orr.w	r3, r3, #16
 8000ec8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000eca:	e08d      	b.n	8000fe8 <GPIO_PeriClockControl+0x19c>
        }else if (pGPIOx == GPIOF) {
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a4f      	ldr	r2, [pc, #316]	@ (800100c <GPIO_PeriClockControl+0x1c0>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d106      	bne.n	8000ee2 <GPIO_PeriClockControl+0x96>
            GPIOF_CLK_ENABLE();
 8000ed4:	4b48      	ldr	r3, [pc, #288]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed8:	4a47      	ldr	r2, [pc, #284]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000eda:	f043 0320 	orr.w	r3, r3, #32
 8000ede:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000ee0:	e082      	b.n	8000fe8 <GPIO_PeriClockControl+0x19c>
        }else if (pGPIOx == GPIOG) {
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a4a      	ldr	r2, [pc, #296]	@ (8001010 <GPIO_PeriClockControl+0x1c4>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d106      	bne.n	8000ef8 <GPIO_PeriClockControl+0xac>
            GPIOG_CLK_ENABLE();
 8000eea:	4b43      	ldr	r3, [pc, #268]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	4a42      	ldr	r2, [pc, #264]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000ef0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ef4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000ef6:	e077      	b.n	8000fe8 <GPIO_PeriClockControl+0x19c>
        }else if (pGPIOx == GPIOH) {
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a46      	ldr	r2, [pc, #280]	@ (8001014 <GPIO_PeriClockControl+0x1c8>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d106      	bne.n	8000f0e <GPIO_PeriClockControl+0xc2>
            GPIOH_CLK_ENABLE();
 8000f00:	4b3d      	ldr	r3, [pc, #244]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f04:	4a3c      	ldr	r2, [pc, #240]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000f06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f0a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f0c:	e06c      	b.n	8000fe8 <GPIO_PeriClockControl+0x19c>
        }else if (pGPIOx == GPIOI) {
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a41      	ldr	r2, [pc, #260]	@ (8001018 <GPIO_PeriClockControl+0x1cc>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d168      	bne.n	8000fe8 <GPIO_PeriClockControl+0x19c>
            GPIOI_CLK_ENABLE();
 8000f16:	4b38      	ldr	r3, [pc, #224]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	4a37      	ldr	r2, [pc, #220]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000f1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f20:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f22:	e061      	b.n	8000fe8 <GPIO_PeriClockControl+0x19c>
        if (pGPIOx == GPIOA) {
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a33      	ldr	r2, [pc, #204]	@ (8000ff4 <GPIO_PeriClockControl+0x1a8>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d106      	bne.n	8000f3a <GPIO_PeriClockControl+0xee>
            GPIOA_CLK_DISABLE();
 8000f2c:	4b32      	ldr	r3, [pc, #200]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f30:	4a31      	ldr	r2, [pc, #196]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000f32:	f023 0301 	bic.w	r3, r3, #1
 8000f36:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f38:	e056      	b.n	8000fe8 <GPIO_PeriClockControl+0x19c>
        }else if (pGPIOx == GPIOB) {
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a2f      	ldr	r2, [pc, #188]	@ (8000ffc <GPIO_PeriClockControl+0x1b0>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d106      	bne.n	8000f50 <GPIO_PeriClockControl+0x104>
            GPIOB_CLK_DISABLE();
 8000f42:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	4a2c      	ldr	r2, [pc, #176]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000f48:	f023 0302 	bic.w	r3, r3, #2
 8000f4c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f4e:	e04b      	b.n	8000fe8 <GPIO_PeriClockControl+0x19c>
        }else if (pGPIOx == GPIOC) {
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a2b      	ldr	r2, [pc, #172]	@ (8001000 <GPIO_PeriClockControl+0x1b4>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d106      	bne.n	8000f66 <GPIO_PeriClockControl+0x11a>
            GPIOC_CLK_DISABLE();
 8000f58:	4b27      	ldr	r3, [pc, #156]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5c:	4a26      	ldr	r2, [pc, #152]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000f5e:	f023 0304 	bic.w	r3, r3, #4
 8000f62:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f64:	e040      	b.n	8000fe8 <GPIO_PeriClockControl+0x19c>
        }else if (pGPIOx == GPIOD) {
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a26      	ldr	r2, [pc, #152]	@ (8001004 <GPIO_PeriClockControl+0x1b8>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d106      	bne.n	8000f7c <GPIO_PeriClockControl+0x130>
            GPIOD_CLK_DISABLE();
 8000f6e:	4b22      	ldr	r3, [pc, #136]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	4a21      	ldr	r2, [pc, #132]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000f74:	f023 0308 	bic.w	r3, r3, #8
 8000f78:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f7a:	e035      	b.n	8000fe8 <GPIO_PeriClockControl+0x19c>
        }else if (pGPIOx == GPIOE) {
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a22      	ldr	r2, [pc, #136]	@ (8001008 <GPIO_PeriClockControl+0x1bc>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d106      	bne.n	8000f92 <GPIO_PeriClockControl+0x146>
            GPIOE_CLK_DISABLE();
 8000f84:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f88:	4a1b      	ldr	r2, [pc, #108]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000f8a:	f023 0310 	bic.w	r3, r3, #16
 8000f8e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f90:	e02a      	b.n	8000fe8 <GPIO_PeriClockControl+0x19c>
        }else if (pGPIOx == GPIOF) {
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a1d      	ldr	r2, [pc, #116]	@ (800100c <GPIO_PeriClockControl+0x1c0>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d106      	bne.n	8000fa8 <GPIO_PeriClockControl+0x15c>
            GPIOF_CLK_DISABLE();
 8000f9a:	4b17      	ldr	r3, [pc, #92]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	4a16      	ldr	r2, [pc, #88]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000fa0:	f023 0320 	bic.w	r3, r3, #32
 8000fa4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000fa6:	e01f      	b.n	8000fe8 <GPIO_PeriClockControl+0x19c>
        }else if (pGPIOx == GPIOG) {
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a19      	ldr	r2, [pc, #100]	@ (8001010 <GPIO_PeriClockControl+0x1c4>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d106      	bne.n	8000fbe <GPIO_PeriClockControl+0x172>
            GPIOG_CLK_DISABLE();
 8000fb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb4:	4a10      	ldr	r2, [pc, #64]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000fb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000fba:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000fbc:	e014      	b.n	8000fe8 <GPIO_PeriClockControl+0x19c>
        }else if (pGPIOx == GPIOH) {
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a14      	ldr	r2, [pc, #80]	@ (8001014 <GPIO_PeriClockControl+0x1c8>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d106      	bne.n	8000fd4 <GPIO_PeriClockControl+0x188>
            GPIOH_CLK_DISABLE();
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	4a0b      	ldr	r2, [pc, #44]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000fcc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000fd0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000fd2:	e009      	b.n	8000fe8 <GPIO_PeriClockControl+0x19c>
        }else if (pGPIOx == GPIOI) {
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a10      	ldr	r2, [pc, #64]	@ (8001018 <GPIO_PeriClockControl+0x1cc>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d105      	bne.n	8000fe8 <GPIO_PeriClockControl+0x19c>
            GPIOI_CLK_DISABLE();
 8000fdc:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe0:	4a05      	ldr	r2, [pc, #20]	@ (8000ff8 <GPIO_PeriClockControl+0x1ac>)
 8000fe2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000fe6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	40020000 	.word	0x40020000
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40020400 	.word	0x40020400
 8001000:	40020800 	.word	0x40020800
 8001004:	40020c00 	.word	0x40020c00
 8001008:	40021000 	.word	0x40021000
 800100c:	40021400 	.word	0x40021400
 8001010:	40021800 	.word	0x40021800
 8001014:	40021c00 	.word	0x40021c00
 8001018:	40022000 	.word	0x40022000

0800101c <GPIO_ConfigureMode>:
 *                    - GPIO_MODE_IT_RISING
 *                    - GPIO_MODE_IT_RISING_FALLING
 *
 * @retval None
 */
void GPIO_ConfigureMode(GPIO_RegDef_t* GPIOx, uint8_t GPIO_PIN, uint8_t GPIO_Mode){
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	70fb      	strb	r3, [r7, #3]
 8001028:	4613      	mov	r3, r2
 800102a:	70bb      	strb	r3, [r7, #2]
    if (GPIO_Mode <= GPIO_MODE_ANALOG){ //When the selected mode is not GPIO External Interrupt
 800102c:	78bb      	ldrb	r3, [r7, #2]
 800102e:	2b03      	cmp	r3, #3
 8001030:	d815      	bhi.n	800105e <GPIO_ConfigureMode+0x42>
	    //Reset bits value of selected pin.
	    GPIOx->MODER &= ~(0b11 << (GPIO_PIN * 2));
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	78fa      	ldrb	r2, [r7, #3]
 8001038:	0052      	lsls	r2, r2, #1
 800103a:	2103      	movs	r1, #3
 800103c:	fa01 f202 	lsl.w	r2, r1, r2
 8001040:	43d2      	mvns	r2, r2
 8001042:	401a      	ands	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	601a      	str	r2, [r3, #0]
	    //Set the selected mode for the pin
	    GPIOx->MODER |= GPIO_Mode << (GPIO_PIN * 2);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	78b9      	ldrb	r1, [r7, #2]
 800104e:	78fa      	ldrb	r2, [r7, #3]
 8001050:	0052      	lsls	r2, r2, #1
 8001052:	fa01 f202 	lsl.w	r2, r1, r2
 8001056:	431a      	orrs	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	601a      	str	r2, [r3, #0]
	    EXTI->IMR |= (1 << GPIO_PIN);

	    EXTI->PR |= (1 << GPIO_PIN);  // Clear pending flag
    }

}
 800105c:	e0c1      	b.n	80011e2 <GPIO_ConfigureMode+0x1c6>
	    if(GPIO_Mode == GPIO_MODE_IT_FALLING){
 800105e:	78bb      	ldrb	r3, [r7, #2]
 8001060:	2b04      	cmp	r3, #4
 8001062:	d115      	bne.n	8001090 <GPIO_ConfigureMode+0x74>
		    EXTI->FTSR |= (1 << GPIO_PIN);
 8001064:	4b62      	ldr	r3, [pc, #392]	@ (80011f0 <GPIO_ConfigureMode+0x1d4>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	78fa      	ldrb	r2, [r7, #3]
 800106a:	2101      	movs	r1, #1
 800106c:	fa01 f202 	lsl.w	r2, r1, r2
 8001070:	4611      	mov	r1, r2
 8001072:	4a5f      	ldr	r2, [pc, #380]	@ (80011f0 <GPIO_ConfigureMode+0x1d4>)
 8001074:	430b      	orrs	r3, r1
 8001076:	60d3      	str	r3, [r2, #12]
		    EXTI->RTSR &= ~(1 << GPIO_PIN);
 8001078:	4b5d      	ldr	r3, [pc, #372]	@ (80011f0 <GPIO_ConfigureMode+0x1d4>)
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	78fa      	ldrb	r2, [r7, #3]
 800107e:	2101      	movs	r1, #1
 8001080:	fa01 f202 	lsl.w	r2, r1, r2
 8001084:	43d2      	mvns	r2, r2
 8001086:	4611      	mov	r1, r2
 8001088:	4a59      	ldr	r2, [pc, #356]	@ (80011f0 <GPIO_ConfigureMode+0x1d4>)
 800108a:	400b      	ands	r3, r1
 800108c:	6093      	str	r3, [r2, #8]
 800108e:	e02c      	b.n	80010ea <GPIO_ConfigureMode+0xce>
	    else if(GPIO_Mode == GPIO_MODE_IT_RISING){
 8001090:	78bb      	ldrb	r3, [r7, #2]
 8001092:	2b05      	cmp	r3, #5
 8001094:	d115      	bne.n	80010c2 <GPIO_ConfigureMode+0xa6>
		    EXTI->RTSR |= (1 << GPIO_PIN);
 8001096:	4b56      	ldr	r3, [pc, #344]	@ (80011f0 <GPIO_ConfigureMode+0x1d4>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	78fa      	ldrb	r2, [r7, #3]
 800109c:	2101      	movs	r1, #1
 800109e:	fa01 f202 	lsl.w	r2, r1, r2
 80010a2:	4611      	mov	r1, r2
 80010a4:	4a52      	ldr	r2, [pc, #328]	@ (80011f0 <GPIO_ConfigureMode+0x1d4>)
 80010a6:	430b      	orrs	r3, r1
 80010a8:	6093      	str	r3, [r2, #8]
		    EXTI->FTSR &= ~(1 << GPIO_PIN);
 80010aa:	4b51      	ldr	r3, [pc, #324]	@ (80011f0 <GPIO_ConfigureMode+0x1d4>)
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	78fa      	ldrb	r2, [r7, #3]
 80010b0:	2101      	movs	r1, #1
 80010b2:	fa01 f202 	lsl.w	r2, r1, r2
 80010b6:	43d2      	mvns	r2, r2
 80010b8:	4611      	mov	r1, r2
 80010ba:	4a4d      	ldr	r2, [pc, #308]	@ (80011f0 <GPIO_ConfigureMode+0x1d4>)
 80010bc:	400b      	ands	r3, r1
 80010be:	60d3      	str	r3, [r2, #12]
 80010c0:	e013      	b.n	80010ea <GPIO_ConfigureMode+0xce>
		    EXTI->RTSR |= (1 << GPIO_PIN);
 80010c2:	4b4b      	ldr	r3, [pc, #300]	@ (80011f0 <GPIO_ConfigureMode+0x1d4>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	78fa      	ldrb	r2, [r7, #3]
 80010c8:	2101      	movs	r1, #1
 80010ca:	fa01 f202 	lsl.w	r2, r1, r2
 80010ce:	4611      	mov	r1, r2
 80010d0:	4a47      	ldr	r2, [pc, #284]	@ (80011f0 <GPIO_ConfigureMode+0x1d4>)
 80010d2:	430b      	orrs	r3, r1
 80010d4:	6093      	str	r3, [r2, #8]
		    EXTI->FTSR |= (1 << GPIO_PIN);
 80010d6:	4b46      	ldr	r3, [pc, #280]	@ (80011f0 <GPIO_ConfigureMode+0x1d4>)
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	78fa      	ldrb	r2, [r7, #3]
 80010dc:	2101      	movs	r1, #1
 80010de:	fa01 f202 	lsl.w	r2, r1, r2
 80010e2:	4611      	mov	r1, r2
 80010e4:	4a42      	ldr	r2, [pc, #264]	@ (80011f0 <GPIO_ConfigureMode+0x1d4>)
 80010e6:	430b      	orrs	r3, r1
 80010e8:	60d3      	str	r3, [r2, #12]
	    SYSCFG_CLK_ENABLE();	//Enable SYSCFG clock
 80010ea:	4b42      	ldr	r3, [pc, #264]	@ (80011f4 <GPIO_ConfigureMode+0x1d8>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ee:	4a41      	ldr	r2, [pc, #260]	@ (80011f4 <GPIO_ConfigureMode+0x1d8>)
 80010f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010f4:	6453      	str	r3, [r2, #68]	@ 0x44
	    uint8_t EXTICR_Index = GPIO_PIN / 4; //Get Register index of EXTICR
 80010f6:	78fb      	ldrb	r3, [r7, #3]
 80010f8:	089b      	lsrs	r3, r3, #2
 80010fa:	73fb      	strb	r3, [r7, #15]
	    uint8_t EXTICR_StartBit = GPIO_PIN % 4;
 80010fc:	78fb      	ldrb	r3, [r7, #3]
 80010fe:	f003 0303 	and.w	r3, r3, #3
 8001102:	73bb      	strb	r3, [r7, #14]
	    uint8_t GPIO_Port =  GPIO_BASEADDR_TO_CODE(GPIOx);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a3c      	ldr	r2, [pc, #240]	@ (80011f8 <GPIO_ConfigureMode+0x1dc>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d031      	beq.n	8001170 <GPIO_ConfigureMode+0x154>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a3b      	ldr	r2, [pc, #236]	@ (80011fc <GPIO_ConfigureMode+0x1e0>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d02b      	beq.n	800116c <GPIO_ConfigureMode+0x150>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a3a      	ldr	r2, [pc, #232]	@ (8001200 <GPIO_ConfigureMode+0x1e4>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d025      	beq.n	8001168 <GPIO_ConfigureMode+0x14c>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a39      	ldr	r2, [pc, #228]	@ (8001204 <GPIO_ConfigureMode+0x1e8>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d01f      	beq.n	8001164 <GPIO_ConfigureMode+0x148>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a38      	ldr	r2, [pc, #224]	@ (8001208 <GPIO_ConfigureMode+0x1ec>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d019      	beq.n	8001160 <GPIO_ConfigureMode+0x144>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a37      	ldr	r2, [pc, #220]	@ (800120c <GPIO_ConfigureMode+0x1f0>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d013      	beq.n	800115c <GPIO_ConfigureMode+0x140>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a36      	ldr	r2, [pc, #216]	@ (8001210 <GPIO_ConfigureMode+0x1f4>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d00d      	beq.n	8001158 <GPIO_ConfigureMode+0x13c>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a35      	ldr	r2, [pc, #212]	@ (8001214 <GPIO_ConfigureMode+0x1f8>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d007      	beq.n	8001154 <GPIO_ConfigureMode+0x138>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a34      	ldr	r2, [pc, #208]	@ (8001218 <GPIO_ConfigureMode+0x1fc>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d101      	bne.n	8001150 <GPIO_ConfigureMode+0x134>
 800114c:	2308      	movs	r3, #8
 800114e:	e010      	b.n	8001172 <GPIO_ConfigureMode+0x156>
 8001150:	2300      	movs	r3, #0
 8001152:	e00e      	b.n	8001172 <GPIO_ConfigureMode+0x156>
 8001154:	2307      	movs	r3, #7
 8001156:	e00c      	b.n	8001172 <GPIO_ConfigureMode+0x156>
 8001158:	2306      	movs	r3, #6
 800115a:	e00a      	b.n	8001172 <GPIO_ConfigureMode+0x156>
 800115c:	2305      	movs	r3, #5
 800115e:	e008      	b.n	8001172 <GPIO_ConfigureMode+0x156>
 8001160:	2304      	movs	r3, #4
 8001162:	e006      	b.n	8001172 <GPIO_ConfigureMode+0x156>
 8001164:	2303      	movs	r3, #3
 8001166:	e004      	b.n	8001172 <GPIO_ConfigureMode+0x156>
 8001168:	2302      	movs	r3, #2
 800116a:	e002      	b.n	8001172 <GPIO_ConfigureMode+0x156>
 800116c:	2301      	movs	r3, #1
 800116e:	e000      	b.n	8001172 <GPIO_ConfigureMode+0x156>
 8001170:	2300      	movs	r3, #0
 8001172:	737b      	strb	r3, [r7, #13]
	    SYSCFG->EXTICR[EXTICR_Index] &= ~(0b1111 << (EXTICR_StartBit * 4));
 8001174:	4a29      	ldr	r2, [pc, #164]	@ (800121c <GPIO_ConfigureMode+0x200>)
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	3302      	adds	r3, #2
 800117a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800117e:	7bbb      	ldrb	r3, [r7, #14]
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	210f      	movs	r1, #15
 8001184:	fa01 f303 	lsl.w	r3, r1, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	4618      	mov	r0, r3
 800118c:	4923      	ldr	r1, [pc, #140]	@ (800121c <GPIO_ConfigureMode+0x200>)
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	4002      	ands	r2, r0
 8001192:	3302      	adds	r3, #2
 8001194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    SYSCFG->EXTICR[EXTICR_Index] |= GPIO_Port << (EXTICR_StartBit * 4);
 8001198:	4a20      	ldr	r2, [pc, #128]	@ (800121c <GPIO_ConfigureMode+0x200>)
 800119a:	7bfb      	ldrb	r3, [r7, #15]
 800119c:	3302      	adds	r3, #2
 800119e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011a2:	7b79      	ldrb	r1, [r7, #13]
 80011a4:	7bbb      	ldrb	r3, [r7, #14]
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ac:	4618      	mov	r0, r3
 80011ae:	491b      	ldr	r1, [pc, #108]	@ (800121c <GPIO_ConfigureMode+0x200>)
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	4302      	orrs	r2, r0
 80011b4:	3302      	adds	r3, #2
 80011b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    EXTI->IMR |= (1 << GPIO_PIN);
 80011ba:	4b0d      	ldr	r3, [pc, #52]	@ (80011f0 <GPIO_ConfigureMode+0x1d4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	78fa      	ldrb	r2, [r7, #3]
 80011c0:	2101      	movs	r1, #1
 80011c2:	fa01 f202 	lsl.w	r2, r1, r2
 80011c6:	4611      	mov	r1, r2
 80011c8:	4a09      	ldr	r2, [pc, #36]	@ (80011f0 <GPIO_ConfigureMode+0x1d4>)
 80011ca:	430b      	orrs	r3, r1
 80011cc:	6013      	str	r3, [r2, #0]
	    EXTI->PR |= (1 << GPIO_PIN);  // Clear pending flag
 80011ce:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <GPIO_ConfigureMode+0x1d4>)
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	78fa      	ldrb	r2, [r7, #3]
 80011d4:	2101      	movs	r1, #1
 80011d6:	fa01 f202 	lsl.w	r2, r1, r2
 80011da:	4611      	mov	r1, r2
 80011dc:	4a04      	ldr	r2, [pc, #16]	@ (80011f0 <GPIO_ConfigureMode+0x1d4>)
 80011de:	430b      	orrs	r3, r1
 80011e0:	6153      	str	r3, [r2, #20]
}
 80011e2:	bf00      	nop
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40013c00 	.word	0x40013c00
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40020000 	.word	0x40020000
 80011fc:	40020400 	.word	0x40020400
 8001200:	40020800 	.word	0x40020800
 8001204:	40020c00 	.word	0x40020c00
 8001208:	40021000 	.word	0x40021000
 800120c:	40021400 	.word	0x40021400
 8001210:	40021800 	.word	0x40021800
 8001214:	40021c00 	.word	0x40021c00
 8001218:	40022000 	.word	0x40022000
 800121c:	40013800 	.word	0x40013800

08001220 <GPIO_ConfigureSpeed>:
 *                     - GPIO_SPEED_MEDIUM
 *                     - GPIO_SPEED_FAST
 *
 * @retval None
 */
void GPIO_ConfigureSpeed(GPIO_RegDef_t* GPIOx, uint8_t GPIO_Pin, uint8_t GPIO_Speed){
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	70fb      	strb	r3, [r7, #3]
 800122c:	4613      	mov	r3, r2
 800122e:	70bb      	strb	r3, [r7, #2]
    uint8_t startBit = GPIO_Pin * 2;
 8001230:	78fb      	ldrb	r3, [r7, #3]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	73fb      	strb	r3, [r7, #15]
    //Clear the value of selected pin
    GPIOx->OSPEEDR &= ~(0b11 << startBit);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	7bfa      	ldrb	r2, [r7, #15]
 800123c:	2103      	movs	r1, #3
 800123e:	fa01 f202 	lsl.w	r2, r1, r2
 8001242:	43d2      	mvns	r2, r2
 8001244:	401a      	ands	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	609a      	str	r2, [r3, #8]
    //Set GPIO Speed for selected Pin
    GPIOx->OSPEEDR |= GPIO_Speed << startBit;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	78b9      	ldrb	r1, [r7, #2]
 8001250:	7bfa      	ldrb	r2, [r7, #15]
 8001252:	fa01 f202 	lsl.w	r2, r1, r2
 8001256:	431a      	orrs	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	609a      	str	r2, [r3, #8]
}
 800125c:	bf00      	nop
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <GPIO_ConfigureOutputType>:
 *                          - GPIO_OPTYPE_PP (Push-pull)
 *                          - GPIO_OPTYPE_OD (Open-drain)
 *
 * @retval None
 */
void GPIO_ConfigureOutputType(GPIO_RegDef_t* GPIOx, uint8_t GPIO_Pin, _Bool GPIO_OutputType){
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	70fb      	strb	r3, [r7, #3]
 8001274:	4613      	mov	r3, r2
 8001276:	70bb      	strb	r3, [r7, #2]
    GPIOx->OTYPER &= ~(1 << GPIO_Pin);  //Clear value of selected pin
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	78fa      	ldrb	r2, [r7, #3]
 800127e:	2101      	movs	r1, #1
 8001280:	fa01 f202 	lsl.w	r2, r1, r2
 8001284:	43d2      	mvns	r2, r2
 8001286:	401a      	ands	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	605a      	str	r2, [r3, #4]
    GPIOx->OTYPER |= GPIO_OutputType << GPIO_Pin; //Set GPIO Output type
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	78b9      	ldrb	r1, [r7, #2]
 8001292:	78fa      	ldrb	r2, [r7, #3]
 8001294:	fa01 f202 	lsl.w	r2, r1, r2
 8001298:	431a      	orrs	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	605a      	str	r2, [r3, #4]
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <GPIO_ConfigurePullUpDown>:
 *                   - GPIO_PULLUP
 *                   - GPIO_PULLDOWN
 *
 * @retval None
 */
void GPIO_ConfigurePullUpDown(GPIO_RegDef_t* GPIOx, uint8_t GPIO_Pin, uint8_t PullMode){
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
 80012b2:	460b      	mov	r3, r1
 80012b4:	70fb      	strb	r3, [r7, #3]
 80012b6:	4613      	mov	r3, r2
 80012b8:	70bb      	strb	r3, [r7, #2]
    GPIOx->PUPDR &= ~(0b11 << (GPIO_Pin*2)); //Clear value of selected pin
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	78fa      	ldrb	r2, [r7, #3]
 80012c0:	0052      	lsls	r2, r2, #1
 80012c2:	2103      	movs	r1, #3
 80012c4:	fa01 f202 	lsl.w	r2, r1, r2
 80012c8:	43d2      	mvns	r2, r2
 80012ca:	401a      	ands	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	60da      	str	r2, [r3, #12]
    GPIOx->PUPDR |= PullMode << (GPIO_Pin * 2); //Set GPIO pull mode.
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	78b9      	ldrb	r1, [r7, #2]
 80012d6:	78fa      	ldrb	r2, [r7, #3]
 80012d8:	0052      	lsls	r2, r2, #1
 80012da:	fa01 f202 	lsl.w	r2, r1, r2
 80012de:	431a      	orrs	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	60da      	str	r2, [r3, #12]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <GPIO_Initialize>:
 * @param  GPIO_Pin  GPIO pin number (0–15).
 * @param  GPIO_Mode Desired mode (input, output, interrupt, etc.).
 *
 * @retval None
 */
void GPIO_Initialize(GPIO_RegDef_t *GPIOx, uint8_t GPIO_Pin, uint8_t GPIO_Mode){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	70fb      	strb	r3, [r7, #3]
 80012fc:	4613      	mov	r3, r2
 80012fe:	70bb      	strb	r3, [r7, #2]
      GPIO_PeriClockControl(GPIOx, ENABLE);
 8001300:	2101      	movs	r1, #1
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff fda2 	bl	8000e4c <GPIO_PeriClockControl>

      GPIO_ConfigureMode(GPIOx, GPIO_Pin, GPIO_Mode);
 8001308:	78ba      	ldrb	r2, [r7, #2]
 800130a:	78fb      	ldrb	r3, [r7, #3]
 800130c:	4619      	mov	r1, r3
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff fe84 	bl	800101c <GPIO_ConfigureMode>

      GPIO_ConfigureSpeed(GPIOx, GPIO_Pin, GPIO_SPEED_FAST);  //Fast speed as default.
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	2202      	movs	r2, #2
 8001318:	4619      	mov	r1, r3
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff ff80 	bl	8001220 <GPIO_ConfigureSpeed>

      if(GPIO_Mode == GPIO_MODE_OUTPUT){
 8001320:	78bb      	ldrb	r3, [r7, #2]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d106      	bne.n	8001334 <GPIO_Initialize+0x44>
	      GPIO_ConfigureOutputType(GPIOx, GPIO_Pin, GPIO_OPTYPE_PP);  //Output push-pull as default
 8001326:	78fb      	ldrb	r3, [r7, #3]
 8001328:	2200      	movs	r2, #0
 800132a:	4619      	mov	r1, r3
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ff9b 	bl	8001268 <GPIO_ConfigureOutputType>
	      GPIO_ConfigurePullUpDown(GPIOx, GPIO_Pin, GPIO_PULLDOWN);  //If GPIO mode is input, GPIO_PULLDOWN is used as default.
      }
      else if(GPIO_Mode == GPIO_MODE_IT_FALLING){
	      GPIO_ConfigurePullUpDown(GPIOx, GPIO_Pin, GPIO_PULLUP);
      }
}
 8001332:	e015      	b.n	8001360 <GPIO_Initialize+0x70>
      else if(GPIO_Mode == GPIO_MODE_INPUT || GPIO_Mode == GPIO_MODE_IT_RISING){
 8001334:	78bb      	ldrb	r3, [r7, #2]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d002      	beq.n	8001340 <GPIO_Initialize+0x50>
 800133a:	78bb      	ldrb	r3, [r7, #2]
 800133c:	2b05      	cmp	r3, #5
 800133e:	d106      	bne.n	800134e <GPIO_Initialize+0x5e>
	      GPIO_ConfigurePullUpDown(GPIOx, GPIO_Pin, GPIO_PULLDOWN);  //If GPIO mode is input, GPIO_PULLDOWN is used as default.
 8001340:	78fb      	ldrb	r3, [r7, #3]
 8001342:	2202      	movs	r2, #2
 8001344:	4619      	mov	r1, r3
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff ffaf 	bl	80012aa <GPIO_ConfigurePullUpDown>
}
 800134c:	e008      	b.n	8001360 <GPIO_Initialize+0x70>
      else if(GPIO_Mode == GPIO_MODE_IT_FALLING){
 800134e:	78bb      	ldrb	r3, [r7, #2]
 8001350:	2b04      	cmp	r3, #4
 8001352:	d105      	bne.n	8001360 <GPIO_Initialize+0x70>
	      GPIO_ConfigurePullUpDown(GPIOx, GPIO_Pin, GPIO_PULLUP);
 8001354:	78fb      	ldrb	r3, [r7, #3]
 8001356:	2201      	movs	r2, #1
 8001358:	4619      	mov	r1, r3
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff ffa5 	bl	80012aa <GPIO_ConfigurePullUpDown>
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <AFIO_SelectAlternateFunction>:

void AFIO_SelectAlternateFunction(GPIO_RegDef_t* GPIOx, uint8_t GPIO_Pin, uint8_t AlternateFunction){
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	70fb      	strb	r3, [r7, #3]
 8001374:	4613      	mov	r3, r2
 8001376:	70bb      	strb	r3, [r7, #2]
    uint8_t StartBit;
    GPIO_PeriClockControl(GPIOx, ENABLE);
 8001378:	2101      	movs	r1, #1
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff fd66 	bl	8000e4c <GPIO_PeriClockControl>
    if(GPIO_Pin <= GPIO_PIN_7){
 8001380:	78fb      	ldrb	r3, [r7, #3]
 8001382:	2b07      	cmp	r3, #7
 8001384:	d816      	bhi.n	80013b4 <AFIO_SelectAlternateFunction+0x4c>
	    StartBit = GPIO_Pin * 4;
 8001386:	78fb      	ldrb	r3, [r7, #3]
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	73fb      	strb	r3, [r7, #15]
	    GPIOx->AFR[0] &= ~(0b1111 << StartBit);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	7bfa      	ldrb	r2, [r7, #15]
 8001392:	210f      	movs	r1, #15
 8001394:	fa01 f202 	lsl.w	r2, r1, r2
 8001398:	43d2      	mvns	r2, r2
 800139a:	401a      	ands	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	621a      	str	r2, [r3, #32]
	    GPIOx->AFR[0] |= AlternateFunction << StartBit;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	78b9      	ldrb	r1, [r7, #2]
 80013a6:	7bfa      	ldrb	r2, [r7, #15]
 80013a8:	fa01 f202 	lsl.w	r2, r1, r2
 80013ac:	431a      	orrs	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	621a      	str	r2, [r3, #32]
    else{
	    StartBit = (GPIO_Pin - 8) * 4;
	    GPIOx->AFR[1] &= ~(0b1111 << StartBit);
	    GPIOx->AFR[1] |= AlternateFunction << StartBit;
    }
}
 80013b2:	e017      	b.n	80013e4 <AFIO_SelectAlternateFunction+0x7c>
	    StartBit = (GPIO_Pin - 8) * 4;
 80013b4:	78fb      	ldrb	r3, [r7, #3]
 80013b6:	3b08      	subs	r3, #8
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	73fb      	strb	r3, [r7, #15]
	    GPIOx->AFR[1] &= ~(0b1111 << StartBit);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c2:	7bfa      	ldrb	r2, [r7, #15]
 80013c4:	210f      	movs	r1, #15
 80013c6:	fa01 f202 	lsl.w	r2, r1, r2
 80013ca:	43d2      	mvns	r2, r2
 80013cc:	401a      	ands	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	625a      	str	r2, [r3, #36]	@ 0x24
	    GPIOx->AFR[1] |= AlternateFunction << StartBit;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d6:	78b9      	ldrb	r1, [r7, #2]
 80013d8:	7bfa      	ldrb	r2, [r7, #15]
 80013da:	fa01 f202 	lsl.w	r2, r1, r2
 80013de:	431a      	orrs	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80013e4:	bf00      	nop
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <GPIO_Init>:
  * @param  hGPIO pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_HandleTypeDef *hGPIO)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
    uint32_t temp;
    // Enable the clock peripheral
    GPIO_PeriClockControl(hGPIO->pGPIOx, ENABLE);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2101      	movs	r1, #1
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fd26 	bl	8000e4c <GPIO_PeriClockControl>

    // 1. Configure mode
    if (hGPIO->Init.Mode <= GPIO_MODE_ANALOG) {
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	795b      	ldrb	r3, [r3, #5]
 8001404:	2b03      	cmp	r3, #3
 8001406:	d820      	bhi.n	800144a <GPIO_Init+0x5e>
	    // The non interrupt mode
	    temp = (hGPIO->Init.Mode << (2 * hGPIO->Init.Pin));
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	795b      	ldrb	r3, [r3, #5]
 800140c:	461a      	mov	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	791b      	ldrb	r3, [r3, #4]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	613b      	str	r3, [r7, #16]
	    hGPIO->pGPIOx->MODER &= ~(0x3 << (2 * hGPIO->Init.Pin)); // clearing
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	791b      	ldrb	r3, [r3, #4]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	2103      	movs	r1, #3
 8001428:	fa01 f303 	lsl.w	r3, r1, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	4619      	mov	r1, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	400a      	ands	r2, r1
 8001436:	601a      	str	r2, [r3, #0]
	    hGPIO->pGPIOx->MODER |= temp;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6819      	ldr	r1, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	430a      	orrs	r2, r1
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	e0e4      	b.n	8001614 <GPIO_Init+0x228>
    }else {
	    // Interrupt mode
	    if (hGPIO->Init.Mode == GPIO_MODE_IT_FALLING) {
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	795b      	ldrb	r3, [r3, #5]
 800144e:	2b04      	cmp	r3, #4
 8001450:	d117      	bne.n	8001482 <GPIO_Init+0x96>
		    // Configure the FTSR
		    EXTI->FTSR |= (1 << hGPIO->Init.Pin);
 8001452:	4b4b      	ldr	r3, [pc, #300]	@ (8001580 <GPIO_Init+0x194>)
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	7912      	ldrb	r2, [r2, #4]
 800145a:	4611      	mov	r1, r2
 800145c:	2201      	movs	r2, #1
 800145e:	408a      	lsls	r2, r1
 8001460:	4611      	mov	r1, r2
 8001462:	4a47      	ldr	r2, [pc, #284]	@ (8001580 <GPIO_Init+0x194>)
 8001464:	430b      	orrs	r3, r1
 8001466:	60d3      	str	r3, [r2, #12]
		    // Clear the corresponding the RTSR
		    EXTI->RTSR &= ~(1 << hGPIO->Init.Pin);
 8001468:	4b45      	ldr	r3, [pc, #276]	@ (8001580 <GPIO_Init+0x194>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	7912      	ldrb	r2, [r2, #4]
 8001470:	4611      	mov	r1, r2
 8001472:	2201      	movs	r2, #1
 8001474:	408a      	lsls	r2, r1
 8001476:	43d2      	mvns	r2, r2
 8001478:	4611      	mov	r1, r2
 800147a:	4a41      	ldr	r2, [pc, #260]	@ (8001580 <GPIO_Init+0x194>)
 800147c:	400b      	ands	r3, r1
 800147e:	6093      	str	r3, [r2, #8]
 8001480:	e035      	b.n	80014ee <GPIO_Init+0x102>
	    }else if (hGPIO->Init.Mode == GPIO_MODE_IT_RISING) {
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	795b      	ldrb	r3, [r3, #5]
 8001486:	2b05      	cmp	r3, #5
 8001488:	d117      	bne.n	80014ba <GPIO_Init+0xce>
		    EXTI->RTSR |= (1 << hGPIO->Init.Pin);
 800148a:	4b3d      	ldr	r3, [pc, #244]	@ (8001580 <GPIO_Init+0x194>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	7912      	ldrb	r2, [r2, #4]
 8001492:	4611      	mov	r1, r2
 8001494:	2201      	movs	r2, #1
 8001496:	408a      	lsls	r2, r1
 8001498:	4611      	mov	r1, r2
 800149a:	4a39      	ldr	r2, [pc, #228]	@ (8001580 <GPIO_Init+0x194>)
 800149c:	430b      	orrs	r3, r1
 800149e:	6093      	str	r3, [r2, #8]
		    EXTI->FTSR &= ~(1 << hGPIO->Init.Pin);
 80014a0:	4b37      	ldr	r3, [pc, #220]	@ (8001580 <GPIO_Init+0x194>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	7912      	ldrb	r2, [r2, #4]
 80014a8:	4611      	mov	r1, r2
 80014aa:	2201      	movs	r2, #1
 80014ac:	408a      	lsls	r2, r1
 80014ae:	43d2      	mvns	r2, r2
 80014b0:	4611      	mov	r1, r2
 80014b2:	4a33      	ldr	r2, [pc, #204]	@ (8001580 <GPIO_Init+0x194>)
 80014b4:	400b      	ands	r3, r1
 80014b6:	60d3      	str	r3, [r2, #12]
 80014b8:	e019      	b.n	80014ee <GPIO_Init+0x102>
	    }else if (hGPIO->Init.Mode == GPIO_MODE_IT_RISING_FALLING) {
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	795b      	ldrb	r3, [r3, #5]
 80014be:	2b06      	cmp	r3, #6
 80014c0:	d115      	bne.n	80014ee <GPIO_Init+0x102>
		    EXTI->RTSR |= (1 << hGPIO->Init.Pin);
 80014c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001580 <GPIO_Init+0x194>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	7912      	ldrb	r2, [r2, #4]
 80014ca:	4611      	mov	r1, r2
 80014cc:	2201      	movs	r2, #1
 80014ce:	408a      	lsls	r2, r1
 80014d0:	4611      	mov	r1, r2
 80014d2:	4a2b      	ldr	r2, [pc, #172]	@ (8001580 <GPIO_Init+0x194>)
 80014d4:	430b      	orrs	r3, r1
 80014d6:	6093      	str	r3, [r2, #8]
		    EXTI->FTSR |= (1 << hGPIO->Init.Pin);
 80014d8:	4b29      	ldr	r3, [pc, #164]	@ (8001580 <GPIO_Init+0x194>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	7912      	ldrb	r2, [r2, #4]
 80014e0:	4611      	mov	r1, r2
 80014e2:	2201      	movs	r2, #1
 80014e4:	408a      	lsls	r2, r1
 80014e6:	4611      	mov	r1, r2
 80014e8:	4a25      	ldr	r2, [pc, #148]	@ (8001580 <GPIO_Init+0x194>)
 80014ea:	430b      	orrs	r3, r1
 80014ec:	60d3      	str	r3, [r2, #12]
	    }
	    // Configure the GPIO port selection in SYSCFG_EXTICR
	    uint8_t tmp1 = hGPIO->Init.Pin / 4;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	791b      	ldrb	r3, [r3, #4]
 80014f2:	089b      	lsrs	r3, r3, #2
 80014f4:	75fb      	strb	r3, [r7, #23]
	    uint8_t tmp2 = hGPIO->Init.Pin % 4;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	791b      	ldrb	r3, [r3, #4]
 80014fa:	f003 0303 	and.w	r3, r3, #3
 80014fe:	75bb      	strb	r3, [r7, #22]
	    uint8_t portCode = GPIO_BASEADDR_TO_CODE(hGPIO->pGPIOx);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a1f      	ldr	r2, [pc, #124]	@ (8001584 <GPIO_Init+0x198>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d04e      	beq.n	80015a8 <GPIO_Init+0x1bc>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a1e      	ldr	r2, [pc, #120]	@ (8001588 <GPIO_Init+0x19c>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d032      	beq.n	800157a <GPIO_Init+0x18e>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a1c      	ldr	r2, [pc, #112]	@ (800158c <GPIO_Init+0x1a0>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d02b      	beq.n	8001576 <GPIO_Init+0x18a>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a1b      	ldr	r2, [pc, #108]	@ (8001590 <GPIO_Init+0x1a4>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d024      	beq.n	8001572 <GPIO_Init+0x186>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a19      	ldr	r2, [pc, #100]	@ (8001594 <GPIO_Init+0x1a8>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d01d      	beq.n	800156e <GPIO_Init+0x182>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a18      	ldr	r2, [pc, #96]	@ (8001598 <GPIO_Init+0x1ac>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d016      	beq.n	800156a <GPIO_Init+0x17e>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a16      	ldr	r2, [pc, #88]	@ (800159c <GPIO_Init+0x1b0>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d00f      	beq.n	8001566 <GPIO_Init+0x17a>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a15      	ldr	r2, [pc, #84]	@ (80015a0 <GPIO_Init+0x1b4>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d008      	beq.n	8001562 <GPIO_Init+0x176>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a13      	ldr	r2, [pc, #76]	@ (80015a4 <GPIO_Init+0x1b8>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d101      	bne.n	800155e <GPIO_Init+0x172>
 800155a:	2308      	movs	r3, #8
 800155c:	e025      	b.n	80015aa <GPIO_Init+0x1be>
 800155e:	2300      	movs	r3, #0
 8001560:	e023      	b.n	80015aa <GPIO_Init+0x1be>
 8001562:	2307      	movs	r3, #7
 8001564:	e021      	b.n	80015aa <GPIO_Init+0x1be>
 8001566:	2306      	movs	r3, #6
 8001568:	e01f      	b.n	80015aa <GPIO_Init+0x1be>
 800156a:	2305      	movs	r3, #5
 800156c:	e01d      	b.n	80015aa <GPIO_Init+0x1be>
 800156e:	2304      	movs	r3, #4
 8001570:	e01b      	b.n	80015aa <GPIO_Init+0x1be>
 8001572:	2303      	movs	r3, #3
 8001574:	e019      	b.n	80015aa <GPIO_Init+0x1be>
 8001576:	2302      	movs	r3, #2
 8001578:	e017      	b.n	80015aa <GPIO_Init+0x1be>
 800157a:	2301      	movs	r3, #1
 800157c:	e015      	b.n	80015aa <GPIO_Init+0x1be>
 800157e:	bf00      	nop
 8001580:	40013c00 	.word	0x40013c00
 8001584:	40020000 	.word	0x40020000
 8001588:	40020400 	.word	0x40020400
 800158c:	40020800 	.word	0x40020800
 8001590:	40020c00 	.word	0x40020c00
 8001594:	40021000 	.word	0x40021000
 8001598:	40021400 	.word	0x40021400
 800159c:	40021800 	.word	0x40021800
 80015a0:	40021c00 	.word	0x40021c00
 80015a4:	40022000 	.word	0x40022000
 80015a8:	2300      	movs	r3, #0
 80015aa:	757b      	strb	r3, [r7, #21]
	    SYSCFG_CLK_ENABLE();
 80015ac:	4b65      	ldr	r3, [pc, #404]	@ (8001744 <GPIO_Init+0x358>)
 80015ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b0:	4a64      	ldr	r2, [pc, #400]	@ (8001744 <GPIO_Init+0x358>)
 80015b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015b6:	6453      	str	r3, [r2, #68]	@ 0x44
	    SYSCFG->EXTICR[tmp1] &= ~(0xF << (tmp2 * 4)); // Clear bits first
 80015b8:	4a63      	ldr	r2, [pc, #396]	@ (8001748 <GPIO_Init+0x35c>)
 80015ba:	7dfb      	ldrb	r3, [r7, #23]
 80015bc:	3302      	adds	r3, #2
 80015be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015c2:	7dbb      	ldrb	r3, [r7, #22]
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	210f      	movs	r1, #15
 80015c8:	fa01 f303 	lsl.w	r3, r1, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	495d      	ldr	r1, [pc, #372]	@ (8001748 <GPIO_Init+0x35c>)
 80015d2:	7dfb      	ldrb	r3, [r7, #23]
 80015d4:	4002      	ands	r2, r0
 80015d6:	3302      	adds	r3, #2
 80015d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    SYSCFG->EXTICR[tmp1] |= portCode << (tmp2 * 4);
 80015dc:	4a5a      	ldr	r2, [pc, #360]	@ (8001748 <GPIO_Init+0x35c>)
 80015de:	7dfb      	ldrb	r3, [r7, #23]
 80015e0:	3302      	adds	r3, #2
 80015e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015e6:	7d79      	ldrb	r1, [r7, #21]
 80015e8:	7dbb      	ldrb	r3, [r7, #22]
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	fa01 f303 	lsl.w	r3, r1, r3
 80015f0:	4618      	mov	r0, r3
 80015f2:	4955      	ldr	r1, [pc, #340]	@ (8001748 <GPIO_Init+0x35c>)
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	4302      	orrs	r2, r0
 80015f8:	3302      	adds	r3, #2
 80015fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	    // Enable the EXTI Interrupt delivery using IMR
	    EXTI->IMR |= 1 << hGPIO->Init.Pin;
 80015fe:	4b53      	ldr	r3, [pc, #332]	@ (800174c <GPIO_Init+0x360>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	7912      	ldrb	r2, [r2, #4]
 8001606:	4611      	mov	r1, r2
 8001608:	2201      	movs	r2, #1
 800160a:	408a      	lsls	r2, r1
 800160c:	4611      	mov	r1, r2
 800160e:	4a4f      	ldr	r2, [pc, #316]	@ (800174c <GPIO_Init+0x360>)
 8001610:	430b      	orrs	r3, r1
 8001612:	6013      	str	r3, [r2, #0]
    }

    // 2. Configure speed
    temp = ((hGPIO->Init.Speed) << (2 * hGPIO->Init.Pin));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	79db      	ldrb	r3, [r3, #7]
 8001618:	461a      	mov	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	791b      	ldrb	r3, [r3, #4]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	613b      	str	r3, [r7, #16]
    hGPIO->pGPIOx->OSPEEDR &= ~(0x3 << (2 * hGPIO->Init.Pin)); // clearing
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	791b      	ldrb	r3, [r3, #4]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	2103      	movs	r1, #3
 8001634:	fa01 f303 	lsl.w	r3, r1, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	4619      	mov	r1, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	400a      	ands	r2, r1
 8001642:	609a      	str	r2, [r3, #8]
    hGPIO->pGPIOx->OSPEEDR |= temp;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6899      	ldr	r1, [r3, #8]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	430a      	orrs	r2, r1
 8001652:	609a      	str	r2, [r3, #8]

    // 3. Configure pull settings
    temp = (hGPIO->Init.Pull) << (2 * hGPIO->Init.Pin);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	799b      	ldrb	r3, [r3, #6]
 8001658:	461a      	mov	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	791b      	ldrb	r3, [r3, #4]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	613b      	str	r3, [r7, #16]
    hGPIO->pGPIOx->PUPDR &= ~(0x3 << (2 * hGPIO->Init.Pin)); // clearing
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68da      	ldr	r2, [r3, #12]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	791b      	ldrb	r3, [r3, #4]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	2103      	movs	r1, #3
 8001674:	fa01 f303 	lsl.w	r3, r1, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	4619      	mov	r1, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	400a      	ands	r2, r1
 8001682:	60da      	str	r2, [r3, #12]
    hGPIO->pGPIOx->PUPDR |= temp;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68d9      	ldr	r1, [r3, #12]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	430a      	orrs	r2, r1
 8001692:	60da      	str	r2, [r3, #12]

    // 4. Configure OPType
    temp = (hGPIO->Init.OPType) << hGPIO->Init.Pin;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	7a1b      	ldrb	r3, [r3, #8]
 8001698:	461a      	mov	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	791b      	ldrb	r3, [r3, #4]
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	613b      	str	r3, [r7, #16]
    hGPIO->pGPIOx->OTYPER &= ~(0x1 << hGPIO->Init.Pin); // clearing
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	791b      	ldrb	r3, [r3, #4]
 80016ae:	4619      	mov	r1, r3
 80016b0:	2301      	movs	r3, #1
 80016b2:	408b      	lsls	r3, r1
 80016b4:	43db      	mvns	r3, r3
 80016b6:	4619      	mov	r1, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	400a      	ands	r2, r1
 80016be:	605a      	str	r2, [r3, #4]
    hGPIO->pGPIOx->OTYPER |= temp;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6859      	ldr	r1, [r3, #4]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	605a      	str	r2, [r3, #4]

    // 5. Configure the alternate function
    if (hGPIO->Init.Mode == GPIO_MODE_AF) {
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	795b      	ldrb	r3, [r3, #5]
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d131      	bne.n	800173c <GPIO_Init+0x350>
	    uint8_t temp1, temp2;

	    temp1 = hGPIO->Init.Pin / 8; // AFR[0] or AFR[1]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	791b      	ldrb	r3, [r3, #4]
 80016dc:	08db      	lsrs	r3, r3, #3
 80016de:	73fb      	strb	r3, [r7, #15]
	    temp2 = hGPIO->Init.Pin % 8; // Position in AFR register
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	791b      	ldrb	r3, [r3, #4]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	73bb      	strb	r3, [r7, #14]
	    hGPIO->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); // clearing
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	7bfa      	ldrb	r2, [r7, #15]
 80016f0:	3208      	adds	r2, #8
 80016f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80016f6:	7bbb      	ldrb	r3, [r7, #14]
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	220f      	movs	r2, #15
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	4618      	mov	r0, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	7bfa      	ldrb	r2, [r7, #15]
 800170a:	4001      	ands	r1, r0
 800170c:	3208      	adds	r2, #8
 800170e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    hGPIO->pGPIOx->AFR[temp1] |= (hGPIO->Init.Alternate << (4 * temp2));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	7bfa      	ldrb	r2, [r7, #15]
 8001718:	3208      	adds	r2, #8
 800171a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	7a5b      	ldrb	r3, [r3, #9]
 8001722:	461a      	mov	r2, r3
 8001724:	7bbb      	ldrb	r3, [r7, #14]
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	4618      	mov	r0, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	7bfa      	ldrb	r2, [r7, #15]
 8001734:	4301      	orrs	r1, r0
 8001736:	3208      	adds	r2, #8
 8001738:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
}
 800173c:	bf00      	nop
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40023800 	.word	0x40023800
 8001748:	40013800 	.word	0x40013800
 800174c:	40013c00 	.word	0x40013c00

08001750 <GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_pin Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_TogglePin(GPIO_RegDef_t* pGPIOx, uint8_t GPIO_pin)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << GPIO_pin);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	78fa      	ldrb	r2, [r7, #3]
 8001762:	2101      	movs	r1, #1
 8001764:	fa01 f202 	lsl.w	r2, r1, r2
 8001768:	405a      	eors	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	615a      	str	r2, [r3, #20]
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <RCC_GetPCLK1_Value>:
 * @retval uint32_t PCLK1 frequency in Hz, or 0 if an error occurs.
 * @note   Assumes HSI = 16 MHz, HSE = 8 MHz, or PLL output as system clock source.
 *         Uses RCC_CFGR to determine clock source, AHB, and APB1 prescalers.
 */
uint32_t RCC_GetPCLK1_Value(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
    uint32_t PCLK1_value, systemClock;
    uint8_t clockSrc, temp, AHBP_value, APB1P_value;

    // Extract the clock source bits (bits 2:3 of RCC->CFGR)
    clockSrc = ((RCC->CFGR >> 2) & 0x3);
 8001782:	4b24      	ldr	r3, [pc, #144]	@ (8001814 <RCC_GetPCLK1_Value+0x98>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	089b      	lsrs	r3, r3, #2
 8001788:	b2db      	uxtb	r3, r3
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	727b      	strb	r3, [r7, #9]
    if (clockSrc == 0) {
 8001790:	7a7b      	ldrb	r3, [r7, #9]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d102      	bne.n	800179c <RCC_GetPCLK1_Value+0x20>
        // Clock source is HSI (internal oscillator)
        systemClock = HSI_FREQ_DEFAULT;  // e.g., 16 MHz
 8001796:	4b20      	ldr	r3, [pc, #128]	@ (8001818 <RCC_GetPCLK1_Value+0x9c>)
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	e008      	b.n	80017ae <RCC_GetPCLK1_Value+0x32>
    } else if (clockSrc == 1) {
 800179c:	7a7b      	ldrb	r3, [r7, #9]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d102      	bne.n	80017a8 <RCC_GetPCLK1_Value+0x2c>
        // Clock source is HSE (external oscillator)
        systemClock = HSE_FREQ_DEFAULT;  // e.g., 8 MHz
 80017a2:	4b1e      	ldr	r3, [pc, #120]	@ (800181c <RCC_GetPCLK1_Value+0xa0>)
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	e002      	b.n	80017ae <RCC_GetPCLK1_Value+0x32>
    } else {
        // Clock source is PLL, so get the PLL output frequency
        systemClock = RCC_GetPLLOutputClock();
 80017a8:	f000 f894 	bl	80018d4 <RCC_GetPLLOutputClock>
 80017ac:	60f8      	str	r0, [r7, #12]
    }

    // Get the AHB prescaler value from RCC->CFGR (bits 4:7)
    temp = ((RCC->CFGR >> 4) & 0xF);
 80017ae:	4b19      	ldr	r3, [pc, #100]	@ (8001814 <RCC_GetPCLK1_Value+0x98>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	091b      	lsrs	r3, r3, #4
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	723b      	strb	r3, [r7, #8]
    if (temp < 8) {
 80017bc:	7a3b      	ldrb	r3, [r7, #8]
 80017be:	2b07      	cmp	r3, #7
 80017c0:	d802      	bhi.n	80017c8 <RCC_GetPCLK1_Value+0x4c>
        // No division; AHB clock is equal to system clock
        AHBP_value = 1;
 80017c2:	2301      	movs	r3, #1
 80017c4:	72fb      	strb	r3, [r7, #11]
 80017c6:	e005      	b.n	80017d4 <RCC_GetPCLK1_Value+0x58>
    } else {
        // Division factor is determined from the AHP_Prescaler array.
        AHBP_value = AHP_Prescaler[temp - 8];
 80017c8:	7a3b      	ldrb	r3, [r7, #8]
 80017ca:	3b08      	subs	r3, #8
 80017cc:	4a14      	ldr	r2, [pc, #80]	@ (8001820 <RCC_GetPCLK1_Value+0xa4>)
 80017ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017d2:	72fb      	strb	r3, [r7, #11]
    }

    // Get the APB1 prescaler value from RCC->CFGR (bits 10:12)
    temp = ((RCC->CFGR >> 10) & 0x7);
 80017d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001814 <RCC_GetPCLK1_Value+0x98>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	0a9b      	lsrs	r3, r3, #10
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	f003 0307 	and.w	r3, r3, #7
 80017e0:	723b      	strb	r3, [r7, #8]
    if (temp < 4) {
 80017e2:	7a3b      	ldrb	r3, [r7, #8]
 80017e4:	2b03      	cmp	r3, #3
 80017e6:	d802      	bhi.n	80017ee <RCC_GetPCLK1_Value+0x72>
        // No division; APB1 clock is equal to AHB clock
        APB1P_value = 1;
 80017e8:	2301      	movs	r3, #1
 80017ea:	72bb      	strb	r3, [r7, #10]
 80017ec:	e004      	b.n	80017f8 <RCC_GetPCLK1_Value+0x7c>
    } else {
        // Division factor is determined from the APB_Prescaler array.
        APB1P_value = APB_Prescaler[temp - 4];
 80017ee:	7a3b      	ldrb	r3, [r7, #8]
 80017f0:	3b04      	subs	r3, #4
 80017f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001824 <RCC_GetPCLK1_Value+0xa8>)
 80017f4:	5cd3      	ldrb	r3, [r2, r3]
 80017f6:	72bb      	strb	r3, [r7, #10]
    }

    // Compute PCLK1: First, divide the system clock by the AHB prescaler,
    // then divide that result by the APB1 prescaler.
    PCLK1_value = (systemClock / AHBP_value) / APB1P_value;
 80017f8:	7afb      	ldrb	r3, [r7, #11]
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001800:	7abb      	ldrb	r3, [r7, #10]
 8001802:	fbb2 f3f3 	udiv	r3, r2, r3
 8001806:	607b      	str	r3, [r7, #4]

    return PCLK1_value;
 8001808:	687b      	ldr	r3, [r7, #4]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	00f42400 	.word	0x00f42400
 800181c:	007a1200 	.word	0x007a1200
 8001820:	20000004 	.word	0x20000004
 8001824:	20000014 	.word	0x20000014

08001828 <RCC_GetPCLK2_Value>:
 * @retval uint32_t PCLK2 frequency in Hz, or 0 if an error occurs.
 * @note   Assumes HSI = 16 MHz, HSE = 8 MHz, or PLL output as system clock source.
 *         Uses RCC_CFGR to determine clock source, AHB, and APB2 prescalers.
 */
uint32_t RCC_GetPCLK2_Value(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
    uint32_t PCLK2_value, systemClock;
    uint8_t clockSrc, temp, AHBP_value, APB2P_value;

    // Determine system clock source (bits 2:3 of RCC->CFGR)
    clockSrc = ((RCC->CFGR >> 2) & 0x3);
 800182e:	4b24      	ldr	r3, [pc, #144]	@ (80018c0 <RCC_GetPCLK2_Value+0x98>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	089b      	lsrs	r3, r3, #2
 8001834:	b2db      	uxtb	r3, r3
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	727b      	strb	r3, [r7, #9]
    if (clockSrc == 0) {
 800183c:	7a7b      	ldrb	r3, [r7, #9]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d102      	bne.n	8001848 <RCC_GetPCLK2_Value+0x20>
        systemClock = HSI_FREQ_DEFAULT;  // e.g., 16 MHz
 8001842:	4b20      	ldr	r3, [pc, #128]	@ (80018c4 <RCC_GetPCLK2_Value+0x9c>)
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	e008      	b.n	800185a <RCC_GetPCLK2_Value+0x32>
    } else if (clockSrc == 1) {
 8001848:	7a7b      	ldrb	r3, [r7, #9]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d102      	bne.n	8001854 <RCC_GetPCLK2_Value+0x2c>
        systemClock = HSE_FREQ_DEFAULT;  // e.g., 8 MHz
 800184e:	4b1e      	ldr	r3, [pc, #120]	@ (80018c8 <RCC_GetPCLK2_Value+0xa0>)
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	e002      	b.n	800185a <RCC_GetPCLK2_Value+0x32>
    } else {
        systemClock = RCC_GetPLLOutputClock();
 8001854:	f000 f83e 	bl	80018d4 <RCC_GetPLLOutputClock>
 8001858:	60f8      	str	r0, [r7, #12]
    }

    // Determine AHB prescaler (bits 4:7 of RCC->CFGR)
    temp = ((RCC->CFGR >> 4) & 0xF);
 800185a:	4b19      	ldr	r3, [pc, #100]	@ (80018c0 <RCC_GetPCLK2_Value+0x98>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	091b      	lsrs	r3, r3, #4
 8001860:	b2db      	uxtb	r3, r3
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	723b      	strb	r3, [r7, #8]
    if (temp < 8) {
 8001868:	7a3b      	ldrb	r3, [r7, #8]
 800186a:	2b07      	cmp	r3, #7
 800186c:	d802      	bhi.n	8001874 <RCC_GetPCLK2_Value+0x4c>
        AHBP_value = 1;
 800186e:	2301      	movs	r3, #1
 8001870:	72fb      	strb	r3, [r7, #11]
 8001872:	e005      	b.n	8001880 <RCC_GetPCLK2_Value+0x58>
    } else {
        AHBP_value = AHP_Prescaler[temp - 8];
 8001874:	7a3b      	ldrb	r3, [r7, #8]
 8001876:	3b08      	subs	r3, #8
 8001878:	4a14      	ldr	r2, [pc, #80]	@ (80018cc <RCC_GetPCLK2_Value+0xa4>)
 800187a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800187e:	72fb      	strb	r3, [r7, #11]
    }

    // Determine APB2 prescaler (bits 13:15 of RCC->CFGR)
    temp = ((RCC->CFGR >> 13) & 0x7);
 8001880:	4b0f      	ldr	r3, [pc, #60]	@ (80018c0 <RCC_GetPCLK2_Value+0x98>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	0b5b      	lsrs	r3, r3, #13
 8001886:	b2db      	uxtb	r3, r3
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	723b      	strb	r3, [r7, #8]
    if (temp < 4) {
 800188e:	7a3b      	ldrb	r3, [r7, #8]
 8001890:	2b03      	cmp	r3, #3
 8001892:	d802      	bhi.n	800189a <RCC_GetPCLK2_Value+0x72>
        APB2P_value = 1;
 8001894:	2301      	movs	r3, #1
 8001896:	72bb      	strb	r3, [r7, #10]
 8001898:	e004      	b.n	80018a4 <RCC_GetPCLK2_Value+0x7c>
    } else {
        APB2P_value = APB_Prescaler[temp - 4];
 800189a:	7a3b      	ldrb	r3, [r7, #8]
 800189c:	3b04      	subs	r3, #4
 800189e:	4a0c      	ldr	r2, [pc, #48]	@ (80018d0 <RCC_GetPCLK2_Value+0xa8>)
 80018a0:	5cd3      	ldrb	r3, [r2, r3]
 80018a2:	72bb      	strb	r3, [r7, #10]
    }

    // Calculate PCLK2 by dividing the system clock by the AHB prescaler, then by the APB2 prescaler.
    PCLK2_value = (systemClock / AHBP_value) / APB2P_value;
 80018a4:	7afb      	ldrb	r3, [r7, #11]
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80018ac:	7abb      	ldrb	r3, [r7, #10]
 80018ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b2:	607b      	str	r3, [r7, #4]

    return PCLK2_value;
 80018b4:	687b      	ldr	r3, [r7, #4]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40023800 	.word	0x40023800
 80018c4:	00f42400 	.word	0x00f42400
 80018c8:	007a1200 	.word	0x007a1200
 80018cc:	20000004 	.word	0x20000004
 80018d0:	20000014 	.word	0x20000014

080018d4 <RCC_GetPLLOutputClock>:


uint32_t  RCC_GetPLLOutputClock()
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
	return 0;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <SPI_PeriClockControl>:
 * @brief  Enables or disables the clock for the specified SPI peripheral.
 * @param  pSPIx Pointer to SPI_RegDef_t structure representing SPI1, SPI2, or SPI3.
 * @param  clockState ENABLE (1) to enable the clock, DISABLE (0) to disable it.
 * @retval None
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t clockState) {
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	70fb      	strb	r3, [r7, #3]

	if (clockState == ENABLE) {
 80018f0:	78fb      	ldrb	r3, [r7, #3]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d120      	bne.n	8001938 <SPI_PeriClockControl+0x54>
		if (pSPIx == SPI1) {
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a22      	ldr	r2, [pc, #136]	@ (8001984 <SPI_PeriClockControl+0xa0>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d106      	bne.n	800190c <SPI_PeriClockControl+0x28>
			SPI1_CLK_ENABLE();
 80018fe:	4b22      	ldr	r3, [pc, #136]	@ (8001988 <SPI_PeriClockControl+0xa4>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001902:	4a21      	ldr	r2, [pc, #132]	@ (8001988 <SPI_PeriClockControl+0xa4>)
 8001904:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001908:	6453      	str	r3, [r2, #68]	@ 0x44
			SPI2_CLK_DISABLE();
		} else if (pSPIx == SPI3) {
			SPI3_CLK_DISABLE();
		}
	}
}
 800190a:	e035      	b.n	8001978 <SPI_PeriClockControl+0x94>
		} else if (pSPIx == SPI2) {
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a1f      	ldr	r2, [pc, #124]	@ (800198c <SPI_PeriClockControl+0xa8>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d106      	bne.n	8001922 <SPI_PeriClockControl+0x3e>
			SPI2_CLK_ENABLE();
 8001914:	4b1c      	ldr	r3, [pc, #112]	@ (8001988 <SPI_PeriClockControl+0xa4>)
 8001916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001918:	4a1b      	ldr	r2, [pc, #108]	@ (8001988 <SPI_PeriClockControl+0xa4>)
 800191a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800191e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001920:	e02a      	b.n	8001978 <SPI_PeriClockControl+0x94>
		} else if (pSPIx == SPI3) {
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a1a      	ldr	r2, [pc, #104]	@ (8001990 <SPI_PeriClockControl+0xac>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d126      	bne.n	8001978 <SPI_PeriClockControl+0x94>
			SPI3_CLK_ENABLE();
 800192a:	4b17      	ldr	r3, [pc, #92]	@ (8001988 <SPI_PeriClockControl+0xa4>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	4a16      	ldr	r2, [pc, #88]	@ (8001988 <SPI_PeriClockControl+0xa4>)
 8001930:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001934:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001936:	e01f      	b.n	8001978 <SPI_PeriClockControl+0x94>
		if (pSPIx == SPI1) {
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a12      	ldr	r2, [pc, #72]	@ (8001984 <SPI_PeriClockControl+0xa0>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d106      	bne.n	800194e <SPI_PeriClockControl+0x6a>
			SPI1_CLK_DISABLE();
 8001940:	4b11      	ldr	r3, [pc, #68]	@ (8001988 <SPI_PeriClockControl+0xa4>)
 8001942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001944:	4a10      	ldr	r2, [pc, #64]	@ (8001988 <SPI_PeriClockControl+0xa4>)
 8001946:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800194a:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800194c:	e014      	b.n	8001978 <SPI_PeriClockControl+0x94>
		} else if (pSPIx == SPI2) {
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a0e      	ldr	r2, [pc, #56]	@ (800198c <SPI_PeriClockControl+0xa8>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d106      	bne.n	8001964 <SPI_PeriClockControl+0x80>
			SPI2_CLK_DISABLE();
 8001956:	4b0c      	ldr	r3, [pc, #48]	@ (8001988 <SPI_PeriClockControl+0xa4>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195a:	4a0b      	ldr	r2, [pc, #44]	@ (8001988 <SPI_PeriClockControl+0xa4>)
 800195c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001960:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001962:	e009      	b.n	8001978 <SPI_PeriClockControl+0x94>
		} else if (pSPIx == SPI3) {
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a0a      	ldr	r2, [pc, #40]	@ (8001990 <SPI_PeriClockControl+0xac>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d105      	bne.n	8001978 <SPI_PeriClockControl+0x94>
			SPI3_CLK_DISABLE();
 800196c:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <SPI_PeriClockControl+0xa4>)
 800196e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001970:	4a05      	ldr	r2, [pc, #20]	@ (8001988 <SPI_PeriClockControl+0xa4>)
 8001972:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001976:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	40013000 	.word	0x40013000
 8001988:	40023800 	.word	0x40023800
 800198c:	40003800 	.word	0x40003800
 8001990:	40003c00 	.word	0x40003c00

08001994 <SPI_ConfigureBaudRate>:
 * @arg SPI_BAUDRATEPRESCALER_32    : Baud rate = fPCLK / 32
 * @arg SPI_BAUDRATEPRESCALER_64    : Baud rate = fPCLK / 64
 * @arg SPI_BAUDRATEPRESCALER_128   : Baud rate = fPCLK / 128
 * @arg SPI_BAUDRATEPRESCALER_256   : Baud rate = fPCLK / 256
 */
void SPI_ConfigureBaudRate(SPI_RegDef_t *SPIx, uint8_t BaudRate) {
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	70fb      	strb	r3, [r7, #3]
	SPIx->CR1 &= ~(0b111 << 3); //Reset value of BR bits
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	601a      	str	r2, [r3, #0]
	SPIx->CR1 |= (BaudRate) << 3; //Set baudrate
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	78fb      	ldrb	r3, [r7, #3]
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	431a      	orrs	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	601a      	str	r2, [r3, #0]
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <SPI_SelectMasterSlaveMode>:
 * @brief Sets SPI to Master or Slave mode.
 *
 * @param SPIx     Pointer to the SPI peripheral.
 * @param SPI_Mode Set to 1 for Master, 0 for Slave.
 */
void SPI_SelectMasterSlaveMode(SPI_RegDef_t *SPIx, _Bool SPI_Mode) {
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	460b      	mov	r3, r1
 80019d0:	70fb      	strb	r3, [r7, #3]
	SPIx->CR1 &= ~(0b1 << 2); //Reset the MSTR bit
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f023 0204 	bic.w	r2, r3, #4
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	601a      	str	r2, [r3, #0]
	SPIx->CR1 |= SPI_Mode << 2;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	78fb      	ldrb	r3, [r7, #3]
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	601a      	str	r2, [r3, #0]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <SPI_ConfigureClock>:
 * @param SPIx           Pointer to the SPI peripheral.
 * @param ClockPolarity  Set to 1 for idle high, 0 for idle low.
 * @param ClockPhase     Set to 1 for second edge, 0 for first edge.
 */
void SPI_ConfigureClock(SPI_RegDef_t *SPIx, _Bool ClockPolarity,
		_Bool ClockPhase) {
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	70fb      	strb	r3, [r7, #3]
 8001a04:	4613      	mov	r3, r2
 8001a06:	70bb      	strb	r3, [r7, #2]
	SPIx->CR1 &= ~(0b11 << 0);  //Reset CPHA and CPOL bits
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f023 0203 	bic.w	r2, r3, #3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	601a      	str	r2, [r3, #0]
	SPIx->CR1 |= ClockPolarity << 1;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	78fb      	ldrb	r3, [r7, #3]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	601a      	str	r2, [r3, #0]
	SPIx->CR1 |= ClockPhase << 0;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	78bb      	ldrb	r3, [r7, #2]
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	601a      	str	r2, [r3, #0]
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <SPI_ConfigureFrameLength>:
 * @brief Configures the SPI frame length.
 *
 * @param SPIx              Pointer to the SPI peripheral.
 * @param DataFrame_Length  Set to 1 for 16-bit, 0 for 8-bit frame.
 */
void SPI_ConfigureFrameLength(SPI_RegDef_t *SPIx, _Bool DataFrame_Length) {
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	460b      	mov	r3, r1
 8001a44:	70fb      	strb	r3, [r7, #3]
	SPIx->CR1 &= ~(0b1 << 11); //Reset the DFF bit
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	601a      	str	r2, [r3, #0]
	SPIx->CR1 |= DataFrame_Length << 11;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	78fb      	ldrb	r3, [r7, #3]
 8001a58:	02db      	lsls	r3, r3, #11
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	601a      	str	r2, [r3, #0]
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <SPI_ConfigureFrameFormat>:
 * @brief Configures the frame format (MSB/LSB first).
 *
 * @param SPIx         Pointer to the SPI peripheral.
 * @param FrameFormat  Set to 1 for LSB first, 0 for MSB first.
 */
void SPI_ConfigureFrameFormat(SPI_RegDef_t *SPIx, _Bool FrameFormat) {
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	70fb      	strb	r3, [r7, #3]
	SPIx->CR1 &= ~(0b1 << 7);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	601a      	str	r2, [r3, #0]
	SPIx->CR1 |= (FrameFormat << 7);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	78fb      	ldrb	r3, [r7, #3]
 8001a8a:	01db      	lsls	r3, r3, #7
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	601a      	str	r2, [r3, #0]
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <SPI_ConfigureNSS>:
 * @param SPIx              Pointer to the SPI peripheral.
 * @param SPI_Mode          Set to 1 for Master, 0 for Slave.
 * @param IsSoftwareEnabled Set to 1 to use software NSS management.
 */
void SPI_ConfigureNSS(SPI_RegDef_t *SPIx, _Bool SPI_Mode,
		_Bool IsSoftwareEnabled) {
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	70fb      	strb	r3, [r7, #3]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	70bb      	strb	r3, [r7, #2]
	SPIx->CR1 &= ~(0b1 << 9); 	//Reset SSM bit
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	601a      	str	r2, [r3, #0]
	SPIx->CR1 &= ~(0b1 << 8); 	//Reset SSI bit
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	601a      	str	r2, [r3, #0]
	SPIx->CR2 &= ~(0b1 << 2);	//Rest SSOE bit
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f023 0204 	bic.w	r2, r3, #4
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	605a      	str	r2, [r3, #4]

	if ((SPI_Mode == SPI_MODE_SLAVE) && (IsSoftwareEnabled == TRUE)) {
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
 8001ad4:	f083 0301 	eor.w	r3, r3, #1
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00f      	beq.n	8001afe <SPI_ConfigureNSS+0x60>
 8001ade:	78bb      	ldrb	r3, [r7, #2]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d00c      	beq.n	8001afe <SPI_ConfigureNSS+0x60>
		// Enable software NSS management in SLAVE mode
		SPIx->CR1 |= (0b1 << 9);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	601a      	str	r2, [r3, #0]
		SPIx->CR1 |= (0b1 << 8);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	e018      	b.n	8001b30 <SPI_ConfigureNSS+0x92>
	} else if ((SPI_Mode == SPI_MODE_MASTER) && (IsSoftwareEnabled == TRUE)) {
 8001afe:	78fb      	ldrb	r3, [r7, #3]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d007      	beq.n	8001b14 <SPI_ConfigureNSS+0x76>
 8001b04:	78bb      	ldrb	r3, [r7, #2]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d004      	beq.n	8001b14 <SPI_ConfigureNSS+0x76>
		// Enable SSOE only when software NSS is disabled
		 // SPIx->CR2 |= (0b1 << 2);
	    SPI_SSIConfig(SPIx, ENABLE);
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 f8d6 	bl	8001cbe <SPI_SSIConfig>
 8001b12:	e00d      	b.n	8001b30 <SPI_ConfigureNSS+0x92>

	} else if ((SPI_Mode == SPI_MODE_MASTER) && (IsSoftwareEnabled == FALSE))
 8001b14:	78fb      	ldrb	r3, [r7, #3]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00a      	beq.n	8001b30 <SPI_ConfigureNSS+0x92>
 8001b1a:	78bb      	ldrb	r3, [r7, #2]
 8001b1c:	f083 0301 	eor.w	r3, r3, #1
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d004      	beq.n	8001b30 <SPI_ConfigureNSS+0x92>
	{
	    SPI_SSOEConfig(SPIx, ENABLE);
 8001b26:	2101      	movs	r1, #1
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 f8e4 	bl	8001cf6 <SPI_SSOEConfig>
	}
}
 8001b2e:	e7ff      	b.n	8001b30 <SPI_ConfigureNSS+0x92>
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <SPI_Enable>:
 * @brief Enables or disables the SPI peripheral.
 *
 * @param SPIx       Pointer to the SPI peripheral.
 * @param IsEnabled  Set to 1 to enable, 0 to disable SPI.
 */
void SPI_Enable(SPI_RegDef_t *SPIx, _Bool IsEnabled) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	70fb      	strb	r3, [r7, #3]
	if (IsEnabled) {
 8001b44:	78fb      	ldrb	r3, [r7, #3]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d006      	beq.n	8001b58 <SPI_Enable+0x20>
		SPIx->CR1 |= (1 << 6);  // Set SPE bit
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	601a      	str	r2, [r3, #0]
		//Wait for BSY flag to reset, or break when the flag is not set within 100ms
		while ((SPIx->SR & (1 << 7))
				&& (getTick() - lastTicks < SPI_BUSY_TIMEOUT))
			;
	}
}
 8001b56:	e016      	b.n	8001b86 <SPI_Enable+0x4e>
		SPIx->CR1 &= ~(1 << 6); // Clear SPE bit
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	601a      	str	r2, [r3, #0]
		uint32_t lastTicks = getTick();
 8001b64:	f7ff f942 	bl	8000dec <getTick>
 8001b68:	60f8      	str	r0, [r7, #12]
		while ((SPIx->SR & (1 << 7))
 8001b6a:	bf00      	nop
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
				&& (getTick() - lastTicks < SPI_BUSY_TIMEOUT))
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d006      	beq.n	8001b86 <SPI_Enable+0x4e>
 8001b78:	f7ff f938 	bl	8000dec <getTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b09      	cmp	r3, #9
 8001b84:	d9f2      	bls.n	8001b6c <SPI_Enable+0x34>
}
 8001b86:	bf00      	nop
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <SPI_ConfigureIOPin>:
/**
 * @brief Initializes SPI GPIO alternate function pins.
 *
 * @param SPIx Pointer to the SPI peripheral.
 */
void SPI_ConfigureIOPin(SPI_RegDef_t *SPIx) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  if (SPIx = SPI1) {
 8001b98:	4b16      	ldr	r3, [pc, #88]	@ (8001bf4 <SPI_ConfigureIOPin+0x64>)
 8001b9a:	607b      	str	r3, [r7, #4]
	GPIO_Initialize(GPIOA, GPIO_PIN_4, GPIO_MODE_AF);
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	2104      	movs	r1, #4
 8001ba0:	4815      	ldr	r0, [pc, #84]	@ (8001bf8 <SPI_ConfigureIOPin+0x68>)
 8001ba2:	f7ff fba5 	bl	80012f0 <GPIO_Initialize>
	GPIO_Initialize(GPIOA, GPIO_PIN_5, GPIO_MODE_AF);
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	2105      	movs	r1, #5
 8001baa:	4813      	ldr	r0, [pc, #76]	@ (8001bf8 <SPI_ConfigureIOPin+0x68>)
 8001bac:	f7ff fba0 	bl	80012f0 <GPIO_Initialize>
	GPIO_Initialize(GPIOA, GPIO_PIN_6, GPIO_MODE_AF);
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	2106      	movs	r1, #6
 8001bb4:	4810      	ldr	r0, [pc, #64]	@ (8001bf8 <SPI_ConfigureIOPin+0x68>)
 8001bb6:	f7ff fb9b 	bl	80012f0 <GPIO_Initialize>
	GPIO_Initialize(GPIOA, GPIO_PIN_7, GPIO_MODE_AF);
 8001bba:	2202      	movs	r2, #2
 8001bbc:	2107      	movs	r1, #7
 8001bbe:	480e      	ldr	r0, [pc, #56]	@ (8001bf8 <SPI_ConfigureIOPin+0x68>)
 8001bc0:	f7ff fb96 	bl	80012f0 <GPIO_Initialize>

	AFIO_SelectAlternateFunction(GPIOA, GPIO_PIN_4,AF5);
 8001bc4:	2205      	movs	r2, #5
 8001bc6:	2104      	movs	r1, #4
 8001bc8:	480b      	ldr	r0, [pc, #44]	@ (8001bf8 <SPI_ConfigureIOPin+0x68>)
 8001bca:	f7ff fbcd 	bl	8001368 <AFIO_SelectAlternateFunction>
	AFIO_SelectAlternateFunction(GPIOA, GPIO_PIN_5,AF5);
 8001bce:	2205      	movs	r2, #5
 8001bd0:	2105      	movs	r1, #5
 8001bd2:	4809      	ldr	r0, [pc, #36]	@ (8001bf8 <SPI_ConfigureIOPin+0x68>)
 8001bd4:	f7ff fbc8 	bl	8001368 <AFIO_SelectAlternateFunction>
	AFIO_SelectAlternateFunction(GPIOA, GPIO_PIN_6,AF5);
 8001bd8:	2205      	movs	r2, #5
 8001bda:	2106      	movs	r1, #6
 8001bdc:	4806      	ldr	r0, [pc, #24]	@ (8001bf8 <SPI_ConfigureIOPin+0x68>)
 8001bde:	f7ff fbc3 	bl	8001368 <AFIO_SelectAlternateFunction>
	AFIO_SelectAlternateFunction(GPIOA, GPIO_PIN_7,AF5);
 8001be2:	2205      	movs	r2, #5
 8001be4:	2107      	movs	r1, #7
 8001be6:	4804      	ldr	r0, [pc, #16]	@ (8001bf8 <SPI_ConfigureIOPin+0x68>)
 8001be8:	f7ff fbbe 	bl	8001368 <AFIO_SelectAlternateFunction>
  }
}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40013000 	.word	0x40013000
 8001bf8:	40020000 	.word	0x40020000

08001bfc <SPI_Initialize>:
 * @param NSS_SoftwareEnabled Set to 1 to use software NSS.
 */
void SPI_Initialize(SPI_RegDef_t *SPIx, uint8_t SPI_Mode,
		_Bool SPI_ClockPolarity, _Bool SPI_ClockPhase, _Bool FrameFormat,
		_Bool DataFrame_Length, _Bool NSS_SoftwareEnabled)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	4608      	mov	r0, r1
 8001c06:	4611      	mov	r1, r2
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	70fb      	strb	r3, [r7, #3]
 8001c0e:	460b      	mov	r3, r1
 8001c10:	70bb      	strb	r3, [r7, #2]
 8001c12:	4613      	mov	r3, r2
 8001c14:	707b      	strb	r3, [r7, #1]
  //Enable clock for SPI
  SPI_PeriClockControl(SPIx, ENABLE);
 8001c16:	2101      	movs	r1, #1
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff fe63 	bl	80018e4 <SPI_PeriClockControl>

  //Configure GPIO for SPI
  SPI_ConfigureIOPin(SPIx);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff ffb6 	bl	8001b90 <SPI_ConfigureIOPin>

  //Disable SPI
  SPI_Enable(SPIx, FALSE);
 8001c24:	2100      	movs	r1, #0
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff ff86 	bl	8001b38 <SPI_Enable>

  //Prescaler is 16 as default
  SPI_ConfigureBaudRate(SPIx, SPI_BAUDRATEPRESCALER_16);
 8001c2c:	2103      	movs	r1, #3
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff feb0 	bl	8001994 <SPI_ConfigureBaudRate>

  //Configure clock phase and polarity
  SPI_ConfigureClock(SPIx, SPI_ClockPolarity, SPI_ClockPhase);
 8001c34:	787a      	ldrb	r2, [r7, #1]
 8001c36:	78bb      	ldrb	r3, [r7, #2]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff fedc 	bl	80019f8 <SPI_ConfigureClock>

  //Configure data frame length.
  SPI_ConfigureFrameLength(SPIx, DataFrame_Length);
 8001c40:	7d3b      	ldrb	r3, [r7, #20]
 8001c42:	4619      	mov	r1, r3
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff fef8 	bl	8001a3a <SPI_ConfigureFrameLength>

  //Configure data frame mode
  SPI_ConfigureFrameFormat(SPIx, FrameFormat);
 8001c4a:	7c3b      	ldrb	r3, [r7, #16]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff ff0c 	bl	8001a6c <SPI_ConfigureFrameFormat>

  //Configure NSS Pin
  SPI_ConfigureNSS(SPIx, SPI_Mode, FALSE);
 8001c54:	78fb      	ldrb	r3, [r7, #3]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	bf14      	ite	ne
 8001c5a:	2301      	movne	r3, #1
 8001c5c:	2300      	moveq	r3, #0
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2200      	movs	r2, #0
 8001c62:	4619      	mov	r1, r3
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff ff1a 	bl	8001a9e <SPI_ConfigureNSS>

  //Configure master slave mode
  SPI_SelectMasterSlaveMode(SPIx, SPI_Mode);
 8001c6a:	78fb      	ldrb	r3, [r7, #3]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	bf14      	ite	ne
 8001c70:	2301      	movne	r3, #1
 8001c72:	2300      	moveq	r3, #0
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	4619      	mov	r1, r3
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff fea4 	bl	80019c6 <SPI_SelectMasterSlaveMode>

  //SPI_ConfigureDirection(SPIx, 0);
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <SPI_PeripheralControl>:
		SPI2_REG_RESET();
	} else if (pSPIx == SPI3) {
		SPI3_REG_RESET();
	}
}
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t state) {
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	460b      	mov	r3, r1
 8001c90:	70fb      	strb	r3, [r7, #3]
	if (state == ENABLE) {
 8001c92:	78fb      	ldrb	r3, [r7, #3]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d106      	bne.n	8001ca6 <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	601a      	str	r2, [r3, #0]
	} else {
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8001ca4:	e005      	b.n	8001cb2 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	601a      	str	r2, [r3, #0]
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <SPI_SSIConfig>:
void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t state) {
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	70fb      	strb	r3, [r7, #3]
	if (state == ENABLE) {
 8001cca:	78fb      	ldrb	r3, [r7, #3]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d106      	bne.n	8001cde <SPI_SSIConfig+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SSI);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	601a      	str	r2, [r3, #0]
	} else {
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}
 8001cdc:	e005      	b.n	8001cea <SPI_SSIConfig+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	601a      	str	r2, [r3, #0]
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <SPI_SSOEConfig>:
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t state) {
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	460b      	mov	r3, r1
 8001d00:	70fb      	strb	r3, [r7, #3]
	if (state == ENABLE) {
 8001d02:	78fb      	ldrb	r3, [r7, #3]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d106      	bne.n	8001d16 <SPI_SSOEConfig+0x20>
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f043 0204 	orr.w	r2, r3, #4
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	605a      	str	r2, [r3, #4]
	} else {
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}

}
 8001d14:	e005      	b.n	8001d22 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f023 0204 	bic.w	r2, r3, #4
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	605a      	str	r2, [r3, #4]
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <SPI_GetFlagStatus>:
 * @brief  Checks the status of a specific flag in the SPI Status Register (SR).
 * @param  pSPIx Pointer to the SPI peripheral (SPI1, SPI2 and SPI3).
 * @param  FlagName The flag to check (e.g., SPI_FLAG_TXE, SPI_FLAG_RXNE, SPI_FLAG_BSY).
 * @retval FLAG_SET(1) or FLAG_RESET(0).
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName) {
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	6039      	str	r1, [r7, #0]
	return ((pSPIx->SR & FlagName) != 0) ? FLAG_SET : FLAG_RESET;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	bf14      	ite	ne
 8001d44:	2301      	movne	r3, #1
 8001d46:	2300      	moveq	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <SPI_Transmit>:
 *               the configuration information for SPI module.
 * @param  pTxBuffer pointer to transmit data buffer
 * @param  Length amount of data to be sent
 * @retval None
 */
_Bool SPI_Transmit(SPI_RegDef_t *pSPIx, const uint8_t *pTxBuffer, uint32_t Len) {
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b086      	sub	sp, #24
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	60f8      	str	r0, [r7, #12]
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
    SPI_PeripheralControl(pSPIx, ENABLE);
 8001d62:	2101      	movs	r1, #1
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f7ff ff8e 	bl	8001c86 <SPI_PeripheralControl>
    while (Len > 0) {
 8001d6a:	e02f      	b.n	8001dcc <SPI_Transmit+0x76>
	uint32_t ticks = getTick();
 8001d6c:	f7ff f83e 	bl	8000dec <getTick>
 8001d70:	6178      	str	r0, [r7, #20]
	// wait until TXE is set
	while (!(pSPIx->SR & SPI_FLAG_TXE)){
 8001d72:	e008      	b.n	8001d86 <SPI_Transmit+0x30>
	    if(getTick() - ticks >= 50){
 8001d74:	f7ff f83a 	bl	8000dec <getTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b31      	cmp	r3, #49	@ 0x31
 8001d80:	d901      	bls.n	8001d86 <SPI_Transmit+0x30>
		return ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e032      	b.n	8001dec <SPI_Transmit+0x96>
	while (!(pSPIx->SR & SPI_FLAG_TXE)){
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f0      	beq.n	8001d74 <SPI_Transmit+0x1e>
	    }
	}

	// check the data size
	if (pSPIx->CR1 & (1 << SPI_CR1_DFF)) {
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00b      	beq.n	8001db6 <SPI_Transmit+0x60>
		// 16 bit in CR1
		// load data into the DR
		pSPIx->DR = *((uint16_t*) pTxBuffer);
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	60da      	str	r2, [r3, #12]
		Len -= 2;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3b02      	subs	r3, #2
 8001dac:	607b      	str	r3, [r7, #4]
		pTxBuffer += 2;
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	3302      	adds	r3, #2
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	e00a      	b.n	8001dcc <SPI_Transmit+0x76>
	} else {
		// 8 bit in DFF
		pSPIx->DR = *((const uint8_t*) pTxBuffer);
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	60da      	str	r2, [r3, #12]
		Len--;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	607b      	str	r3, [r7, #4]
		pTxBuffer++;
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	60bb      	str	r3, [r7, #8]
    while (Len > 0) {
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1cc      	bne.n	8001d6c <SPI_Transmit+0x16>
	}
    }
    while (SPI_GetFlagStatus(pSPIx, SPI_FLAG_BSY));
 8001dd2:	bf00      	nop
 8001dd4:	2180      	movs	r1, #128	@ 0x80
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f7ff ffa9 	bl	8001d2e <SPI_GetFlagStatus>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f8      	bne.n	8001dd4 <SPI_Transmit+0x7e>
    SPI_PeripheralControl(pSPIx, DISABLE);
 8001de2:	2100      	movs	r1, #0
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f7ff ff4e 	bl	8001c86 <SPI_PeripheralControl>

    return OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <USART_PeriClockControl>:
  * @param  pUSARTx Pointer to USART_RegDef_t structure representing USART1, USART2, USART3, or UART4.
  * @param  state ENABLE (1) to enable the clock, DISABLE (0) to disable it.
  * @retval None
  */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t state)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	70fb      	strb	r3, [r7, #3]
    if(state == ENABLE)
 8001e00:	78fb      	ldrb	r3, [r7, #3]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d12b      	bne.n	8001e5e <USART_PeriClockControl+0x6a>
    {
        if(pUSARTx == USART1)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a2d      	ldr	r2, [pc, #180]	@ (8001ec0 <USART_PeriClockControl+0xcc>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d106      	bne.n	8001e1c <USART_PeriClockControl+0x28>
        {
            USART1_CLK_ENABLE();
 8001e0e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ec4 <USART_PeriClockControl+0xd0>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e12:	4a2c      	ldr	r2, [pc, #176]	@ (8001ec4 <USART_PeriClockControl+0xd0>)
 8001e14:	f043 0310 	orr.w	r3, r3, #16
 8001e18:	6453      	str	r3, [r2, #68]	@ 0x44
        else if (pUSARTx == UART4)
        {
            UART4_CLK_DISABLE();
        }
    }
}
 8001e1a:	e04b      	b.n	8001eb4 <USART_PeriClockControl+0xc0>
        }else if (pUSARTx == USART2)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a2a      	ldr	r2, [pc, #168]	@ (8001ec8 <USART_PeriClockControl+0xd4>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d106      	bne.n	8001e32 <USART_PeriClockControl+0x3e>
            USART2_CLK_ENABLE();
 8001e24:	4b27      	ldr	r3, [pc, #156]	@ (8001ec4 <USART_PeriClockControl+0xd0>)
 8001e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e28:	4a26      	ldr	r2, [pc, #152]	@ (8001ec4 <USART_PeriClockControl+0xd0>)
 8001e2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e2e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001e30:	e040      	b.n	8001eb4 <USART_PeriClockControl+0xc0>
        }else if (pUSARTx == USART3)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a25      	ldr	r2, [pc, #148]	@ (8001ecc <USART_PeriClockControl+0xd8>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d106      	bne.n	8001e48 <USART_PeriClockControl+0x54>
            USART3_CLK_ENABLE();
 8001e3a:	4b22      	ldr	r3, [pc, #136]	@ (8001ec4 <USART_PeriClockControl+0xd0>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3e:	4a21      	ldr	r2, [pc, #132]	@ (8001ec4 <USART_PeriClockControl+0xd0>)
 8001e40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e44:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001e46:	e035      	b.n	8001eb4 <USART_PeriClockControl+0xc0>
        else if (pUSARTx == UART4)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a21      	ldr	r2, [pc, #132]	@ (8001ed0 <USART_PeriClockControl+0xdc>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d131      	bne.n	8001eb4 <USART_PeriClockControl+0xc0>
            UART4_CLK_ENABLE();
 8001e50:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec4 <USART_PeriClockControl+0xd0>)
 8001e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e54:	4a1b      	ldr	r2, [pc, #108]	@ (8001ec4 <USART_PeriClockControl+0xd0>)
 8001e56:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001e5a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001e5c:	e02a      	b.n	8001eb4 <USART_PeriClockControl+0xc0>
        if(pUSARTx == USART1)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a17      	ldr	r2, [pc, #92]	@ (8001ec0 <USART_PeriClockControl+0xcc>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d106      	bne.n	8001e74 <USART_PeriClockControl+0x80>
            USART1_CLK_DISABLE();
 8001e66:	4b17      	ldr	r3, [pc, #92]	@ (8001ec4 <USART_PeriClockControl+0xd0>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6a:	4a16      	ldr	r2, [pc, #88]	@ (8001ec4 <USART_PeriClockControl+0xd0>)
 8001e6c:	f023 0310 	bic.w	r3, r3, #16
 8001e70:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8001e72:	e01f      	b.n	8001eb4 <USART_PeriClockControl+0xc0>
        }else if (pUSARTx == USART2)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a14      	ldr	r2, [pc, #80]	@ (8001ec8 <USART_PeriClockControl+0xd4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d106      	bne.n	8001e8a <USART_PeriClockControl+0x96>
            USART2_CLK_DISABLE();
 8001e7c:	4b11      	ldr	r3, [pc, #68]	@ (8001ec4 <USART_PeriClockControl+0xd0>)
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e80:	4a10      	ldr	r2, [pc, #64]	@ (8001ec4 <USART_PeriClockControl+0xd0>)
 8001e82:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001e86:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001e88:	e014      	b.n	8001eb4 <USART_PeriClockControl+0xc0>
        }else if (pUSARTx == USART3)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a0f      	ldr	r2, [pc, #60]	@ (8001ecc <USART_PeriClockControl+0xd8>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d106      	bne.n	8001ea0 <USART_PeriClockControl+0xac>
            USART3_CLK_DISABLE();
 8001e92:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec4 <USART_PeriClockControl+0xd0>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	4a0b      	ldr	r2, [pc, #44]	@ (8001ec4 <USART_PeriClockControl+0xd0>)
 8001e98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e9c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001e9e:	e009      	b.n	8001eb4 <USART_PeriClockControl+0xc0>
        else if (pUSARTx == UART4)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a0b      	ldr	r2, [pc, #44]	@ (8001ed0 <USART_PeriClockControl+0xdc>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d105      	bne.n	8001eb4 <USART_PeriClockControl+0xc0>
            UART4_CLK_DISABLE();
 8001ea8:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <USART_PeriClockControl+0xd0>)
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eac:	4a05      	ldr	r2, [pc, #20]	@ (8001ec4 <USART_PeriClockControl+0xd0>)
 8001eae:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8001eb2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	40011000 	.word	0x40011000
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40004400 	.word	0x40004400
 8001ecc:	40004800 	.word	0x40004800
 8001ed0:	40004c00 	.word	0x40004c00

08001ed4 <USART_SetBaudRate>:
  * @param  BaudRate The desired baud rate to set for the USART communication.
  * @retval None
  */

void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
    uint32_t PCLKx = 0;          // Variable to store the peripheral clock
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
    uint32_t usartdiv = 0;       // Variable to store USARTDIV value
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61bb      	str	r3, [r7, #24]
    uint32_t M_part = 0, F_part = 0; // Variables to store Mantissa and Fraction parts
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
    uint32_t tempreg = 0;    // Temporary variable to store final BRR value
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]

    // Step 1: Get the peripheral clock (PCLKx)
    if (pUSARTx == USART1 || pUSARTx == USART6)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a31      	ldr	r2, [pc, #196]	@ (8001fbc <USART_SetBaudRate+0xe8>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d003      	beq.n	8001f02 <USART_SetBaudRate+0x2e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a30      	ldr	r2, [pc, #192]	@ (8001fc0 <USART_SetBaudRate+0xec>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d103      	bne.n	8001f0a <USART_SetBaudRate+0x36>
    {
        PCLKx = RCC_GetPCLK2_Value(); // For USART1 and USART6, use APB2 clock
 8001f02:	f7ff fc91 	bl	8001828 <RCC_GetPCLK2_Value>
 8001f06:	61f8      	str	r0, [r7, #28]
 8001f08:	e002      	b.n	8001f10 <USART_SetBaudRate+0x3c>
    }
    else
    {
        PCLKx = RCC_GetPCLK1_Value(); // For other USARTs, use APB1 clock
 8001f0a:	f7ff fc37 	bl	800177c <RCC_GetPCLK1_Value>
 8001f0e:	61f8      	str	r0, [r7, #28]
    }

    // Step 2: Check if OVER8 is enabled and calculate USARTDIV accordingly
    if (pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00b      	beq.n	8001f34 <USART_SetBaudRate+0x60>
    {
        // OVER8 = 1 (over-sampling by 8)
        // Formula: usartdiv = (25 * PCLKx) / (2 * BaudRate)
        usartdiv = ((25 * PCLKx) / (2 * BaudRate));
 8001f1c:	69fa      	ldr	r2, [r7, #28]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	009a      	lsls	r2, r3, #2
 8001f26:	441a      	add	r2, r3
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f30:	61bb      	str	r3, [r7, #24]
 8001f32:	e00a      	b.n	8001f4a <USART_SetBaudRate+0x76>
    }
    else
    {
        // OVER8 = 0 (over-sampling by 16)
        // Formula: usartdiv = (25 * PCLKx) / (4 * BaudRate)
        usartdiv = ((25 * PCLKx) / (4 * BaudRate));
 8001f34:	69fa      	ldr	r2, [r7, #28]
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	009a      	lsls	r2, r3, #2
 8001f3e:	441a      	add	r2, r3
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f48:	61bb      	str	r3, [r7, #24]
    }

    // Step 3: Calculate the Mantissa part (integer part)
    M_part = usartdiv / 100;   // Integer part of USARTDIV (dividing by 100)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	4a1d      	ldr	r2, [pc, #116]	@ (8001fc4 <USART_SetBaudRate+0xf0>)
 8001f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	613b      	str	r3, [r7, #16]

    // Step 4: Place Mantissa in the appropriate bit positions of BRR
    tempreg |= M_part << 4;    // Shifting the Mantissa part to the correct position in BRR
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	011b      	lsls	r3, r3, #4
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	60fb      	str	r3, [r7, #12]

    // Step 5: Extract the Fraction part (decimal part)
    F_part = (usartdiv - (M_part * 100)); // Fractional part (subtracting the Mantissa)
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	2264      	movs	r2, #100	@ 0x64
 8001f64:	fb02 f303 	mul.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	617b      	str	r3, [r7, #20]

    // Step 6: Calculate the fractional value based on OVER8
    if (pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00a      	beq.n	8001f90 <USART_SetBaudRate+0xbc>
    {
        // OVER8 = 1 (oversampling by 8)
        // Formula: F_part = ((F_part * 8) + 50) / 100 & 0x07
        F_part = (((F_part * 8) + 50) / 100) & ((uint8_t)0x07);
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	3332      	adds	r3, #50	@ 0x32
 8001f80:	4a10      	ldr	r2, [pc, #64]	@ (8001fc4 <USART_SetBaudRate+0xf0>)
 8001f82:	fba2 2303 	umull	r2, r3, r2, r3
 8001f86:	095b      	lsrs	r3, r3, #5
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	617b      	str	r3, [r7, #20]
 8001f8e:	e009      	b.n	8001fa4 <USART_SetBaudRate+0xd0>
    }
    else
    {
        // OVER8 = 0 (oversampling by 16)
        // Formula: F_part = ((F_part * 16) + 50) / 100 & 0x0F
        F_part = (((F_part * 16) + 50) / 100) & ((uint8_t)0x0F);
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	011b      	lsls	r3, r3, #4
 8001f94:	3332      	adds	r3, #50	@ 0x32
 8001f96:	4a0b      	ldr	r2, [pc, #44]	@ (8001fc4 <USART_SetBaudRate+0xf0>)
 8001f98:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9c:	095b      	lsrs	r3, r3, #5
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	617b      	str	r3, [r7, #20]
    }

    // Step 7: Place Fraction part in the appropriate bit positions of BRR
    tempreg |= F_part;         // Adding the Fraction part to tempreg
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]

    // Step 8: Program the final value to USART_BRR
    pUSARTx->BRR = tempreg;    // Set the BRR register to configure the baud rate
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	609a      	str	r2, [r3, #8]
}
 8001fb2:	bf00      	nop
 8001fb4:	3720      	adds	r7, #32
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40011000 	.word	0x40011000
 8001fc0:	40011400 	.word	0x40011400
 8001fc4:	51eb851f 	.word	0x51eb851f

08001fc8 <USART_InitGPIO>:
  *         - Speed: Fast
  *         - Alternate Function number: 7 (for USART)
  *         - Port/Pin selection based on the USART instance
  */

void USART_InitGPIO(USART_RegDef_t *BaseAddress){
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
	GPIO_HandleTypeDef hGPIO;

	if(BaseAddress == USART2){
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a2c      	ldr	r2, [pc, #176]	@ (8002084 <USART_InitGPIO+0xbc>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d11a      	bne.n	800200e <USART_InitGPIO+0x46>
		hGPIO.pGPIOx = GPIOD;
 8001fd8:	4b2b      	ldr	r3, [pc, #172]	@ (8002088 <USART_InitGPIO+0xc0>)
 8001fda:	60fb      	str	r3, [r7, #12]
		hGPIO.Init.Pin = GPIO_PIN_5;
 8001fdc:	2305      	movs	r3, #5
 8001fde:	743b      	strb	r3, [r7, #16]
		hGPIO.Init.Mode = GPIO_MODE_AF;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	747b      	strb	r3, [r7, #17]
		hGPIO.Init.Speed = GPIO_SPEED_FAST;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	74fb      	strb	r3, [r7, #19]
		hGPIO.Init.Pull = GPIO_PULLUP;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	74bb      	strb	r3, [r7, #18]
		hGPIO.Init.Alternate = 7;
 8001fec:	2307      	movs	r3, #7
 8001fee:	757b      	strb	r3, [r7, #21]
		GPIO_Init(&hGPIO);
 8001ff0:	f107 030c 	add.w	r3, r7, #12
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff f9f9 	bl	80013ec <GPIO_Init>

		hGPIO.pGPIOx = GPIOD;
 8001ffa:	4b23      	ldr	r3, [pc, #140]	@ (8002088 <USART_InitGPIO+0xc0>)
 8001ffc:	60fb      	str	r3, [r7, #12]
		hGPIO.Init.Pin = GPIO_PIN_6;
 8001ffe:	2306      	movs	r3, #6
 8002000:	743b      	strb	r3, [r7, #16]
		GPIO_Init(&hGPIO);
 8002002:	f107 030c 	add.w	r3, r7, #12
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff f9f0 	bl	80013ec <GPIO_Init>
		GPIO_Init(&hGPIO);

		hGPIO.Init.Pin = GPIO_PIN_11;
		GPIO_Init(&hGPIO);
	}
}
 800200c:	e036      	b.n	800207c <USART_InitGPIO+0xb4>
	else if(BaseAddress == USART1){
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a1e      	ldr	r2, [pc, #120]	@ (800208c <USART_InitGPIO+0xc4>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d118      	bne.n	8002048 <USART_InitGPIO+0x80>
		hGPIO.pGPIOx = GPIOA;
 8002016:	4b1e      	ldr	r3, [pc, #120]	@ (8002090 <USART_InitGPIO+0xc8>)
 8002018:	60fb      	str	r3, [r7, #12]
		hGPIO.Init.Pin = GPIO_PIN_9;
 800201a:	2309      	movs	r3, #9
 800201c:	743b      	strb	r3, [r7, #16]
		hGPIO.Init.Mode = GPIO_MODE_AF;
 800201e:	2302      	movs	r3, #2
 8002020:	747b      	strb	r3, [r7, #17]
		hGPIO.Init.Speed = GPIO_SPEED_FAST;
 8002022:	2302      	movs	r3, #2
 8002024:	74fb      	strb	r3, [r7, #19]
		hGPIO.Init.Alternate = 7;
 8002026:	2307      	movs	r3, #7
 8002028:	757b      	strb	r3, [r7, #21]
		GPIO_Init(&hGPIO);
 800202a:	f107 030c 	add.w	r3, r7, #12
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff f9dc 	bl	80013ec <GPIO_Init>
		hGPIO.pGPIOx = GPIOB;
 8002034:	4b17      	ldr	r3, [pc, #92]	@ (8002094 <USART_InitGPIO+0xcc>)
 8002036:	60fb      	str	r3, [r7, #12]
		hGPIO.Init.Pin = GPIO_PIN_7;
 8002038:	2307      	movs	r3, #7
 800203a:	743b      	strb	r3, [r7, #16]
		GPIO_Init(&hGPIO);
 800203c:	f107 030c 	add.w	r3, r7, #12
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff f9d3 	bl	80013ec <GPIO_Init>
}
 8002046:	e019      	b.n	800207c <USART_InitGPIO+0xb4>
	else if(BaseAddress == USART3){
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a13      	ldr	r2, [pc, #76]	@ (8002098 <USART_InitGPIO+0xd0>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d115      	bne.n	800207c <USART_InitGPIO+0xb4>
		hGPIO.pGPIOx = GPIOB;
 8002050:	4b10      	ldr	r3, [pc, #64]	@ (8002094 <USART_InitGPIO+0xcc>)
 8002052:	60fb      	str	r3, [r7, #12]
		hGPIO.Init.Pin = GPIO_PIN_10;
 8002054:	230a      	movs	r3, #10
 8002056:	743b      	strb	r3, [r7, #16]
		hGPIO.Init.Mode = GPIO_MODE_AF;
 8002058:	2302      	movs	r3, #2
 800205a:	747b      	strb	r3, [r7, #17]
		hGPIO.Init.Speed = GPIO_SPEED_FAST;
 800205c:	2302      	movs	r3, #2
 800205e:	74fb      	strb	r3, [r7, #19]
		hGPIO.Init.Alternate = 7;
 8002060:	2307      	movs	r3, #7
 8002062:	757b      	strb	r3, [r7, #21]
		GPIO_Init(&hGPIO);
 8002064:	f107 030c 	add.w	r3, r7, #12
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff f9bf 	bl	80013ec <GPIO_Init>
		hGPIO.Init.Pin = GPIO_PIN_11;
 800206e:	230b      	movs	r3, #11
 8002070:	743b      	strb	r3, [r7, #16]
		GPIO_Init(&hGPIO);
 8002072:	f107 030c 	add.w	r3, r7, #12
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff f9b8 	bl	80013ec <GPIO_Init>
}
 800207c:	bf00      	nop
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40004400 	.word	0x40004400
 8002088:	40020c00 	.word	0x40020c00
 800208c:	40011000 	.word	0x40011000
 8002090:	40020000 	.word	0x40020000
 8002094:	40020400 	.word	0x40020400
 8002098:	40004800 	.word	0x40004800

0800209c <USART_SetParam>:
  * @param  ParityMode: Parity configuration (None, Even, Odd).
  * @param  BaudRate: Desired baud rate for communication.
  * @retval None
  */

void USART_SetParam(USART_HandleTypeDef *USART_Handle, USART_RegDef_t *BaseAddress, uint8_t USART_TX_RX_Mode, uint8_t NoOfStopBits, uint8_t WordLength, uint8_t ParityMode, uint32_t BaudRate){
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	4611      	mov	r1, r2
 80020a8:	461a      	mov	r2, r3
 80020aa:	460b      	mov	r3, r1
 80020ac:	71fb      	strb	r3, [r7, #7]
 80020ae:	4613      	mov	r3, r2
 80020b0:	71bb      	strb	r3, [r7, #6]
    USART_Handle->pUSARTx = BaseAddress;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	601a      	str	r2, [r3, #0]
    USART_Handle->Init.Mode = USART_TX_RX_Mode;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	79fa      	ldrb	r2, [r7, #7]
 80020bc:	711a      	strb	r2, [r3, #4]
    USART_Handle->Init.StopBits = NoOfStopBits;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	79ba      	ldrb	r2, [r7, #6]
 80020c2:	739a      	strb	r2, [r3, #14]
    USART_Handle->Init.WordLength = WordLength;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	7e3a      	ldrb	r2, [r7, #24]
 80020c8:	731a      	strb	r2, [r3, #12]
    USART_Handle->Init.ParityControl = ParityMode;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	7f3a      	ldrb	r2, [r7, #28]
 80020ce:	73da      	strb	r2, [r3, #15]
    USART_Handle->Init.BaudRate = BaudRate;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a3a      	ldr	r2, [r7, #32]
 80020d4:	609a      	str	r2, [r3, #8]

    USART_InitGPIO(BaseAddress);
 80020d6:	68b8      	ldr	r0, [r7, #8]
 80020d8:	f7ff ff76 	bl	8001fc8 <USART_InitGPIO>
    USART_Init(USART_Handle);
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f000 f808 	bl	80020f2 <USART_Init>
    USART_PeripheralControl(BaseAddress, ENABLE);
 80020e2:	2101      	movs	r1, #1
 80020e4:	68b8      	ldr	r0, [r7, #8]
 80020e6:	f000 f8a9 	bl	800223c <USART_PeripheralControl>
}
 80020ea:	bf00      	nop
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <USART_Init>:
  * @param  hspi Pointer to an USART_HandleTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_HandleTypeDef *husart)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b084      	sub	sp, #16
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]

	// Enable peripheral clock
	USART_PeriClockControl(husart->pUSARTx, ENABLE);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2101      	movs	r1, #1
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fe75 	bl	8001df4 <USART_PeriClockControl>

/******************************** Configuration of CR1******************************************/
	// Configure USART mode
	if (husart->Init.Mode == USART_MODE_RX)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	791b      	ldrb	r3, [r3, #4]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d108      	bne.n	8002124 <USART_Init+0x32>
	{
		// Enable Receive field
		tempreg |= (1 << USART_CR1_RE);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f043 0304 	orr.w	r3, r3, #4
 8002118:	60fb      	str	r3, [r7, #12]

		// Clear Transmit field
		tempreg &= ~(1 << USART_CR1_TE);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f023 0308 	bic.w	r3, r3, #8
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	e014      	b.n	800214e <USART_Init+0x5c>
	}else if (husart->Init.Mode == USART_MODE_TX)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	791b      	ldrb	r3, [r3, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d108      	bne.n	800213e <USART_Init+0x4c>
	{
		// Enable Transmit field
		tempreg |= (1 << USART_CR1_TE);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f043 0308 	orr.w	r3, r3, #8
 8002132:	60fb      	str	r3, [r7, #12]

		// Clear Receive field
		tempreg &= ~(1 << USART_CR1_RE);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f023 0304 	bic.w	r3, r3, #4
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	e007      	b.n	800214e <USART_Init+0x5c>
	}else {
		// Enable Receive field
		tempreg |= (1 << USART_CR1_RE);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f043 0304 	orr.w	r3, r3, #4
 8002144:	60fb      	str	r3, [r7, #12]

		// Enable Transmit field
		tempreg |= (1 << USART_CR1_TE);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f043 0308 	orr.w	r3, r3, #8
 800214c:	60fb      	str	r3, [r7, #12]
	}

	// Configure Word Length
	tempreg |= husart->Init.WordLength << USART_CR1_M;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	7b1b      	ldrb	r3, [r3, #12]
 8002152:	031b      	lsls	r3, r3, #12
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	4313      	orrs	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]

	// Configure parity control bit
	if (husart->Init.ParityControl == USART_PARITY_EVEN)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	7bdb      	ldrb	r3, [r3, #15]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d104      	bne.n	800216c <USART_Init+0x7a>
	{
		//Implement the code to enable the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	e010      	b.n	800218e <USART_Init+0x9c>
	}else if (husart->Init.ParityControl == USART_PARITY_ODD)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	7bdb      	ldrb	r3, [r3, #15]
 8002170:	2b02      	cmp	r3, #2
 8002172:	d108      	bne.n	8002186 <USART_Init+0x94>
	{
		//Implement the code to enable the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800217a:	60fb      	str	r3, [r7, #12]

		//Implement the code to enable ODD parity
		tempreg |= ( 1 << USART_CR1_PS);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	e003      	b.n	800218e <USART_Init+0x9c>
	}else {
		// Clear the parity bit
		tempreg &= ~( 1 << USART_CR1_PCE);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800218c:	60fb      	str	r3, [r7, #12]
	}
	// Configure Oversampling mode
	tempreg |= husart->Init.Oversampling << USART_CR1_OVER8;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	7b5b      	ldrb	r3, [r3, #13]
 8002192:	03db      	lsls	r3, r3, #15
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	4313      	orrs	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]

	//Program the CR1 register
	husart->pUSARTx->CR1 = tempreg;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/
	tempreg = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= husart->Init.StopBits << USART_CR2_STOP;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	7b9b      	ldrb	r3, [r3, #14]
 80021aa:	031b      	lsls	r3, r3, #12
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]

	// Program the CR2 register
	husart->pUSARTx->CR2 = tempreg;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/
	tempreg=0;
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if (husart->Init.HWFlowControl == USART_HW_CTS)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	7c1b      	ldrb	r3, [r3, #16]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d108      	bne.n	80021d8 <USART_Init+0xe6>
	{
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021cc:	60fb      	str	r3, [r7, #12]

		// Clear the RTS flow control
		tempreg &= ~( 1 << USART_CR3_RTSE);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	e021      	b.n	800221c <USART_Init+0x12a>
	}else if (husart->Init.HWFlowControl == USART_HW_RTS)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	7c1b      	ldrb	r3, [r3, #16]
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d108      	bne.n	80021f2 <USART_Init+0x100>
	{
		//Implement the code to enable RTS flow control
		tempreg |= ( 1 << USART_CR3_RTSE);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021e6:	60fb      	str	r3, [r7, #12]

		// Clear the CTS flow control
		tempreg &= ~( 1 << USART_CR3_CTSE);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	e014      	b.n	800221c <USART_Init+0x12a>
	}else if (husart->Init.HWFlowControl == USART_HW_CTS_RTS) {
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	7c1b      	ldrb	r3, [r3, #16]
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d108      	bne.n	800220c <USART_Init+0x11a>
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002200:	60fb      	str	r3, [r7, #12]
		tempreg |= ( 1 << USART_CR3_RTSE);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	e007      	b.n	800221c <USART_Init+0x12a>
	}else {
		//Implement the code to enable both CTS and RTS Flow control
		tempreg &= ~( 1 << USART_CR3_CTSE);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002212:	60fb      	str	r3, [r7, #12]
		tempreg &= ~( 1 << USART_CR3_RTSE);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800221a:	60fb      	str	r3, [r7, #12]
	}
	husart->pUSARTx->CR3 = tempreg;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	615a      	str	r2, [r3, #20]

/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	USART_SetBaudRate(husart->pUSARTx,husart->Init.BaudRate);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	4619      	mov	r1, r3
 800222e:	4610      	mov	r0, r2
 8002230:	f7ff fe50 	bl	8001ed4 <USART_SetBaudRate>
}
 8002234:	bf00      	nop
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <USART_PeripheralControl>:
  * @param  pUSARTx Pointer to the USART peripheral (USART1, USART2, USART3 and UART4).
  * @param  controlState ENABLE (1) to enable the Peripheral, DISABLE (0) to disable it.
  * @retval None
  */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t state)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	70fb      	strb	r3, [r7, #3]
    if (state == ENABLE)
 8002248:	78fb      	ldrb	r3, [r7, #3]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d106      	bne.n	800225c <USART_PeripheralControl+0x20>
    {
        pUSARTx->CR1 |= (1 << USART_CR1_UE);  // Set the UE bit to enable the USART
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	60da      	str	r2, [r3, #12]
    }
    else
    {
        pUSARTx->CR1 &= ~(1 << USART_CR1_UE); // Clear the UE bit to disable the USART
    }
}
 800225a:	e005      	b.n	8002268 <USART_PeripheralControl+0x2c>
        pUSARTx->CR1 &= ~(1 << USART_CR1_UE); // Clear the UE bit to disable the USART
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	60da      	str	r2, [r3, #12]
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <USART_GetFlagStatus>:
  * @param  pUSARTx Pointer to the USART peripheral (USART1, USART2, USART3 and UART4).
  * @param  FlagName The flag to check
  * @retval FLAG_SET(1) or FLAG_RESET(0).
  */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t FlagName)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	70fb      	strb	r3, [r7, #3]
	return (pUSARTx->SR & FlagName) ? FLAG_SET : FLAG_RESET;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	4013      	ands	r3, r2
 8002288:	2b00      	cmp	r3, #0
 800228a:	bf14      	ite	ne
 800228c:	2301      	movne	r3, #1
 800228e:	2300      	moveq	r3, #0
 8002290:	b2db      	uxtb	r3, r3
}
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <USART_Receive>:
  * @param  ppTxBuffer Pointer to the data buffer containing data to be transmitted.
  * @param  Len The number of bytes to receive.
  * @retval None
  */
void  USART_Receive(USART_HandleTypeDef *husart, uint8_t *pRxBuffer, uint32_t Len)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b086      	sub	sp, #24
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	60f8      	str	r0, [r7, #12]
 80022a6:	60b9      	str	r1, [r7, #8]
 80022a8:	607a      	str	r2, [r7, #4]
    // Loop over until "Len" number of bytes are transferred
    for (uint32_t i = 0; i < Len; i++)
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	e042      	b.n	8002336 <USART_Receive+0x98>
    {
        // Wait until RXNE flag is set in the SR
        while (!USART_GetFlagStatus(husart->pUSARTx, USART_FLAG_RXNE));
 80022b0:	bf00      	nop
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2120      	movs	r1, #32
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff ffdb 	bl	8002274 <USART_GetFlagStatus>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0f6      	beq.n	80022b2 <USART_Receive+0x14>

        // Check Word Length (9 bits or 8 bits)
        if (husart->Init.WordLength == USART_WORDLENGTH_9BITS)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	7b1b      	ldrb	r3, [r3, #12]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d11a      	bne.n	8002302 <USART_Receive+0x64>
        {
            // We are going to receive 9-bit data in a frame

            // Check for USART Parity control
            if (husart->Init.ParityControl == USART_PARITY_NONE)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	7bdb      	ldrb	r3, [r3, #15]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10c      	bne.n	80022ee <USART_Receive+0x50>
            {
                // No parity is used, so all 9 bits will be user data
                *((uint16_t*)pRxBuffer) = (husart->pUSARTx->DR & (uint16_t)0x01FF);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	801a      	strh	r2, [r3, #0]
                pRxBuffer += 2; // Increment the pointer by 2 bytes
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	3302      	adds	r3, #2
 80022ea:	60bb      	str	r3, [r7, #8]
 80022ec:	e020      	b.n	8002330 <USART_Receive+0x92>
            }
            else
            {
                // Parity is used, so 8 bits will be user data and 1 bit is for parity
                *pRxBuffer = (husart->pUSARTx->DR & (uint8_t)0xFF);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	701a      	strb	r2, [r3, #0]
                pRxBuffer++; // Increment the pointer by 1 byte
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	3301      	adds	r3, #1
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	e016      	b.n	8002330 <USART_Receive+0x92>
        else
        {
            // We are going to receive 8-bit data in a frame

            // Check for USART Parity control
            if (husart->Init.ParityControl == USART_PARITY_NONE)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	7bdb      	ldrb	r3, [r3, #15]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d106      	bne.n	8002318 <USART_Receive+0x7a>
            {
                // No parity is used, so all 8 bits will be user data
                *pRxBuffer = (husart->pUSARTx->DR & (uint8_t)0xFF);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	b2da      	uxtb	r2, r3
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	701a      	strb	r2, [r3, #0]
 8002316:	e008      	b.n	800232a <USART_Receive+0x8c>
            }
            else
            {
                // Parity is used, so 7 bits will be user data and 1 bit is parity
                *pRxBuffer = (uint8_t)(husart->pUSARTx->DR & (uint8_t)0x7F);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	b2db      	uxtb	r3, r3
 8002320:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002324:	b2da      	uxtb	r2, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	701a      	strb	r2, [r3, #0]
            }
            pRxBuffer++; // Increment the pointer by 1 byte
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	3301      	adds	r3, #1
 800232e:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < Len; i++)
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	3301      	adds	r3, #1
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	429a      	cmp	r2, r3
 800233c:	d3b8      	bcc.n	80022b0 <USART_Receive+0x12>
        }
    }
}
 800233e:	bf00      	nop
 8002340:	bf00      	nop
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <MAX7219_SendCommand>:
 */
#include "MAX7219.h"



void MAX7219_SendCommand(SPI_RegDef_t* SPIx, uint8_t Address, uint8_t Data){
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	460b      	mov	r3, r1
 8002352:	70fb      	strb	r3, [r7, #3]
 8002354:	4613      	mov	r3, r2
 8002356:	70bb      	strb	r3, [r7, #2]
  uint8_t TX_Data[2] = {Address, Data};
 8002358:	78fb      	ldrb	r3, [r7, #3]
 800235a:	733b      	strb	r3, [r7, #12]
 800235c:	78bb      	ldrb	r3, [r7, #2]
 800235e:	737b      	strb	r3, [r7, #13]

  SPI_Transmit(SPIx, TX_Data, 2);
 8002360:	f107 030c 	add.w	r3, r7, #12
 8002364:	2202      	movs	r2, #2
 8002366:	4619      	mov	r1, r3
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff fcf4 	bl	8001d56 <SPI_Transmit>
}
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <MAX7219_OperationMode>:


void MAX7219_OperationMode(SPI_RegDef_t* SPIx, _Bool Mode){
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	460b      	mov	r3, r1
 8002380:	70fb      	strb	r3, [r7, #3]
  MAX7219_SendCommand(SPIx, MAX7219_REG_SHUTDOWN, Mode);
 8002382:	78fb      	ldrb	r3, [r7, #3]
 8002384:	461a      	mov	r2, r3
 8002386:	210c      	movs	r1, #12
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff ffdd 	bl	8002348 <MAX7219_SendCommand>
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <MAX7219_SetDecodeMode>:

void MAX7219_SetDecodeMode(SPI_RegDef_t* SPIx, uint8_t DecodeMode){
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	460b      	mov	r3, r1
 80023a0:	70fb      	strb	r3, [r7, #3]
  MAX7219_SendCommand(SPIx, MAX7219_REG_DECODE_MODE, DecodeMode);
 80023a2:	78fb      	ldrb	r3, [r7, #3]
 80023a4:	461a      	mov	r2, r3
 80023a6:	2109      	movs	r1, #9
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff ffcd 	bl	8002348 <MAX7219_SendCommand>
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <MAX7219_SetIntensity>:

void MAX7219_SetIntensity(SPI_RegDef_t* SPIx, uint8_t IntensityLevel){
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
 80023be:	460b      	mov	r3, r1
 80023c0:	70fb      	strb	r3, [r7, #3]
  MAX7219_SendCommand(SPIx, MAX7219_REG_INTENSITY, IntensityLevel);
 80023c2:	78fb      	ldrb	r3, [r7, #3]
 80023c4:	461a      	mov	r2, r3
 80023c6:	210a      	movs	r1, #10
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff ffbd 	bl	8002348 <MAX7219_SendCommand>
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <MAX7219_SetScanLimit>:

void MAX7219_SetScanLimit(SPI_RegDef_t* SPIx, uint8_t ScanLimit){
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	460b      	mov	r3, r1
 80023e0:	70fb      	strb	r3, [r7, #3]
  MAX7219_SendCommand(SPIx, MAX7219_REG_SCAN_LIMIT, ScanLimit);
 80023e2:	78fb      	ldrb	r3, [r7, #3]
 80023e4:	461a      	mov	r2, r3
 80023e6:	210b      	movs	r1, #11
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff ffad 	bl	8002348 <MAX7219_SendCommand>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <MAX7219_Init>:

void MAX7219_Init(SPI_RegDef_t* SPIx, uint8_t DecodeMode, uint8_t IntensityLevel, uint8_t ScanLimit){
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
 80023fe:	4608      	mov	r0, r1
 8002400:	4611      	mov	r1, r2
 8002402:	461a      	mov	r2, r3
 8002404:	4603      	mov	r3, r0
 8002406:	70fb      	strb	r3, [r7, #3]
 8002408:	460b      	mov	r3, r1
 800240a:	70bb      	strb	r3, [r7, #2]
 800240c:	4613      	mov	r3, r2
 800240e:	707b      	strb	r3, [r7, #1]
  MAX7219_Clean(SPIx);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f817 	bl	8002444 <MAX7219_Clean>
  MAX7219_OperationMode(SPIx, MAX7219_NORMAL_OPERATION);
 8002416:	2101      	movs	r1, #1
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff ffac 	bl	8002376 <MAX7219_OperationMode>
  MAX7219_SetDecodeMode(SPIx, DecodeMode);
 800241e:	78fb      	ldrb	r3, [r7, #3]
 8002420:	4619      	mov	r1, r3
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff ffb7 	bl	8002396 <MAX7219_SetDecodeMode>
  MAX7219_SetIntensity(SPIx, IntensityLevel);
 8002428:	78bb      	ldrb	r3, [r7, #2]
 800242a:	4619      	mov	r1, r3
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff ffc2 	bl	80023b6 <MAX7219_SetIntensity>
  MAX7219_SetScanLimit(SPIx, ScanLimit);
 8002432:	787b      	ldrb	r3, [r7, #1]
 8002434:	4619      	mov	r1, r3
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff ffcd 	bl	80023d6 <MAX7219_SetScanLimit>
}
 800243c:	bf00      	nop
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <MAX7219_Clean>:

void MAX7219_TestLED(SPI_RegDef_t* SPIx, _Bool IsEnabled){
  MAX7219_SendCommand(SPIx, MAX7219_REG_DISPLAY_TEST, IsEnabled);
}

void MAX7219_Clean(SPI_RegDef_t* SPIx){
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  for(int count = 0; count <= 0xC; count++){
 800244c:	2300      	movs	r3, #0
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	e009      	b.n	8002466 <MAX7219_Clean+0x22>
      MAX7219_SendCommand(SPIx, count, 0);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2200      	movs	r2, #0
 8002458:	4619      	mov	r1, r3
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff ff74 	bl	8002348 <MAX7219_SendCommand>
  for(int count = 0; count <= 0xC; count++){
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	3301      	adds	r3, #1
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2b0c      	cmp	r3, #12
 800246a:	ddf2      	ble.n	8002452 <MAX7219_Clean+0xe>
  }
  MAX7219_SendCommand(SPIx, 0xF, 0);
 800246c:	2200      	movs	r2, #0
 800246e:	210f      	movs	r1, #15
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff ff69 	bl	8002348 <MAX7219_SendCommand>
}
 8002476:	bf00      	nop
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <MAX7219_DisplayNumbers>:
      result *= 10;
  }
  return result;
}

void MAX7219_DisplayNumbers(SPI_RegDef_t* SPIx, uint8_t Position, uint32_t Number, uint8_t NoOfLEDDigits){
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	607a      	str	r2, [r7, #4]
 800248a:	461a      	mov	r2, r3
 800248c:	460b      	mov	r3, r1
 800248e:	72fb      	strb	r3, [r7, #11]
 8002490:	4613      	mov	r3, r2
 8002492:	72bb      	strb	r3, [r7, #10]
//      StartDigit--;  //Update the next position to display
//      Temp_Number %= Pow_Number;  //Get the number's next digit
//      Pow_Number /= 10;
//  }

  uint32_t Temp_Number = Number;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	617b      	str	r3, [r7, #20]
  uint8_t Expected_EndPosition = Position + NoOfLEDDigits - 1;
 8002498:	7afa      	ldrb	r2, [r7, #11]
 800249a:	7abb      	ldrb	r3, [r7, #10]
 800249c:	4413      	add	r3, r2
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	3b01      	subs	r3, #1
 80024a2:	74fb      	strb	r3, [r7, #19]


  while(Temp_Number){
 80024a4:	e018      	b.n	80024d8 <MAX7219_DisplayNumbers+0x58>
      MAX7219_SendCommand(SPIx, Position, Temp_Number % 10);
 80024a6:	6979      	ldr	r1, [r7, #20]
 80024a8:	4b16      	ldr	r3, [pc, #88]	@ (8002504 <MAX7219_DisplayNumbers+0x84>)
 80024aa:	fba3 2301 	umull	r2, r3, r3, r1
 80024ae:	08da      	lsrs	r2, r3, #3
 80024b0:	4613      	mov	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	1aca      	subs	r2, r1, r3
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	7afb      	ldrb	r3, [r7, #11]
 80024be:	4619      	mov	r1, r3
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f7ff ff41 	bl	8002348 <MAX7219_SendCommand>
      Temp_Number /= 10;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	4a0e      	ldr	r2, [pc, #56]	@ (8002504 <MAX7219_DisplayNumbers+0x84>)
 80024ca:	fba2 2303 	umull	r2, r3, r2, r3
 80024ce:	08db      	lsrs	r3, r3, #3
 80024d0:	617b      	str	r3, [r7, #20]
      Position ++;
 80024d2:	7afb      	ldrb	r3, [r7, #11]
 80024d4:	3301      	adds	r3, #1
 80024d6:	72fb      	strb	r3, [r7, #11]
  while(Temp_Number){
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1e3      	bne.n	80024a6 <MAX7219_DisplayNumbers+0x26>
  }

  while(Position <= Expected_EndPosition){
 80024de:	e008      	b.n	80024f2 <MAX7219_DisplayNumbers+0x72>
      MAX7219_SendCommand(SPIx, Position, 0);
 80024e0:	7afb      	ldrb	r3, [r7, #11]
 80024e2:	2200      	movs	r2, #0
 80024e4:	4619      	mov	r1, r3
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f7ff ff2e 	bl	8002348 <MAX7219_SendCommand>
      Position++;
 80024ec:	7afb      	ldrb	r3, [r7, #11]
 80024ee:	3301      	adds	r3, #1
 80024f0:	72fb      	strb	r3, [r7, #11]
  while(Position <= Expected_EndPosition){
 80024f2:	7afa      	ldrb	r2, [r7, #11]
 80024f4:	7cfb      	ldrb	r3, [r7, #19]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d9f2      	bls.n	80024e0 <MAX7219_DisplayNumbers+0x60>
  }
}
 80024fa:	bf00      	nop
 80024fc:	bf00      	nop
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	cccccccd 	.word	0xcccccccd

08002508 <SR05_ReadData>:
//  }
//
//  return distance;
//}

uint16_t SR05_ReadData(USART_HandleTypeDef* pUSART) {
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
    uint8_t pRxBuffer[4];
    uint8_t byte = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	73fb      	strb	r3, [r7, #15]
    static uint16_t distance = 0;

    // Wait for 0xFF header
    for(uint16_t count = 0; count <= 5000; count++){
 8002514:	2300      	movs	r3, #0
 8002516:	82fb      	strh	r3, [r7, #22]
 8002518:	e017      	b.n	800254a <SR05_ReadData+0x42>
        USART_Receive(pUSART, &byte, 1);
 800251a:	f107 030f 	add.w	r3, r7, #15
 800251e:	2201      	movs	r2, #1
 8002520:	4619      	mov	r1, r3
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7ff febb 	bl	800229e <USART_Receive>
        if (byte == 0xFF) {
 8002528:	7bfb      	ldrb	r3, [r7, #15]
 800252a:	2bff      	cmp	r3, #255	@ 0xff
 800252c:	d10a      	bne.n	8002544 <SR05_ReadData+0x3c>
            pRxBuffer[0] = byte;
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	743b      	strb	r3, [r7, #16]
            USART_Receive(pUSART, &pRxBuffer[1], 3);
 8002532:	f107 0310 	add.w	r3, r7, #16
 8002536:	3301      	adds	r3, #1
 8002538:	2203      	movs	r2, #3
 800253a:	4619      	mov	r1, r3
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff feae 	bl	800229e <USART_Receive>
            break;
 8002542:	e007      	b.n	8002554 <SR05_ReadData+0x4c>
    for(uint16_t count = 0; count <= 5000; count++){
 8002544:	8afb      	ldrh	r3, [r7, #22]
 8002546:	3301      	adds	r3, #1
 8002548:	82fb      	strh	r3, [r7, #22]
 800254a:	8afb      	ldrh	r3, [r7, #22]
 800254c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002550:	4293      	cmp	r3, r2
 8002552:	d9e2      	bls.n	800251a <SR05_ReadData+0x12>
        }
    }

    if(pRxBuffer[1] == 0xAA && pRxBuffer[2] == 0xAA) return 1;
 8002554:	7c7b      	ldrb	r3, [r7, #17]
 8002556:	2baa      	cmp	r3, #170	@ 0xaa
 8002558:	d104      	bne.n	8002564 <SR05_ReadData+0x5c>
 800255a:	7cbb      	ldrb	r3, [r7, #18]
 800255c:	2baa      	cmp	r3, #170	@ 0xaa
 800255e:	d101      	bne.n	8002564 <SR05_ReadData+0x5c>
 8002560:	2301      	movs	r3, #1
 8002562:	e017      	b.n	8002594 <SR05_ReadData+0x8c>

    uint8_t sum = (pRxBuffer[0] + pRxBuffer[1] + pRxBuffer[2]) & 0xFF;
 8002564:	7c3a      	ldrb	r2, [r7, #16]
 8002566:	7c7b      	ldrb	r3, [r7, #17]
 8002568:	4413      	add	r3, r2
 800256a:	b2da      	uxtb	r2, r3
 800256c:	7cbb      	ldrb	r3, [r7, #18]
 800256e:	4413      	add	r3, r2
 8002570:	757b      	strb	r3, [r7, #21]

    if (sum == pRxBuffer[3]) {
 8002572:	7cfb      	ldrb	r3, [r7, #19]
 8002574:	7d7a      	ldrb	r2, [r7, #21]
 8002576:	429a      	cmp	r2, r3
 8002578:	d10a      	bne.n	8002590 <SR05_ReadData+0x88>
        distance = ((uint16_t)pRxBuffer[1] << 8) | pRxBuffer[2];
 800257a:	7c7b      	ldrb	r3, [r7, #17]
 800257c:	b21b      	sxth	r3, r3
 800257e:	021b      	lsls	r3, r3, #8
 8002580:	b21a      	sxth	r2, r3
 8002582:	7cbb      	ldrb	r3, [r7, #18]
 8002584:	b21b      	sxth	r3, r3
 8002586:	4313      	orrs	r3, r2
 8002588:	b21b      	sxth	r3, r3
 800258a:	b29a      	uxth	r2, r3
 800258c:	4b03      	ldr	r3, [pc, #12]	@ (800259c <SR05_ReadData+0x94>)
 800258e:	801a      	strh	r2, [r3, #0]
    }

    return distance;
 8002590:	4b02      	ldr	r3, [pc, #8]	@ (800259c <SR05_ReadData+0x94>)
 8002592:	881b      	ldrh	r3, [r3, #0]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20000200 	.word	0x20000200

080025a0 <EXTI0_IRQHandler>:
void delay()
{
	for (uint32_t i = 0; i < 500000; i++);
}

void EXTI0_IRQHandler(){
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 0); //Clear PR bit to reset interrupt line
 80025a4:	4b05      	ldr	r3, [pc, #20]	@ (80025bc <EXTI0_IRQHandler+0x1c>)
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	4a04      	ldr	r2, [pc, #16]	@ (80025bc <EXTI0_IRQHandler+0x1c>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	6153      	str	r3, [r2, #20]
	GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80025b0:	2100      	movs	r1, #0
 80025b2:	4803      	ldr	r0, [pc, #12]	@ (80025c0 <EXTI0_IRQHandler+0x20>)
 80025b4:	f7ff f8cc 	bl	8001750 <GPIO_TogglePin>
}
 80025b8:	bf00      	nop
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40013c00 	.word	0x40013c00
 80025c0:	40020000 	.word	0x40020000

080025c4 <main>:

uint16_t data_mm = 0;

int main(void){
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af04      	add	r7, sp, #16
    //TIM_PWM_Init(TIM2, TIM_CHANNEL_1);
    //Initialize Systick, so each tick is 1ms
     SysTick_Init();
 80025ca:	f7fe fbf3 	bl	8000db4 <SysTick_Init>
//    //Initialize GPIO input for button
//    GPIO_Initialize(GPIOD, GPIO_PIN_0, GPIO_MODE_IT_RISING);
//    //Enable interrupt for GPIOD Pin 0
//    GPIO_IRQInterruptConfig(IRQ_NO_EXTI0, ENABLE);

     SPI_Initialize(SPI1, SPI_MODE_MASTER, SPI_POLARITY_LOW, SPI_PHASE_1stEDGE,
 80025ce:	2300      	movs	r3, #0
 80025d0:	9302      	str	r3, [sp, #8]
 80025d2:	2300      	movs	r3, #0
 80025d4:	9301      	str	r3, [sp, #4]
 80025d6:	2300      	movs	r3, #0
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	2300      	movs	r3, #0
 80025dc:	2200      	movs	r2, #0
 80025de:	2101      	movs	r1, #1
 80025e0:	4815      	ldr	r0, [pc, #84]	@ (8002638 <main+0x74>)
 80025e2:	f7ff fb0b 	bl	8001bfc <SPI_Initialize>
		   SPI_MSBFIRST, SPI_DATASIZE_8BIT, FALSE);
//
//
//
     MAX7219_Init(SPI1, MAX7219_DECODE_ALL, MAX7219_INTENSITY_31_32, MAX7219_SCAN_DIGIT_0_7);
 80025e6:	2307      	movs	r3, #7
 80025e8:	220f      	movs	r2, #15
 80025ea:	21ff      	movs	r1, #255	@ 0xff
 80025ec:	4812      	ldr	r0, [pc, #72]	@ (8002638 <main+0x74>)
 80025ee:	f7ff ff02 	bl	80023f6 <MAX7219_Init>
     //SR05_InitTriggerIO();

     USART_SetParam(&hUASRT, USART2, USART_MODE_RX, 1, USART_WORDLENGTH_8BITS, USART_PARITY_NONE, USART_BAUDRATE_9600);
 80025f2:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 80025f6:	9302      	str	r3, [sp, #8]
 80025f8:	2300      	movs	r3, #0
 80025fa:	9301      	str	r3, [sp, #4]
 80025fc:	2300      	movs	r3, #0
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	2301      	movs	r3, #1
 8002602:	2201      	movs	r2, #1
 8002604:	490d      	ldr	r1, [pc, #52]	@ (800263c <main+0x78>)
 8002606:	480e      	ldr	r0, [pc, #56]	@ (8002640 <main+0x7c>)
 8002608:	f7ff fd48 	bl	800209c <USART_SetParam>
	//MAX7219_TestLED(SPI1, ENABLE);
	//Delay_ms(200);



	data_mm = SR05_ReadData(&hUASRT);
 800260c:	480c      	ldr	r0, [pc, #48]	@ (8002640 <main+0x7c>)
 800260e:	f7ff ff7b 	bl	8002508 <SR05_ReadData>
 8002612:	4603      	mov	r3, r0
 8002614:	461a      	mov	r2, r3
 8002616:	4b0b      	ldr	r3, [pc, #44]	@ (8002644 <main+0x80>)
 8002618:	801a      	strh	r2, [r3, #0]
//	for (uint8_t i = 1; i <= 150; i++)
//	{
//	    MAX7219_DisplayNumbers(SPI1, MAX7219_REG_DIGIT0, i, 4);
//	    Delay_ms(100);
//	}
	MAX7219_DisplayNumbers(SPI1, MAX7219_REG_DIGIT0, data_mm, 4);
 800261a:	4b0a      	ldr	r3, [pc, #40]	@ (8002644 <main+0x80>)
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	461a      	mov	r2, r3
 8002620:	2304      	movs	r3, #4
 8002622:	2101      	movs	r1, #1
 8002624:	4804      	ldr	r0, [pc, #16]	@ (8002638 <main+0x74>)
 8002626:	f7ff ff2b 	bl	8002480 <MAX7219_DisplayNumbers>
//	//MAX7219_StopSignal(SPI1);
//
//	//USART_Receive(&hUASRT, data, 4);
	Delay_ms(1000);
 800262a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800262e:	f7fe fbf7 	bl	8000e20 <Delay_ms>
	data_mm = SR05_ReadData(&hUASRT);
 8002632:	bf00      	nop
 8002634:	e7ea      	b.n	800260c <main+0x48>
 8002636:	bf00      	nop
 8002638:	40013000 	.word	0x40013000
 800263c:	40004400 	.word	0x40004400
 8002640:	20000204 	.word	0x20000204
 8002644:	2000022c 	.word	0x2000022c

08002648 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return 1;
 800264c:	2301      	movs	r3, #1
}
 800264e:	4618      	mov	r0, r3
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <_kill>:

int _kill(int pid, int sig)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002662:	f001 f8bd 	bl	80037e0 <__errno>
 8002666:	4603      	mov	r3, r0
 8002668:	2216      	movs	r2, #22
 800266a:	601a      	str	r2, [r3, #0]
  return -1;
 800266c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002670:	4618      	mov	r0, r3
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <_exit>:

void _exit (int status)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002680:	f04f 31ff 	mov.w	r1, #4294967295
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff ffe7 	bl	8002658 <_kill>
  while (1) {}    /* Make sure we hang here */
 800268a:	bf00      	nop
 800268c:	e7fd      	b.n	800268a <_exit+0x12>

0800268e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b086      	sub	sp, #24
 8002692:	af00      	add	r7, sp, #0
 8002694:	60f8      	str	r0, [r7, #12]
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
 800269e:	e00a      	b.n	80026b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026a0:	f3af 8000 	nop.w
 80026a4:	4601      	mov	r1, r0
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	60ba      	str	r2, [r7, #8]
 80026ac:	b2ca      	uxtb	r2, r1
 80026ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	3301      	adds	r3, #1
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	dbf0      	blt.n	80026a0 <_read+0x12>
  }

  return len;
 80026be:	687b      	ldr	r3, [r7, #4]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	e009      	b.n	80026ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	60ba      	str	r2, [r7, #8]
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	3301      	adds	r3, #1
 80026ec:	617b      	str	r3, [r7, #20]
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	dbf1      	blt.n	80026da <_write+0x12>
  }
  return len;
 80026f6:	687b      	ldr	r3, [r7, #4]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <_close>:

int _close(int file)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002708:	f04f 33ff 	mov.w	r3, #4294967295
}
 800270c:	4618      	mov	r0, r3
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002728:	605a      	str	r2, [r3, #4]
  return 0;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <_isatty>:

int _isatty(int file)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002740:	2301      	movs	r3, #1
}
 8002742:	4618      	mov	r0, r3
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800274e:	b480      	push	{r7}
 8002750:	b085      	sub	sp, #20
 8002752:	af00      	add	r7, sp, #0
 8002754:	60f8      	str	r0, [r7, #12]
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002770:	4a14      	ldr	r2, [pc, #80]	@ (80027c4 <_sbrk+0x5c>)
 8002772:	4b15      	ldr	r3, [pc, #84]	@ (80027c8 <_sbrk+0x60>)
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800277c:	4b13      	ldr	r3, [pc, #76]	@ (80027cc <_sbrk+0x64>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d102      	bne.n	800278a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002784:	4b11      	ldr	r3, [pc, #68]	@ (80027cc <_sbrk+0x64>)
 8002786:	4a12      	ldr	r2, [pc, #72]	@ (80027d0 <_sbrk+0x68>)
 8002788:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800278a:	4b10      	ldr	r3, [pc, #64]	@ (80027cc <_sbrk+0x64>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4413      	add	r3, r2
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	429a      	cmp	r2, r3
 8002796:	d207      	bcs.n	80027a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002798:	f001 f822 	bl	80037e0 <__errno>
 800279c:	4603      	mov	r3, r0
 800279e:	220c      	movs	r2, #12
 80027a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027a2:	f04f 33ff 	mov.w	r3, #4294967295
 80027a6:	e009      	b.n	80027bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027a8:	4b08      	ldr	r3, [pc, #32]	@ (80027cc <_sbrk+0x64>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ae:	4b07      	ldr	r3, [pc, #28]	@ (80027cc <_sbrk+0x64>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4413      	add	r3, r2
 80027b6:	4a05      	ldr	r2, [pc, #20]	@ (80027cc <_sbrk+0x64>)
 80027b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027ba:	68fb      	ldr	r3, [r7, #12]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20020000 	.word	0x20020000
 80027c8:	00000400 	.word	0x00000400
 80027cc:	20000230 	.word	0x20000230
 80027d0:	20000380 	.word	0x20000380

080027d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027d4:	480d      	ldr	r0, [pc, #52]	@ (800280c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80027d8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027dc:	480c      	ldr	r0, [pc, #48]	@ (8002810 <LoopForever+0x6>)
  ldr r1, =_edata
 80027de:	490d      	ldr	r1, [pc, #52]	@ (8002814 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002818 <LoopForever+0xe>)
  movs r3, #0
 80027e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027e4:	e002      	b.n	80027ec <LoopCopyDataInit>

080027e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ea:	3304      	adds	r3, #4

080027ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027f0:	d3f9      	bcc.n	80027e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027f2:	4a0a      	ldr	r2, [pc, #40]	@ (800281c <LoopForever+0x12>)
  ldr r4, =_ebss
 80027f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002820 <LoopForever+0x16>)
  movs r3, #0
 80027f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027f8:	e001      	b.n	80027fe <LoopFillZerobss>

080027fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027fc:	3204      	adds	r2, #4

080027fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002800:	d3fb      	bcc.n	80027fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002802:	f000 fff3 	bl	80037ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002806:	f7ff fedd 	bl	80025c4 <main>

0800280a <LoopForever>:

LoopForever:
  b LoopForever
 800280a:	e7fe      	b.n	800280a <LoopForever>
  ldr   r0, =_estack
 800280c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002814:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002818:	08007344 	.word	0x08007344
  ldr r2, =_sbss
 800281c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002820:	20000380 	.word	0x20000380

08002824 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002824:	e7fe      	b.n	8002824 <ADC_IRQHandler>

08002826 <__cvt>:
 8002826:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800282a:	ec57 6b10 	vmov	r6, r7, d0
 800282e:	2f00      	cmp	r7, #0
 8002830:	460c      	mov	r4, r1
 8002832:	4619      	mov	r1, r3
 8002834:	463b      	mov	r3, r7
 8002836:	bfbb      	ittet	lt
 8002838:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800283c:	461f      	movlt	r7, r3
 800283e:	2300      	movge	r3, #0
 8002840:	232d      	movlt	r3, #45	@ 0x2d
 8002842:	700b      	strb	r3, [r1, #0]
 8002844:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002846:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800284a:	4691      	mov	r9, r2
 800284c:	f023 0820 	bic.w	r8, r3, #32
 8002850:	bfbc      	itt	lt
 8002852:	4632      	movlt	r2, r6
 8002854:	4616      	movlt	r6, r2
 8002856:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800285a:	d005      	beq.n	8002868 <__cvt+0x42>
 800285c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002860:	d100      	bne.n	8002864 <__cvt+0x3e>
 8002862:	3401      	adds	r4, #1
 8002864:	2102      	movs	r1, #2
 8002866:	e000      	b.n	800286a <__cvt+0x44>
 8002868:	2103      	movs	r1, #3
 800286a:	ab03      	add	r3, sp, #12
 800286c:	9301      	str	r3, [sp, #4]
 800286e:	ab02      	add	r3, sp, #8
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	ec47 6b10 	vmov	d0, r6, r7
 8002876:	4653      	mov	r3, sl
 8002878:	4622      	mov	r2, r4
 800287a:	f001 f86d 	bl	8003958 <_dtoa_r>
 800287e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002882:	4605      	mov	r5, r0
 8002884:	d119      	bne.n	80028ba <__cvt+0x94>
 8002886:	f019 0f01 	tst.w	r9, #1
 800288a:	d00e      	beq.n	80028aa <__cvt+0x84>
 800288c:	eb00 0904 	add.w	r9, r0, r4
 8002890:	2200      	movs	r2, #0
 8002892:	2300      	movs	r3, #0
 8002894:	4630      	mov	r0, r6
 8002896:	4639      	mov	r1, r7
 8002898:	f7fe f916 	bl	8000ac8 <__aeabi_dcmpeq>
 800289c:	b108      	cbz	r0, 80028a2 <__cvt+0x7c>
 800289e:	f8cd 900c 	str.w	r9, [sp, #12]
 80028a2:	2230      	movs	r2, #48	@ 0x30
 80028a4:	9b03      	ldr	r3, [sp, #12]
 80028a6:	454b      	cmp	r3, r9
 80028a8:	d31e      	bcc.n	80028e8 <__cvt+0xc2>
 80028aa:	9b03      	ldr	r3, [sp, #12]
 80028ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80028ae:	1b5b      	subs	r3, r3, r5
 80028b0:	4628      	mov	r0, r5
 80028b2:	6013      	str	r3, [r2, #0]
 80028b4:	b004      	add	sp, #16
 80028b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028ba:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80028be:	eb00 0904 	add.w	r9, r0, r4
 80028c2:	d1e5      	bne.n	8002890 <__cvt+0x6a>
 80028c4:	7803      	ldrb	r3, [r0, #0]
 80028c6:	2b30      	cmp	r3, #48	@ 0x30
 80028c8:	d10a      	bne.n	80028e0 <__cvt+0xba>
 80028ca:	2200      	movs	r2, #0
 80028cc:	2300      	movs	r3, #0
 80028ce:	4630      	mov	r0, r6
 80028d0:	4639      	mov	r1, r7
 80028d2:	f7fe f8f9 	bl	8000ac8 <__aeabi_dcmpeq>
 80028d6:	b918      	cbnz	r0, 80028e0 <__cvt+0xba>
 80028d8:	f1c4 0401 	rsb	r4, r4, #1
 80028dc:	f8ca 4000 	str.w	r4, [sl]
 80028e0:	f8da 3000 	ldr.w	r3, [sl]
 80028e4:	4499      	add	r9, r3
 80028e6:	e7d3      	b.n	8002890 <__cvt+0x6a>
 80028e8:	1c59      	adds	r1, r3, #1
 80028ea:	9103      	str	r1, [sp, #12]
 80028ec:	701a      	strb	r2, [r3, #0]
 80028ee:	e7d9      	b.n	80028a4 <__cvt+0x7e>

080028f0 <__exponent>:
 80028f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028f2:	2900      	cmp	r1, #0
 80028f4:	bfba      	itte	lt
 80028f6:	4249      	neglt	r1, r1
 80028f8:	232d      	movlt	r3, #45	@ 0x2d
 80028fa:	232b      	movge	r3, #43	@ 0x2b
 80028fc:	2909      	cmp	r1, #9
 80028fe:	7002      	strb	r2, [r0, #0]
 8002900:	7043      	strb	r3, [r0, #1]
 8002902:	dd29      	ble.n	8002958 <__exponent+0x68>
 8002904:	f10d 0307 	add.w	r3, sp, #7
 8002908:	461d      	mov	r5, r3
 800290a:	270a      	movs	r7, #10
 800290c:	461a      	mov	r2, r3
 800290e:	fbb1 f6f7 	udiv	r6, r1, r7
 8002912:	fb07 1416 	mls	r4, r7, r6, r1
 8002916:	3430      	adds	r4, #48	@ 0x30
 8002918:	f802 4c01 	strb.w	r4, [r2, #-1]
 800291c:	460c      	mov	r4, r1
 800291e:	2c63      	cmp	r4, #99	@ 0x63
 8002920:	f103 33ff 	add.w	r3, r3, #4294967295
 8002924:	4631      	mov	r1, r6
 8002926:	dcf1      	bgt.n	800290c <__exponent+0x1c>
 8002928:	3130      	adds	r1, #48	@ 0x30
 800292a:	1e94      	subs	r4, r2, #2
 800292c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002930:	1c41      	adds	r1, r0, #1
 8002932:	4623      	mov	r3, r4
 8002934:	42ab      	cmp	r3, r5
 8002936:	d30a      	bcc.n	800294e <__exponent+0x5e>
 8002938:	f10d 0309 	add.w	r3, sp, #9
 800293c:	1a9b      	subs	r3, r3, r2
 800293e:	42ac      	cmp	r4, r5
 8002940:	bf88      	it	hi
 8002942:	2300      	movhi	r3, #0
 8002944:	3302      	adds	r3, #2
 8002946:	4403      	add	r3, r0
 8002948:	1a18      	subs	r0, r3, r0
 800294a:	b003      	add	sp, #12
 800294c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800294e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002952:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002956:	e7ed      	b.n	8002934 <__exponent+0x44>
 8002958:	2330      	movs	r3, #48	@ 0x30
 800295a:	3130      	adds	r1, #48	@ 0x30
 800295c:	7083      	strb	r3, [r0, #2]
 800295e:	70c1      	strb	r1, [r0, #3]
 8002960:	1d03      	adds	r3, r0, #4
 8002962:	e7f1      	b.n	8002948 <__exponent+0x58>

08002964 <_printf_float>:
 8002964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002968:	b08d      	sub	sp, #52	@ 0x34
 800296a:	460c      	mov	r4, r1
 800296c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8002970:	4616      	mov	r6, r2
 8002972:	461f      	mov	r7, r3
 8002974:	4605      	mov	r5, r0
 8002976:	f000 fee9 	bl	800374c <_localeconv_r>
 800297a:	6803      	ldr	r3, [r0, #0]
 800297c:	9304      	str	r3, [sp, #16]
 800297e:	4618      	mov	r0, r3
 8002980:	f7fd fc76 	bl	8000270 <strlen>
 8002984:	2300      	movs	r3, #0
 8002986:	930a      	str	r3, [sp, #40]	@ 0x28
 8002988:	f8d8 3000 	ldr.w	r3, [r8]
 800298c:	9005      	str	r0, [sp, #20]
 800298e:	3307      	adds	r3, #7
 8002990:	f023 0307 	bic.w	r3, r3, #7
 8002994:	f103 0208 	add.w	r2, r3, #8
 8002998:	f894 a018 	ldrb.w	sl, [r4, #24]
 800299c:	f8d4 b000 	ldr.w	fp, [r4]
 80029a0:	f8c8 2000 	str.w	r2, [r8]
 80029a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80029a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80029ac:	9307      	str	r3, [sp, #28]
 80029ae:	f8cd 8018 	str.w	r8, [sp, #24]
 80029b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80029b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80029ba:	4b9c      	ldr	r3, [pc, #624]	@ (8002c2c <_printf_float+0x2c8>)
 80029bc:	f04f 32ff 	mov.w	r2, #4294967295
 80029c0:	f7fe f8b4 	bl	8000b2c <__aeabi_dcmpun>
 80029c4:	bb70      	cbnz	r0, 8002a24 <_printf_float+0xc0>
 80029c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80029ca:	4b98      	ldr	r3, [pc, #608]	@ (8002c2c <_printf_float+0x2c8>)
 80029cc:	f04f 32ff 	mov.w	r2, #4294967295
 80029d0:	f7fe f88e 	bl	8000af0 <__aeabi_dcmple>
 80029d4:	bb30      	cbnz	r0, 8002a24 <_printf_float+0xc0>
 80029d6:	2200      	movs	r2, #0
 80029d8:	2300      	movs	r3, #0
 80029da:	4640      	mov	r0, r8
 80029dc:	4649      	mov	r1, r9
 80029de:	f7fe f87d 	bl	8000adc <__aeabi_dcmplt>
 80029e2:	b110      	cbz	r0, 80029ea <_printf_float+0x86>
 80029e4:	232d      	movs	r3, #45	@ 0x2d
 80029e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80029ea:	4a91      	ldr	r2, [pc, #580]	@ (8002c30 <_printf_float+0x2cc>)
 80029ec:	4b91      	ldr	r3, [pc, #580]	@ (8002c34 <_printf_float+0x2d0>)
 80029ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80029f2:	bf8c      	ite	hi
 80029f4:	4690      	movhi	r8, r2
 80029f6:	4698      	movls	r8, r3
 80029f8:	2303      	movs	r3, #3
 80029fa:	6123      	str	r3, [r4, #16]
 80029fc:	f02b 0304 	bic.w	r3, fp, #4
 8002a00:	6023      	str	r3, [r4, #0]
 8002a02:	f04f 0900 	mov.w	r9, #0
 8002a06:	9700      	str	r7, [sp, #0]
 8002a08:	4633      	mov	r3, r6
 8002a0a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8002a0c:	4621      	mov	r1, r4
 8002a0e:	4628      	mov	r0, r5
 8002a10:	f000 f9d2 	bl	8002db8 <_printf_common>
 8002a14:	3001      	adds	r0, #1
 8002a16:	f040 808d 	bne.w	8002b34 <_printf_float+0x1d0>
 8002a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a1e:	b00d      	add	sp, #52	@ 0x34
 8002a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a24:	4642      	mov	r2, r8
 8002a26:	464b      	mov	r3, r9
 8002a28:	4640      	mov	r0, r8
 8002a2a:	4649      	mov	r1, r9
 8002a2c:	f7fe f87e 	bl	8000b2c <__aeabi_dcmpun>
 8002a30:	b140      	cbz	r0, 8002a44 <_printf_float+0xe0>
 8002a32:	464b      	mov	r3, r9
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	bfbc      	itt	lt
 8002a38:	232d      	movlt	r3, #45	@ 0x2d
 8002a3a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002a3e:	4a7e      	ldr	r2, [pc, #504]	@ (8002c38 <_printf_float+0x2d4>)
 8002a40:	4b7e      	ldr	r3, [pc, #504]	@ (8002c3c <_printf_float+0x2d8>)
 8002a42:	e7d4      	b.n	80029ee <_printf_float+0x8a>
 8002a44:	6863      	ldr	r3, [r4, #4]
 8002a46:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8002a4a:	9206      	str	r2, [sp, #24]
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	d13b      	bne.n	8002ac8 <_printf_float+0x164>
 8002a50:	2306      	movs	r3, #6
 8002a52:	6063      	str	r3, [r4, #4]
 8002a54:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8002a58:	2300      	movs	r3, #0
 8002a5a:	6022      	str	r2, [r4, #0]
 8002a5c:	9303      	str	r3, [sp, #12]
 8002a5e:	ab0a      	add	r3, sp, #40	@ 0x28
 8002a60:	e9cd a301 	strd	sl, r3, [sp, #4]
 8002a64:	ab09      	add	r3, sp, #36	@ 0x24
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	6861      	ldr	r1, [r4, #4]
 8002a6a:	ec49 8b10 	vmov	d0, r8, r9
 8002a6e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8002a72:	4628      	mov	r0, r5
 8002a74:	f7ff fed7 	bl	8002826 <__cvt>
 8002a78:	9b06      	ldr	r3, [sp, #24]
 8002a7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002a7c:	2b47      	cmp	r3, #71	@ 0x47
 8002a7e:	4680      	mov	r8, r0
 8002a80:	d129      	bne.n	8002ad6 <_printf_float+0x172>
 8002a82:	1cc8      	adds	r0, r1, #3
 8002a84:	db02      	blt.n	8002a8c <_printf_float+0x128>
 8002a86:	6863      	ldr	r3, [r4, #4]
 8002a88:	4299      	cmp	r1, r3
 8002a8a:	dd41      	ble.n	8002b10 <_printf_float+0x1ac>
 8002a8c:	f1aa 0a02 	sub.w	sl, sl, #2
 8002a90:	fa5f fa8a 	uxtb.w	sl, sl
 8002a94:	3901      	subs	r1, #1
 8002a96:	4652      	mov	r2, sl
 8002a98:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002a9c:	9109      	str	r1, [sp, #36]	@ 0x24
 8002a9e:	f7ff ff27 	bl	80028f0 <__exponent>
 8002aa2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002aa4:	1813      	adds	r3, r2, r0
 8002aa6:	2a01      	cmp	r2, #1
 8002aa8:	4681      	mov	r9, r0
 8002aaa:	6123      	str	r3, [r4, #16]
 8002aac:	dc02      	bgt.n	8002ab4 <_printf_float+0x150>
 8002aae:	6822      	ldr	r2, [r4, #0]
 8002ab0:	07d2      	lsls	r2, r2, #31
 8002ab2:	d501      	bpl.n	8002ab8 <_printf_float+0x154>
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	6123      	str	r3, [r4, #16]
 8002ab8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0a2      	beq.n	8002a06 <_printf_float+0xa2>
 8002ac0:	232d      	movs	r3, #45	@ 0x2d
 8002ac2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002ac6:	e79e      	b.n	8002a06 <_printf_float+0xa2>
 8002ac8:	9a06      	ldr	r2, [sp, #24]
 8002aca:	2a47      	cmp	r2, #71	@ 0x47
 8002acc:	d1c2      	bne.n	8002a54 <_printf_float+0xf0>
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1c0      	bne.n	8002a54 <_printf_float+0xf0>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e7bd      	b.n	8002a52 <_printf_float+0xee>
 8002ad6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002ada:	d9db      	bls.n	8002a94 <_printf_float+0x130>
 8002adc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002ae0:	d118      	bne.n	8002b14 <_printf_float+0x1b0>
 8002ae2:	2900      	cmp	r1, #0
 8002ae4:	6863      	ldr	r3, [r4, #4]
 8002ae6:	dd0b      	ble.n	8002b00 <_printf_float+0x19c>
 8002ae8:	6121      	str	r1, [r4, #16]
 8002aea:	b913      	cbnz	r3, 8002af2 <_printf_float+0x18e>
 8002aec:	6822      	ldr	r2, [r4, #0]
 8002aee:	07d0      	lsls	r0, r2, #31
 8002af0:	d502      	bpl.n	8002af8 <_printf_float+0x194>
 8002af2:	3301      	adds	r3, #1
 8002af4:	440b      	add	r3, r1
 8002af6:	6123      	str	r3, [r4, #16]
 8002af8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002afa:	f04f 0900 	mov.w	r9, #0
 8002afe:	e7db      	b.n	8002ab8 <_printf_float+0x154>
 8002b00:	b913      	cbnz	r3, 8002b08 <_printf_float+0x1a4>
 8002b02:	6822      	ldr	r2, [r4, #0]
 8002b04:	07d2      	lsls	r2, r2, #31
 8002b06:	d501      	bpl.n	8002b0c <_printf_float+0x1a8>
 8002b08:	3302      	adds	r3, #2
 8002b0a:	e7f4      	b.n	8002af6 <_printf_float+0x192>
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e7f2      	b.n	8002af6 <_printf_float+0x192>
 8002b10:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8002b14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002b16:	4299      	cmp	r1, r3
 8002b18:	db05      	blt.n	8002b26 <_printf_float+0x1c2>
 8002b1a:	6823      	ldr	r3, [r4, #0]
 8002b1c:	6121      	str	r1, [r4, #16]
 8002b1e:	07d8      	lsls	r0, r3, #31
 8002b20:	d5ea      	bpl.n	8002af8 <_printf_float+0x194>
 8002b22:	1c4b      	adds	r3, r1, #1
 8002b24:	e7e7      	b.n	8002af6 <_printf_float+0x192>
 8002b26:	2900      	cmp	r1, #0
 8002b28:	bfd4      	ite	le
 8002b2a:	f1c1 0202 	rsble	r2, r1, #2
 8002b2e:	2201      	movgt	r2, #1
 8002b30:	4413      	add	r3, r2
 8002b32:	e7e0      	b.n	8002af6 <_printf_float+0x192>
 8002b34:	6823      	ldr	r3, [r4, #0]
 8002b36:	055a      	lsls	r2, r3, #21
 8002b38:	d407      	bmi.n	8002b4a <_printf_float+0x1e6>
 8002b3a:	6923      	ldr	r3, [r4, #16]
 8002b3c:	4642      	mov	r2, r8
 8002b3e:	4631      	mov	r1, r6
 8002b40:	4628      	mov	r0, r5
 8002b42:	47b8      	blx	r7
 8002b44:	3001      	adds	r0, #1
 8002b46:	d12b      	bne.n	8002ba0 <_printf_float+0x23c>
 8002b48:	e767      	b.n	8002a1a <_printf_float+0xb6>
 8002b4a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002b4e:	f240 80dd 	bls.w	8002d0c <_printf_float+0x3a8>
 8002b52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002b56:	2200      	movs	r2, #0
 8002b58:	2300      	movs	r3, #0
 8002b5a:	f7fd ffb5 	bl	8000ac8 <__aeabi_dcmpeq>
 8002b5e:	2800      	cmp	r0, #0
 8002b60:	d033      	beq.n	8002bca <_printf_float+0x266>
 8002b62:	4a37      	ldr	r2, [pc, #220]	@ (8002c40 <_printf_float+0x2dc>)
 8002b64:	2301      	movs	r3, #1
 8002b66:	4631      	mov	r1, r6
 8002b68:	4628      	mov	r0, r5
 8002b6a:	47b8      	blx	r7
 8002b6c:	3001      	adds	r0, #1
 8002b6e:	f43f af54 	beq.w	8002a1a <_printf_float+0xb6>
 8002b72:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8002b76:	4543      	cmp	r3, r8
 8002b78:	db02      	blt.n	8002b80 <_printf_float+0x21c>
 8002b7a:	6823      	ldr	r3, [r4, #0]
 8002b7c:	07d8      	lsls	r0, r3, #31
 8002b7e:	d50f      	bpl.n	8002ba0 <_printf_float+0x23c>
 8002b80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002b84:	4631      	mov	r1, r6
 8002b86:	4628      	mov	r0, r5
 8002b88:	47b8      	blx	r7
 8002b8a:	3001      	adds	r0, #1
 8002b8c:	f43f af45 	beq.w	8002a1a <_printf_float+0xb6>
 8002b90:	f04f 0900 	mov.w	r9, #0
 8002b94:	f108 38ff 	add.w	r8, r8, #4294967295
 8002b98:	f104 0a1a 	add.w	sl, r4, #26
 8002b9c:	45c8      	cmp	r8, r9
 8002b9e:	dc09      	bgt.n	8002bb4 <_printf_float+0x250>
 8002ba0:	6823      	ldr	r3, [r4, #0]
 8002ba2:	079b      	lsls	r3, r3, #30
 8002ba4:	f100 8103 	bmi.w	8002dae <_printf_float+0x44a>
 8002ba8:	68e0      	ldr	r0, [r4, #12]
 8002baa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002bac:	4298      	cmp	r0, r3
 8002bae:	bfb8      	it	lt
 8002bb0:	4618      	movlt	r0, r3
 8002bb2:	e734      	b.n	8002a1e <_printf_float+0xba>
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	4652      	mov	r2, sl
 8002bb8:	4631      	mov	r1, r6
 8002bba:	4628      	mov	r0, r5
 8002bbc:	47b8      	blx	r7
 8002bbe:	3001      	adds	r0, #1
 8002bc0:	f43f af2b 	beq.w	8002a1a <_printf_float+0xb6>
 8002bc4:	f109 0901 	add.w	r9, r9, #1
 8002bc8:	e7e8      	b.n	8002b9c <_printf_float+0x238>
 8002bca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	dc39      	bgt.n	8002c44 <_printf_float+0x2e0>
 8002bd0:	4a1b      	ldr	r2, [pc, #108]	@ (8002c40 <_printf_float+0x2dc>)
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	4631      	mov	r1, r6
 8002bd6:	4628      	mov	r0, r5
 8002bd8:	47b8      	blx	r7
 8002bda:	3001      	adds	r0, #1
 8002bdc:	f43f af1d 	beq.w	8002a1a <_printf_float+0xb6>
 8002be0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8002be4:	ea59 0303 	orrs.w	r3, r9, r3
 8002be8:	d102      	bne.n	8002bf0 <_printf_float+0x28c>
 8002bea:	6823      	ldr	r3, [r4, #0]
 8002bec:	07d9      	lsls	r1, r3, #31
 8002bee:	d5d7      	bpl.n	8002ba0 <_printf_float+0x23c>
 8002bf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002bf4:	4631      	mov	r1, r6
 8002bf6:	4628      	mov	r0, r5
 8002bf8:	47b8      	blx	r7
 8002bfa:	3001      	adds	r0, #1
 8002bfc:	f43f af0d 	beq.w	8002a1a <_printf_float+0xb6>
 8002c00:	f04f 0a00 	mov.w	sl, #0
 8002c04:	f104 0b1a 	add.w	fp, r4, #26
 8002c08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002c0a:	425b      	negs	r3, r3
 8002c0c:	4553      	cmp	r3, sl
 8002c0e:	dc01      	bgt.n	8002c14 <_printf_float+0x2b0>
 8002c10:	464b      	mov	r3, r9
 8002c12:	e793      	b.n	8002b3c <_printf_float+0x1d8>
 8002c14:	2301      	movs	r3, #1
 8002c16:	465a      	mov	r2, fp
 8002c18:	4631      	mov	r1, r6
 8002c1a:	4628      	mov	r0, r5
 8002c1c:	47b8      	blx	r7
 8002c1e:	3001      	adds	r0, #1
 8002c20:	f43f aefb 	beq.w	8002a1a <_printf_float+0xb6>
 8002c24:	f10a 0a01 	add.w	sl, sl, #1
 8002c28:	e7ee      	b.n	8002c08 <_printf_float+0x2a4>
 8002c2a:	bf00      	nop
 8002c2c:	7fefffff 	.word	0x7fefffff
 8002c30:	08006f0c 	.word	0x08006f0c
 8002c34:	08006f08 	.word	0x08006f08
 8002c38:	08006f14 	.word	0x08006f14
 8002c3c:	08006f10 	.word	0x08006f10
 8002c40:	08006f18 	.word	0x08006f18
 8002c44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002c46:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8002c4a:	4553      	cmp	r3, sl
 8002c4c:	bfa8      	it	ge
 8002c4e:	4653      	movge	r3, sl
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	4699      	mov	r9, r3
 8002c54:	dc36      	bgt.n	8002cc4 <_printf_float+0x360>
 8002c56:	f04f 0b00 	mov.w	fp, #0
 8002c5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002c5e:	f104 021a 	add.w	r2, r4, #26
 8002c62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002c64:	9306      	str	r3, [sp, #24]
 8002c66:	eba3 0309 	sub.w	r3, r3, r9
 8002c6a:	455b      	cmp	r3, fp
 8002c6c:	dc31      	bgt.n	8002cd2 <_printf_float+0x36e>
 8002c6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002c70:	459a      	cmp	sl, r3
 8002c72:	dc3a      	bgt.n	8002cea <_printf_float+0x386>
 8002c74:	6823      	ldr	r3, [r4, #0]
 8002c76:	07da      	lsls	r2, r3, #31
 8002c78:	d437      	bmi.n	8002cea <_printf_float+0x386>
 8002c7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002c7c:	ebaa 0903 	sub.w	r9, sl, r3
 8002c80:	9b06      	ldr	r3, [sp, #24]
 8002c82:	ebaa 0303 	sub.w	r3, sl, r3
 8002c86:	4599      	cmp	r9, r3
 8002c88:	bfa8      	it	ge
 8002c8a:	4699      	movge	r9, r3
 8002c8c:	f1b9 0f00 	cmp.w	r9, #0
 8002c90:	dc33      	bgt.n	8002cfa <_printf_float+0x396>
 8002c92:	f04f 0800 	mov.w	r8, #0
 8002c96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002c9a:	f104 0b1a 	add.w	fp, r4, #26
 8002c9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002ca0:	ebaa 0303 	sub.w	r3, sl, r3
 8002ca4:	eba3 0309 	sub.w	r3, r3, r9
 8002ca8:	4543      	cmp	r3, r8
 8002caa:	f77f af79 	ble.w	8002ba0 <_printf_float+0x23c>
 8002cae:	2301      	movs	r3, #1
 8002cb0:	465a      	mov	r2, fp
 8002cb2:	4631      	mov	r1, r6
 8002cb4:	4628      	mov	r0, r5
 8002cb6:	47b8      	blx	r7
 8002cb8:	3001      	adds	r0, #1
 8002cba:	f43f aeae 	beq.w	8002a1a <_printf_float+0xb6>
 8002cbe:	f108 0801 	add.w	r8, r8, #1
 8002cc2:	e7ec      	b.n	8002c9e <_printf_float+0x33a>
 8002cc4:	4642      	mov	r2, r8
 8002cc6:	4631      	mov	r1, r6
 8002cc8:	4628      	mov	r0, r5
 8002cca:	47b8      	blx	r7
 8002ccc:	3001      	adds	r0, #1
 8002cce:	d1c2      	bne.n	8002c56 <_printf_float+0x2f2>
 8002cd0:	e6a3      	b.n	8002a1a <_printf_float+0xb6>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	4631      	mov	r1, r6
 8002cd6:	4628      	mov	r0, r5
 8002cd8:	9206      	str	r2, [sp, #24]
 8002cda:	47b8      	blx	r7
 8002cdc:	3001      	adds	r0, #1
 8002cde:	f43f ae9c 	beq.w	8002a1a <_printf_float+0xb6>
 8002ce2:	9a06      	ldr	r2, [sp, #24]
 8002ce4:	f10b 0b01 	add.w	fp, fp, #1
 8002ce8:	e7bb      	b.n	8002c62 <_printf_float+0x2fe>
 8002cea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002cee:	4631      	mov	r1, r6
 8002cf0:	4628      	mov	r0, r5
 8002cf2:	47b8      	blx	r7
 8002cf4:	3001      	adds	r0, #1
 8002cf6:	d1c0      	bne.n	8002c7a <_printf_float+0x316>
 8002cf8:	e68f      	b.n	8002a1a <_printf_float+0xb6>
 8002cfa:	9a06      	ldr	r2, [sp, #24]
 8002cfc:	464b      	mov	r3, r9
 8002cfe:	4442      	add	r2, r8
 8002d00:	4631      	mov	r1, r6
 8002d02:	4628      	mov	r0, r5
 8002d04:	47b8      	blx	r7
 8002d06:	3001      	adds	r0, #1
 8002d08:	d1c3      	bne.n	8002c92 <_printf_float+0x32e>
 8002d0a:	e686      	b.n	8002a1a <_printf_float+0xb6>
 8002d0c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8002d10:	f1ba 0f01 	cmp.w	sl, #1
 8002d14:	dc01      	bgt.n	8002d1a <_printf_float+0x3b6>
 8002d16:	07db      	lsls	r3, r3, #31
 8002d18:	d536      	bpl.n	8002d88 <_printf_float+0x424>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	4642      	mov	r2, r8
 8002d1e:	4631      	mov	r1, r6
 8002d20:	4628      	mov	r0, r5
 8002d22:	47b8      	blx	r7
 8002d24:	3001      	adds	r0, #1
 8002d26:	f43f ae78 	beq.w	8002a1a <_printf_float+0xb6>
 8002d2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002d2e:	4631      	mov	r1, r6
 8002d30:	4628      	mov	r0, r5
 8002d32:	47b8      	blx	r7
 8002d34:	3001      	adds	r0, #1
 8002d36:	f43f ae70 	beq.w	8002a1a <_printf_float+0xb6>
 8002d3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2300      	movs	r3, #0
 8002d42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002d46:	f7fd febf 	bl	8000ac8 <__aeabi_dcmpeq>
 8002d4a:	b9c0      	cbnz	r0, 8002d7e <_printf_float+0x41a>
 8002d4c:	4653      	mov	r3, sl
 8002d4e:	f108 0201 	add.w	r2, r8, #1
 8002d52:	4631      	mov	r1, r6
 8002d54:	4628      	mov	r0, r5
 8002d56:	47b8      	blx	r7
 8002d58:	3001      	adds	r0, #1
 8002d5a:	d10c      	bne.n	8002d76 <_printf_float+0x412>
 8002d5c:	e65d      	b.n	8002a1a <_printf_float+0xb6>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	465a      	mov	r2, fp
 8002d62:	4631      	mov	r1, r6
 8002d64:	4628      	mov	r0, r5
 8002d66:	47b8      	blx	r7
 8002d68:	3001      	adds	r0, #1
 8002d6a:	f43f ae56 	beq.w	8002a1a <_printf_float+0xb6>
 8002d6e:	f108 0801 	add.w	r8, r8, #1
 8002d72:	45d0      	cmp	r8, sl
 8002d74:	dbf3      	blt.n	8002d5e <_printf_float+0x3fa>
 8002d76:	464b      	mov	r3, r9
 8002d78:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8002d7c:	e6df      	b.n	8002b3e <_printf_float+0x1da>
 8002d7e:	f04f 0800 	mov.w	r8, #0
 8002d82:	f104 0b1a 	add.w	fp, r4, #26
 8002d86:	e7f4      	b.n	8002d72 <_printf_float+0x40e>
 8002d88:	2301      	movs	r3, #1
 8002d8a:	4642      	mov	r2, r8
 8002d8c:	e7e1      	b.n	8002d52 <_printf_float+0x3ee>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	464a      	mov	r2, r9
 8002d92:	4631      	mov	r1, r6
 8002d94:	4628      	mov	r0, r5
 8002d96:	47b8      	blx	r7
 8002d98:	3001      	adds	r0, #1
 8002d9a:	f43f ae3e 	beq.w	8002a1a <_printf_float+0xb6>
 8002d9e:	f108 0801 	add.w	r8, r8, #1
 8002da2:	68e3      	ldr	r3, [r4, #12]
 8002da4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8002da6:	1a5b      	subs	r3, r3, r1
 8002da8:	4543      	cmp	r3, r8
 8002daa:	dcf0      	bgt.n	8002d8e <_printf_float+0x42a>
 8002dac:	e6fc      	b.n	8002ba8 <_printf_float+0x244>
 8002dae:	f04f 0800 	mov.w	r8, #0
 8002db2:	f104 0919 	add.w	r9, r4, #25
 8002db6:	e7f4      	b.n	8002da2 <_printf_float+0x43e>

08002db8 <_printf_common>:
 8002db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dbc:	4616      	mov	r6, r2
 8002dbe:	4698      	mov	r8, r3
 8002dc0:	688a      	ldr	r2, [r1, #8]
 8002dc2:	690b      	ldr	r3, [r1, #16]
 8002dc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	bfb8      	it	lt
 8002dcc:	4613      	movlt	r3, r2
 8002dce:	6033      	str	r3, [r6, #0]
 8002dd0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002dd4:	4607      	mov	r7, r0
 8002dd6:	460c      	mov	r4, r1
 8002dd8:	b10a      	cbz	r2, 8002dde <_printf_common+0x26>
 8002dda:	3301      	adds	r3, #1
 8002ddc:	6033      	str	r3, [r6, #0]
 8002dde:	6823      	ldr	r3, [r4, #0]
 8002de0:	0699      	lsls	r1, r3, #26
 8002de2:	bf42      	ittt	mi
 8002de4:	6833      	ldrmi	r3, [r6, #0]
 8002de6:	3302      	addmi	r3, #2
 8002de8:	6033      	strmi	r3, [r6, #0]
 8002dea:	6825      	ldr	r5, [r4, #0]
 8002dec:	f015 0506 	ands.w	r5, r5, #6
 8002df0:	d106      	bne.n	8002e00 <_printf_common+0x48>
 8002df2:	f104 0a19 	add.w	sl, r4, #25
 8002df6:	68e3      	ldr	r3, [r4, #12]
 8002df8:	6832      	ldr	r2, [r6, #0]
 8002dfa:	1a9b      	subs	r3, r3, r2
 8002dfc:	42ab      	cmp	r3, r5
 8002dfe:	dc26      	bgt.n	8002e4e <_printf_common+0x96>
 8002e00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002e04:	6822      	ldr	r2, [r4, #0]
 8002e06:	3b00      	subs	r3, #0
 8002e08:	bf18      	it	ne
 8002e0a:	2301      	movne	r3, #1
 8002e0c:	0692      	lsls	r2, r2, #26
 8002e0e:	d42b      	bmi.n	8002e68 <_printf_common+0xb0>
 8002e10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002e14:	4641      	mov	r1, r8
 8002e16:	4638      	mov	r0, r7
 8002e18:	47c8      	blx	r9
 8002e1a:	3001      	adds	r0, #1
 8002e1c:	d01e      	beq.n	8002e5c <_printf_common+0xa4>
 8002e1e:	6823      	ldr	r3, [r4, #0]
 8002e20:	6922      	ldr	r2, [r4, #16]
 8002e22:	f003 0306 	and.w	r3, r3, #6
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	bf02      	ittt	eq
 8002e2a:	68e5      	ldreq	r5, [r4, #12]
 8002e2c:	6833      	ldreq	r3, [r6, #0]
 8002e2e:	1aed      	subeq	r5, r5, r3
 8002e30:	68a3      	ldr	r3, [r4, #8]
 8002e32:	bf0c      	ite	eq
 8002e34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e38:	2500      	movne	r5, #0
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	bfc4      	itt	gt
 8002e3e:	1a9b      	subgt	r3, r3, r2
 8002e40:	18ed      	addgt	r5, r5, r3
 8002e42:	2600      	movs	r6, #0
 8002e44:	341a      	adds	r4, #26
 8002e46:	42b5      	cmp	r5, r6
 8002e48:	d11a      	bne.n	8002e80 <_printf_common+0xc8>
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	e008      	b.n	8002e60 <_printf_common+0xa8>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	4652      	mov	r2, sl
 8002e52:	4641      	mov	r1, r8
 8002e54:	4638      	mov	r0, r7
 8002e56:	47c8      	blx	r9
 8002e58:	3001      	adds	r0, #1
 8002e5a:	d103      	bne.n	8002e64 <_printf_common+0xac>
 8002e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e64:	3501      	adds	r5, #1
 8002e66:	e7c6      	b.n	8002df6 <_printf_common+0x3e>
 8002e68:	18e1      	adds	r1, r4, r3
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	2030      	movs	r0, #48	@ 0x30
 8002e6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002e72:	4422      	add	r2, r4
 8002e74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002e78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002e7c:	3302      	adds	r3, #2
 8002e7e:	e7c7      	b.n	8002e10 <_printf_common+0x58>
 8002e80:	2301      	movs	r3, #1
 8002e82:	4622      	mov	r2, r4
 8002e84:	4641      	mov	r1, r8
 8002e86:	4638      	mov	r0, r7
 8002e88:	47c8      	blx	r9
 8002e8a:	3001      	adds	r0, #1
 8002e8c:	d0e6      	beq.n	8002e5c <_printf_common+0xa4>
 8002e8e:	3601      	adds	r6, #1
 8002e90:	e7d9      	b.n	8002e46 <_printf_common+0x8e>
	...

08002e94 <_printf_i>:
 8002e94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e98:	7e0f      	ldrb	r7, [r1, #24]
 8002e9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002e9c:	2f78      	cmp	r7, #120	@ 0x78
 8002e9e:	4691      	mov	r9, r2
 8002ea0:	4680      	mov	r8, r0
 8002ea2:	460c      	mov	r4, r1
 8002ea4:	469a      	mov	sl, r3
 8002ea6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002eaa:	d807      	bhi.n	8002ebc <_printf_i+0x28>
 8002eac:	2f62      	cmp	r7, #98	@ 0x62
 8002eae:	d80a      	bhi.n	8002ec6 <_printf_i+0x32>
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	f000 80d1 	beq.w	8003058 <_printf_i+0x1c4>
 8002eb6:	2f58      	cmp	r7, #88	@ 0x58
 8002eb8:	f000 80b8 	beq.w	800302c <_printf_i+0x198>
 8002ebc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002ec0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002ec4:	e03a      	b.n	8002f3c <_printf_i+0xa8>
 8002ec6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002eca:	2b15      	cmp	r3, #21
 8002ecc:	d8f6      	bhi.n	8002ebc <_printf_i+0x28>
 8002ece:	a101      	add	r1, pc, #4	@ (adr r1, 8002ed4 <_printf_i+0x40>)
 8002ed0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002ed4:	08002f2d 	.word	0x08002f2d
 8002ed8:	08002f41 	.word	0x08002f41
 8002edc:	08002ebd 	.word	0x08002ebd
 8002ee0:	08002ebd 	.word	0x08002ebd
 8002ee4:	08002ebd 	.word	0x08002ebd
 8002ee8:	08002ebd 	.word	0x08002ebd
 8002eec:	08002f41 	.word	0x08002f41
 8002ef0:	08002ebd 	.word	0x08002ebd
 8002ef4:	08002ebd 	.word	0x08002ebd
 8002ef8:	08002ebd 	.word	0x08002ebd
 8002efc:	08002ebd 	.word	0x08002ebd
 8002f00:	0800303f 	.word	0x0800303f
 8002f04:	08002f6b 	.word	0x08002f6b
 8002f08:	08002ff9 	.word	0x08002ff9
 8002f0c:	08002ebd 	.word	0x08002ebd
 8002f10:	08002ebd 	.word	0x08002ebd
 8002f14:	08003061 	.word	0x08003061
 8002f18:	08002ebd 	.word	0x08002ebd
 8002f1c:	08002f6b 	.word	0x08002f6b
 8002f20:	08002ebd 	.word	0x08002ebd
 8002f24:	08002ebd 	.word	0x08002ebd
 8002f28:	08003001 	.word	0x08003001
 8002f2c:	6833      	ldr	r3, [r6, #0]
 8002f2e:	1d1a      	adds	r2, r3, #4
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6032      	str	r2, [r6, #0]
 8002f34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002f38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e09c      	b.n	800307a <_printf_i+0x1e6>
 8002f40:	6833      	ldr	r3, [r6, #0]
 8002f42:	6820      	ldr	r0, [r4, #0]
 8002f44:	1d19      	adds	r1, r3, #4
 8002f46:	6031      	str	r1, [r6, #0]
 8002f48:	0606      	lsls	r6, r0, #24
 8002f4a:	d501      	bpl.n	8002f50 <_printf_i+0xbc>
 8002f4c:	681d      	ldr	r5, [r3, #0]
 8002f4e:	e003      	b.n	8002f58 <_printf_i+0xc4>
 8002f50:	0645      	lsls	r5, r0, #25
 8002f52:	d5fb      	bpl.n	8002f4c <_printf_i+0xb8>
 8002f54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002f58:	2d00      	cmp	r5, #0
 8002f5a:	da03      	bge.n	8002f64 <_printf_i+0xd0>
 8002f5c:	232d      	movs	r3, #45	@ 0x2d
 8002f5e:	426d      	negs	r5, r5
 8002f60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002f64:	4858      	ldr	r0, [pc, #352]	@ (80030c8 <_printf_i+0x234>)
 8002f66:	230a      	movs	r3, #10
 8002f68:	e011      	b.n	8002f8e <_printf_i+0xfa>
 8002f6a:	6821      	ldr	r1, [r4, #0]
 8002f6c:	6833      	ldr	r3, [r6, #0]
 8002f6e:	0608      	lsls	r0, r1, #24
 8002f70:	f853 5b04 	ldr.w	r5, [r3], #4
 8002f74:	d402      	bmi.n	8002f7c <_printf_i+0xe8>
 8002f76:	0649      	lsls	r1, r1, #25
 8002f78:	bf48      	it	mi
 8002f7a:	b2ad      	uxthmi	r5, r5
 8002f7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8002f7e:	4852      	ldr	r0, [pc, #328]	@ (80030c8 <_printf_i+0x234>)
 8002f80:	6033      	str	r3, [r6, #0]
 8002f82:	bf14      	ite	ne
 8002f84:	230a      	movne	r3, #10
 8002f86:	2308      	moveq	r3, #8
 8002f88:	2100      	movs	r1, #0
 8002f8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002f8e:	6866      	ldr	r6, [r4, #4]
 8002f90:	60a6      	str	r6, [r4, #8]
 8002f92:	2e00      	cmp	r6, #0
 8002f94:	db05      	blt.n	8002fa2 <_printf_i+0x10e>
 8002f96:	6821      	ldr	r1, [r4, #0]
 8002f98:	432e      	orrs	r6, r5
 8002f9a:	f021 0104 	bic.w	r1, r1, #4
 8002f9e:	6021      	str	r1, [r4, #0]
 8002fa0:	d04b      	beq.n	800303a <_printf_i+0x1a6>
 8002fa2:	4616      	mov	r6, r2
 8002fa4:	fbb5 f1f3 	udiv	r1, r5, r3
 8002fa8:	fb03 5711 	mls	r7, r3, r1, r5
 8002fac:	5dc7      	ldrb	r7, [r0, r7]
 8002fae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002fb2:	462f      	mov	r7, r5
 8002fb4:	42bb      	cmp	r3, r7
 8002fb6:	460d      	mov	r5, r1
 8002fb8:	d9f4      	bls.n	8002fa4 <_printf_i+0x110>
 8002fba:	2b08      	cmp	r3, #8
 8002fbc:	d10b      	bne.n	8002fd6 <_printf_i+0x142>
 8002fbe:	6823      	ldr	r3, [r4, #0]
 8002fc0:	07df      	lsls	r7, r3, #31
 8002fc2:	d508      	bpl.n	8002fd6 <_printf_i+0x142>
 8002fc4:	6923      	ldr	r3, [r4, #16]
 8002fc6:	6861      	ldr	r1, [r4, #4]
 8002fc8:	4299      	cmp	r1, r3
 8002fca:	bfde      	ittt	le
 8002fcc:	2330      	movle	r3, #48	@ 0x30
 8002fce:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002fd2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002fd6:	1b92      	subs	r2, r2, r6
 8002fd8:	6122      	str	r2, [r4, #16]
 8002fda:	f8cd a000 	str.w	sl, [sp]
 8002fde:	464b      	mov	r3, r9
 8002fe0:	aa03      	add	r2, sp, #12
 8002fe2:	4621      	mov	r1, r4
 8002fe4:	4640      	mov	r0, r8
 8002fe6:	f7ff fee7 	bl	8002db8 <_printf_common>
 8002fea:	3001      	adds	r0, #1
 8002fec:	d14a      	bne.n	8003084 <_printf_i+0x1f0>
 8002fee:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff2:	b004      	add	sp, #16
 8002ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ff8:	6823      	ldr	r3, [r4, #0]
 8002ffa:	f043 0320 	orr.w	r3, r3, #32
 8002ffe:	6023      	str	r3, [r4, #0]
 8003000:	4832      	ldr	r0, [pc, #200]	@ (80030cc <_printf_i+0x238>)
 8003002:	2778      	movs	r7, #120	@ 0x78
 8003004:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003008:	6823      	ldr	r3, [r4, #0]
 800300a:	6831      	ldr	r1, [r6, #0]
 800300c:	061f      	lsls	r7, r3, #24
 800300e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003012:	d402      	bmi.n	800301a <_printf_i+0x186>
 8003014:	065f      	lsls	r7, r3, #25
 8003016:	bf48      	it	mi
 8003018:	b2ad      	uxthmi	r5, r5
 800301a:	6031      	str	r1, [r6, #0]
 800301c:	07d9      	lsls	r1, r3, #31
 800301e:	bf44      	itt	mi
 8003020:	f043 0320 	orrmi.w	r3, r3, #32
 8003024:	6023      	strmi	r3, [r4, #0]
 8003026:	b11d      	cbz	r5, 8003030 <_printf_i+0x19c>
 8003028:	2310      	movs	r3, #16
 800302a:	e7ad      	b.n	8002f88 <_printf_i+0xf4>
 800302c:	4826      	ldr	r0, [pc, #152]	@ (80030c8 <_printf_i+0x234>)
 800302e:	e7e9      	b.n	8003004 <_printf_i+0x170>
 8003030:	6823      	ldr	r3, [r4, #0]
 8003032:	f023 0320 	bic.w	r3, r3, #32
 8003036:	6023      	str	r3, [r4, #0]
 8003038:	e7f6      	b.n	8003028 <_printf_i+0x194>
 800303a:	4616      	mov	r6, r2
 800303c:	e7bd      	b.n	8002fba <_printf_i+0x126>
 800303e:	6833      	ldr	r3, [r6, #0]
 8003040:	6825      	ldr	r5, [r4, #0]
 8003042:	6961      	ldr	r1, [r4, #20]
 8003044:	1d18      	adds	r0, r3, #4
 8003046:	6030      	str	r0, [r6, #0]
 8003048:	062e      	lsls	r6, r5, #24
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	d501      	bpl.n	8003052 <_printf_i+0x1be>
 800304e:	6019      	str	r1, [r3, #0]
 8003050:	e002      	b.n	8003058 <_printf_i+0x1c4>
 8003052:	0668      	lsls	r0, r5, #25
 8003054:	d5fb      	bpl.n	800304e <_printf_i+0x1ba>
 8003056:	8019      	strh	r1, [r3, #0]
 8003058:	2300      	movs	r3, #0
 800305a:	6123      	str	r3, [r4, #16]
 800305c:	4616      	mov	r6, r2
 800305e:	e7bc      	b.n	8002fda <_printf_i+0x146>
 8003060:	6833      	ldr	r3, [r6, #0]
 8003062:	1d1a      	adds	r2, r3, #4
 8003064:	6032      	str	r2, [r6, #0]
 8003066:	681e      	ldr	r6, [r3, #0]
 8003068:	6862      	ldr	r2, [r4, #4]
 800306a:	2100      	movs	r1, #0
 800306c:	4630      	mov	r0, r6
 800306e:	f7fd f8af 	bl	80001d0 <memchr>
 8003072:	b108      	cbz	r0, 8003078 <_printf_i+0x1e4>
 8003074:	1b80      	subs	r0, r0, r6
 8003076:	6060      	str	r0, [r4, #4]
 8003078:	6863      	ldr	r3, [r4, #4]
 800307a:	6123      	str	r3, [r4, #16]
 800307c:	2300      	movs	r3, #0
 800307e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003082:	e7aa      	b.n	8002fda <_printf_i+0x146>
 8003084:	6923      	ldr	r3, [r4, #16]
 8003086:	4632      	mov	r2, r6
 8003088:	4649      	mov	r1, r9
 800308a:	4640      	mov	r0, r8
 800308c:	47d0      	blx	sl
 800308e:	3001      	adds	r0, #1
 8003090:	d0ad      	beq.n	8002fee <_printf_i+0x15a>
 8003092:	6823      	ldr	r3, [r4, #0]
 8003094:	079b      	lsls	r3, r3, #30
 8003096:	d413      	bmi.n	80030c0 <_printf_i+0x22c>
 8003098:	68e0      	ldr	r0, [r4, #12]
 800309a:	9b03      	ldr	r3, [sp, #12]
 800309c:	4298      	cmp	r0, r3
 800309e:	bfb8      	it	lt
 80030a0:	4618      	movlt	r0, r3
 80030a2:	e7a6      	b.n	8002ff2 <_printf_i+0x15e>
 80030a4:	2301      	movs	r3, #1
 80030a6:	4632      	mov	r2, r6
 80030a8:	4649      	mov	r1, r9
 80030aa:	4640      	mov	r0, r8
 80030ac:	47d0      	blx	sl
 80030ae:	3001      	adds	r0, #1
 80030b0:	d09d      	beq.n	8002fee <_printf_i+0x15a>
 80030b2:	3501      	adds	r5, #1
 80030b4:	68e3      	ldr	r3, [r4, #12]
 80030b6:	9903      	ldr	r1, [sp, #12]
 80030b8:	1a5b      	subs	r3, r3, r1
 80030ba:	42ab      	cmp	r3, r5
 80030bc:	dcf2      	bgt.n	80030a4 <_printf_i+0x210>
 80030be:	e7eb      	b.n	8003098 <_printf_i+0x204>
 80030c0:	2500      	movs	r5, #0
 80030c2:	f104 0619 	add.w	r6, r4, #25
 80030c6:	e7f5      	b.n	80030b4 <_printf_i+0x220>
 80030c8:	08006f1a 	.word	0x08006f1a
 80030cc:	08006f2b 	.word	0x08006f2b

080030d0 <_scanf_float>:
 80030d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030d4:	b087      	sub	sp, #28
 80030d6:	4691      	mov	r9, r2
 80030d8:	9303      	str	r3, [sp, #12]
 80030da:	688b      	ldr	r3, [r1, #8]
 80030dc:	1e5a      	subs	r2, r3, #1
 80030de:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80030e2:	bf81      	itttt	hi
 80030e4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80030e8:	eb03 0b05 	addhi.w	fp, r3, r5
 80030ec:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80030f0:	608b      	strhi	r3, [r1, #8]
 80030f2:	680b      	ldr	r3, [r1, #0]
 80030f4:	460a      	mov	r2, r1
 80030f6:	f04f 0500 	mov.w	r5, #0
 80030fa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80030fe:	f842 3b1c 	str.w	r3, [r2], #28
 8003102:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003106:	4680      	mov	r8, r0
 8003108:	460c      	mov	r4, r1
 800310a:	bf98      	it	ls
 800310c:	f04f 0b00 	movls.w	fp, #0
 8003110:	9201      	str	r2, [sp, #4]
 8003112:	4616      	mov	r6, r2
 8003114:	46aa      	mov	sl, r5
 8003116:	462f      	mov	r7, r5
 8003118:	9502      	str	r5, [sp, #8]
 800311a:	68a2      	ldr	r2, [r4, #8]
 800311c:	b15a      	cbz	r2, 8003136 <_scanf_float+0x66>
 800311e:	f8d9 3000 	ldr.w	r3, [r9]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b4e      	cmp	r3, #78	@ 0x4e
 8003126:	d863      	bhi.n	80031f0 <_scanf_float+0x120>
 8003128:	2b40      	cmp	r3, #64	@ 0x40
 800312a:	d83b      	bhi.n	80031a4 <_scanf_float+0xd4>
 800312c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8003130:	b2c8      	uxtb	r0, r1
 8003132:	280e      	cmp	r0, #14
 8003134:	d939      	bls.n	80031aa <_scanf_float+0xda>
 8003136:	b11f      	cbz	r7, 8003140 <_scanf_float+0x70>
 8003138:	6823      	ldr	r3, [r4, #0]
 800313a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800313e:	6023      	str	r3, [r4, #0]
 8003140:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003144:	f1ba 0f01 	cmp.w	sl, #1
 8003148:	f200 8114 	bhi.w	8003374 <_scanf_float+0x2a4>
 800314c:	9b01      	ldr	r3, [sp, #4]
 800314e:	429e      	cmp	r6, r3
 8003150:	f200 8105 	bhi.w	800335e <_scanf_float+0x28e>
 8003154:	2001      	movs	r0, #1
 8003156:	b007      	add	sp, #28
 8003158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800315c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8003160:	2a0d      	cmp	r2, #13
 8003162:	d8e8      	bhi.n	8003136 <_scanf_float+0x66>
 8003164:	a101      	add	r1, pc, #4	@ (adr r1, 800316c <_scanf_float+0x9c>)
 8003166:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800316a:	bf00      	nop
 800316c:	080032b5 	.word	0x080032b5
 8003170:	08003137 	.word	0x08003137
 8003174:	08003137 	.word	0x08003137
 8003178:	08003137 	.word	0x08003137
 800317c:	08003311 	.word	0x08003311
 8003180:	080032eb 	.word	0x080032eb
 8003184:	08003137 	.word	0x08003137
 8003188:	08003137 	.word	0x08003137
 800318c:	080032c3 	.word	0x080032c3
 8003190:	08003137 	.word	0x08003137
 8003194:	08003137 	.word	0x08003137
 8003198:	08003137 	.word	0x08003137
 800319c:	08003137 	.word	0x08003137
 80031a0:	0800327f 	.word	0x0800327f
 80031a4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80031a8:	e7da      	b.n	8003160 <_scanf_float+0x90>
 80031aa:	290e      	cmp	r1, #14
 80031ac:	d8c3      	bhi.n	8003136 <_scanf_float+0x66>
 80031ae:	a001      	add	r0, pc, #4	@ (adr r0, 80031b4 <_scanf_float+0xe4>)
 80031b0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80031b4:	0800326f 	.word	0x0800326f
 80031b8:	08003137 	.word	0x08003137
 80031bc:	0800326f 	.word	0x0800326f
 80031c0:	080032ff 	.word	0x080032ff
 80031c4:	08003137 	.word	0x08003137
 80031c8:	08003211 	.word	0x08003211
 80031cc:	08003255 	.word	0x08003255
 80031d0:	08003255 	.word	0x08003255
 80031d4:	08003255 	.word	0x08003255
 80031d8:	08003255 	.word	0x08003255
 80031dc:	08003255 	.word	0x08003255
 80031e0:	08003255 	.word	0x08003255
 80031e4:	08003255 	.word	0x08003255
 80031e8:	08003255 	.word	0x08003255
 80031ec:	08003255 	.word	0x08003255
 80031f0:	2b6e      	cmp	r3, #110	@ 0x6e
 80031f2:	d809      	bhi.n	8003208 <_scanf_float+0x138>
 80031f4:	2b60      	cmp	r3, #96	@ 0x60
 80031f6:	d8b1      	bhi.n	800315c <_scanf_float+0x8c>
 80031f8:	2b54      	cmp	r3, #84	@ 0x54
 80031fa:	d07b      	beq.n	80032f4 <_scanf_float+0x224>
 80031fc:	2b59      	cmp	r3, #89	@ 0x59
 80031fe:	d19a      	bne.n	8003136 <_scanf_float+0x66>
 8003200:	2d07      	cmp	r5, #7
 8003202:	d198      	bne.n	8003136 <_scanf_float+0x66>
 8003204:	2508      	movs	r5, #8
 8003206:	e02f      	b.n	8003268 <_scanf_float+0x198>
 8003208:	2b74      	cmp	r3, #116	@ 0x74
 800320a:	d073      	beq.n	80032f4 <_scanf_float+0x224>
 800320c:	2b79      	cmp	r3, #121	@ 0x79
 800320e:	e7f6      	b.n	80031fe <_scanf_float+0x12e>
 8003210:	6821      	ldr	r1, [r4, #0]
 8003212:	05c8      	lsls	r0, r1, #23
 8003214:	d51e      	bpl.n	8003254 <_scanf_float+0x184>
 8003216:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800321a:	6021      	str	r1, [r4, #0]
 800321c:	3701      	adds	r7, #1
 800321e:	f1bb 0f00 	cmp.w	fp, #0
 8003222:	d003      	beq.n	800322c <_scanf_float+0x15c>
 8003224:	3201      	adds	r2, #1
 8003226:	f10b 3bff 	add.w	fp, fp, #4294967295
 800322a:	60a2      	str	r2, [r4, #8]
 800322c:	68a3      	ldr	r3, [r4, #8]
 800322e:	3b01      	subs	r3, #1
 8003230:	60a3      	str	r3, [r4, #8]
 8003232:	6923      	ldr	r3, [r4, #16]
 8003234:	3301      	adds	r3, #1
 8003236:	6123      	str	r3, [r4, #16]
 8003238:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800323c:	3b01      	subs	r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	f8c9 3004 	str.w	r3, [r9, #4]
 8003244:	f340 8082 	ble.w	800334c <_scanf_float+0x27c>
 8003248:	f8d9 3000 	ldr.w	r3, [r9]
 800324c:	3301      	adds	r3, #1
 800324e:	f8c9 3000 	str.w	r3, [r9]
 8003252:	e762      	b.n	800311a <_scanf_float+0x4a>
 8003254:	eb1a 0105 	adds.w	r1, sl, r5
 8003258:	f47f af6d 	bne.w	8003136 <_scanf_float+0x66>
 800325c:	6822      	ldr	r2, [r4, #0]
 800325e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8003262:	6022      	str	r2, [r4, #0]
 8003264:	460d      	mov	r5, r1
 8003266:	468a      	mov	sl, r1
 8003268:	f806 3b01 	strb.w	r3, [r6], #1
 800326c:	e7de      	b.n	800322c <_scanf_float+0x15c>
 800326e:	6822      	ldr	r2, [r4, #0]
 8003270:	0610      	lsls	r0, r2, #24
 8003272:	f57f af60 	bpl.w	8003136 <_scanf_float+0x66>
 8003276:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800327a:	6022      	str	r2, [r4, #0]
 800327c:	e7f4      	b.n	8003268 <_scanf_float+0x198>
 800327e:	f1ba 0f00 	cmp.w	sl, #0
 8003282:	d10c      	bne.n	800329e <_scanf_float+0x1ce>
 8003284:	b977      	cbnz	r7, 80032a4 <_scanf_float+0x1d4>
 8003286:	6822      	ldr	r2, [r4, #0]
 8003288:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800328c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003290:	d108      	bne.n	80032a4 <_scanf_float+0x1d4>
 8003292:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003296:	6022      	str	r2, [r4, #0]
 8003298:	f04f 0a01 	mov.w	sl, #1
 800329c:	e7e4      	b.n	8003268 <_scanf_float+0x198>
 800329e:	f1ba 0f02 	cmp.w	sl, #2
 80032a2:	d050      	beq.n	8003346 <_scanf_float+0x276>
 80032a4:	2d01      	cmp	r5, #1
 80032a6:	d002      	beq.n	80032ae <_scanf_float+0x1de>
 80032a8:	2d04      	cmp	r5, #4
 80032aa:	f47f af44 	bne.w	8003136 <_scanf_float+0x66>
 80032ae:	3501      	adds	r5, #1
 80032b0:	b2ed      	uxtb	r5, r5
 80032b2:	e7d9      	b.n	8003268 <_scanf_float+0x198>
 80032b4:	f1ba 0f01 	cmp.w	sl, #1
 80032b8:	f47f af3d 	bne.w	8003136 <_scanf_float+0x66>
 80032bc:	f04f 0a02 	mov.w	sl, #2
 80032c0:	e7d2      	b.n	8003268 <_scanf_float+0x198>
 80032c2:	b975      	cbnz	r5, 80032e2 <_scanf_float+0x212>
 80032c4:	2f00      	cmp	r7, #0
 80032c6:	f47f af37 	bne.w	8003138 <_scanf_float+0x68>
 80032ca:	6822      	ldr	r2, [r4, #0]
 80032cc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80032d0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80032d4:	f040 8103 	bne.w	80034de <_scanf_float+0x40e>
 80032d8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80032dc:	6022      	str	r2, [r4, #0]
 80032de:	2501      	movs	r5, #1
 80032e0:	e7c2      	b.n	8003268 <_scanf_float+0x198>
 80032e2:	2d03      	cmp	r5, #3
 80032e4:	d0e3      	beq.n	80032ae <_scanf_float+0x1de>
 80032e6:	2d05      	cmp	r5, #5
 80032e8:	e7df      	b.n	80032aa <_scanf_float+0x1da>
 80032ea:	2d02      	cmp	r5, #2
 80032ec:	f47f af23 	bne.w	8003136 <_scanf_float+0x66>
 80032f0:	2503      	movs	r5, #3
 80032f2:	e7b9      	b.n	8003268 <_scanf_float+0x198>
 80032f4:	2d06      	cmp	r5, #6
 80032f6:	f47f af1e 	bne.w	8003136 <_scanf_float+0x66>
 80032fa:	2507      	movs	r5, #7
 80032fc:	e7b4      	b.n	8003268 <_scanf_float+0x198>
 80032fe:	6822      	ldr	r2, [r4, #0]
 8003300:	0591      	lsls	r1, r2, #22
 8003302:	f57f af18 	bpl.w	8003136 <_scanf_float+0x66>
 8003306:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800330a:	6022      	str	r2, [r4, #0]
 800330c:	9702      	str	r7, [sp, #8]
 800330e:	e7ab      	b.n	8003268 <_scanf_float+0x198>
 8003310:	6822      	ldr	r2, [r4, #0]
 8003312:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8003316:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800331a:	d005      	beq.n	8003328 <_scanf_float+0x258>
 800331c:	0550      	lsls	r0, r2, #21
 800331e:	f57f af0a 	bpl.w	8003136 <_scanf_float+0x66>
 8003322:	2f00      	cmp	r7, #0
 8003324:	f000 80db 	beq.w	80034de <_scanf_float+0x40e>
 8003328:	0591      	lsls	r1, r2, #22
 800332a:	bf58      	it	pl
 800332c:	9902      	ldrpl	r1, [sp, #8]
 800332e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003332:	bf58      	it	pl
 8003334:	1a79      	subpl	r1, r7, r1
 8003336:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800333a:	bf58      	it	pl
 800333c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003340:	6022      	str	r2, [r4, #0]
 8003342:	2700      	movs	r7, #0
 8003344:	e790      	b.n	8003268 <_scanf_float+0x198>
 8003346:	f04f 0a03 	mov.w	sl, #3
 800334a:	e78d      	b.n	8003268 <_scanf_float+0x198>
 800334c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003350:	4649      	mov	r1, r9
 8003352:	4640      	mov	r0, r8
 8003354:	4798      	blx	r3
 8003356:	2800      	cmp	r0, #0
 8003358:	f43f aedf 	beq.w	800311a <_scanf_float+0x4a>
 800335c:	e6eb      	b.n	8003136 <_scanf_float+0x66>
 800335e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003362:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003366:	464a      	mov	r2, r9
 8003368:	4640      	mov	r0, r8
 800336a:	4798      	blx	r3
 800336c:	6923      	ldr	r3, [r4, #16]
 800336e:	3b01      	subs	r3, #1
 8003370:	6123      	str	r3, [r4, #16]
 8003372:	e6eb      	b.n	800314c <_scanf_float+0x7c>
 8003374:	1e6b      	subs	r3, r5, #1
 8003376:	2b06      	cmp	r3, #6
 8003378:	d824      	bhi.n	80033c4 <_scanf_float+0x2f4>
 800337a:	2d02      	cmp	r5, #2
 800337c:	d836      	bhi.n	80033ec <_scanf_float+0x31c>
 800337e:	9b01      	ldr	r3, [sp, #4]
 8003380:	429e      	cmp	r6, r3
 8003382:	f67f aee7 	bls.w	8003154 <_scanf_float+0x84>
 8003386:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800338a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800338e:	464a      	mov	r2, r9
 8003390:	4640      	mov	r0, r8
 8003392:	4798      	blx	r3
 8003394:	6923      	ldr	r3, [r4, #16]
 8003396:	3b01      	subs	r3, #1
 8003398:	6123      	str	r3, [r4, #16]
 800339a:	e7f0      	b.n	800337e <_scanf_float+0x2ae>
 800339c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80033a0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80033a4:	464a      	mov	r2, r9
 80033a6:	4640      	mov	r0, r8
 80033a8:	4798      	blx	r3
 80033aa:	6923      	ldr	r3, [r4, #16]
 80033ac:	3b01      	subs	r3, #1
 80033ae:	6123      	str	r3, [r4, #16]
 80033b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80033b4:	fa5f fa8a 	uxtb.w	sl, sl
 80033b8:	f1ba 0f02 	cmp.w	sl, #2
 80033bc:	d1ee      	bne.n	800339c <_scanf_float+0x2cc>
 80033be:	3d03      	subs	r5, #3
 80033c0:	b2ed      	uxtb	r5, r5
 80033c2:	1b76      	subs	r6, r6, r5
 80033c4:	6823      	ldr	r3, [r4, #0]
 80033c6:	05da      	lsls	r2, r3, #23
 80033c8:	d530      	bpl.n	800342c <_scanf_float+0x35c>
 80033ca:	055b      	lsls	r3, r3, #21
 80033cc:	d511      	bpl.n	80033f2 <_scanf_float+0x322>
 80033ce:	9b01      	ldr	r3, [sp, #4]
 80033d0:	429e      	cmp	r6, r3
 80033d2:	f67f aebf 	bls.w	8003154 <_scanf_float+0x84>
 80033d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80033da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80033de:	464a      	mov	r2, r9
 80033e0:	4640      	mov	r0, r8
 80033e2:	4798      	blx	r3
 80033e4:	6923      	ldr	r3, [r4, #16]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	6123      	str	r3, [r4, #16]
 80033ea:	e7f0      	b.n	80033ce <_scanf_float+0x2fe>
 80033ec:	46aa      	mov	sl, r5
 80033ee:	46b3      	mov	fp, r6
 80033f0:	e7de      	b.n	80033b0 <_scanf_float+0x2e0>
 80033f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80033f6:	6923      	ldr	r3, [r4, #16]
 80033f8:	2965      	cmp	r1, #101	@ 0x65
 80033fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80033fe:	f106 35ff 	add.w	r5, r6, #4294967295
 8003402:	6123      	str	r3, [r4, #16]
 8003404:	d00c      	beq.n	8003420 <_scanf_float+0x350>
 8003406:	2945      	cmp	r1, #69	@ 0x45
 8003408:	d00a      	beq.n	8003420 <_scanf_float+0x350>
 800340a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800340e:	464a      	mov	r2, r9
 8003410:	4640      	mov	r0, r8
 8003412:	4798      	blx	r3
 8003414:	6923      	ldr	r3, [r4, #16]
 8003416:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800341a:	3b01      	subs	r3, #1
 800341c:	1eb5      	subs	r5, r6, #2
 800341e:	6123      	str	r3, [r4, #16]
 8003420:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003424:	464a      	mov	r2, r9
 8003426:	4640      	mov	r0, r8
 8003428:	4798      	blx	r3
 800342a:	462e      	mov	r6, r5
 800342c:	6822      	ldr	r2, [r4, #0]
 800342e:	f012 0210 	ands.w	r2, r2, #16
 8003432:	d001      	beq.n	8003438 <_scanf_float+0x368>
 8003434:	2000      	movs	r0, #0
 8003436:	e68e      	b.n	8003156 <_scanf_float+0x86>
 8003438:	7032      	strb	r2, [r6, #0]
 800343a:	6823      	ldr	r3, [r4, #0]
 800343c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003440:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003444:	d125      	bne.n	8003492 <_scanf_float+0x3c2>
 8003446:	9b02      	ldr	r3, [sp, #8]
 8003448:	429f      	cmp	r7, r3
 800344a:	d00a      	beq.n	8003462 <_scanf_float+0x392>
 800344c:	1bda      	subs	r2, r3, r7
 800344e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8003452:	429e      	cmp	r6, r3
 8003454:	bf28      	it	cs
 8003456:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800345a:	4922      	ldr	r1, [pc, #136]	@ (80034e4 <_scanf_float+0x414>)
 800345c:	4630      	mov	r0, r6
 800345e:	f000 f907 	bl	8003670 <siprintf>
 8003462:	9901      	ldr	r1, [sp, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	4640      	mov	r0, r8
 8003468:	f002 fbf2 	bl	8005c50 <_strtod_r>
 800346c:	9b03      	ldr	r3, [sp, #12]
 800346e:	6821      	ldr	r1, [r4, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f011 0f02 	tst.w	r1, #2
 8003476:	ec57 6b10 	vmov	r6, r7, d0
 800347a:	f103 0204 	add.w	r2, r3, #4
 800347e:	d015      	beq.n	80034ac <_scanf_float+0x3dc>
 8003480:	9903      	ldr	r1, [sp, #12]
 8003482:	600a      	str	r2, [r1, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	e9c3 6700 	strd	r6, r7, [r3]
 800348a:	68e3      	ldr	r3, [r4, #12]
 800348c:	3301      	adds	r3, #1
 800348e:	60e3      	str	r3, [r4, #12]
 8003490:	e7d0      	b.n	8003434 <_scanf_float+0x364>
 8003492:	9b04      	ldr	r3, [sp, #16]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0e4      	beq.n	8003462 <_scanf_float+0x392>
 8003498:	9905      	ldr	r1, [sp, #20]
 800349a:	230a      	movs	r3, #10
 800349c:	3101      	adds	r1, #1
 800349e:	4640      	mov	r0, r8
 80034a0:	f002 fc56 	bl	8005d50 <_strtol_r>
 80034a4:	9b04      	ldr	r3, [sp, #16]
 80034a6:	9e05      	ldr	r6, [sp, #20]
 80034a8:	1ac2      	subs	r2, r0, r3
 80034aa:	e7d0      	b.n	800344e <_scanf_float+0x37e>
 80034ac:	f011 0f04 	tst.w	r1, #4
 80034b0:	9903      	ldr	r1, [sp, #12]
 80034b2:	600a      	str	r2, [r1, #0]
 80034b4:	d1e6      	bne.n	8003484 <_scanf_float+0x3b4>
 80034b6:	681d      	ldr	r5, [r3, #0]
 80034b8:	4632      	mov	r2, r6
 80034ba:	463b      	mov	r3, r7
 80034bc:	4630      	mov	r0, r6
 80034be:	4639      	mov	r1, r7
 80034c0:	f7fd fb34 	bl	8000b2c <__aeabi_dcmpun>
 80034c4:	b128      	cbz	r0, 80034d2 <_scanf_float+0x402>
 80034c6:	4808      	ldr	r0, [pc, #32]	@ (80034e8 <_scanf_float+0x418>)
 80034c8:	f000 f9b8 	bl	800383c <nanf>
 80034cc:	ed85 0a00 	vstr	s0, [r5]
 80034d0:	e7db      	b.n	800348a <_scanf_float+0x3ba>
 80034d2:	4630      	mov	r0, r6
 80034d4:	4639      	mov	r1, r7
 80034d6:	f7fd fb87 	bl	8000be8 <__aeabi_d2f>
 80034da:	6028      	str	r0, [r5, #0]
 80034dc:	e7d5      	b.n	800348a <_scanf_float+0x3ba>
 80034de:	2700      	movs	r7, #0
 80034e0:	e62e      	b.n	8003140 <_scanf_float+0x70>
 80034e2:	bf00      	nop
 80034e4:	08006f3c 	.word	0x08006f3c
 80034e8:	0800707d 	.word	0x0800707d

080034ec <std>:
 80034ec:	2300      	movs	r3, #0
 80034ee:	b510      	push	{r4, lr}
 80034f0:	4604      	mov	r4, r0
 80034f2:	e9c0 3300 	strd	r3, r3, [r0]
 80034f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80034fa:	6083      	str	r3, [r0, #8]
 80034fc:	8181      	strh	r1, [r0, #12]
 80034fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8003500:	81c2      	strh	r2, [r0, #14]
 8003502:	6183      	str	r3, [r0, #24]
 8003504:	4619      	mov	r1, r3
 8003506:	2208      	movs	r2, #8
 8003508:	305c      	adds	r0, #92	@ 0x5c
 800350a:	f000 f916 	bl	800373a <memset>
 800350e:	4b0d      	ldr	r3, [pc, #52]	@ (8003544 <std+0x58>)
 8003510:	6263      	str	r3, [r4, #36]	@ 0x24
 8003512:	4b0d      	ldr	r3, [pc, #52]	@ (8003548 <std+0x5c>)
 8003514:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003516:	4b0d      	ldr	r3, [pc, #52]	@ (800354c <std+0x60>)
 8003518:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800351a:	4b0d      	ldr	r3, [pc, #52]	@ (8003550 <std+0x64>)
 800351c:	6323      	str	r3, [r4, #48]	@ 0x30
 800351e:	4b0d      	ldr	r3, [pc, #52]	@ (8003554 <std+0x68>)
 8003520:	6224      	str	r4, [r4, #32]
 8003522:	429c      	cmp	r4, r3
 8003524:	d006      	beq.n	8003534 <std+0x48>
 8003526:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800352a:	4294      	cmp	r4, r2
 800352c:	d002      	beq.n	8003534 <std+0x48>
 800352e:	33d0      	adds	r3, #208	@ 0xd0
 8003530:	429c      	cmp	r4, r3
 8003532:	d105      	bne.n	8003540 <std+0x54>
 8003534:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800353c:	f000 b97a 	b.w	8003834 <__retarget_lock_init_recursive>
 8003540:	bd10      	pop	{r4, pc}
 8003542:	bf00      	nop
 8003544:	080036b5 	.word	0x080036b5
 8003548:	080036d7 	.word	0x080036d7
 800354c:	0800370f 	.word	0x0800370f
 8003550:	08003733 	.word	0x08003733
 8003554:	20000234 	.word	0x20000234

08003558 <stdio_exit_handler>:
 8003558:	4a02      	ldr	r2, [pc, #8]	@ (8003564 <stdio_exit_handler+0xc>)
 800355a:	4903      	ldr	r1, [pc, #12]	@ (8003568 <stdio_exit_handler+0x10>)
 800355c:	4803      	ldr	r0, [pc, #12]	@ (800356c <stdio_exit_handler+0x14>)
 800355e:	f000 b869 	b.w	8003634 <_fwalk_sglue>
 8003562:	bf00      	nop
 8003564:	20000018 	.word	0x20000018
 8003568:	0800610d 	.word	0x0800610d
 800356c:	20000028 	.word	0x20000028

08003570 <cleanup_stdio>:
 8003570:	6841      	ldr	r1, [r0, #4]
 8003572:	4b0c      	ldr	r3, [pc, #48]	@ (80035a4 <cleanup_stdio+0x34>)
 8003574:	4299      	cmp	r1, r3
 8003576:	b510      	push	{r4, lr}
 8003578:	4604      	mov	r4, r0
 800357a:	d001      	beq.n	8003580 <cleanup_stdio+0x10>
 800357c:	f002 fdc6 	bl	800610c <_fflush_r>
 8003580:	68a1      	ldr	r1, [r4, #8]
 8003582:	4b09      	ldr	r3, [pc, #36]	@ (80035a8 <cleanup_stdio+0x38>)
 8003584:	4299      	cmp	r1, r3
 8003586:	d002      	beq.n	800358e <cleanup_stdio+0x1e>
 8003588:	4620      	mov	r0, r4
 800358a:	f002 fdbf 	bl	800610c <_fflush_r>
 800358e:	68e1      	ldr	r1, [r4, #12]
 8003590:	4b06      	ldr	r3, [pc, #24]	@ (80035ac <cleanup_stdio+0x3c>)
 8003592:	4299      	cmp	r1, r3
 8003594:	d004      	beq.n	80035a0 <cleanup_stdio+0x30>
 8003596:	4620      	mov	r0, r4
 8003598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800359c:	f002 bdb6 	b.w	800610c <_fflush_r>
 80035a0:	bd10      	pop	{r4, pc}
 80035a2:	bf00      	nop
 80035a4:	20000234 	.word	0x20000234
 80035a8:	2000029c 	.word	0x2000029c
 80035ac:	20000304 	.word	0x20000304

080035b0 <global_stdio_init.part.0>:
 80035b0:	b510      	push	{r4, lr}
 80035b2:	4b0b      	ldr	r3, [pc, #44]	@ (80035e0 <global_stdio_init.part.0+0x30>)
 80035b4:	4c0b      	ldr	r4, [pc, #44]	@ (80035e4 <global_stdio_init.part.0+0x34>)
 80035b6:	4a0c      	ldr	r2, [pc, #48]	@ (80035e8 <global_stdio_init.part.0+0x38>)
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	4620      	mov	r0, r4
 80035bc:	2200      	movs	r2, #0
 80035be:	2104      	movs	r1, #4
 80035c0:	f7ff ff94 	bl	80034ec <std>
 80035c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80035c8:	2201      	movs	r2, #1
 80035ca:	2109      	movs	r1, #9
 80035cc:	f7ff ff8e 	bl	80034ec <std>
 80035d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80035d4:	2202      	movs	r2, #2
 80035d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035da:	2112      	movs	r1, #18
 80035dc:	f7ff bf86 	b.w	80034ec <std>
 80035e0:	2000036c 	.word	0x2000036c
 80035e4:	20000234 	.word	0x20000234
 80035e8:	08003559 	.word	0x08003559

080035ec <__sfp_lock_acquire>:
 80035ec:	4801      	ldr	r0, [pc, #4]	@ (80035f4 <__sfp_lock_acquire+0x8>)
 80035ee:	f000 b922 	b.w	8003836 <__retarget_lock_acquire_recursive>
 80035f2:	bf00      	nop
 80035f4:	20000375 	.word	0x20000375

080035f8 <__sfp_lock_release>:
 80035f8:	4801      	ldr	r0, [pc, #4]	@ (8003600 <__sfp_lock_release+0x8>)
 80035fa:	f000 b91d 	b.w	8003838 <__retarget_lock_release_recursive>
 80035fe:	bf00      	nop
 8003600:	20000375 	.word	0x20000375

08003604 <__sinit>:
 8003604:	b510      	push	{r4, lr}
 8003606:	4604      	mov	r4, r0
 8003608:	f7ff fff0 	bl	80035ec <__sfp_lock_acquire>
 800360c:	6a23      	ldr	r3, [r4, #32]
 800360e:	b11b      	cbz	r3, 8003618 <__sinit+0x14>
 8003610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003614:	f7ff bff0 	b.w	80035f8 <__sfp_lock_release>
 8003618:	4b04      	ldr	r3, [pc, #16]	@ (800362c <__sinit+0x28>)
 800361a:	6223      	str	r3, [r4, #32]
 800361c:	4b04      	ldr	r3, [pc, #16]	@ (8003630 <__sinit+0x2c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1f5      	bne.n	8003610 <__sinit+0xc>
 8003624:	f7ff ffc4 	bl	80035b0 <global_stdio_init.part.0>
 8003628:	e7f2      	b.n	8003610 <__sinit+0xc>
 800362a:	bf00      	nop
 800362c:	08003571 	.word	0x08003571
 8003630:	2000036c 	.word	0x2000036c

08003634 <_fwalk_sglue>:
 8003634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003638:	4607      	mov	r7, r0
 800363a:	4688      	mov	r8, r1
 800363c:	4614      	mov	r4, r2
 800363e:	2600      	movs	r6, #0
 8003640:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003644:	f1b9 0901 	subs.w	r9, r9, #1
 8003648:	d505      	bpl.n	8003656 <_fwalk_sglue+0x22>
 800364a:	6824      	ldr	r4, [r4, #0]
 800364c:	2c00      	cmp	r4, #0
 800364e:	d1f7      	bne.n	8003640 <_fwalk_sglue+0xc>
 8003650:	4630      	mov	r0, r6
 8003652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003656:	89ab      	ldrh	r3, [r5, #12]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d907      	bls.n	800366c <_fwalk_sglue+0x38>
 800365c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003660:	3301      	adds	r3, #1
 8003662:	d003      	beq.n	800366c <_fwalk_sglue+0x38>
 8003664:	4629      	mov	r1, r5
 8003666:	4638      	mov	r0, r7
 8003668:	47c0      	blx	r8
 800366a:	4306      	orrs	r6, r0
 800366c:	3568      	adds	r5, #104	@ 0x68
 800366e:	e7e9      	b.n	8003644 <_fwalk_sglue+0x10>

08003670 <siprintf>:
 8003670:	b40e      	push	{r1, r2, r3}
 8003672:	b510      	push	{r4, lr}
 8003674:	b09d      	sub	sp, #116	@ 0x74
 8003676:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003678:	9002      	str	r0, [sp, #8]
 800367a:	9006      	str	r0, [sp, #24]
 800367c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003680:	480a      	ldr	r0, [pc, #40]	@ (80036ac <siprintf+0x3c>)
 8003682:	9107      	str	r1, [sp, #28]
 8003684:	9104      	str	r1, [sp, #16]
 8003686:	490a      	ldr	r1, [pc, #40]	@ (80036b0 <siprintf+0x40>)
 8003688:	f853 2b04 	ldr.w	r2, [r3], #4
 800368c:	9105      	str	r1, [sp, #20]
 800368e:	2400      	movs	r4, #0
 8003690:	a902      	add	r1, sp, #8
 8003692:	6800      	ldr	r0, [r0, #0]
 8003694:	9301      	str	r3, [sp, #4]
 8003696:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003698:	f002 fbb8 	bl	8005e0c <_svfiprintf_r>
 800369c:	9b02      	ldr	r3, [sp, #8]
 800369e:	701c      	strb	r4, [r3, #0]
 80036a0:	b01d      	add	sp, #116	@ 0x74
 80036a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036a6:	b003      	add	sp, #12
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	20000024 	.word	0x20000024
 80036b0:	ffff0208 	.word	0xffff0208

080036b4 <__sread>:
 80036b4:	b510      	push	{r4, lr}
 80036b6:	460c      	mov	r4, r1
 80036b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036bc:	f000 f86c 	bl	8003798 <_read_r>
 80036c0:	2800      	cmp	r0, #0
 80036c2:	bfab      	itete	ge
 80036c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80036c6:	89a3      	ldrhlt	r3, [r4, #12]
 80036c8:	181b      	addge	r3, r3, r0
 80036ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80036ce:	bfac      	ite	ge
 80036d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80036d2:	81a3      	strhlt	r3, [r4, #12]
 80036d4:	bd10      	pop	{r4, pc}

080036d6 <__swrite>:
 80036d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036da:	461f      	mov	r7, r3
 80036dc:	898b      	ldrh	r3, [r1, #12]
 80036de:	05db      	lsls	r3, r3, #23
 80036e0:	4605      	mov	r5, r0
 80036e2:	460c      	mov	r4, r1
 80036e4:	4616      	mov	r6, r2
 80036e6:	d505      	bpl.n	80036f4 <__swrite+0x1e>
 80036e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036ec:	2302      	movs	r3, #2
 80036ee:	2200      	movs	r2, #0
 80036f0:	f000 f840 	bl	8003774 <_lseek_r>
 80036f4:	89a3      	ldrh	r3, [r4, #12]
 80036f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80036fe:	81a3      	strh	r3, [r4, #12]
 8003700:	4632      	mov	r2, r6
 8003702:	463b      	mov	r3, r7
 8003704:	4628      	mov	r0, r5
 8003706:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800370a:	f000 b857 	b.w	80037bc <_write_r>

0800370e <__sseek>:
 800370e:	b510      	push	{r4, lr}
 8003710:	460c      	mov	r4, r1
 8003712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003716:	f000 f82d 	bl	8003774 <_lseek_r>
 800371a:	1c43      	adds	r3, r0, #1
 800371c:	89a3      	ldrh	r3, [r4, #12]
 800371e:	bf15      	itete	ne
 8003720:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003722:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003726:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800372a:	81a3      	strheq	r3, [r4, #12]
 800372c:	bf18      	it	ne
 800372e:	81a3      	strhne	r3, [r4, #12]
 8003730:	bd10      	pop	{r4, pc}

08003732 <__sclose>:
 8003732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003736:	f000 b80d 	b.w	8003754 <_close_r>

0800373a <memset>:
 800373a:	4402      	add	r2, r0
 800373c:	4603      	mov	r3, r0
 800373e:	4293      	cmp	r3, r2
 8003740:	d100      	bne.n	8003744 <memset+0xa>
 8003742:	4770      	bx	lr
 8003744:	f803 1b01 	strb.w	r1, [r3], #1
 8003748:	e7f9      	b.n	800373e <memset+0x4>
	...

0800374c <_localeconv_r>:
 800374c:	4800      	ldr	r0, [pc, #0]	@ (8003750 <_localeconv_r+0x4>)
 800374e:	4770      	bx	lr
 8003750:	20000164 	.word	0x20000164

08003754 <_close_r>:
 8003754:	b538      	push	{r3, r4, r5, lr}
 8003756:	4d06      	ldr	r5, [pc, #24]	@ (8003770 <_close_r+0x1c>)
 8003758:	2300      	movs	r3, #0
 800375a:	4604      	mov	r4, r0
 800375c:	4608      	mov	r0, r1
 800375e:	602b      	str	r3, [r5, #0]
 8003760:	f7fe ffce 	bl	8002700 <_close>
 8003764:	1c43      	adds	r3, r0, #1
 8003766:	d102      	bne.n	800376e <_close_r+0x1a>
 8003768:	682b      	ldr	r3, [r5, #0]
 800376a:	b103      	cbz	r3, 800376e <_close_r+0x1a>
 800376c:	6023      	str	r3, [r4, #0]
 800376e:	bd38      	pop	{r3, r4, r5, pc}
 8003770:	20000370 	.word	0x20000370

08003774 <_lseek_r>:
 8003774:	b538      	push	{r3, r4, r5, lr}
 8003776:	4d07      	ldr	r5, [pc, #28]	@ (8003794 <_lseek_r+0x20>)
 8003778:	4604      	mov	r4, r0
 800377a:	4608      	mov	r0, r1
 800377c:	4611      	mov	r1, r2
 800377e:	2200      	movs	r2, #0
 8003780:	602a      	str	r2, [r5, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	f7fe ffe3 	bl	800274e <_lseek>
 8003788:	1c43      	adds	r3, r0, #1
 800378a:	d102      	bne.n	8003792 <_lseek_r+0x1e>
 800378c:	682b      	ldr	r3, [r5, #0]
 800378e:	b103      	cbz	r3, 8003792 <_lseek_r+0x1e>
 8003790:	6023      	str	r3, [r4, #0]
 8003792:	bd38      	pop	{r3, r4, r5, pc}
 8003794:	20000370 	.word	0x20000370

08003798 <_read_r>:
 8003798:	b538      	push	{r3, r4, r5, lr}
 800379a:	4d07      	ldr	r5, [pc, #28]	@ (80037b8 <_read_r+0x20>)
 800379c:	4604      	mov	r4, r0
 800379e:	4608      	mov	r0, r1
 80037a0:	4611      	mov	r1, r2
 80037a2:	2200      	movs	r2, #0
 80037a4:	602a      	str	r2, [r5, #0]
 80037a6:	461a      	mov	r2, r3
 80037a8:	f7fe ff71 	bl	800268e <_read>
 80037ac:	1c43      	adds	r3, r0, #1
 80037ae:	d102      	bne.n	80037b6 <_read_r+0x1e>
 80037b0:	682b      	ldr	r3, [r5, #0]
 80037b2:	b103      	cbz	r3, 80037b6 <_read_r+0x1e>
 80037b4:	6023      	str	r3, [r4, #0]
 80037b6:	bd38      	pop	{r3, r4, r5, pc}
 80037b8:	20000370 	.word	0x20000370

080037bc <_write_r>:
 80037bc:	b538      	push	{r3, r4, r5, lr}
 80037be:	4d07      	ldr	r5, [pc, #28]	@ (80037dc <_write_r+0x20>)
 80037c0:	4604      	mov	r4, r0
 80037c2:	4608      	mov	r0, r1
 80037c4:	4611      	mov	r1, r2
 80037c6:	2200      	movs	r2, #0
 80037c8:	602a      	str	r2, [r5, #0]
 80037ca:	461a      	mov	r2, r3
 80037cc:	f7fe ff7c 	bl	80026c8 <_write>
 80037d0:	1c43      	adds	r3, r0, #1
 80037d2:	d102      	bne.n	80037da <_write_r+0x1e>
 80037d4:	682b      	ldr	r3, [r5, #0]
 80037d6:	b103      	cbz	r3, 80037da <_write_r+0x1e>
 80037d8:	6023      	str	r3, [r4, #0]
 80037da:	bd38      	pop	{r3, r4, r5, pc}
 80037dc:	20000370 	.word	0x20000370

080037e0 <__errno>:
 80037e0:	4b01      	ldr	r3, [pc, #4]	@ (80037e8 <__errno+0x8>)
 80037e2:	6818      	ldr	r0, [r3, #0]
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	20000024 	.word	0x20000024

080037ec <__libc_init_array>:
 80037ec:	b570      	push	{r4, r5, r6, lr}
 80037ee:	4d0d      	ldr	r5, [pc, #52]	@ (8003824 <__libc_init_array+0x38>)
 80037f0:	4c0d      	ldr	r4, [pc, #52]	@ (8003828 <__libc_init_array+0x3c>)
 80037f2:	1b64      	subs	r4, r4, r5
 80037f4:	10a4      	asrs	r4, r4, #2
 80037f6:	2600      	movs	r6, #0
 80037f8:	42a6      	cmp	r6, r4
 80037fa:	d109      	bne.n	8003810 <__libc_init_array+0x24>
 80037fc:	4d0b      	ldr	r5, [pc, #44]	@ (800382c <__libc_init_array+0x40>)
 80037fe:	4c0c      	ldr	r4, [pc, #48]	@ (8003830 <__libc_init_array+0x44>)
 8003800:	f003 fb74 	bl	8006eec <_init>
 8003804:	1b64      	subs	r4, r4, r5
 8003806:	10a4      	asrs	r4, r4, #2
 8003808:	2600      	movs	r6, #0
 800380a:	42a6      	cmp	r6, r4
 800380c:	d105      	bne.n	800381a <__libc_init_array+0x2e>
 800380e:	bd70      	pop	{r4, r5, r6, pc}
 8003810:	f855 3b04 	ldr.w	r3, [r5], #4
 8003814:	4798      	blx	r3
 8003816:	3601      	adds	r6, #1
 8003818:	e7ee      	b.n	80037f8 <__libc_init_array+0xc>
 800381a:	f855 3b04 	ldr.w	r3, [r5], #4
 800381e:	4798      	blx	r3
 8003820:	3601      	adds	r6, #1
 8003822:	e7f2      	b.n	800380a <__libc_init_array+0x1e>
 8003824:	0800733c 	.word	0x0800733c
 8003828:	0800733c 	.word	0x0800733c
 800382c:	0800733c 	.word	0x0800733c
 8003830:	08007340 	.word	0x08007340

08003834 <__retarget_lock_init_recursive>:
 8003834:	4770      	bx	lr

08003836 <__retarget_lock_acquire_recursive>:
 8003836:	4770      	bx	lr

08003838 <__retarget_lock_release_recursive>:
 8003838:	4770      	bx	lr
	...

0800383c <nanf>:
 800383c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8003844 <nanf+0x8>
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	7fc00000 	.word	0x7fc00000

08003848 <quorem>:
 8003848:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800384c:	6903      	ldr	r3, [r0, #16]
 800384e:	690c      	ldr	r4, [r1, #16]
 8003850:	42a3      	cmp	r3, r4
 8003852:	4607      	mov	r7, r0
 8003854:	db7e      	blt.n	8003954 <quorem+0x10c>
 8003856:	3c01      	subs	r4, #1
 8003858:	f101 0814 	add.w	r8, r1, #20
 800385c:	00a3      	lsls	r3, r4, #2
 800385e:	f100 0514 	add.w	r5, r0, #20
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003868:	9301      	str	r3, [sp, #4]
 800386a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800386e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003872:	3301      	adds	r3, #1
 8003874:	429a      	cmp	r2, r3
 8003876:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800387a:	fbb2 f6f3 	udiv	r6, r2, r3
 800387e:	d32e      	bcc.n	80038de <quorem+0x96>
 8003880:	f04f 0a00 	mov.w	sl, #0
 8003884:	46c4      	mov	ip, r8
 8003886:	46ae      	mov	lr, r5
 8003888:	46d3      	mov	fp, sl
 800388a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800388e:	b298      	uxth	r0, r3
 8003890:	fb06 a000 	mla	r0, r6, r0, sl
 8003894:	0c02      	lsrs	r2, r0, #16
 8003896:	0c1b      	lsrs	r3, r3, #16
 8003898:	fb06 2303 	mla	r3, r6, r3, r2
 800389c:	f8de 2000 	ldr.w	r2, [lr]
 80038a0:	b280      	uxth	r0, r0
 80038a2:	b292      	uxth	r2, r2
 80038a4:	1a12      	subs	r2, r2, r0
 80038a6:	445a      	add	r2, fp
 80038a8:	f8de 0000 	ldr.w	r0, [lr]
 80038ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80038b6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80038ba:	b292      	uxth	r2, r2
 80038bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80038c0:	45e1      	cmp	r9, ip
 80038c2:	f84e 2b04 	str.w	r2, [lr], #4
 80038c6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80038ca:	d2de      	bcs.n	800388a <quorem+0x42>
 80038cc:	9b00      	ldr	r3, [sp, #0]
 80038ce:	58eb      	ldr	r3, [r5, r3]
 80038d0:	b92b      	cbnz	r3, 80038de <quorem+0x96>
 80038d2:	9b01      	ldr	r3, [sp, #4]
 80038d4:	3b04      	subs	r3, #4
 80038d6:	429d      	cmp	r5, r3
 80038d8:	461a      	mov	r2, r3
 80038da:	d32f      	bcc.n	800393c <quorem+0xf4>
 80038dc:	613c      	str	r4, [r7, #16]
 80038de:	4638      	mov	r0, r7
 80038e0:	f001 f9c6 	bl	8004c70 <__mcmp>
 80038e4:	2800      	cmp	r0, #0
 80038e6:	db25      	blt.n	8003934 <quorem+0xec>
 80038e8:	4629      	mov	r1, r5
 80038ea:	2000      	movs	r0, #0
 80038ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80038f0:	f8d1 c000 	ldr.w	ip, [r1]
 80038f4:	fa1f fe82 	uxth.w	lr, r2
 80038f8:	fa1f f38c 	uxth.w	r3, ip
 80038fc:	eba3 030e 	sub.w	r3, r3, lr
 8003900:	4403      	add	r3, r0
 8003902:	0c12      	lsrs	r2, r2, #16
 8003904:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003908:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800390c:	b29b      	uxth	r3, r3
 800390e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003912:	45c1      	cmp	r9, r8
 8003914:	f841 3b04 	str.w	r3, [r1], #4
 8003918:	ea4f 4022 	mov.w	r0, r2, asr #16
 800391c:	d2e6      	bcs.n	80038ec <quorem+0xa4>
 800391e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003922:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003926:	b922      	cbnz	r2, 8003932 <quorem+0xea>
 8003928:	3b04      	subs	r3, #4
 800392a:	429d      	cmp	r5, r3
 800392c:	461a      	mov	r2, r3
 800392e:	d30b      	bcc.n	8003948 <quorem+0x100>
 8003930:	613c      	str	r4, [r7, #16]
 8003932:	3601      	adds	r6, #1
 8003934:	4630      	mov	r0, r6
 8003936:	b003      	add	sp, #12
 8003938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800393c:	6812      	ldr	r2, [r2, #0]
 800393e:	3b04      	subs	r3, #4
 8003940:	2a00      	cmp	r2, #0
 8003942:	d1cb      	bne.n	80038dc <quorem+0x94>
 8003944:	3c01      	subs	r4, #1
 8003946:	e7c6      	b.n	80038d6 <quorem+0x8e>
 8003948:	6812      	ldr	r2, [r2, #0]
 800394a:	3b04      	subs	r3, #4
 800394c:	2a00      	cmp	r2, #0
 800394e:	d1ef      	bne.n	8003930 <quorem+0xe8>
 8003950:	3c01      	subs	r4, #1
 8003952:	e7ea      	b.n	800392a <quorem+0xe2>
 8003954:	2000      	movs	r0, #0
 8003956:	e7ee      	b.n	8003936 <quorem+0xee>

08003958 <_dtoa_r>:
 8003958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800395c:	69c7      	ldr	r7, [r0, #28]
 800395e:	b097      	sub	sp, #92	@ 0x5c
 8003960:	ed8d 0b04 	vstr	d0, [sp, #16]
 8003964:	ec55 4b10 	vmov	r4, r5, d0
 8003968:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800396a:	9107      	str	r1, [sp, #28]
 800396c:	4681      	mov	r9, r0
 800396e:	920c      	str	r2, [sp, #48]	@ 0x30
 8003970:	9311      	str	r3, [sp, #68]	@ 0x44
 8003972:	b97f      	cbnz	r7, 8003994 <_dtoa_r+0x3c>
 8003974:	2010      	movs	r0, #16
 8003976:	f000 fe09 	bl	800458c <malloc>
 800397a:	4602      	mov	r2, r0
 800397c:	f8c9 001c 	str.w	r0, [r9, #28]
 8003980:	b920      	cbnz	r0, 800398c <_dtoa_r+0x34>
 8003982:	4ba9      	ldr	r3, [pc, #676]	@ (8003c28 <_dtoa_r+0x2d0>)
 8003984:	21ef      	movs	r1, #239	@ 0xef
 8003986:	48a9      	ldr	r0, [pc, #676]	@ (8003c2c <_dtoa_r+0x2d4>)
 8003988:	f002 fc3a 	bl	8006200 <__assert_func>
 800398c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003990:	6007      	str	r7, [r0, #0]
 8003992:	60c7      	str	r7, [r0, #12]
 8003994:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003998:	6819      	ldr	r1, [r3, #0]
 800399a:	b159      	cbz	r1, 80039b4 <_dtoa_r+0x5c>
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	604a      	str	r2, [r1, #4]
 80039a0:	2301      	movs	r3, #1
 80039a2:	4093      	lsls	r3, r2
 80039a4:	608b      	str	r3, [r1, #8]
 80039a6:	4648      	mov	r0, r9
 80039a8:	f000 fee6 	bl	8004778 <_Bfree>
 80039ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	1e2b      	subs	r3, r5, #0
 80039b6:	bfb9      	ittee	lt
 80039b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80039bc:	9305      	strlt	r3, [sp, #20]
 80039be:	2300      	movge	r3, #0
 80039c0:	6033      	strge	r3, [r6, #0]
 80039c2:	9f05      	ldr	r7, [sp, #20]
 80039c4:	4b9a      	ldr	r3, [pc, #616]	@ (8003c30 <_dtoa_r+0x2d8>)
 80039c6:	bfbc      	itt	lt
 80039c8:	2201      	movlt	r2, #1
 80039ca:	6032      	strlt	r2, [r6, #0]
 80039cc:	43bb      	bics	r3, r7
 80039ce:	d112      	bne.n	80039f6 <_dtoa_r+0x9e>
 80039d0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80039d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80039d6:	6013      	str	r3, [r2, #0]
 80039d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80039dc:	4323      	orrs	r3, r4
 80039de:	f000 855a 	beq.w	8004496 <_dtoa_r+0xb3e>
 80039e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80039e4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8003c44 <_dtoa_r+0x2ec>
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 855c 	beq.w	80044a6 <_dtoa_r+0xb4e>
 80039ee:	f10a 0303 	add.w	r3, sl, #3
 80039f2:	f000 bd56 	b.w	80044a2 <_dtoa_r+0xb4a>
 80039f6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80039fa:	2200      	movs	r2, #0
 80039fc:	ec51 0b17 	vmov	r0, r1, d7
 8003a00:	2300      	movs	r3, #0
 8003a02:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8003a06:	f7fd f85f 	bl	8000ac8 <__aeabi_dcmpeq>
 8003a0a:	4680      	mov	r8, r0
 8003a0c:	b158      	cbz	r0, 8003a26 <_dtoa_r+0xce>
 8003a0e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8003a10:	2301      	movs	r3, #1
 8003a12:	6013      	str	r3, [r2, #0]
 8003a14:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003a16:	b113      	cbz	r3, 8003a1e <_dtoa_r+0xc6>
 8003a18:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8003a1a:	4b86      	ldr	r3, [pc, #536]	@ (8003c34 <_dtoa_r+0x2dc>)
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8003c48 <_dtoa_r+0x2f0>
 8003a22:	f000 bd40 	b.w	80044a6 <_dtoa_r+0xb4e>
 8003a26:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8003a2a:	aa14      	add	r2, sp, #80	@ 0x50
 8003a2c:	a915      	add	r1, sp, #84	@ 0x54
 8003a2e:	4648      	mov	r0, r9
 8003a30:	f001 fa3e 	bl	8004eb0 <__d2b>
 8003a34:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8003a38:	9002      	str	r0, [sp, #8]
 8003a3a:	2e00      	cmp	r6, #0
 8003a3c:	d078      	beq.n	8003b30 <_dtoa_r+0x1d8>
 8003a3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003a40:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8003a44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003a4c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003a50:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003a54:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003a58:	4619      	mov	r1, r3
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	4b76      	ldr	r3, [pc, #472]	@ (8003c38 <_dtoa_r+0x2e0>)
 8003a5e:	f7fc fc13 	bl	8000288 <__aeabi_dsub>
 8003a62:	a36b      	add	r3, pc, #428	@ (adr r3, 8003c10 <_dtoa_r+0x2b8>)
 8003a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a68:	f7fc fdc6 	bl	80005f8 <__aeabi_dmul>
 8003a6c:	a36a      	add	r3, pc, #424	@ (adr r3, 8003c18 <_dtoa_r+0x2c0>)
 8003a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a72:	f7fc fc0b 	bl	800028c <__adddf3>
 8003a76:	4604      	mov	r4, r0
 8003a78:	4630      	mov	r0, r6
 8003a7a:	460d      	mov	r5, r1
 8003a7c:	f7fc fd52 	bl	8000524 <__aeabi_i2d>
 8003a80:	a367      	add	r3, pc, #412	@ (adr r3, 8003c20 <_dtoa_r+0x2c8>)
 8003a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a86:	f7fc fdb7 	bl	80005f8 <__aeabi_dmul>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	4620      	mov	r0, r4
 8003a90:	4629      	mov	r1, r5
 8003a92:	f7fc fbfb 	bl	800028c <__adddf3>
 8003a96:	4604      	mov	r4, r0
 8003a98:	460d      	mov	r5, r1
 8003a9a:	f7fd f85d 	bl	8000b58 <__aeabi_d2iz>
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	4607      	mov	r7, r0
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	4629      	mov	r1, r5
 8003aa8:	f7fd f818 	bl	8000adc <__aeabi_dcmplt>
 8003aac:	b140      	cbz	r0, 8003ac0 <_dtoa_r+0x168>
 8003aae:	4638      	mov	r0, r7
 8003ab0:	f7fc fd38 	bl	8000524 <__aeabi_i2d>
 8003ab4:	4622      	mov	r2, r4
 8003ab6:	462b      	mov	r3, r5
 8003ab8:	f7fd f806 	bl	8000ac8 <__aeabi_dcmpeq>
 8003abc:	b900      	cbnz	r0, 8003ac0 <_dtoa_r+0x168>
 8003abe:	3f01      	subs	r7, #1
 8003ac0:	2f16      	cmp	r7, #22
 8003ac2:	d852      	bhi.n	8003b6a <_dtoa_r+0x212>
 8003ac4:	4b5d      	ldr	r3, [pc, #372]	@ (8003c3c <_dtoa_r+0x2e4>)
 8003ac6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ace:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003ad2:	f7fd f803 	bl	8000adc <__aeabi_dcmplt>
 8003ad6:	2800      	cmp	r0, #0
 8003ad8:	d049      	beq.n	8003b6e <_dtoa_r+0x216>
 8003ada:	3f01      	subs	r7, #1
 8003adc:	2300      	movs	r3, #0
 8003ade:	9310      	str	r3, [sp, #64]	@ 0x40
 8003ae0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003ae2:	1b9b      	subs	r3, r3, r6
 8003ae4:	1e5a      	subs	r2, r3, #1
 8003ae6:	bf45      	ittet	mi
 8003ae8:	f1c3 0301 	rsbmi	r3, r3, #1
 8003aec:	9300      	strmi	r3, [sp, #0]
 8003aee:	2300      	movpl	r3, #0
 8003af0:	2300      	movmi	r3, #0
 8003af2:	9206      	str	r2, [sp, #24]
 8003af4:	bf54      	ite	pl
 8003af6:	9300      	strpl	r3, [sp, #0]
 8003af8:	9306      	strmi	r3, [sp, #24]
 8003afa:	2f00      	cmp	r7, #0
 8003afc:	db39      	blt.n	8003b72 <_dtoa_r+0x21a>
 8003afe:	9b06      	ldr	r3, [sp, #24]
 8003b00:	970d      	str	r7, [sp, #52]	@ 0x34
 8003b02:	443b      	add	r3, r7
 8003b04:	9306      	str	r3, [sp, #24]
 8003b06:	2300      	movs	r3, #0
 8003b08:	9308      	str	r3, [sp, #32]
 8003b0a:	9b07      	ldr	r3, [sp, #28]
 8003b0c:	2b09      	cmp	r3, #9
 8003b0e:	d863      	bhi.n	8003bd8 <_dtoa_r+0x280>
 8003b10:	2b05      	cmp	r3, #5
 8003b12:	bfc4      	itt	gt
 8003b14:	3b04      	subgt	r3, #4
 8003b16:	9307      	strgt	r3, [sp, #28]
 8003b18:	9b07      	ldr	r3, [sp, #28]
 8003b1a:	f1a3 0302 	sub.w	r3, r3, #2
 8003b1e:	bfcc      	ite	gt
 8003b20:	2400      	movgt	r4, #0
 8003b22:	2401      	movle	r4, #1
 8003b24:	2b03      	cmp	r3, #3
 8003b26:	d863      	bhi.n	8003bf0 <_dtoa_r+0x298>
 8003b28:	e8df f003 	tbb	[pc, r3]
 8003b2c:	2b375452 	.word	0x2b375452
 8003b30:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003b34:	441e      	add	r6, r3
 8003b36:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003b3a:	2b20      	cmp	r3, #32
 8003b3c:	bfc1      	itttt	gt
 8003b3e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003b42:	409f      	lslgt	r7, r3
 8003b44:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003b48:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003b4c:	bfd6      	itet	le
 8003b4e:	f1c3 0320 	rsble	r3, r3, #32
 8003b52:	ea47 0003 	orrgt.w	r0, r7, r3
 8003b56:	fa04 f003 	lslle.w	r0, r4, r3
 8003b5a:	f7fc fcd3 	bl	8000504 <__aeabi_ui2d>
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003b64:	3e01      	subs	r6, #1
 8003b66:	9212      	str	r2, [sp, #72]	@ 0x48
 8003b68:	e776      	b.n	8003a58 <_dtoa_r+0x100>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e7b7      	b.n	8003ade <_dtoa_r+0x186>
 8003b6e:	9010      	str	r0, [sp, #64]	@ 0x40
 8003b70:	e7b6      	b.n	8003ae0 <_dtoa_r+0x188>
 8003b72:	9b00      	ldr	r3, [sp, #0]
 8003b74:	1bdb      	subs	r3, r3, r7
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	427b      	negs	r3, r7
 8003b7a:	9308      	str	r3, [sp, #32]
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	930d      	str	r3, [sp, #52]	@ 0x34
 8003b80:	e7c3      	b.n	8003b0a <_dtoa_r+0x1b2>
 8003b82:	2301      	movs	r3, #1
 8003b84:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003b88:	eb07 0b03 	add.w	fp, r7, r3
 8003b8c:	f10b 0301 	add.w	r3, fp, #1
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	9303      	str	r3, [sp, #12]
 8003b94:	bfb8      	it	lt
 8003b96:	2301      	movlt	r3, #1
 8003b98:	e006      	b.n	8003ba8 <_dtoa_r+0x250>
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	dd28      	ble.n	8003bf6 <_dtoa_r+0x29e>
 8003ba4:	469b      	mov	fp, r3
 8003ba6:	9303      	str	r3, [sp, #12]
 8003ba8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8003bac:	2100      	movs	r1, #0
 8003bae:	2204      	movs	r2, #4
 8003bb0:	f102 0514 	add.w	r5, r2, #20
 8003bb4:	429d      	cmp	r5, r3
 8003bb6:	d926      	bls.n	8003c06 <_dtoa_r+0x2ae>
 8003bb8:	6041      	str	r1, [r0, #4]
 8003bba:	4648      	mov	r0, r9
 8003bbc:	f000 fd9c 	bl	80046f8 <_Balloc>
 8003bc0:	4682      	mov	sl, r0
 8003bc2:	2800      	cmp	r0, #0
 8003bc4:	d142      	bne.n	8003c4c <_dtoa_r+0x2f4>
 8003bc6:	4b1e      	ldr	r3, [pc, #120]	@ (8003c40 <_dtoa_r+0x2e8>)
 8003bc8:	4602      	mov	r2, r0
 8003bca:	f240 11af 	movw	r1, #431	@ 0x1af
 8003bce:	e6da      	b.n	8003986 <_dtoa_r+0x2e>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	e7e3      	b.n	8003b9c <_dtoa_r+0x244>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	e7d5      	b.n	8003b84 <_dtoa_r+0x22c>
 8003bd8:	2401      	movs	r4, #1
 8003bda:	2300      	movs	r3, #0
 8003bdc:	9307      	str	r3, [sp, #28]
 8003bde:	9409      	str	r4, [sp, #36]	@ 0x24
 8003be0:	f04f 3bff 	mov.w	fp, #4294967295
 8003be4:	2200      	movs	r2, #0
 8003be6:	f8cd b00c 	str.w	fp, [sp, #12]
 8003bea:	2312      	movs	r3, #18
 8003bec:	920c      	str	r2, [sp, #48]	@ 0x30
 8003bee:	e7db      	b.n	8003ba8 <_dtoa_r+0x250>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	9309      	str	r3, [sp, #36]	@ 0x24
 8003bf4:	e7f4      	b.n	8003be0 <_dtoa_r+0x288>
 8003bf6:	f04f 0b01 	mov.w	fp, #1
 8003bfa:	f8cd b00c 	str.w	fp, [sp, #12]
 8003bfe:	465b      	mov	r3, fp
 8003c00:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8003c04:	e7d0      	b.n	8003ba8 <_dtoa_r+0x250>
 8003c06:	3101      	adds	r1, #1
 8003c08:	0052      	lsls	r2, r2, #1
 8003c0a:	e7d1      	b.n	8003bb0 <_dtoa_r+0x258>
 8003c0c:	f3af 8000 	nop.w
 8003c10:	636f4361 	.word	0x636f4361
 8003c14:	3fd287a7 	.word	0x3fd287a7
 8003c18:	8b60c8b3 	.word	0x8b60c8b3
 8003c1c:	3fc68a28 	.word	0x3fc68a28
 8003c20:	509f79fb 	.word	0x509f79fb
 8003c24:	3fd34413 	.word	0x3fd34413
 8003c28:	08006f4e 	.word	0x08006f4e
 8003c2c:	08006f65 	.word	0x08006f65
 8003c30:	7ff00000 	.word	0x7ff00000
 8003c34:	08006f19 	.word	0x08006f19
 8003c38:	3ff80000 	.word	0x3ff80000
 8003c3c:	08007118 	.word	0x08007118
 8003c40:	08006fbd 	.word	0x08006fbd
 8003c44:	08006f4a 	.word	0x08006f4a
 8003c48:	08006f18 	.word	0x08006f18
 8003c4c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003c50:	6018      	str	r0, [r3, #0]
 8003c52:	9b03      	ldr	r3, [sp, #12]
 8003c54:	2b0e      	cmp	r3, #14
 8003c56:	f200 80a1 	bhi.w	8003d9c <_dtoa_r+0x444>
 8003c5a:	2c00      	cmp	r4, #0
 8003c5c:	f000 809e 	beq.w	8003d9c <_dtoa_r+0x444>
 8003c60:	2f00      	cmp	r7, #0
 8003c62:	dd33      	ble.n	8003ccc <_dtoa_r+0x374>
 8003c64:	4b9c      	ldr	r3, [pc, #624]	@ (8003ed8 <_dtoa_r+0x580>)
 8003c66:	f007 020f 	and.w	r2, r7, #15
 8003c6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003c6e:	ed93 7b00 	vldr	d7, [r3]
 8003c72:	05f8      	lsls	r0, r7, #23
 8003c74:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8003c78:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003c7c:	d516      	bpl.n	8003cac <_dtoa_r+0x354>
 8003c7e:	4b97      	ldr	r3, [pc, #604]	@ (8003edc <_dtoa_r+0x584>)
 8003c80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003c84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003c88:	f7fc fde0 	bl	800084c <__aeabi_ddiv>
 8003c8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003c90:	f004 040f 	and.w	r4, r4, #15
 8003c94:	2603      	movs	r6, #3
 8003c96:	4d91      	ldr	r5, [pc, #580]	@ (8003edc <_dtoa_r+0x584>)
 8003c98:	b954      	cbnz	r4, 8003cb0 <_dtoa_r+0x358>
 8003c9a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8003c9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ca2:	f7fc fdd3 	bl	800084c <__aeabi_ddiv>
 8003ca6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003caa:	e028      	b.n	8003cfe <_dtoa_r+0x3a6>
 8003cac:	2602      	movs	r6, #2
 8003cae:	e7f2      	b.n	8003c96 <_dtoa_r+0x33e>
 8003cb0:	07e1      	lsls	r1, r4, #31
 8003cb2:	d508      	bpl.n	8003cc6 <_dtoa_r+0x36e>
 8003cb4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8003cb8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003cbc:	f7fc fc9c 	bl	80005f8 <__aeabi_dmul>
 8003cc0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003cc4:	3601      	adds	r6, #1
 8003cc6:	1064      	asrs	r4, r4, #1
 8003cc8:	3508      	adds	r5, #8
 8003cca:	e7e5      	b.n	8003c98 <_dtoa_r+0x340>
 8003ccc:	f000 80af 	beq.w	8003e2e <_dtoa_r+0x4d6>
 8003cd0:	427c      	negs	r4, r7
 8003cd2:	4b81      	ldr	r3, [pc, #516]	@ (8003ed8 <_dtoa_r+0x580>)
 8003cd4:	4d81      	ldr	r5, [pc, #516]	@ (8003edc <_dtoa_r+0x584>)
 8003cd6:	f004 020f 	and.w	r2, r4, #15
 8003cda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003ce6:	f7fc fc87 	bl	80005f8 <__aeabi_dmul>
 8003cea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003cee:	1124      	asrs	r4, r4, #4
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	2602      	movs	r6, #2
 8003cf4:	2c00      	cmp	r4, #0
 8003cf6:	f040 808f 	bne.w	8003e18 <_dtoa_r+0x4c0>
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1d3      	bne.n	8003ca6 <_dtoa_r+0x34e>
 8003cfe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003d00:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 8094 	beq.w	8003e32 <_dtoa_r+0x4da>
 8003d0a:	4b75      	ldr	r3, [pc, #468]	@ (8003ee0 <_dtoa_r+0x588>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	4620      	mov	r0, r4
 8003d10:	4629      	mov	r1, r5
 8003d12:	f7fc fee3 	bl	8000adc <__aeabi_dcmplt>
 8003d16:	2800      	cmp	r0, #0
 8003d18:	f000 808b 	beq.w	8003e32 <_dtoa_r+0x4da>
 8003d1c:	9b03      	ldr	r3, [sp, #12]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 8087 	beq.w	8003e32 <_dtoa_r+0x4da>
 8003d24:	f1bb 0f00 	cmp.w	fp, #0
 8003d28:	dd34      	ble.n	8003d94 <_dtoa_r+0x43c>
 8003d2a:	4620      	mov	r0, r4
 8003d2c:	4b6d      	ldr	r3, [pc, #436]	@ (8003ee4 <_dtoa_r+0x58c>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	4629      	mov	r1, r5
 8003d32:	f7fc fc61 	bl	80005f8 <__aeabi_dmul>
 8003d36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003d3a:	f107 38ff 	add.w	r8, r7, #4294967295
 8003d3e:	3601      	adds	r6, #1
 8003d40:	465c      	mov	r4, fp
 8003d42:	4630      	mov	r0, r6
 8003d44:	f7fc fbee 	bl	8000524 <__aeabi_i2d>
 8003d48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d4c:	f7fc fc54 	bl	80005f8 <__aeabi_dmul>
 8003d50:	4b65      	ldr	r3, [pc, #404]	@ (8003ee8 <_dtoa_r+0x590>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	f7fc fa9a 	bl	800028c <__adddf3>
 8003d58:	4605      	mov	r5, r0
 8003d5a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003d5e:	2c00      	cmp	r4, #0
 8003d60:	d16a      	bne.n	8003e38 <_dtoa_r+0x4e0>
 8003d62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d66:	4b61      	ldr	r3, [pc, #388]	@ (8003eec <_dtoa_r+0x594>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f7fc fa8d 	bl	8000288 <__aeabi_dsub>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	460b      	mov	r3, r1
 8003d72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003d76:	462a      	mov	r2, r5
 8003d78:	4633      	mov	r3, r6
 8003d7a:	f7fc fecd 	bl	8000b18 <__aeabi_dcmpgt>
 8003d7e:	2800      	cmp	r0, #0
 8003d80:	f040 8298 	bne.w	80042b4 <_dtoa_r+0x95c>
 8003d84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d88:	462a      	mov	r2, r5
 8003d8a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003d8e:	f7fc fea5 	bl	8000adc <__aeabi_dcmplt>
 8003d92:	bb38      	cbnz	r0, 8003de4 <_dtoa_r+0x48c>
 8003d94:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8003d98:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003d9c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f2c0 8157 	blt.w	8004052 <_dtoa_r+0x6fa>
 8003da4:	2f0e      	cmp	r7, #14
 8003da6:	f300 8154 	bgt.w	8004052 <_dtoa_r+0x6fa>
 8003daa:	4b4b      	ldr	r3, [pc, #300]	@ (8003ed8 <_dtoa_r+0x580>)
 8003dac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003db0:	ed93 7b00 	vldr	d7, [r3]
 8003db4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	ed8d 7b00 	vstr	d7, [sp]
 8003dbc:	f280 80e5 	bge.w	8003f8a <_dtoa_r+0x632>
 8003dc0:	9b03      	ldr	r3, [sp, #12]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f300 80e1 	bgt.w	8003f8a <_dtoa_r+0x632>
 8003dc8:	d10c      	bne.n	8003de4 <_dtoa_r+0x48c>
 8003dca:	4b48      	ldr	r3, [pc, #288]	@ (8003eec <_dtoa_r+0x594>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	ec51 0b17 	vmov	r0, r1, d7
 8003dd2:	f7fc fc11 	bl	80005f8 <__aeabi_dmul>
 8003dd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003dda:	f7fc fe93 	bl	8000b04 <__aeabi_dcmpge>
 8003dde:	2800      	cmp	r0, #0
 8003de0:	f000 8266 	beq.w	80042b0 <_dtoa_r+0x958>
 8003de4:	2400      	movs	r4, #0
 8003de6:	4625      	mov	r5, r4
 8003de8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003dea:	4656      	mov	r6, sl
 8003dec:	ea6f 0803 	mvn.w	r8, r3
 8003df0:	2700      	movs	r7, #0
 8003df2:	4621      	mov	r1, r4
 8003df4:	4648      	mov	r0, r9
 8003df6:	f000 fcbf 	bl	8004778 <_Bfree>
 8003dfa:	2d00      	cmp	r5, #0
 8003dfc:	f000 80bd 	beq.w	8003f7a <_dtoa_r+0x622>
 8003e00:	b12f      	cbz	r7, 8003e0e <_dtoa_r+0x4b6>
 8003e02:	42af      	cmp	r7, r5
 8003e04:	d003      	beq.n	8003e0e <_dtoa_r+0x4b6>
 8003e06:	4639      	mov	r1, r7
 8003e08:	4648      	mov	r0, r9
 8003e0a:	f000 fcb5 	bl	8004778 <_Bfree>
 8003e0e:	4629      	mov	r1, r5
 8003e10:	4648      	mov	r0, r9
 8003e12:	f000 fcb1 	bl	8004778 <_Bfree>
 8003e16:	e0b0      	b.n	8003f7a <_dtoa_r+0x622>
 8003e18:	07e2      	lsls	r2, r4, #31
 8003e1a:	d505      	bpl.n	8003e28 <_dtoa_r+0x4d0>
 8003e1c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003e20:	f7fc fbea 	bl	80005f8 <__aeabi_dmul>
 8003e24:	3601      	adds	r6, #1
 8003e26:	2301      	movs	r3, #1
 8003e28:	1064      	asrs	r4, r4, #1
 8003e2a:	3508      	adds	r5, #8
 8003e2c:	e762      	b.n	8003cf4 <_dtoa_r+0x39c>
 8003e2e:	2602      	movs	r6, #2
 8003e30:	e765      	b.n	8003cfe <_dtoa_r+0x3a6>
 8003e32:	9c03      	ldr	r4, [sp, #12]
 8003e34:	46b8      	mov	r8, r7
 8003e36:	e784      	b.n	8003d42 <_dtoa_r+0x3ea>
 8003e38:	4b27      	ldr	r3, [pc, #156]	@ (8003ed8 <_dtoa_r+0x580>)
 8003e3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003e3c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003e40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003e44:	4454      	add	r4, sl
 8003e46:	2900      	cmp	r1, #0
 8003e48:	d054      	beq.n	8003ef4 <_dtoa_r+0x59c>
 8003e4a:	4929      	ldr	r1, [pc, #164]	@ (8003ef0 <_dtoa_r+0x598>)
 8003e4c:	2000      	movs	r0, #0
 8003e4e:	f7fc fcfd 	bl	800084c <__aeabi_ddiv>
 8003e52:	4633      	mov	r3, r6
 8003e54:	462a      	mov	r2, r5
 8003e56:	f7fc fa17 	bl	8000288 <__aeabi_dsub>
 8003e5a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003e5e:	4656      	mov	r6, sl
 8003e60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e64:	f7fc fe78 	bl	8000b58 <__aeabi_d2iz>
 8003e68:	4605      	mov	r5, r0
 8003e6a:	f7fc fb5b 	bl	8000524 <__aeabi_i2d>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	460b      	mov	r3, r1
 8003e72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e76:	f7fc fa07 	bl	8000288 <__aeabi_dsub>
 8003e7a:	3530      	adds	r5, #48	@ 0x30
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003e84:	f806 5b01 	strb.w	r5, [r6], #1
 8003e88:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8003e8c:	f7fc fe26 	bl	8000adc <__aeabi_dcmplt>
 8003e90:	2800      	cmp	r0, #0
 8003e92:	d172      	bne.n	8003f7a <_dtoa_r+0x622>
 8003e94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e98:	4911      	ldr	r1, [pc, #68]	@ (8003ee0 <_dtoa_r+0x588>)
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	f7fc f9f4 	bl	8000288 <__aeabi_dsub>
 8003ea0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8003ea4:	f7fc fe1a 	bl	8000adc <__aeabi_dcmplt>
 8003ea8:	2800      	cmp	r0, #0
 8003eaa:	f040 80b4 	bne.w	8004016 <_dtoa_r+0x6be>
 8003eae:	42a6      	cmp	r6, r4
 8003eb0:	f43f af70 	beq.w	8003d94 <_dtoa_r+0x43c>
 8003eb4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8003eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ee4 <_dtoa_r+0x58c>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f7fc fb9c 	bl	80005f8 <__aeabi_dmul>
 8003ec0:	4b08      	ldr	r3, [pc, #32]	@ (8003ee4 <_dtoa_r+0x58c>)
 8003ec2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ecc:	f7fc fb94 	bl	80005f8 <__aeabi_dmul>
 8003ed0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003ed4:	e7c4      	b.n	8003e60 <_dtoa_r+0x508>
 8003ed6:	bf00      	nop
 8003ed8:	08007118 	.word	0x08007118
 8003edc:	080070f0 	.word	0x080070f0
 8003ee0:	3ff00000 	.word	0x3ff00000
 8003ee4:	40240000 	.word	0x40240000
 8003ee8:	401c0000 	.word	0x401c0000
 8003eec:	40140000 	.word	0x40140000
 8003ef0:	3fe00000 	.word	0x3fe00000
 8003ef4:	4631      	mov	r1, r6
 8003ef6:	4628      	mov	r0, r5
 8003ef8:	f7fc fb7e 	bl	80005f8 <__aeabi_dmul>
 8003efc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003f00:	9413      	str	r4, [sp, #76]	@ 0x4c
 8003f02:	4656      	mov	r6, sl
 8003f04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f08:	f7fc fe26 	bl	8000b58 <__aeabi_d2iz>
 8003f0c:	4605      	mov	r5, r0
 8003f0e:	f7fc fb09 	bl	8000524 <__aeabi_i2d>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f1a:	f7fc f9b5 	bl	8000288 <__aeabi_dsub>
 8003f1e:	3530      	adds	r5, #48	@ 0x30
 8003f20:	f806 5b01 	strb.w	r5, [r6], #1
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	42a6      	cmp	r6, r4
 8003f2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003f2e:	f04f 0200 	mov.w	r2, #0
 8003f32:	d124      	bne.n	8003f7e <_dtoa_r+0x626>
 8003f34:	4baf      	ldr	r3, [pc, #700]	@ (80041f4 <_dtoa_r+0x89c>)
 8003f36:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8003f3a:	f7fc f9a7 	bl	800028c <__adddf3>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	460b      	mov	r3, r1
 8003f42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f46:	f7fc fde7 	bl	8000b18 <__aeabi_dcmpgt>
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	d163      	bne.n	8004016 <_dtoa_r+0x6be>
 8003f4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8003f52:	49a8      	ldr	r1, [pc, #672]	@ (80041f4 <_dtoa_r+0x89c>)
 8003f54:	2000      	movs	r0, #0
 8003f56:	f7fc f997 	bl	8000288 <__aeabi_dsub>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f62:	f7fc fdbb 	bl	8000adc <__aeabi_dcmplt>
 8003f66:	2800      	cmp	r0, #0
 8003f68:	f43f af14 	beq.w	8003d94 <_dtoa_r+0x43c>
 8003f6c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8003f6e:	1e73      	subs	r3, r6, #1
 8003f70:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003f72:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8003f76:	2b30      	cmp	r3, #48	@ 0x30
 8003f78:	d0f8      	beq.n	8003f6c <_dtoa_r+0x614>
 8003f7a:	4647      	mov	r7, r8
 8003f7c:	e03b      	b.n	8003ff6 <_dtoa_r+0x69e>
 8003f7e:	4b9e      	ldr	r3, [pc, #632]	@ (80041f8 <_dtoa_r+0x8a0>)
 8003f80:	f7fc fb3a 	bl	80005f8 <__aeabi_dmul>
 8003f84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003f88:	e7bc      	b.n	8003f04 <_dtoa_r+0x5ac>
 8003f8a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8003f8e:	4656      	mov	r6, sl
 8003f90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003f94:	4620      	mov	r0, r4
 8003f96:	4629      	mov	r1, r5
 8003f98:	f7fc fc58 	bl	800084c <__aeabi_ddiv>
 8003f9c:	f7fc fddc 	bl	8000b58 <__aeabi_d2iz>
 8003fa0:	4680      	mov	r8, r0
 8003fa2:	f7fc fabf 	bl	8000524 <__aeabi_i2d>
 8003fa6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003faa:	f7fc fb25 	bl	80005f8 <__aeabi_dmul>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	4629      	mov	r1, r5
 8003fb6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8003fba:	f7fc f965 	bl	8000288 <__aeabi_dsub>
 8003fbe:	f806 4b01 	strb.w	r4, [r6], #1
 8003fc2:	9d03      	ldr	r5, [sp, #12]
 8003fc4:	eba6 040a 	sub.w	r4, r6, sl
 8003fc8:	42a5      	cmp	r5, r4
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	d133      	bne.n	8004038 <_dtoa_r+0x6e0>
 8003fd0:	f7fc f95c 	bl	800028c <__adddf3>
 8003fd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003fd8:	4604      	mov	r4, r0
 8003fda:	460d      	mov	r5, r1
 8003fdc:	f7fc fd9c 	bl	8000b18 <__aeabi_dcmpgt>
 8003fe0:	b9c0      	cbnz	r0, 8004014 <_dtoa_r+0x6bc>
 8003fe2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003fe6:	4620      	mov	r0, r4
 8003fe8:	4629      	mov	r1, r5
 8003fea:	f7fc fd6d 	bl	8000ac8 <__aeabi_dcmpeq>
 8003fee:	b110      	cbz	r0, 8003ff6 <_dtoa_r+0x69e>
 8003ff0:	f018 0f01 	tst.w	r8, #1
 8003ff4:	d10e      	bne.n	8004014 <_dtoa_r+0x6bc>
 8003ff6:	9902      	ldr	r1, [sp, #8]
 8003ff8:	4648      	mov	r0, r9
 8003ffa:	f000 fbbd 	bl	8004778 <_Bfree>
 8003ffe:	2300      	movs	r3, #0
 8004000:	7033      	strb	r3, [r6, #0]
 8004002:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004004:	3701      	adds	r7, #1
 8004006:	601f      	str	r7, [r3, #0]
 8004008:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800400a:	2b00      	cmp	r3, #0
 800400c:	f000 824b 	beq.w	80044a6 <_dtoa_r+0xb4e>
 8004010:	601e      	str	r6, [r3, #0]
 8004012:	e248      	b.n	80044a6 <_dtoa_r+0xb4e>
 8004014:	46b8      	mov	r8, r7
 8004016:	4633      	mov	r3, r6
 8004018:	461e      	mov	r6, r3
 800401a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800401e:	2a39      	cmp	r2, #57	@ 0x39
 8004020:	d106      	bne.n	8004030 <_dtoa_r+0x6d8>
 8004022:	459a      	cmp	sl, r3
 8004024:	d1f8      	bne.n	8004018 <_dtoa_r+0x6c0>
 8004026:	2230      	movs	r2, #48	@ 0x30
 8004028:	f108 0801 	add.w	r8, r8, #1
 800402c:	f88a 2000 	strb.w	r2, [sl]
 8004030:	781a      	ldrb	r2, [r3, #0]
 8004032:	3201      	adds	r2, #1
 8004034:	701a      	strb	r2, [r3, #0]
 8004036:	e7a0      	b.n	8003f7a <_dtoa_r+0x622>
 8004038:	4b6f      	ldr	r3, [pc, #444]	@ (80041f8 <_dtoa_r+0x8a0>)
 800403a:	2200      	movs	r2, #0
 800403c:	f7fc fadc 	bl	80005f8 <__aeabi_dmul>
 8004040:	2200      	movs	r2, #0
 8004042:	2300      	movs	r3, #0
 8004044:	4604      	mov	r4, r0
 8004046:	460d      	mov	r5, r1
 8004048:	f7fc fd3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800404c:	2800      	cmp	r0, #0
 800404e:	d09f      	beq.n	8003f90 <_dtoa_r+0x638>
 8004050:	e7d1      	b.n	8003ff6 <_dtoa_r+0x69e>
 8004052:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004054:	2a00      	cmp	r2, #0
 8004056:	f000 80ea 	beq.w	800422e <_dtoa_r+0x8d6>
 800405a:	9a07      	ldr	r2, [sp, #28]
 800405c:	2a01      	cmp	r2, #1
 800405e:	f300 80cd 	bgt.w	80041fc <_dtoa_r+0x8a4>
 8004062:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004064:	2a00      	cmp	r2, #0
 8004066:	f000 80c1 	beq.w	80041ec <_dtoa_r+0x894>
 800406a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800406e:	9c08      	ldr	r4, [sp, #32]
 8004070:	9e00      	ldr	r6, [sp, #0]
 8004072:	9a00      	ldr	r2, [sp, #0]
 8004074:	441a      	add	r2, r3
 8004076:	9200      	str	r2, [sp, #0]
 8004078:	9a06      	ldr	r2, [sp, #24]
 800407a:	2101      	movs	r1, #1
 800407c:	441a      	add	r2, r3
 800407e:	4648      	mov	r0, r9
 8004080:	9206      	str	r2, [sp, #24]
 8004082:	f000 fc77 	bl	8004974 <__i2b>
 8004086:	4605      	mov	r5, r0
 8004088:	b166      	cbz	r6, 80040a4 <_dtoa_r+0x74c>
 800408a:	9b06      	ldr	r3, [sp, #24]
 800408c:	2b00      	cmp	r3, #0
 800408e:	dd09      	ble.n	80040a4 <_dtoa_r+0x74c>
 8004090:	42b3      	cmp	r3, r6
 8004092:	9a00      	ldr	r2, [sp, #0]
 8004094:	bfa8      	it	ge
 8004096:	4633      	movge	r3, r6
 8004098:	1ad2      	subs	r2, r2, r3
 800409a:	9200      	str	r2, [sp, #0]
 800409c:	9a06      	ldr	r2, [sp, #24]
 800409e:	1af6      	subs	r6, r6, r3
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	9306      	str	r3, [sp, #24]
 80040a4:	9b08      	ldr	r3, [sp, #32]
 80040a6:	b30b      	cbz	r3, 80040ec <_dtoa_r+0x794>
 80040a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 80c6 	beq.w	800423c <_dtoa_r+0x8e4>
 80040b0:	2c00      	cmp	r4, #0
 80040b2:	f000 80c0 	beq.w	8004236 <_dtoa_r+0x8de>
 80040b6:	4629      	mov	r1, r5
 80040b8:	4622      	mov	r2, r4
 80040ba:	4648      	mov	r0, r9
 80040bc:	f000 fd12 	bl	8004ae4 <__pow5mult>
 80040c0:	9a02      	ldr	r2, [sp, #8]
 80040c2:	4601      	mov	r1, r0
 80040c4:	4605      	mov	r5, r0
 80040c6:	4648      	mov	r0, r9
 80040c8:	f000 fc6a 	bl	80049a0 <__multiply>
 80040cc:	9902      	ldr	r1, [sp, #8]
 80040ce:	4680      	mov	r8, r0
 80040d0:	4648      	mov	r0, r9
 80040d2:	f000 fb51 	bl	8004778 <_Bfree>
 80040d6:	9b08      	ldr	r3, [sp, #32]
 80040d8:	1b1b      	subs	r3, r3, r4
 80040da:	9308      	str	r3, [sp, #32]
 80040dc:	f000 80b1 	beq.w	8004242 <_dtoa_r+0x8ea>
 80040e0:	9a08      	ldr	r2, [sp, #32]
 80040e2:	4641      	mov	r1, r8
 80040e4:	4648      	mov	r0, r9
 80040e6:	f000 fcfd 	bl	8004ae4 <__pow5mult>
 80040ea:	9002      	str	r0, [sp, #8]
 80040ec:	2101      	movs	r1, #1
 80040ee:	4648      	mov	r0, r9
 80040f0:	f000 fc40 	bl	8004974 <__i2b>
 80040f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80040f6:	4604      	mov	r4, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 81d8 	beq.w	80044ae <_dtoa_r+0xb56>
 80040fe:	461a      	mov	r2, r3
 8004100:	4601      	mov	r1, r0
 8004102:	4648      	mov	r0, r9
 8004104:	f000 fcee 	bl	8004ae4 <__pow5mult>
 8004108:	9b07      	ldr	r3, [sp, #28]
 800410a:	2b01      	cmp	r3, #1
 800410c:	4604      	mov	r4, r0
 800410e:	f300 809f 	bgt.w	8004250 <_dtoa_r+0x8f8>
 8004112:	9b04      	ldr	r3, [sp, #16]
 8004114:	2b00      	cmp	r3, #0
 8004116:	f040 8097 	bne.w	8004248 <_dtoa_r+0x8f0>
 800411a:	9b05      	ldr	r3, [sp, #20]
 800411c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004120:	2b00      	cmp	r3, #0
 8004122:	f040 8093 	bne.w	800424c <_dtoa_r+0x8f4>
 8004126:	9b05      	ldr	r3, [sp, #20]
 8004128:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800412c:	0d1b      	lsrs	r3, r3, #20
 800412e:	051b      	lsls	r3, r3, #20
 8004130:	b133      	cbz	r3, 8004140 <_dtoa_r+0x7e8>
 8004132:	9b00      	ldr	r3, [sp, #0]
 8004134:	3301      	adds	r3, #1
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	9b06      	ldr	r3, [sp, #24]
 800413a:	3301      	adds	r3, #1
 800413c:	9306      	str	r3, [sp, #24]
 800413e:	2301      	movs	r3, #1
 8004140:	9308      	str	r3, [sp, #32]
 8004142:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 81b8 	beq.w	80044ba <_dtoa_r+0xb62>
 800414a:	6923      	ldr	r3, [r4, #16]
 800414c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004150:	6918      	ldr	r0, [r3, #16]
 8004152:	f000 fbc3 	bl	80048dc <__hi0bits>
 8004156:	f1c0 0020 	rsb	r0, r0, #32
 800415a:	9b06      	ldr	r3, [sp, #24]
 800415c:	4418      	add	r0, r3
 800415e:	f010 001f 	ands.w	r0, r0, #31
 8004162:	f000 8082 	beq.w	800426a <_dtoa_r+0x912>
 8004166:	f1c0 0320 	rsb	r3, r0, #32
 800416a:	2b04      	cmp	r3, #4
 800416c:	dd73      	ble.n	8004256 <_dtoa_r+0x8fe>
 800416e:	9b00      	ldr	r3, [sp, #0]
 8004170:	f1c0 001c 	rsb	r0, r0, #28
 8004174:	4403      	add	r3, r0
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	9b06      	ldr	r3, [sp, #24]
 800417a:	4403      	add	r3, r0
 800417c:	4406      	add	r6, r0
 800417e:	9306      	str	r3, [sp, #24]
 8004180:	9b00      	ldr	r3, [sp, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	dd05      	ble.n	8004192 <_dtoa_r+0x83a>
 8004186:	9902      	ldr	r1, [sp, #8]
 8004188:	461a      	mov	r2, r3
 800418a:	4648      	mov	r0, r9
 800418c:	f000 fd04 	bl	8004b98 <__lshift>
 8004190:	9002      	str	r0, [sp, #8]
 8004192:	9b06      	ldr	r3, [sp, #24]
 8004194:	2b00      	cmp	r3, #0
 8004196:	dd05      	ble.n	80041a4 <_dtoa_r+0x84c>
 8004198:	4621      	mov	r1, r4
 800419a:	461a      	mov	r2, r3
 800419c:	4648      	mov	r0, r9
 800419e:	f000 fcfb 	bl	8004b98 <__lshift>
 80041a2:	4604      	mov	r4, r0
 80041a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d061      	beq.n	800426e <_dtoa_r+0x916>
 80041aa:	9802      	ldr	r0, [sp, #8]
 80041ac:	4621      	mov	r1, r4
 80041ae:	f000 fd5f 	bl	8004c70 <__mcmp>
 80041b2:	2800      	cmp	r0, #0
 80041b4:	da5b      	bge.n	800426e <_dtoa_r+0x916>
 80041b6:	2300      	movs	r3, #0
 80041b8:	9902      	ldr	r1, [sp, #8]
 80041ba:	220a      	movs	r2, #10
 80041bc:	4648      	mov	r0, r9
 80041be:	f000 fafd 	bl	80047bc <__multadd>
 80041c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041c4:	9002      	str	r0, [sp, #8]
 80041c6:	f107 38ff 	add.w	r8, r7, #4294967295
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 8177 	beq.w	80044be <_dtoa_r+0xb66>
 80041d0:	4629      	mov	r1, r5
 80041d2:	2300      	movs	r3, #0
 80041d4:	220a      	movs	r2, #10
 80041d6:	4648      	mov	r0, r9
 80041d8:	f000 faf0 	bl	80047bc <__multadd>
 80041dc:	f1bb 0f00 	cmp.w	fp, #0
 80041e0:	4605      	mov	r5, r0
 80041e2:	dc6f      	bgt.n	80042c4 <_dtoa_r+0x96c>
 80041e4:	9b07      	ldr	r3, [sp, #28]
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	dc49      	bgt.n	800427e <_dtoa_r+0x926>
 80041ea:	e06b      	b.n	80042c4 <_dtoa_r+0x96c>
 80041ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80041ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80041f2:	e73c      	b.n	800406e <_dtoa_r+0x716>
 80041f4:	3fe00000 	.word	0x3fe00000
 80041f8:	40240000 	.word	0x40240000
 80041fc:	9b03      	ldr	r3, [sp, #12]
 80041fe:	1e5c      	subs	r4, r3, #1
 8004200:	9b08      	ldr	r3, [sp, #32]
 8004202:	42a3      	cmp	r3, r4
 8004204:	db09      	blt.n	800421a <_dtoa_r+0x8c2>
 8004206:	1b1c      	subs	r4, r3, r4
 8004208:	9b03      	ldr	r3, [sp, #12]
 800420a:	2b00      	cmp	r3, #0
 800420c:	f6bf af30 	bge.w	8004070 <_dtoa_r+0x718>
 8004210:	9b00      	ldr	r3, [sp, #0]
 8004212:	9a03      	ldr	r2, [sp, #12]
 8004214:	1a9e      	subs	r6, r3, r2
 8004216:	2300      	movs	r3, #0
 8004218:	e72b      	b.n	8004072 <_dtoa_r+0x71a>
 800421a:	9b08      	ldr	r3, [sp, #32]
 800421c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800421e:	9408      	str	r4, [sp, #32]
 8004220:	1ae3      	subs	r3, r4, r3
 8004222:	441a      	add	r2, r3
 8004224:	9e00      	ldr	r6, [sp, #0]
 8004226:	9b03      	ldr	r3, [sp, #12]
 8004228:	920d      	str	r2, [sp, #52]	@ 0x34
 800422a:	2400      	movs	r4, #0
 800422c:	e721      	b.n	8004072 <_dtoa_r+0x71a>
 800422e:	9c08      	ldr	r4, [sp, #32]
 8004230:	9e00      	ldr	r6, [sp, #0]
 8004232:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8004234:	e728      	b.n	8004088 <_dtoa_r+0x730>
 8004236:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800423a:	e751      	b.n	80040e0 <_dtoa_r+0x788>
 800423c:	9a08      	ldr	r2, [sp, #32]
 800423e:	9902      	ldr	r1, [sp, #8]
 8004240:	e750      	b.n	80040e4 <_dtoa_r+0x78c>
 8004242:	f8cd 8008 	str.w	r8, [sp, #8]
 8004246:	e751      	b.n	80040ec <_dtoa_r+0x794>
 8004248:	2300      	movs	r3, #0
 800424a:	e779      	b.n	8004140 <_dtoa_r+0x7e8>
 800424c:	9b04      	ldr	r3, [sp, #16]
 800424e:	e777      	b.n	8004140 <_dtoa_r+0x7e8>
 8004250:	2300      	movs	r3, #0
 8004252:	9308      	str	r3, [sp, #32]
 8004254:	e779      	b.n	800414a <_dtoa_r+0x7f2>
 8004256:	d093      	beq.n	8004180 <_dtoa_r+0x828>
 8004258:	9a00      	ldr	r2, [sp, #0]
 800425a:	331c      	adds	r3, #28
 800425c:	441a      	add	r2, r3
 800425e:	9200      	str	r2, [sp, #0]
 8004260:	9a06      	ldr	r2, [sp, #24]
 8004262:	441a      	add	r2, r3
 8004264:	441e      	add	r6, r3
 8004266:	9206      	str	r2, [sp, #24]
 8004268:	e78a      	b.n	8004180 <_dtoa_r+0x828>
 800426a:	4603      	mov	r3, r0
 800426c:	e7f4      	b.n	8004258 <_dtoa_r+0x900>
 800426e:	9b03      	ldr	r3, [sp, #12]
 8004270:	2b00      	cmp	r3, #0
 8004272:	46b8      	mov	r8, r7
 8004274:	dc20      	bgt.n	80042b8 <_dtoa_r+0x960>
 8004276:	469b      	mov	fp, r3
 8004278:	9b07      	ldr	r3, [sp, #28]
 800427a:	2b02      	cmp	r3, #2
 800427c:	dd1e      	ble.n	80042bc <_dtoa_r+0x964>
 800427e:	f1bb 0f00 	cmp.w	fp, #0
 8004282:	f47f adb1 	bne.w	8003de8 <_dtoa_r+0x490>
 8004286:	4621      	mov	r1, r4
 8004288:	465b      	mov	r3, fp
 800428a:	2205      	movs	r2, #5
 800428c:	4648      	mov	r0, r9
 800428e:	f000 fa95 	bl	80047bc <__multadd>
 8004292:	4601      	mov	r1, r0
 8004294:	4604      	mov	r4, r0
 8004296:	9802      	ldr	r0, [sp, #8]
 8004298:	f000 fcea 	bl	8004c70 <__mcmp>
 800429c:	2800      	cmp	r0, #0
 800429e:	f77f ada3 	ble.w	8003de8 <_dtoa_r+0x490>
 80042a2:	4656      	mov	r6, sl
 80042a4:	2331      	movs	r3, #49	@ 0x31
 80042a6:	f806 3b01 	strb.w	r3, [r6], #1
 80042aa:	f108 0801 	add.w	r8, r8, #1
 80042ae:	e59f      	b.n	8003df0 <_dtoa_r+0x498>
 80042b0:	9c03      	ldr	r4, [sp, #12]
 80042b2:	46b8      	mov	r8, r7
 80042b4:	4625      	mov	r5, r4
 80042b6:	e7f4      	b.n	80042a2 <_dtoa_r+0x94a>
 80042b8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80042bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 8101 	beq.w	80044c6 <_dtoa_r+0xb6e>
 80042c4:	2e00      	cmp	r6, #0
 80042c6:	dd05      	ble.n	80042d4 <_dtoa_r+0x97c>
 80042c8:	4629      	mov	r1, r5
 80042ca:	4632      	mov	r2, r6
 80042cc:	4648      	mov	r0, r9
 80042ce:	f000 fc63 	bl	8004b98 <__lshift>
 80042d2:	4605      	mov	r5, r0
 80042d4:	9b08      	ldr	r3, [sp, #32]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d05c      	beq.n	8004394 <_dtoa_r+0xa3c>
 80042da:	6869      	ldr	r1, [r5, #4]
 80042dc:	4648      	mov	r0, r9
 80042de:	f000 fa0b 	bl	80046f8 <_Balloc>
 80042e2:	4606      	mov	r6, r0
 80042e4:	b928      	cbnz	r0, 80042f2 <_dtoa_r+0x99a>
 80042e6:	4b82      	ldr	r3, [pc, #520]	@ (80044f0 <_dtoa_r+0xb98>)
 80042e8:	4602      	mov	r2, r0
 80042ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80042ee:	f7ff bb4a 	b.w	8003986 <_dtoa_r+0x2e>
 80042f2:	692a      	ldr	r2, [r5, #16]
 80042f4:	3202      	adds	r2, #2
 80042f6:	0092      	lsls	r2, r2, #2
 80042f8:	f105 010c 	add.w	r1, r5, #12
 80042fc:	300c      	adds	r0, #12
 80042fe:	f001 ff69 	bl	80061d4 <memcpy>
 8004302:	2201      	movs	r2, #1
 8004304:	4631      	mov	r1, r6
 8004306:	4648      	mov	r0, r9
 8004308:	f000 fc46 	bl	8004b98 <__lshift>
 800430c:	f10a 0301 	add.w	r3, sl, #1
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	eb0a 030b 	add.w	r3, sl, fp
 8004316:	9308      	str	r3, [sp, #32]
 8004318:	9b04      	ldr	r3, [sp, #16]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	462f      	mov	r7, r5
 8004320:	9306      	str	r3, [sp, #24]
 8004322:	4605      	mov	r5, r0
 8004324:	9b00      	ldr	r3, [sp, #0]
 8004326:	9802      	ldr	r0, [sp, #8]
 8004328:	4621      	mov	r1, r4
 800432a:	f103 3bff 	add.w	fp, r3, #4294967295
 800432e:	f7ff fa8b 	bl	8003848 <quorem>
 8004332:	4603      	mov	r3, r0
 8004334:	3330      	adds	r3, #48	@ 0x30
 8004336:	9003      	str	r0, [sp, #12]
 8004338:	4639      	mov	r1, r7
 800433a:	9802      	ldr	r0, [sp, #8]
 800433c:	9309      	str	r3, [sp, #36]	@ 0x24
 800433e:	f000 fc97 	bl	8004c70 <__mcmp>
 8004342:	462a      	mov	r2, r5
 8004344:	9004      	str	r0, [sp, #16]
 8004346:	4621      	mov	r1, r4
 8004348:	4648      	mov	r0, r9
 800434a:	f000 fcad 	bl	8004ca8 <__mdiff>
 800434e:	68c2      	ldr	r2, [r0, #12]
 8004350:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004352:	4606      	mov	r6, r0
 8004354:	bb02      	cbnz	r2, 8004398 <_dtoa_r+0xa40>
 8004356:	4601      	mov	r1, r0
 8004358:	9802      	ldr	r0, [sp, #8]
 800435a:	f000 fc89 	bl	8004c70 <__mcmp>
 800435e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004360:	4602      	mov	r2, r0
 8004362:	4631      	mov	r1, r6
 8004364:	4648      	mov	r0, r9
 8004366:	920c      	str	r2, [sp, #48]	@ 0x30
 8004368:	9309      	str	r3, [sp, #36]	@ 0x24
 800436a:	f000 fa05 	bl	8004778 <_Bfree>
 800436e:	9b07      	ldr	r3, [sp, #28]
 8004370:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004372:	9e00      	ldr	r6, [sp, #0]
 8004374:	ea42 0103 	orr.w	r1, r2, r3
 8004378:	9b06      	ldr	r3, [sp, #24]
 800437a:	4319      	orrs	r1, r3
 800437c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800437e:	d10d      	bne.n	800439c <_dtoa_r+0xa44>
 8004380:	2b39      	cmp	r3, #57	@ 0x39
 8004382:	d027      	beq.n	80043d4 <_dtoa_r+0xa7c>
 8004384:	9a04      	ldr	r2, [sp, #16]
 8004386:	2a00      	cmp	r2, #0
 8004388:	dd01      	ble.n	800438e <_dtoa_r+0xa36>
 800438a:	9b03      	ldr	r3, [sp, #12]
 800438c:	3331      	adds	r3, #49	@ 0x31
 800438e:	f88b 3000 	strb.w	r3, [fp]
 8004392:	e52e      	b.n	8003df2 <_dtoa_r+0x49a>
 8004394:	4628      	mov	r0, r5
 8004396:	e7b9      	b.n	800430c <_dtoa_r+0x9b4>
 8004398:	2201      	movs	r2, #1
 800439a:	e7e2      	b.n	8004362 <_dtoa_r+0xa0a>
 800439c:	9904      	ldr	r1, [sp, #16]
 800439e:	2900      	cmp	r1, #0
 80043a0:	db04      	blt.n	80043ac <_dtoa_r+0xa54>
 80043a2:	9807      	ldr	r0, [sp, #28]
 80043a4:	4301      	orrs	r1, r0
 80043a6:	9806      	ldr	r0, [sp, #24]
 80043a8:	4301      	orrs	r1, r0
 80043aa:	d120      	bne.n	80043ee <_dtoa_r+0xa96>
 80043ac:	2a00      	cmp	r2, #0
 80043ae:	ddee      	ble.n	800438e <_dtoa_r+0xa36>
 80043b0:	9902      	ldr	r1, [sp, #8]
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	2201      	movs	r2, #1
 80043b6:	4648      	mov	r0, r9
 80043b8:	f000 fbee 	bl	8004b98 <__lshift>
 80043bc:	4621      	mov	r1, r4
 80043be:	9002      	str	r0, [sp, #8]
 80043c0:	f000 fc56 	bl	8004c70 <__mcmp>
 80043c4:	2800      	cmp	r0, #0
 80043c6:	9b00      	ldr	r3, [sp, #0]
 80043c8:	dc02      	bgt.n	80043d0 <_dtoa_r+0xa78>
 80043ca:	d1e0      	bne.n	800438e <_dtoa_r+0xa36>
 80043cc:	07da      	lsls	r2, r3, #31
 80043ce:	d5de      	bpl.n	800438e <_dtoa_r+0xa36>
 80043d0:	2b39      	cmp	r3, #57	@ 0x39
 80043d2:	d1da      	bne.n	800438a <_dtoa_r+0xa32>
 80043d4:	2339      	movs	r3, #57	@ 0x39
 80043d6:	f88b 3000 	strb.w	r3, [fp]
 80043da:	4633      	mov	r3, r6
 80043dc:	461e      	mov	r6, r3
 80043de:	3b01      	subs	r3, #1
 80043e0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80043e4:	2a39      	cmp	r2, #57	@ 0x39
 80043e6:	d04e      	beq.n	8004486 <_dtoa_r+0xb2e>
 80043e8:	3201      	adds	r2, #1
 80043ea:	701a      	strb	r2, [r3, #0]
 80043ec:	e501      	b.n	8003df2 <_dtoa_r+0x49a>
 80043ee:	2a00      	cmp	r2, #0
 80043f0:	dd03      	ble.n	80043fa <_dtoa_r+0xaa2>
 80043f2:	2b39      	cmp	r3, #57	@ 0x39
 80043f4:	d0ee      	beq.n	80043d4 <_dtoa_r+0xa7c>
 80043f6:	3301      	adds	r3, #1
 80043f8:	e7c9      	b.n	800438e <_dtoa_r+0xa36>
 80043fa:	9a00      	ldr	r2, [sp, #0]
 80043fc:	9908      	ldr	r1, [sp, #32]
 80043fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004402:	428a      	cmp	r2, r1
 8004404:	d028      	beq.n	8004458 <_dtoa_r+0xb00>
 8004406:	9902      	ldr	r1, [sp, #8]
 8004408:	2300      	movs	r3, #0
 800440a:	220a      	movs	r2, #10
 800440c:	4648      	mov	r0, r9
 800440e:	f000 f9d5 	bl	80047bc <__multadd>
 8004412:	42af      	cmp	r7, r5
 8004414:	9002      	str	r0, [sp, #8]
 8004416:	f04f 0300 	mov.w	r3, #0
 800441a:	f04f 020a 	mov.w	r2, #10
 800441e:	4639      	mov	r1, r7
 8004420:	4648      	mov	r0, r9
 8004422:	d107      	bne.n	8004434 <_dtoa_r+0xadc>
 8004424:	f000 f9ca 	bl	80047bc <__multadd>
 8004428:	4607      	mov	r7, r0
 800442a:	4605      	mov	r5, r0
 800442c:	9b00      	ldr	r3, [sp, #0]
 800442e:	3301      	adds	r3, #1
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	e777      	b.n	8004324 <_dtoa_r+0x9cc>
 8004434:	f000 f9c2 	bl	80047bc <__multadd>
 8004438:	4629      	mov	r1, r5
 800443a:	4607      	mov	r7, r0
 800443c:	2300      	movs	r3, #0
 800443e:	220a      	movs	r2, #10
 8004440:	4648      	mov	r0, r9
 8004442:	f000 f9bb 	bl	80047bc <__multadd>
 8004446:	4605      	mov	r5, r0
 8004448:	e7f0      	b.n	800442c <_dtoa_r+0xad4>
 800444a:	f1bb 0f00 	cmp.w	fp, #0
 800444e:	bfcc      	ite	gt
 8004450:	465e      	movgt	r6, fp
 8004452:	2601      	movle	r6, #1
 8004454:	4456      	add	r6, sl
 8004456:	2700      	movs	r7, #0
 8004458:	9902      	ldr	r1, [sp, #8]
 800445a:	9300      	str	r3, [sp, #0]
 800445c:	2201      	movs	r2, #1
 800445e:	4648      	mov	r0, r9
 8004460:	f000 fb9a 	bl	8004b98 <__lshift>
 8004464:	4621      	mov	r1, r4
 8004466:	9002      	str	r0, [sp, #8]
 8004468:	f000 fc02 	bl	8004c70 <__mcmp>
 800446c:	2800      	cmp	r0, #0
 800446e:	dcb4      	bgt.n	80043da <_dtoa_r+0xa82>
 8004470:	d102      	bne.n	8004478 <_dtoa_r+0xb20>
 8004472:	9b00      	ldr	r3, [sp, #0]
 8004474:	07db      	lsls	r3, r3, #31
 8004476:	d4b0      	bmi.n	80043da <_dtoa_r+0xa82>
 8004478:	4633      	mov	r3, r6
 800447a:	461e      	mov	r6, r3
 800447c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004480:	2a30      	cmp	r2, #48	@ 0x30
 8004482:	d0fa      	beq.n	800447a <_dtoa_r+0xb22>
 8004484:	e4b5      	b.n	8003df2 <_dtoa_r+0x49a>
 8004486:	459a      	cmp	sl, r3
 8004488:	d1a8      	bne.n	80043dc <_dtoa_r+0xa84>
 800448a:	2331      	movs	r3, #49	@ 0x31
 800448c:	f108 0801 	add.w	r8, r8, #1
 8004490:	f88a 3000 	strb.w	r3, [sl]
 8004494:	e4ad      	b.n	8003df2 <_dtoa_r+0x49a>
 8004496:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004498:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80044f4 <_dtoa_r+0xb9c>
 800449c:	b11b      	cbz	r3, 80044a6 <_dtoa_r+0xb4e>
 800449e:	f10a 0308 	add.w	r3, sl, #8
 80044a2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	4650      	mov	r0, sl
 80044a8:	b017      	add	sp, #92	@ 0x5c
 80044aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ae:	9b07      	ldr	r3, [sp, #28]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	f77f ae2e 	ble.w	8004112 <_dtoa_r+0x7ba>
 80044b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80044b8:	9308      	str	r3, [sp, #32]
 80044ba:	2001      	movs	r0, #1
 80044bc:	e64d      	b.n	800415a <_dtoa_r+0x802>
 80044be:	f1bb 0f00 	cmp.w	fp, #0
 80044c2:	f77f aed9 	ble.w	8004278 <_dtoa_r+0x920>
 80044c6:	4656      	mov	r6, sl
 80044c8:	9802      	ldr	r0, [sp, #8]
 80044ca:	4621      	mov	r1, r4
 80044cc:	f7ff f9bc 	bl	8003848 <quorem>
 80044d0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80044d4:	f806 3b01 	strb.w	r3, [r6], #1
 80044d8:	eba6 020a 	sub.w	r2, r6, sl
 80044dc:	4593      	cmp	fp, r2
 80044de:	ddb4      	ble.n	800444a <_dtoa_r+0xaf2>
 80044e0:	9902      	ldr	r1, [sp, #8]
 80044e2:	2300      	movs	r3, #0
 80044e4:	220a      	movs	r2, #10
 80044e6:	4648      	mov	r0, r9
 80044e8:	f000 f968 	bl	80047bc <__multadd>
 80044ec:	9002      	str	r0, [sp, #8]
 80044ee:	e7eb      	b.n	80044c8 <_dtoa_r+0xb70>
 80044f0:	08006fbd 	.word	0x08006fbd
 80044f4:	08006f41 	.word	0x08006f41

080044f8 <_free_r>:
 80044f8:	b538      	push	{r3, r4, r5, lr}
 80044fa:	4605      	mov	r5, r0
 80044fc:	2900      	cmp	r1, #0
 80044fe:	d041      	beq.n	8004584 <_free_r+0x8c>
 8004500:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004504:	1f0c      	subs	r4, r1, #4
 8004506:	2b00      	cmp	r3, #0
 8004508:	bfb8      	it	lt
 800450a:	18e4      	addlt	r4, r4, r3
 800450c:	f000 f8e8 	bl	80046e0 <__malloc_lock>
 8004510:	4a1d      	ldr	r2, [pc, #116]	@ (8004588 <_free_r+0x90>)
 8004512:	6813      	ldr	r3, [r2, #0]
 8004514:	b933      	cbnz	r3, 8004524 <_free_r+0x2c>
 8004516:	6063      	str	r3, [r4, #4]
 8004518:	6014      	str	r4, [r2, #0]
 800451a:	4628      	mov	r0, r5
 800451c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004520:	f000 b8e4 	b.w	80046ec <__malloc_unlock>
 8004524:	42a3      	cmp	r3, r4
 8004526:	d908      	bls.n	800453a <_free_r+0x42>
 8004528:	6820      	ldr	r0, [r4, #0]
 800452a:	1821      	adds	r1, r4, r0
 800452c:	428b      	cmp	r3, r1
 800452e:	bf01      	itttt	eq
 8004530:	6819      	ldreq	r1, [r3, #0]
 8004532:	685b      	ldreq	r3, [r3, #4]
 8004534:	1809      	addeq	r1, r1, r0
 8004536:	6021      	streq	r1, [r4, #0]
 8004538:	e7ed      	b.n	8004516 <_free_r+0x1e>
 800453a:	461a      	mov	r2, r3
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	b10b      	cbz	r3, 8004544 <_free_r+0x4c>
 8004540:	42a3      	cmp	r3, r4
 8004542:	d9fa      	bls.n	800453a <_free_r+0x42>
 8004544:	6811      	ldr	r1, [r2, #0]
 8004546:	1850      	adds	r0, r2, r1
 8004548:	42a0      	cmp	r0, r4
 800454a:	d10b      	bne.n	8004564 <_free_r+0x6c>
 800454c:	6820      	ldr	r0, [r4, #0]
 800454e:	4401      	add	r1, r0
 8004550:	1850      	adds	r0, r2, r1
 8004552:	4283      	cmp	r3, r0
 8004554:	6011      	str	r1, [r2, #0]
 8004556:	d1e0      	bne.n	800451a <_free_r+0x22>
 8004558:	6818      	ldr	r0, [r3, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	6053      	str	r3, [r2, #4]
 800455e:	4408      	add	r0, r1
 8004560:	6010      	str	r0, [r2, #0]
 8004562:	e7da      	b.n	800451a <_free_r+0x22>
 8004564:	d902      	bls.n	800456c <_free_r+0x74>
 8004566:	230c      	movs	r3, #12
 8004568:	602b      	str	r3, [r5, #0]
 800456a:	e7d6      	b.n	800451a <_free_r+0x22>
 800456c:	6820      	ldr	r0, [r4, #0]
 800456e:	1821      	adds	r1, r4, r0
 8004570:	428b      	cmp	r3, r1
 8004572:	bf04      	itt	eq
 8004574:	6819      	ldreq	r1, [r3, #0]
 8004576:	685b      	ldreq	r3, [r3, #4]
 8004578:	6063      	str	r3, [r4, #4]
 800457a:	bf04      	itt	eq
 800457c:	1809      	addeq	r1, r1, r0
 800457e:	6021      	streq	r1, [r4, #0]
 8004580:	6054      	str	r4, [r2, #4]
 8004582:	e7ca      	b.n	800451a <_free_r+0x22>
 8004584:	bd38      	pop	{r3, r4, r5, pc}
 8004586:	bf00      	nop
 8004588:	2000037c 	.word	0x2000037c

0800458c <malloc>:
 800458c:	4b02      	ldr	r3, [pc, #8]	@ (8004598 <malloc+0xc>)
 800458e:	4601      	mov	r1, r0
 8004590:	6818      	ldr	r0, [r3, #0]
 8004592:	f000 b825 	b.w	80045e0 <_malloc_r>
 8004596:	bf00      	nop
 8004598:	20000024 	.word	0x20000024

0800459c <sbrk_aligned>:
 800459c:	b570      	push	{r4, r5, r6, lr}
 800459e:	4e0f      	ldr	r6, [pc, #60]	@ (80045dc <sbrk_aligned+0x40>)
 80045a0:	460c      	mov	r4, r1
 80045a2:	6831      	ldr	r1, [r6, #0]
 80045a4:	4605      	mov	r5, r0
 80045a6:	b911      	cbnz	r1, 80045ae <sbrk_aligned+0x12>
 80045a8:	f001 fe04 	bl	80061b4 <_sbrk_r>
 80045ac:	6030      	str	r0, [r6, #0]
 80045ae:	4621      	mov	r1, r4
 80045b0:	4628      	mov	r0, r5
 80045b2:	f001 fdff 	bl	80061b4 <_sbrk_r>
 80045b6:	1c43      	adds	r3, r0, #1
 80045b8:	d103      	bne.n	80045c2 <sbrk_aligned+0x26>
 80045ba:	f04f 34ff 	mov.w	r4, #4294967295
 80045be:	4620      	mov	r0, r4
 80045c0:	bd70      	pop	{r4, r5, r6, pc}
 80045c2:	1cc4      	adds	r4, r0, #3
 80045c4:	f024 0403 	bic.w	r4, r4, #3
 80045c8:	42a0      	cmp	r0, r4
 80045ca:	d0f8      	beq.n	80045be <sbrk_aligned+0x22>
 80045cc:	1a21      	subs	r1, r4, r0
 80045ce:	4628      	mov	r0, r5
 80045d0:	f001 fdf0 	bl	80061b4 <_sbrk_r>
 80045d4:	3001      	adds	r0, #1
 80045d6:	d1f2      	bne.n	80045be <sbrk_aligned+0x22>
 80045d8:	e7ef      	b.n	80045ba <sbrk_aligned+0x1e>
 80045da:	bf00      	nop
 80045dc:	20000378 	.word	0x20000378

080045e0 <_malloc_r>:
 80045e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045e4:	1ccd      	adds	r5, r1, #3
 80045e6:	f025 0503 	bic.w	r5, r5, #3
 80045ea:	3508      	adds	r5, #8
 80045ec:	2d0c      	cmp	r5, #12
 80045ee:	bf38      	it	cc
 80045f0:	250c      	movcc	r5, #12
 80045f2:	2d00      	cmp	r5, #0
 80045f4:	4606      	mov	r6, r0
 80045f6:	db01      	blt.n	80045fc <_malloc_r+0x1c>
 80045f8:	42a9      	cmp	r1, r5
 80045fa:	d904      	bls.n	8004606 <_malloc_r+0x26>
 80045fc:	230c      	movs	r3, #12
 80045fe:	6033      	str	r3, [r6, #0]
 8004600:	2000      	movs	r0, #0
 8004602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004606:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80046dc <_malloc_r+0xfc>
 800460a:	f000 f869 	bl	80046e0 <__malloc_lock>
 800460e:	f8d8 3000 	ldr.w	r3, [r8]
 8004612:	461c      	mov	r4, r3
 8004614:	bb44      	cbnz	r4, 8004668 <_malloc_r+0x88>
 8004616:	4629      	mov	r1, r5
 8004618:	4630      	mov	r0, r6
 800461a:	f7ff ffbf 	bl	800459c <sbrk_aligned>
 800461e:	1c43      	adds	r3, r0, #1
 8004620:	4604      	mov	r4, r0
 8004622:	d158      	bne.n	80046d6 <_malloc_r+0xf6>
 8004624:	f8d8 4000 	ldr.w	r4, [r8]
 8004628:	4627      	mov	r7, r4
 800462a:	2f00      	cmp	r7, #0
 800462c:	d143      	bne.n	80046b6 <_malloc_r+0xd6>
 800462e:	2c00      	cmp	r4, #0
 8004630:	d04b      	beq.n	80046ca <_malloc_r+0xea>
 8004632:	6823      	ldr	r3, [r4, #0]
 8004634:	4639      	mov	r1, r7
 8004636:	4630      	mov	r0, r6
 8004638:	eb04 0903 	add.w	r9, r4, r3
 800463c:	f001 fdba 	bl	80061b4 <_sbrk_r>
 8004640:	4581      	cmp	r9, r0
 8004642:	d142      	bne.n	80046ca <_malloc_r+0xea>
 8004644:	6821      	ldr	r1, [r4, #0]
 8004646:	1a6d      	subs	r5, r5, r1
 8004648:	4629      	mov	r1, r5
 800464a:	4630      	mov	r0, r6
 800464c:	f7ff ffa6 	bl	800459c <sbrk_aligned>
 8004650:	3001      	adds	r0, #1
 8004652:	d03a      	beq.n	80046ca <_malloc_r+0xea>
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	442b      	add	r3, r5
 8004658:	6023      	str	r3, [r4, #0]
 800465a:	f8d8 3000 	ldr.w	r3, [r8]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	bb62      	cbnz	r2, 80046bc <_malloc_r+0xdc>
 8004662:	f8c8 7000 	str.w	r7, [r8]
 8004666:	e00f      	b.n	8004688 <_malloc_r+0xa8>
 8004668:	6822      	ldr	r2, [r4, #0]
 800466a:	1b52      	subs	r2, r2, r5
 800466c:	d420      	bmi.n	80046b0 <_malloc_r+0xd0>
 800466e:	2a0b      	cmp	r2, #11
 8004670:	d917      	bls.n	80046a2 <_malloc_r+0xc2>
 8004672:	1961      	adds	r1, r4, r5
 8004674:	42a3      	cmp	r3, r4
 8004676:	6025      	str	r5, [r4, #0]
 8004678:	bf18      	it	ne
 800467a:	6059      	strne	r1, [r3, #4]
 800467c:	6863      	ldr	r3, [r4, #4]
 800467e:	bf08      	it	eq
 8004680:	f8c8 1000 	streq.w	r1, [r8]
 8004684:	5162      	str	r2, [r4, r5]
 8004686:	604b      	str	r3, [r1, #4]
 8004688:	4630      	mov	r0, r6
 800468a:	f000 f82f 	bl	80046ec <__malloc_unlock>
 800468e:	f104 000b 	add.w	r0, r4, #11
 8004692:	1d23      	adds	r3, r4, #4
 8004694:	f020 0007 	bic.w	r0, r0, #7
 8004698:	1ac2      	subs	r2, r0, r3
 800469a:	bf1c      	itt	ne
 800469c:	1a1b      	subne	r3, r3, r0
 800469e:	50a3      	strne	r3, [r4, r2]
 80046a0:	e7af      	b.n	8004602 <_malloc_r+0x22>
 80046a2:	6862      	ldr	r2, [r4, #4]
 80046a4:	42a3      	cmp	r3, r4
 80046a6:	bf0c      	ite	eq
 80046a8:	f8c8 2000 	streq.w	r2, [r8]
 80046ac:	605a      	strne	r2, [r3, #4]
 80046ae:	e7eb      	b.n	8004688 <_malloc_r+0xa8>
 80046b0:	4623      	mov	r3, r4
 80046b2:	6864      	ldr	r4, [r4, #4]
 80046b4:	e7ae      	b.n	8004614 <_malloc_r+0x34>
 80046b6:	463c      	mov	r4, r7
 80046b8:	687f      	ldr	r7, [r7, #4]
 80046ba:	e7b6      	b.n	800462a <_malloc_r+0x4a>
 80046bc:	461a      	mov	r2, r3
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	42a3      	cmp	r3, r4
 80046c2:	d1fb      	bne.n	80046bc <_malloc_r+0xdc>
 80046c4:	2300      	movs	r3, #0
 80046c6:	6053      	str	r3, [r2, #4]
 80046c8:	e7de      	b.n	8004688 <_malloc_r+0xa8>
 80046ca:	230c      	movs	r3, #12
 80046cc:	6033      	str	r3, [r6, #0]
 80046ce:	4630      	mov	r0, r6
 80046d0:	f000 f80c 	bl	80046ec <__malloc_unlock>
 80046d4:	e794      	b.n	8004600 <_malloc_r+0x20>
 80046d6:	6005      	str	r5, [r0, #0]
 80046d8:	e7d6      	b.n	8004688 <_malloc_r+0xa8>
 80046da:	bf00      	nop
 80046dc:	2000037c 	.word	0x2000037c

080046e0 <__malloc_lock>:
 80046e0:	4801      	ldr	r0, [pc, #4]	@ (80046e8 <__malloc_lock+0x8>)
 80046e2:	f7ff b8a8 	b.w	8003836 <__retarget_lock_acquire_recursive>
 80046e6:	bf00      	nop
 80046e8:	20000374 	.word	0x20000374

080046ec <__malloc_unlock>:
 80046ec:	4801      	ldr	r0, [pc, #4]	@ (80046f4 <__malloc_unlock+0x8>)
 80046ee:	f7ff b8a3 	b.w	8003838 <__retarget_lock_release_recursive>
 80046f2:	bf00      	nop
 80046f4:	20000374 	.word	0x20000374

080046f8 <_Balloc>:
 80046f8:	b570      	push	{r4, r5, r6, lr}
 80046fa:	69c6      	ldr	r6, [r0, #28]
 80046fc:	4604      	mov	r4, r0
 80046fe:	460d      	mov	r5, r1
 8004700:	b976      	cbnz	r6, 8004720 <_Balloc+0x28>
 8004702:	2010      	movs	r0, #16
 8004704:	f7ff ff42 	bl	800458c <malloc>
 8004708:	4602      	mov	r2, r0
 800470a:	61e0      	str	r0, [r4, #28]
 800470c:	b920      	cbnz	r0, 8004718 <_Balloc+0x20>
 800470e:	4b18      	ldr	r3, [pc, #96]	@ (8004770 <_Balloc+0x78>)
 8004710:	4818      	ldr	r0, [pc, #96]	@ (8004774 <_Balloc+0x7c>)
 8004712:	216b      	movs	r1, #107	@ 0x6b
 8004714:	f001 fd74 	bl	8006200 <__assert_func>
 8004718:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800471c:	6006      	str	r6, [r0, #0]
 800471e:	60c6      	str	r6, [r0, #12]
 8004720:	69e6      	ldr	r6, [r4, #28]
 8004722:	68f3      	ldr	r3, [r6, #12]
 8004724:	b183      	cbz	r3, 8004748 <_Balloc+0x50>
 8004726:	69e3      	ldr	r3, [r4, #28]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800472e:	b9b8      	cbnz	r0, 8004760 <_Balloc+0x68>
 8004730:	2101      	movs	r1, #1
 8004732:	fa01 f605 	lsl.w	r6, r1, r5
 8004736:	1d72      	adds	r2, r6, #5
 8004738:	0092      	lsls	r2, r2, #2
 800473a:	4620      	mov	r0, r4
 800473c:	f001 fd7e 	bl	800623c <_calloc_r>
 8004740:	b160      	cbz	r0, 800475c <_Balloc+0x64>
 8004742:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004746:	e00e      	b.n	8004766 <_Balloc+0x6e>
 8004748:	2221      	movs	r2, #33	@ 0x21
 800474a:	2104      	movs	r1, #4
 800474c:	4620      	mov	r0, r4
 800474e:	f001 fd75 	bl	800623c <_calloc_r>
 8004752:	69e3      	ldr	r3, [r4, #28]
 8004754:	60f0      	str	r0, [r6, #12]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1e4      	bne.n	8004726 <_Balloc+0x2e>
 800475c:	2000      	movs	r0, #0
 800475e:	bd70      	pop	{r4, r5, r6, pc}
 8004760:	6802      	ldr	r2, [r0, #0]
 8004762:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004766:	2300      	movs	r3, #0
 8004768:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800476c:	e7f7      	b.n	800475e <_Balloc+0x66>
 800476e:	bf00      	nop
 8004770:	08006f4e 	.word	0x08006f4e
 8004774:	08006fce 	.word	0x08006fce

08004778 <_Bfree>:
 8004778:	b570      	push	{r4, r5, r6, lr}
 800477a:	69c6      	ldr	r6, [r0, #28]
 800477c:	4605      	mov	r5, r0
 800477e:	460c      	mov	r4, r1
 8004780:	b976      	cbnz	r6, 80047a0 <_Bfree+0x28>
 8004782:	2010      	movs	r0, #16
 8004784:	f7ff ff02 	bl	800458c <malloc>
 8004788:	4602      	mov	r2, r0
 800478a:	61e8      	str	r0, [r5, #28]
 800478c:	b920      	cbnz	r0, 8004798 <_Bfree+0x20>
 800478e:	4b09      	ldr	r3, [pc, #36]	@ (80047b4 <_Bfree+0x3c>)
 8004790:	4809      	ldr	r0, [pc, #36]	@ (80047b8 <_Bfree+0x40>)
 8004792:	218f      	movs	r1, #143	@ 0x8f
 8004794:	f001 fd34 	bl	8006200 <__assert_func>
 8004798:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800479c:	6006      	str	r6, [r0, #0]
 800479e:	60c6      	str	r6, [r0, #12]
 80047a0:	b13c      	cbz	r4, 80047b2 <_Bfree+0x3a>
 80047a2:	69eb      	ldr	r3, [r5, #28]
 80047a4:	6862      	ldr	r2, [r4, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80047ac:	6021      	str	r1, [r4, #0]
 80047ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80047b2:	bd70      	pop	{r4, r5, r6, pc}
 80047b4:	08006f4e 	.word	0x08006f4e
 80047b8:	08006fce 	.word	0x08006fce

080047bc <__multadd>:
 80047bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047c0:	690d      	ldr	r5, [r1, #16]
 80047c2:	4607      	mov	r7, r0
 80047c4:	460c      	mov	r4, r1
 80047c6:	461e      	mov	r6, r3
 80047c8:	f101 0c14 	add.w	ip, r1, #20
 80047cc:	2000      	movs	r0, #0
 80047ce:	f8dc 3000 	ldr.w	r3, [ip]
 80047d2:	b299      	uxth	r1, r3
 80047d4:	fb02 6101 	mla	r1, r2, r1, r6
 80047d8:	0c1e      	lsrs	r6, r3, #16
 80047da:	0c0b      	lsrs	r3, r1, #16
 80047dc:	fb02 3306 	mla	r3, r2, r6, r3
 80047e0:	b289      	uxth	r1, r1
 80047e2:	3001      	adds	r0, #1
 80047e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80047e8:	4285      	cmp	r5, r0
 80047ea:	f84c 1b04 	str.w	r1, [ip], #4
 80047ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80047f2:	dcec      	bgt.n	80047ce <__multadd+0x12>
 80047f4:	b30e      	cbz	r6, 800483a <__multadd+0x7e>
 80047f6:	68a3      	ldr	r3, [r4, #8]
 80047f8:	42ab      	cmp	r3, r5
 80047fa:	dc19      	bgt.n	8004830 <__multadd+0x74>
 80047fc:	6861      	ldr	r1, [r4, #4]
 80047fe:	4638      	mov	r0, r7
 8004800:	3101      	adds	r1, #1
 8004802:	f7ff ff79 	bl	80046f8 <_Balloc>
 8004806:	4680      	mov	r8, r0
 8004808:	b928      	cbnz	r0, 8004816 <__multadd+0x5a>
 800480a:	4602      	mov	r2, r0
 800480c:	4b0c      	ldr	r3, [pc, #48]	@ (8004840 <__multadd+0x84>)
 800480e:	480d      	ldr	r0, [pc, #52]	@ (8004844 <__multadd+0x88>)
 8004810:	21ba      	movs	r1, #186	@ 0xba
 8004812:	f001 fcf5 	bl	8006200 <__assert_func>
 8004816:	6922      	ldr	r2, [r4, #16]
 8004818:	3202      	adds	r2, #2
 800481a:	f104 010c 	add.w	r1, r4, #12
 800481e:	0092      	lsls	r2, r2, #2
 8004820:	300c      	adds	r0, #12
 8004822:	f001 fcd7 	bl	80061d4 <memcpy>
 8004826:	4621      	mov	r1, r4
 8004828:	4638      	mov	r0, r7
 800482a:	f7ff ffa5 	bl	8004778 <_Bfree>
 800482e:	4644      	mov	r4, r8
 8004830:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004834:	3501      	adds	r5, #1
 8004836:	615e      	str	r6, [r3, #20]
 8004838:	6125      	str	r5, [r4, #16]
 800483a:	4620      	mov	r0, r4
 800483c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004840:	08006fbd 	.word	0x08006fbd
 8004844:	08006fce 	.word	0x08006fce

08004848 <__s2b>:
 8004848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800484c:	460c      	mov	r4, r1
 800484e:	4615      	mov	r5, r2
 8004850:	461f      	mov	r7, r3
 8004852:	2209      	movs	r2, #9
 8004854:	3308      	adds	r3, #8
 8004856:	4606      	mov	r6, r0
 8004858:	fb93 f3f2 	sdiv	r3, r3, r2
 800485c:	2100      	movs	r1, #0
 800485e:	2201      	movs	r2, #1
 8004860:	429a      	cmp	r2, r3
 8004862:	db09      	blt.n	8004878 <__s2b+0x30>
 8004864:	4630      	mov	r0, r6
 8004866:	f7ff ff47 	bl	80046f8 <_Balloc>
 800486a:	b940      	cbnz	r0, 800487e <__s2b+0x36>
 800486c:	4602      	mov	r2, r0
 800486e:	4b19      	ldr	r3, [pc, #100]	@ (80048d4 <__s2b+0x8c>)
 8004870:	4819      	ldr	r0, [pc, #100]	@ (80048d8 <__s2b+0x90>)
 8004872:	21d3      	movs	r1, #211	@ 0xd3
 8004874:	f001 fcc4 	bl	8006200 <__assert_func>
 8004878:	0052      	lsls	r2, r2, #1
 800487a:	3101      	adds	r1, #1
 800487c:	e7f0      	b.n	8004860 <__s2b+0x18>
 800487e:	9b08      	ldr	r3, [sp, #32]
 8004880:	6143      	str	r3, [r0, #20]
 8004882:	2d09      	cmp	r5, #9
 8004884:	f04f 0301 	mov.w	r3, #1
 8004888:	6103      	str	r3, [r0, #16]
 800488a:	dd16      	ble.n	80048ba <__s2b+0x72>
 800488c:	f104 0909 	add.w	r9, r4, #9
 8004890:	46c8      	mov	r8, r9
 8004892:	442c      	add	r4, r5
 8004894:	f818 3b01 	ldrb.w	r3, [r8], #1
 8004898:	4601      	mov	r1, r0
 800489a:	3b30      	subs	r3, #48	@ 0x30
 800489c:	220a      	movs	r2, #10
 800489e:	4630      	mov	r0, r6
 80048a0:	f7ff ff8c 	bl	80047bc <__multadd>
 80048a4:	45a0      	cmp	r8, r4
 80048a6:	d1f5      	bne.n	8004894 <__s2b+0x4c>
 80048a8:	f1a5 0408 	sub.w	r4, r5, #8
 80048ac:	444c      	add	r4, r9
 80048ae:	1b2d      	subs	r5, r5, r4
 80048b0:	1963      	adds	r3, r4, r5
 80048b2:	42bb      	cmp	r3, r7
 80048b4:	db04      	blt.n	80048c0 <__s2b+0x78>
 80048b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048ba:	340a      	adds	r4, #10
 80048bc:	2509      	movs	r5, #9
 80048be:	e7f6      	b.n	80048ae <__s2b+0x66>
 80048c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80048c4:	4601      	mov	r1, r0
 80048c6:	3b30      	subs	r3, #48	@ 0x30
 80048c8:	220a      	movs	r2, #10
 80048ca:	4630      	mov	r0, r6
 80048cc:	f7ff ff76 	bl	80047bc <__multadd>
 80048d0:	e7ee      	b.n	80048b0 <__s2b+0x68>
 80048d2:	bf00      	nop
 80048d4:	08006fbd 	.word	0x08006fbd
 80048d8:	08006fce 	.word	0x08006fce

080048dc <__hi0bits>:
 80048dc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80048e0:	4603      	mov	r3, r0
 80048e2:	bf36      	itet	cc
 80048e4:	0403      	lslcc	r3, r0, #16
 80048e6:	2000      	movcs	r0, #0
 80048e8:	2010      	movcc	r0, #16
 80048ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048ee:	bf3c      	itt	cc
 80048f0:	021b      	lslcc	r3, r3, #8
 80048f2:	3008      	addcc	r0, #8
 80048f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048f8:	bf3c      	itt	cc
 80048fa:	011b      	lslcc	r3, r3, #4
 80048fc:	3004      	addcc	r0, #4
 80048fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004902:	bf3c      	itt	cc
 8004904:	009b      	lslcc	r3, r3, #2
 8004906:	3002      	addcc	r0, #2
 8004908:	2b00      	cmp	r3, #0
 800490a:	db05      	blt.n	8004918 <__hi0bits+0x3c>
 800490c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004910:	f100 0001 	add.w	r0, r0, #1
 8004914:	bf08      	it	eq
 8004916:	2020      	moveq	r0, #32
 8004918:	4770      	bx	lr

0800491a <__lo0bits>:
 800491a:	6803      	ldr	r3, [r0, #0]
 800491c:	4602      	mov	r2, r0
 800491e:	f013 0007 	ands.w	r0, r3, #7
 8004922:	d00b      	beq.n	800493c <__lo0bits+0x22>
 8004924:	07d9      	lsls	r1, r3, #31
 8004926:	d421      	bmi.n	800496c <__lo0bits+0x52>
 8004928:	0798      	lsls	r0, r3, #30
 800492a:	bf49      	itett	mi
 800492c:	085b      	lsrmi	r3, r3, #1
 800492e:	089b      	lsrpl	r3, r3, #2
 8004930:	2001      	movmi	r0, #1
 8004932:	6013      	strmi	r3, [r2, #0]
 8004934:	bf5c      	itt	pl
 8004936:	6013      	strpl	r3, [r2, #0]
 8004938:	2002      	movpl	r0, #2
 800493a:	4770      	bx	lr
 800493c:	b299      	uxth	r1, r3
 800493e:	b909      	cbnz	r1, 8004944 <__lo0bits+0x2a>
 8004940:	0c1b      	lsrs	r3, r3, #16
 8004942:	2010      	movs	r0, #16
 8004944:	b2d9      	uxtb	r1, r3
 8004946:	b909      	cbnz	r1, 800494c <__lo0bits+0x32>
 8004948:	3008      	adds	r0, #8
 800494a:	0a1b      	lsrs	r3, r3, #8
 800494c:	0719      	lsls	r1, r3, #28
 800494e:	bf04      	itt	eq
 8004950:	091b      	lsreq	r3, r3, #4
 8004952:	3004      	addeq	r0, #4
 8004954:	0799      	lsls	r1, r3, #30
 8004956:	bf04      	itt	eq
 8004958:	089b      	lsreq	r3, r3, #2
 800495a:	3002      	addeq	r0, #2
 800495c:	07d9      	lsls	r1, r3, #31
 800495e:	d403      	bmi.n	8004968 <__lo0bits+0x4e>
 8004960:	085b      	lsrs	r3, r3, #1
 8004962:	f100 0001 	add.w	r0, r0, #1
 8004966:	d003      	beq.n	8004970 <__lo0bits+0x56>
 8004968:	6013      	str	r3, [r2, #0]
 800496a:	4770      	bx	lr
 800496c:	2000      	movs	r0, #0
 800496e:	4770      	bx	lr
 8004970:	2020      	movs	r0, #32
 8004972:	4770      	bx	lr

08004974 <__i2b>:
 8004974:	b510      	push	{r4, lr}
 8004976:	460c      	mov	r4, r1
 8004978:	2101      	movs	r1, #1
 800497a:	f7ff febd 	bl	80046f8 <_Balloc>
 800497e:	4602      	mov	r2, r0
 8004980:	b928      	cbnz	r0, 800498e <__i2b+0x1a>
 8004982:	4b05      	ldr	r3, [pc, #20]	@ (8004998 <__i2b+0x24>)
 8004984:	4805      	ldr	r0, [pc, #20]	@ (800499c <__i2b+0x28>)
 8004986:	f240 1145 	movw	r1, #325	@ 0x145
 800498a:	f001 fc39 	bl	8006200 <__assert_func>
 800498e:	2301      	movs	r3, #1
 8004990:	6144      	str	r4, [r0, #20]
 8004992:	6103      	str	r3, [r0, #16]
 8004994:	bd10      	pop	{r4, pc}
 8004996:	bf00      	nop
 8004998:	08006fbd 	.word	0x08006fbd
 800499c:	08006fce 	.word	0x08006fce

080049a0 <__multiply>:
 80049a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049a4:	4617      	mov	r7, r2
 80049a6:	690a      	ldr	r2, [r1, #16]
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	bfa8      	it	ge
 80049ae:	463b      	movge	r3, r7
 80049b0:	4689      	mov	r9, r1
 80049b2:	bfa4      	itt	ge
 80049b4:	460f      	movge	r7, r1
 80049b6:	4699      	movge	r9, r3
 80049b8:	693d      	ldr	r5, [r7, #16]
 80049ba:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	6879      	ldr	r1, [r7, #4]
 80049c2:	eb05 060a 	add.w	r6, r5, sl
 80049c6:	42b3      	cmp	r3, r6
 80049c8:	b085      	sub	sp, #20
 80049ca:	bfb8      	it	lt
 80049cc:	3101      	addlt	r1, #1
 80049ce:	f7ff fe93 	bl	80046f8 <_Balloc>
 80049d2:	b930      	cbnz	r0, 80049e2 <__multiply+0x42>
 80049d4:	4602      	mov	r2, r0
 80049d6:	4b41      	ldr	r3, [pc, #260]	@ (8004adc <__multiply+0x13c>)
 80049d8:	4841      	ldr	r0, [pc, #260]	@ (8004ae0 <__multiply+0x140>)
 80049da:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80049de:	f001 fc0f 	bl	8006200 <__assert_func>
 80049e2:	f100 0414 	add.w	r4, r0, #20
 80049e6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80049ea:	4623      	mov	r3, r4
 80049ec:	2200      	movs	r2, #0
 80049ee:	4573      	cmp	r3, lr
 80049f0:	d320      	bcc.n	8004a34 <__multiply+0x94>
 80049f2:	f107 0814 	add.w	r8, r7, #20
 80049f6:	f109 0114 	add.w	r1, r9, #20
 80049fa:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80049fe:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8004a02:	9302      	str	r3, [sp, #8]
 8004a04:	1beb      	subs	r3, r5, r7
 8004a06:	3b15      	subs	r3, #21
 8004a08:	f023 0303 	bic.w	r3, r3, #3
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	3715      	adds	r7, #21
 8004a10:	42bd      	cmp	r5, r7
 8004a12:	bf38      	it	cc
 8004a14:	2304      	movcc	r3, #4
 8004a16:	9301      	str	r3, [sp, #4]
 8004a18:	9b02      	ldr	r3, [sp, #8]
 8004a1a:	9103      	str	r1, [sp, #12]
 8004a1c:	428b      	cmp	r3, r1
 8004a1e:	d80c      	bhi.n	8004a3a <__multiply+0x9a>
 8004a20:	2e00      	cmp	r6, #0
 8004a22:	dd03      	ble.n	8004a2c <__multiply+0x8c>
 8004a24:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d055      	beq.n	8004ad8 <__multiply+0x138>
 8004a2c:	6106      	str	r6, [r0, #16]
 8004a2e:	b005      	add	sp, #20
 8004a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a34:	f843 2b04 	str.w	r2, [r3], #4
 8004a38:	e7d9      	b.n	80049ee <__multiply+0x4e>
 8004a3a:	f8b1 a000 	ldrh.w	sl, [r1]
 8004a3e:	f1ba 0f00 	cmp.w	sl, #0
 8004a42:	d01f      	beq.n	8004a84 <__multiply+0xe4>
 8004a44:	46c4      	mov	ip, r8
 8004a46:	46a1      	mov	r9, r4
 8004a48:	2700      	movs	r7, #0
 8004a4a:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004a4e:	f8d9 3000 	ldr.w	r3, [r9]
 8004a52:	fa1f fb82 	uxth.w	fp, r2
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	fb0a 330b 	mla	r3, sl, fp, r3
 8004a5c:	443b      	add	r3, r7
 8004a5e:	f8d9 7000 	ldr.w	r7, [r9]
 8004a62:	0c12      	lsrs	r2, r2, #16
 8004a64:	0c3f      	lsrs	r7, r7, #16
 8004a66:	fb0a 7202 	mla	r2, sl, r2, r7
 8004a6a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a74:	4565      	cmp	r5, ip
 8004a76:	f849 3b04 	str.w	r3, [r9], #4
 8004a7a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8004a7e:	d8e4      	bhi.n	8004a4a <__multiply+0xaa>
 8004a80:	9b01      	ldr	r3, [sp, #4]
 8004a82:	50e7      	str	r7, [r4, r3]
 8004a84:	9b03      	ldr	r3, [sp, #12]
 8004a86:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004a8a:	3104      	adds	r1, #4
 8004a8c:	f1b9 0f00 	cmp.w	r9, #0
 8004a90:	d020      	beq.n	8004ad4 <__multiply+0x134>
 8004a92:	6823      	ldr	r3, [r4, #0]
 8004a94:	4647      	mov	r7, r8
 8004a96:	46a4      	mov	ip, r4
 8004a98:	f04f 0a00 	mov.w	sl, #0
 8004a9c:	f8b7 b000 	ldrh.w	fp, [r7]
 8004aa0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8004aa4:	fb09 220b 	mla	r2, r9, fp, r2
 8004aa8:	4452      	add	r2, sl
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ab0:	f84c 3b04 	str.w	r3, [ip], #4
 8004ab4:	f857 3b04 	ldr.w	r3, [r7], #4
 8004ab8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004abc:	f8bc 3000 	ldrh.w	r3, [ip]
 8004ac0:	fb09 330a 	mla	r3, r9, sl, r3
 8004ac4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8004ac8:	42bd      	cmp	r5, r7
 8004aca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004ace:	d8e5      	bhi.n	8004a9c <__multiply+0xfc>
 8004ad0:	9a01      	ldr	r2, [sp, #4]
 8004ad2:	50a3      	str	r3, [r4, r2]
 8004ad4:	3404      	adds	r4, #4
 8004ad6:	e79f      	b.n	8004a18 <__multiply+0x78>
 8004ad8:	3e01      	subs	r6, #1
 8004ada:	e7a1      	b.n	8004a20 <__multiply+0x80>
 8004adc:	08006fbd 	.word	0x08006fbd
 8004ae0:	08006fce 	.word	0x08006fce

08004ae4 <__pow5mult>:
 8004ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ae8:	4615      	mov	r5, r2
 8004aea:	f012 0203 	ands.w	r2, r2, #3
 8004aee:	4607      	mov	r7, r0
 8004af0:	460e      	mov	r6, r1
 8004af2:	d007      	beq.n	8004b04 <__pow5mult+0x20>
 8004af4:	4c25      	ldr	r4, [pc, #148]	@ (8004b8c <__pow5mult+0xa8>)
 8004af6:	3a01      	subs	r2, #1
 8004af8:	2300      	movs	r3, #0
 8004afa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004afe:	f7ff fe5d 	bl	80047bc <__multadd>
 8004b02:	4606      	mov	r6, r0
 8004b04:	10ad      	asrs	r5, r5, #2
 8004b06:	d03d      	beq.n	8004b84 <__pow5mult+0xa0>
 8004b08:	69fc      	ldr	r4, [r7, #28]
 8004b0a:	b97c      	cbnz	r4, 8004b2c <__pow5mult+0x48>
 8004b0c:	2010      	movs	r0, #16
 8004b0e:	f7ff fd3d 	bl	800458c <malloc>
 8004b12:	4602      	mov	r2, r0
 8004b14:	61f8      	str	r0, [r7, #28]
 8004b16:	b928      	cbnz	r0, 8004b24 <__pow5mult+0x40>
 8004b18:	4b1d      	ldr	r3, [pc, #116]	@ (8004b90 <__pow5mult+0xac>)
 8004b1a:	481e      	ldr	r0, [pc, #120]	@ (8004b94 <__pow5mult+0xb0>)
 8004b1c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004b20:	f001 fb6e 	bl	8006200 <__assert_func>
 8004b24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004b28:	6004      	str	r4, [r0, #0]
 8004b2a:	60c4      	str	r4, [r0, #12]
 8004b2c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004b30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004b34:	b94c      	cbnz	r4, 8004b4a <__pow5mult+0x66>
 8004b36:	f240 2171 	movw	r1, #625	@ 0x271
 8004b3a:	4638      	mov	r0, r7
 8004b3c:	f7ff ff1a 	bl	8004974 <__i2b>
 8004b40:	2300      	movs	r3, #0
 8004b42:	f8c8 0008 	str.w	r0, [r8, #8]
 8004b46:	4604      	mov	r4, r0
 8004b48:	6003      	str	r3, [r0, #0]
 8004b4a:	f04f 0900 	mov.w	r9, #0
 8004b4e:	07eb      	lsls	r3, r5, #31
 8004b50:	d50a      	bpl.n	8004b68 <__pow5mult+0x84>
 8004b52:	4631      	mov	r1, r6
 8004b54:	4622      	mov	r2, r4
 8004b56:	4638      	mov	r0, r7
 8004b58:	f7ff ff22 	bl	80049a0 <__multiply>
 8004b5c:	4631      	mov	r1, r6
 8004b5e:	4680      	mov	r8, r0
 8004b60:	4638      	mov	r0, r7
 8004b62:	f7ff fe09 	bl	8004778 <_Bfree>
 8004b66:	4646      	mov	r6, r8
 8004b68:	106d      	asrs	r5, r5, #1
 8004b6a:	d00b      	beq.n	8004b84 <__pow5mult+0xa0>
 8004b6c:	6820      	ldr	r0, [r4, #0]
 8004b6e:	b938      	cbnz	r0, 8004b80 <__pow5mult+0x9c>
 8004b70:	4622      	mov	r2, r4
 8004b72:	4621      	mov	r1, r4
 8004b74:	4638      	mov	r0, r7
 8004b76:	f7ff ff13 	bl	80049a0 <__multiply>
 8004b7a:	6020      	str	r0, [r4, #0]
 8004b7c:	f8c0 9000 	str.w	r9, [r0]
 8004b80:	4604      	mov	r4, r0
 8004b82:	e7e4      	b.n	8004b4e <__pow5mult+0x6a>
 8004b84:	4630      	mov	r0, r6
 8004b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b8a:	bf00      	nop
 8004b8c:	080070e0 	.word	0x080070e0
 8004b90:	08006f4e 	.word	0x08006f4e
 8004b94:	08006fce 	.word	0x08006fce

08004b98 <__lshift>:
 8004b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b9c:	460c      	mov	r4, r1
 8004b9e:	6849      	ldr	r1, [r1, #4]
 8004ba0:	6923      	ldr	r3, [r4, #16]
 8004ba2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004ba6:	68a3      	ldr	r3, [r4, #8]
 8004ba8:	4607      	mov	r7, r0
 8004baa:	4691      	mov	r9, r2
 8004bac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004bb0:	f108 0601 	add.w	r6, r8, #1
 8004bb4:	42b3      	cmp	r3, r6
 8004bb6:	db0b      	blt.n	8004bd0 <__lshift+0x38>
 8004bb8:	4638      	mov	r0, r7
 8004bba:	f7ff fd9d 	bl	80046f8 <_Balloc>
 8004bbe:	4605      	mov	r5, r0
 8004bc0:	b948      	cbnz	r0, 8004bd6 <__lshift+0x3e>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	4b28      	ldr	r3, [pc, #160]	@ (8004c68 <__lshift+0xd0>)
 8004bc6:	4829      	ldr	r0, [pc, #164]	@ (8004c6c <__lshift+0xd4>)
 8004bc8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004bcc:	f001 fb18 	bl	8006200 <__assert_func>
 8004bd0:	3101      	adds	r1, #1
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	e7ee      	b.n	8004bb4 <__lshift+0x1c>
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	f100 0114 	add.w	r1, r0, #20
 8004bdc:	f100 0210 	add.w	r2, r0, #16
 8004be0:	4618      	mov	r0, r3
 8004be2:	4553      	cmp	r3, sl
 8004be4:	db33      	blt.n	8004c4e <__lshift+0xb6>
 8004be6:	6920      	ldr	r0, [r4, #16]
 8004be8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004bec:	f104 0314 	add.w	r3, r4, #20
 8004bf0:	f019 091f 	ands.w	r9, r9, #31
 8004bf4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004bf8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004bfc:	d02b      	beq.n	8004c56 <__lshift+0xbe>
 8004bfe:	f1c9 0e20 	rsb	lr, r9, #32
 8004c02:	468a      	mov	sl, r1
 8004c04:	2200      	movs	r2, #0
 8004c06:	6818      	ldr	r0, [r3, #0]
 8004c08:	fa00 f009 	lsl.w	r0, r0, r9
 8004c0c:	4310      	orrs	r0, r2
 8004c0e:	f84a 0b04 	str.w	r0, [sl], #4
 8004c12:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c16:	459c      	cmp	ip, r3
 8004c18:	fa22 f20e 	lsr.w	r2, r2, lr
 8004c1c:	d8f3      	bhi.n	8004c06 <__lshift+0x6e>
 8004c1e:	ebac 0304 	sub.w	r3, ip, r4
 8004c22:	3b15      	subs	r3, #21
 8004c24:	f023 0303 	bic.w	r3, r3, #3
 8004c28:	3304      	adds	r3, #4
 8004c2a:	f104 0015 	add.w	r0, r4, #21
 8004c2e:	4560      	cmp	r0, ip
 8004c30:	bf88      	it	hi
 8004c32:	2304      	movhi	r3, #4
 8004c34:	50ca      	str	r2, [r1, r3]
 8004c36:	b10a      	cbz	r2, 8004c3c <__lshift+0xa4>
 8004c38:	f108 0602 	add.w	r6, r8, #2
 8004c3c:	3e01      	subs	r6, #1
 8004c3e:	4638      	mov	r0, r7
 8004c40:	612e      	str	r6, [r5, #16]
 8004c42:	4621      	mov	r1, r4
 8004c44:	f7ff fd98 	bl	8004778 <_Bfree>
 8004c48:	4628      	mov	r0, r5
 8004c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c4e:	f842 0f04 	str.w	r0, [r2, #4]!
 8004c52:	3301      	adds	r3, #1
 8004c54:	e7c5      	b.n	8004be2 <__lshift+0x4a>
 8004c56:	3904      	subs	r1, #4
 8004c58:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c5c:	f841 2f04 	str.w	r2, [r1, #4]!
 8004c60:	459c      	cmp	ip, r3
 8004c62:	d8f9      	bhi.n	8004c58 <__lshift+0xc0>
 8004c64:	e7ea      	b.n	8004c3c <__lshift+0xa4>
 8004c66:	bf00      	nop
 8004c68:	08006fbd 	.word	0x08006fbd
 8004c6c:	08006fce 	.word	0x08006fce

08004c70 <__mcmp>:
 8004c70:	690a      	ldr	r2, [r1, #16]
 8004c72:	4603      	mov	r3, r0
 8004c74:	6900      	ldr	r0, [r0, #16]
 8004c76:	1a80      	subs	r0, r0, r2
 8004c78:	b530      	push	{r4, r5, lr}
 8004c7a:	d10e      	bne.n	8004c9a <__mcmp+0x2a>
 8004c7c:	3314      	adds	r3, #20
 8004c7e:	3114      	adds	r1, #20
 8004c80:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004c84:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004c88:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004c8c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004c90:	4295      	cmp	r5, r2
 8004c92:	d003      	beq.n	8004c9c <__mcmp+0x2c>
 8004c94:	d205      	bcs.n	8004ca2 <__mcmp+0x32>
 8004c96:	f04f 30ff 	mov.w	r0, #4294967295
 8004c9a:	bd30      	pop	{r4, r5, pc}
 8004c9c:	42a3      	cmp	r3, r4
 8004c9e:	d3f3      	bcc.n	8004c88 <__mcmp+0x18>
 8004ca0:	e7fb      	b.n	8004c9a <__mcmp+0x2a>
 8004ca2:	2001      	movs	r0, #1
 8004ca4:	e7f9      	b.n	8004c9a <__mcmp+0x2a>
	...

08004ca8 <__mdiff>:
 8004ca8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cac:	4689      	mov	r9, r1
 8004cae:	4606      	mov	r6, r0
 8004cb0:	4611      	mov	r1, r2
 8004cb2:	4648      	mov	r0, r9
 8004cb4:	4614      	mov	r4, r2
 8004cb6:	f7ff ffdb 	bl	8004c70 <__mcmp>
 8004cba:	1e05      	subs	r5, r0, #0
 8004cbc:	d112      	bne.n	8004ce4 <__mdiff+0x3c>
 8004cbe:	4629      	mov	r1, r5
 8004cc0:	4630      	mov	r0, r6
 8004cc2:	f7ff fd19 	bl	80046f8 <_Balloc>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	b928      	cbnz	r0, 8004cd6 <__mdiff+0x2e>
 8004cca:	4b3f      	ldr	r3, [pc, #252]	@ (8004dc8 <__mdiff+0x120>)
 8004ccc:	f240 2137 	movw	r1, #567	@ 0x237
 8004cd0:	483e      	ldr	r0, [pc, #248]	@ (8004dcc <__mdiff+0x124>)
 8004cd2:	f001 fa95 	bl	8006200 <__assert_func>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004cdc:	4610      	mov	r0, r2
 8004cde:	b003      	add	sp, #12
 8004ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ce4:	bfbc      	itt	lt
 8004ce6:	464b      	movlt	r3, r9
 8004ce8:	46a1      	movlt	r9, r4
 8004cea:	4630      	mov	r0, r6
 8004cec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004cf0:	bfba      	itte	lt
 8004cf2:	461c      	movlt	r4, r3
 8004cf4:	2501      	movlt	r5, #1
 8004cf6:	2500      	movge	r5, #0
 8004cf8:	f7ff fcfe 	bl	80046f8 <_Balloc>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	b918      	cbnz	r0, 8004d08 <__mdiff+0x60>
 8004d00:	4b31      	ldr	r3, [pc, #196]	@ (8004dc8 <__mdiff+0x120>)
 8004d02:	f240 2145 	movw	r1, #581	@ 0x245
 8004d06:	e7e3      	b.n	8004cd0 <__mdiff+0x28>
 8004d08:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004d0c:	6926      	ldr	r6, [r4, #16]
 8004d0e:	60c5      	str	r5, [r0, #12]
 8004d10:	f109 0310 	add.w	r3, r9, #16
 8004d14:	f109 0514 	add.w	r5, r9, #20
 8004d18:	f104 0e14 	add.w	lr, r4, #20
 8004d1c:	f100 0b14 	add.w	fp, r0, #20
 8004d20:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004d24:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004d28:	9301      	str	r3, [sp, #4]
 8004d2a:	46d9      	mov	r9, fp
 8004d2c:	f04f 0c00 	mov.w	ip, #0
 8004d30:	9b01      	ldr	r3, [sp, #4]
 8004d32:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004d36:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004d3a:	9301      	str	r3, [sp, #4]
 8004d3c:	fa1f f38a 	uxth.w	r3, sl
 8004d40:	4619      	mov	r1, r3
 8004d42:	b283      	uxth	r3, r0
 8004d44:	1acb      	subs	r3, r1, r3
 8004d46:	0c00      	lsrs	r0, r0, #16
 8004d48:	4463      	add	r3, ip
 8004d4a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004d4e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004d58:	4576      	cmp	r6, lr
 8004d5a:	f849 3b04 	str.w	r3, [r9], #4
 8004d5e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004d62:	d8e5      	bhi.n	8004d30 <__mdiff+0x88>
 8004d64:	1b33      	subs	r3, r6, r4
 8004d66:	3b15      	subs	r3, #21
 8004d68:	f023 0303 	bic.w	r3, r3, #3
 8004d6c:	3415      	adds	r4, #21
 8004d6e:	3304      	adds	r3, #4
 8004d70:	42a6      	cmp	r6, r4
 8004d72:	bf38      	it	cc
 8004d74:	2304      	movcc	r3, #4
 8004d76:	441d      	add	r5, r3
 8004d78:	445b      	add	r3, fp
 8004d7a:	461e      	mov	r6, r3
 8004d7c:	462c      	mov	r4, r5
 8004d7e:	4544      	cmp	r4, r8
 8004d80:	d30e      	bcc.n	8004da0 <__mdiff+0xf8>
 8004d82:	f108 0103 	add.w	r1, r8, #3
 8004d86:	1b49      	subs	r1, r1, r5
 8004d88:	f021 0103 	bic.w	r1, r1, #3
 8004d8c:	3d03      	subs	r5, #3
 8004d8e:	45a8      	cmp	r8, r5
 8004d90:	bf38      	it	cc
 8004d92:	2100      	movcc	r1, #0
 8004d94:	440b      	add	r3, r1
 8004d96:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004d9a:	b191      	cbz	r1, 8004dc2 <__mdiff+0x11a>
 8004d9c:	6117      	str	r7, [r2, #16]
 8004d9e:	e79d      	b.n	8004cdc <__mdiff+0x34>
 8004da0:	f854 1b04 	ldr.w	r1, [r4], #4
 8004da4:	46e6      	mov	lr, ip
 8004da6:	0c08      	lsrs	r0, r1, #16
 8004da8:	fa1c fc81 	uxtah	ip, ip, r1
 8004dac:	4471      	add	r1, lr
 8004dae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004db2:	b289      	uxth	r1, r1
 8004db4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004db8:	f846 1b04 	str.w	r1, [r6], #4
 8004dbc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004dc0:	e7dd      	b.n	8004d7e <__mdiff+0xd6>
 8004dc2:	3f01      	subs	r7, #1
 8004dc4:	e7e7      	b.n	8004d96 <__mdiff+0xee>
 8004dc6:	bf00      	nop
 8004dc8:	08006fbd 	.word	0x08006fbd
 8004dcc:	08006fce 	.word	0x08006fce

08004dd0 <__ulp>:
 8004dd0:	b082      	sub	sp, #8
 8004dd2:	ed8d 0b00 	vstr	d0, [sp]
 8004dd6:	9a01      	ldr	r2, [sp, #4]
 8004dd8:	4b0f      	ldr	r3, [pc, #60]	@ (8004e18 <__ulp+0x48>)
 8004dda:	4013      	ands	r3, r2
 8004ddc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	dc08      	bgt.n	8004df6 <__ulp+0x26>
 8004de4:	425b      	negs	r3, r3
 8004de6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8004dea:	ea4f 5223 	mov.w	r2, r3, asr #20
 8004dee:	da04      	bge.n	8004dfa <__ulp+0x2a>
 8004df0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004df4:	4113      	asrs	r3, r2
 8004df6:	2200      	movs	r2, #0
 8004df8:	e008      	b.n	8004e0c <__ulp+0x3c>
 8004dfa:	f1a2 0314 	sub.w	r3, r2, #20
 8004dfe:	2b1e      	cmp	r3, #30
 8004e00:	bfda      	itte	le
 8004e02:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8004e06:	40da      	lsrle	r2, r3
 8004e08:	2201      	movgt	r2, #1
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4610      	mov	r0, r2
 8004e10:	ec41 0b10 	vmov	d0, r0, r1
 8004e14:	b002      	add	sp, #8
 8004e16:	4770      	bx	lr
 8004e18:	7ff00000 	.word	0x7ff00000

08004e1c <__b2d>:
 8004e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e20:	6906      	ldr	r6, [r0, #16]
 8004e22:	f100 0814 	add.w	r8, r0, #20
 8004e26:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8004e2a:	1f37      	subs	r7, r6, #4
 8004e2c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8004e30:	4610      	mov	r0, r2
 8004e32:	f7ff fd53 	bl	80048dc <__hi0bits>
 8004e36:	f1c0 0320 	rsb	r3, r0, #32
 8004e3a:	280a      	cmp	r0, #10
 8004e3c:	600b      	str	r3, [r1, #0]
 8004e3e:	491b      	ldr	r1, [pc, #108]	@ (8004eac <__b2d+0x90>)
 8004e40:	dc15      	bgt.n	8004e6e <__b2d+0x52>
 8004e42:	f1c0 0c0b 	rsb	ip, r0, #11
 8004e46:	fa22 f30c 	lsr.w	r3, r2, ip
 8004e4a:	45b8      	cmp	r8, r7
 8004e4c:	ea43 0501 	orr.w	r5, r3, r1
 8004e50:	bf34      	ite	cc
 8004e52:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8004e56:	2300      	movcs	r3, #0
 8004e58:	3015      	adds	r0, #21
 8004e5a:	fa02 f000 	lsl.w	r0, r2, r0
 8004e5e:	fa23 f30c 	lsr.w	r3, r3, ip
 8004e62:	4303      	orrs	r3, r0
 8004e64:	461c      	mov	r4, r3
 8004e66:	ec45 4b10 	vmov	d0, r4, r5
 8004e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e6e:	45b8      	cmp	r8, r7
 8004e70:	bf3a      	itte	cc
 8004e72:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8004e76:	f1a6 0708 	subcc.w	r7, r6, #8
 8004e7a:	2300      	movcs	r3, #0
 8004e7c:	380b      	subs	r0, #11
 8004e7e:	d012      	beq.n	8004ea6 <__b2d+0x8a>
 8004e80:	f1c0 0120 	rsb	r1, r0, #32
 8004e84:	fa23 f401 	lsr.w	r4, r3, r1
 8004e88:	4082      	lsls	r2, r0
 8004e8a:	4322      	orrs	r2, r4
 8004e8c:	4547      	cmp	r7, r8
 8004e8e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8004e92:	bf8c      	ite	hi
 8004e94:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8004e98:	2200      	movls	r2, #0
 8004e9a:	4083      	lsls	r3, r0
 8004e9c:	40ca      	lsrs	r2, r1
 8004e9e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	e7de      	b.n	8004e64 <__b2d+0x48>
 8004ea6:	ea42 0501 	orr.w	r5, r2, r1
 8004eaa:	e7db      	b.n	8004e64 <__b2d+0x48>
 8004eac:	3ff00000 	.word	0x3ff00000

08004eb0 <__d2b>:
 8004eb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004eb4:	460f      	mov	r7, r1
 8004eb6:	2101      	movs	r1, #1
 8004eb8:	ec59 8b10 	vmov	r8, r9, d0
 8004ebc:	4616      	mov	r6, r2
 8004ebe:	f7ff fc1b 	bl	80046f8 <_Balloc>
 8004ec2:	4604      	mov	r4, r0
 8004ec4:	b930      	cbnz	r0, 8004ed4 <__d2b+0x24>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	4b23      	ldr	r3, [pc, #140]	@ (8004f58 <__d2b+0xa8>)
 8004eca:	4824      	ldr	r0, [pc, #144]	@ (8004f5c <__d2b+0xac>)
 8004ecc:	f240 310f 	movw	r1, #783	@ 0x30f
 8004ed0:	f001 f996 	bl	8006200 <__assert_func>
 8004ed4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004ed8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004edc:	b10d      	cbz	r5, 8004ee2 <__d2b+0x32>
 8004ede:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ee2:	9301      	str	r3, [sp, #4]
 8004ee4:	f1b8 0300 	subs.w	r3, r8, #0
 8004ee8:	d023      	beq.n	8004f32 <__d2b+0x82>
 8004eea:	4668      	mov	r0, sp
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	f7ff fd14 	bl	800491a <__lo0bits>
 8004ef2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004ef6:	b1d0      	cbz	r0, 8004f2e <__d2b+0x7e>
 8004ef8:	f1c0 0320 	rsb	r3, r0, #32
 8004efc:	fa02 f303 	lsl.w	r3, r2, r3
 8004f00:	430b      	orrs	r3, r1
 8004f02:	40c2      	lsrs	r2, r0
 8004f04:	6163      	str	r3, [r4, #20]
 8004f06:	9201      	str	r2, [sp, #4]
 8004f08:	9b01      	ldr	r3, [sp, #4]
 8004f0a:	61a3      	str	r3, [r4, #24]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	bf0c      	ite	eq
 8004f10:	2201      	moveq	r2, #1
 8004f12:	2202      	movne	r2, #2
 8004f14:	6122      	str	r2, [r4, #16]
 8004f16:	b1a5      	cbz	r5, 8004f42 <__d2b+0x92>
 8004f18:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004f1c:	4405      	add	r5, r0
 8004f1e:	603d      	str	r5, [r7, #0]
 8004f20:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004f24:	6030      	str	r0, [r6, #0]
 8004f26:	4620      	mov	r0, r4
 8004f28:	b003      	add	sp, #12
 8004f2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f2e:	6161      	str	r1, [r4, #20]
 8004f30:	e7ea      	b.n	8004f08 <__d2b+0x58>
 8004f32:	a801      	add	r0, sp, #4
 8004f34:	f7ff fcf1 	bl	800491a <__lo0bits>
 8004f38:	9b01      	ldr	r3, [sp, #4]
 8004f3a:	6163      	str	r3, [r4, #20]
 8004f3c:	3020      	adds	r0, #32
 8004f3e:	2201      	movs	r2, #1
 8004f40:	e7e8      	b.n	8004f14 <__d2b+0x64>
 8004f42:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004f46:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8004f4a:	6038      	str	r0, [r7, #0]
 8004f4c:	6918      	ldr	r0, [r3, #16]
 8004f4e:	f7ff fcc5 	bl	80048dc <__hi0bits>
 8004f52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004f56:	e7e5      	b.n	8004f24 <__d2b+0x74>
 8004f58:	08006fbd 	.word	0x08006fbd
 8004f5c:	08006fce 	.word	0x08006fce

08004f60 <__ratio>:
 8004f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f64:	b085      	sub	sp, #20
 8004f66:	e9cd 1000 	strd	r1, r0, [sp]
 8004f6a:	a902      	add	r1, sp, #8
 8004f6c:	f7ff ff56 	bl	8004e1c <__b2d>
 8004f70:	9800      	ldr	r0, [sp, #0]
 8004f72:	a903      	add	r1, sp, #12
 8004f74:	ec55 4b10 	vmov	r4, r5, d0
 8004f78:	f7ff ff50 	bl	8004e1c <__b2d>
 8004f7c:	9b01      	ldr	r3, [sp, #4]
 8004f7e:	6919      	ldr	r1, [r3, #16]
 8004f80:	9b00      	ldr	r3, [sp, #0]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	1ac9      	subs	r1, r1, r3
 8004f86:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8004f8a:	1a9b      	subs	r3, r3, r2
 8004f8c:	ec5b ab10 	vmov	sl, fp, d0
 8004f90:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	bfce      	itee	gt
 8004f98:	462a      	movgt	r2, r5
 8004f9a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8004f9e:	465a      	movle	r2, fp
 8004fa0:	462f      	mov	r7, r5
 8004fa2:	46d9      	mov	r9, fp
 8004fa4:	bfcc      	ite	gt
 8004fa6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8004faa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8004fae:	464b      	mov	r3, r9
 8004fb0:	4652      	mov	r2, sl
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	4639      	mov	r1, r7
 8004fb6:	f7fb fc49 	bl	800084c <__aeabi_ddiv>
 8004fba:	ec41 0b10 	vmov	d0, r0, r1
 8004fbe:	b005      	add	sp, #20
 8004fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004fc4 <__copybits>:
 8004fc4:	3901      	subs	r1, #1
 8004fc6:	b570      	push	{r4, r5, r6, lr}
 8004fc8:	1149      	asrs	r1, r1, #5
 8004fca:	6914      	ldr	r4, [r2, #16]
 8004fcc:	3101      	adds	r1, #1
 8004fce:	f102 0314 	add.w	r3, r2, #20
 8004fd2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004fd6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004fda:	1f05      	subs	r5, r0, #4
 8004fdc:	42a3      	cmp	r3, r4
 8004fde:	d30c      	bcc.n	8004ffa <__copybits+0x36>
 8004fe0:	1aa3      	subs	r3, r4, r2
 8004fe2:	3b11      	subs	r3, #17
 8004fe4:	f023 0303 	bic.w	r3, r3, #3
 8004fe8:	3211      	adds	r2, #17
 8004fea:	42a2      	cmp	r2, r4
 8004fec:	bf88      	it	hi
 8004fee:	2300      	movhi	r3, #0
 8004ff0:	4418      	add	r0, r3
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	4288      	cmp	r0, r1
 8004ff6:	d305      	bcc.n	8005004 <__copybits+0x40>
 8004ff8:	bd70      	pop	{r4, r5, r6, pc}
 8004ffa:	f853 6b04 	ldr.w	r6, [r3], #4
 8004ffe:	f845 6f04 	str.w	r6, [r5, #4]!
 8005002:	e7eb      	b.n	8004fdc <__copybits+0x18>
 8005004:	f840 3b04 	str.w	r3, [r0], #4
 8005008:	e7f4      	b.n	8004ff4 <__copybits+0x30>

0800500a <__any_on>:
 800500a:	f100 0214 	add.w	r2, r0, #20
 800500e:	6900      	ldr	r0, [r0, #16]
 8005010:	114b      	asrs	r3, r1, #5
 8005012:	4298      	cmp	r0, r3
 8005014:	b510      	push	{r4, lr}
 8005016:	db11      	blt.n	800503c <__any_on+0x32>
 8005018:	dd0a      	ble.n	8005030 <__any_on+0x26>
 800501a:	f011 011f 	ands.w	r1, r1, #31
 800501e:	d007      	beq.n	8005030 <__any_on+0x26>
 8005020:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005024:	fa24 f001 	lsr.w	r0, r4, r1
 8005028:	fa00 f101 	lsl.w	r1, r0, r1
 800502c:	428c      	cmp	r4, r1
 800502e:	d10b      	bne.n	8005048 <__any_on+0x3e>
 8005030:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005034:	4293      	cmp	r3, r2
 8005036:	d803      	bhi.n	8005040 <__any_on+0x36>
 8005038:	2000      	movs	r0, #0
 800503a:	bd10      	pop	{r4, pc}
 800503c:	4603      	mov	r3, r0
 800503e:	e7f7      	b.n	8005030 <__any_on+0x26>
 8005040:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005044:	2900      	cmp	r1, #0
 8005046:	d0f5      	beq.n	8005034 <__any_on+0x2a>
 8005048:	2001      	movs	r0, #1
 800504a:	e7f6      	b.n	800503a <__any_on+0x30>

0800504c <sulp>:
 800504c:	b570      	push	{r4, r5, r6, lr}
 800504e:	4604      	mov	r4, r0
 8005050:	460d      	mov	r5, r1
 8005052:	ec45 4b10 	vmov	d0, r4, r5
 8005056:	4616      	mov	r6, r2
 8005058:	f7ff feba 	bl	8004dd0 <__ulp>
 800505c:	ec51 0b10 	vmov	r0, r1, d0
 8005060:	b17e      	cbz	r6, 8005082 <sulp+0x36>
 8005062:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005066:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800506a:	2b00      	cmp	r3, #0
 800506c:	dd09      	ble.n	8005082 <sulp+0x36>
 800506e:	051b      	lsls	r3, r3, #20
 8005070:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005074:	2400      	movs	r4, #0
 8005076:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800507a:	4622      	mov	r2, r4
 800507c:	462b      	mov	r3, r5
 800507e:	f7fb fabb 	bl	80005f8 <__aeabi_dmul>
 8005082:	ec41 0b10 	vmov	d0, r0, r1
 8005086:	bd70      	pop	{r4, r5, r6, pc}

08005088 <_strtod_l>:
 8005088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800508c:	b09f      	sub	sp, #124	@ 0x7c
 800508e:	460c      	mov	r4, r1
 8005090:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005092:	2200      	movs	r2, #0
 8005094:	921a      	str	r2, [sp, #104]	@ 0x68
 8005096:	9005      	str	r0, [sp, #20]
 8005098:	f04f 0a00 	mov.w	sl, #0
 800509c:	f04f 0b00 	mov.w	fp, #0
 80050a0:	460a      	mov	r2, r1
 80050a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80050a4:	7811      	ldrb	r1, [r2, #0]
 80050a6:	292b      	cmp	r1, #43	@ 0x2b
 80050a8:	d04a      	beq.n	8005140 <_strtod_l+0xb8>
 80050aa:	d838      	bhi.n	800511e <_strtod_l+0x96>
 80050ac:	290d      	cmp	r1, #13
 80050ae:	d832      	bhi.n	8005116 <_strtod_l+0x8e>
 80050b0:	2908      	cmp	r1, #8
 80050b2:	d832      	bhi.n	800511a <_strtod_l+0x92>
 80050b4:	2900      	cmp	r1, #0
 80050b6:	d03b      	beq.n	8005130 <_strtod_l+0xa8>
 80050b8:	2200      	movs	r2, #0
 80050ba:	920e      	str	r2, [sp, #56]	@ 0x38
 80050bc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80050be:	782a      	ldrb	r2, [r5, #0]
 80050c0:	2a30      	cmp	r2, #48	@ 0x30
 80050c2:	f040 80b2 	bne.w	800522a <_strtod_l+0x1a2>
 80050c6:	786a      	ldrb	r2, [r5, #1]
 80050c8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80050cc:	2a58      	cmp	r2, #88	@ 0x58
 80050ce:	d16e      	bne.n	80051ae <_strtod_l+0x126>
 80050d0:	9302      	str	r3, [sp, #8]
 80050d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80050d4:	9301      	str	r3, [sp, #4]
 80050d6:	ab1a      	add	r3, sp, #104	@ 0x68
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	4a8f      	ldr	r2, [pc, #572]	@ (8005318 <_strtod_l+0x290>)
 80050dc:	9805      	ldr	r0, [sp, #20]
 80050de:	ab1b      	add	r3, sp, #108	@ 0x6c
 80050e0:	a919      	add	r1, sp, #100	@ 0x64
 80050e2:	f001 f927 	bl	8006334 <__gethex>
 80050e6:	f010 060f 	ands.w	r6, r0, #15
 80050ea:	4604      	mov	r4, r0
 80050ec:	d005      	beq.n	80050fa <_strtod_l+0x72>
 80050ee:	2e06      	cmp	r6, #6
 80050f0:	d128      	bne.n	8005144 <_strtod_l+0xbc>
 80050f2:	3501      	adds	r5, #1
 80050f4:	2300      	movs	r3, #0
 80050f6:	9519      	str	r5, [sp, #100]	@ 0x64
 80050f8:	930e      	str	r3, [sp, #56]	@ 0x38
 80050fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f040 858e 	bne.w	8005c1e <_strtod_l+0xb96>
 8005102:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005104:	b1cb      	cbz	r3, 800513a <_strtod_l+0xb2>
 8005106:	4652      	mov	r2, sl
 8005108:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800510c:	ec43 2b10 	vmov	d0, r2, r3
 8005110:	b01f      	add	sp, #124	@ 0x7c
 8005112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005116:	2920      	cmp	r1, #32
 8005118:	d1ce      	bne.n	80050b8 <_strtod_l+0x30>
 800511a:	3201      	adds	r2, #1
 800511c:	e7c1      	b.n	80050a2 <_strtod_l+0x1a>
 800511e:	292d      	cmp	r1, #45	@ 0x2d
 8005120:	d1ca      	bne.n	80050b8 <_strtod_l+0x30>
 8005122:	2101      	movs	r1, #1
 8005124:	910e      	str	r1, [sp, #56]	@ 0x38
 8005126:	1c51      	adds	r1, r2, #1
 8005128:	9119      	str	r1, [sp, #100]	@ 0x64
 800512a:	7852      	ldrb	r2, [r2, #1]
 800512c:	2a00      	cmp	r2, #0
 800512e:	d1c5      	bne.n	80050bc <_strtod_l+0x34>
 8005130:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005132:	9419      	str	r4, [sp, #100]	@ 0x64
 8005134:	2b00      	cmp	r3, #0
 8005136:	f040 8570 	bne.w	8005c1a <_strtod_l+0xb92>
 800513a:	4652      	mov	r2, sl
 800513c:	465b      	mov	r3, fp
 800513e:	e7e5      	b.n	800510c <_strtod_l+0x84>
 8005140:	2100      	movs	r1, #0
 8005142:	e7ef      	b.n	8005124 <_strtod_l+0x9c>
 8005144:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005146:	b13a      	cbz	r2, 8005158 <_strtod_l+0xd0>
 8005148:	2135      	movs	r1, #53	@ 0x35
 800514a:	a81c      	add	r0, sp, #112	@ 0x70
 800514c:	f7ff ff3a 	bl	8004fc4 <__copybits>
 8005150:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005152:	9805      	ldr	r0, [sp, #20]
 8005154:	f7ff fb10 	bl	8004778 <_Bfree>
 8005158:	3e01      	subs	r6, #1
 800515a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800515c:	2e04      	cmp	r6, #4
 800515e:	d806      	bhi.n	800516e <_strtod_l+0xe6>
 8005160:	e8df f006 	tbb	[pc, r6]
 8005164:	201d0314 	.word	0x201d0314
 8005168:	14          	.byte	0x14
 8005169:	00          	.byte	0x00
 800516a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800516e:	05e1      	lsls	r1, r4, #23
 8005170:	bf48      	it	mi
 8005172:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005176:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800517a:	0d1b      	lsrs	r3, r3, #20
 800517c:	051b      	lsls	r3, r3, #20
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1bb      	bne.n	80050fa <_strtod_l+0x72>
 8005182:	f7fe fb2d 	bl	80037e0 <__errno>
 8005186:	2322      	movs	r3, #34	@ 0x22
 8005188:	6003      	str	r3, [r0, #0]
 800518a:	e7b6      	b.n	80050fa <_strtod_l+0x72>
 800518c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005190:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005194:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005198:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800519c:	e7e7      	b.n	800516e <_strtod_l+0xe6>
 800519e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8005320 <_strtod_l+0x298>
 80051a2:	e7e4      	b.n	800516e <_strtod_l+0xe6>
 80051a4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80051a8:	f04f 3aff 	mov.w	sl, #4294967295
 80051ac:	e7df      	b.n	800516e <_strtod_l+0xe6>
 80051ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80051b0:	1c5a      	adds	r2, r3, #1
 80051b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80051b4:	785b      	ldrb	r3, [r3, #1]
 80051b6:	2b30      	cmp	r3, #48	@ 0x30
 80051b8:	d0f9      	beq.n	80051ae <_strtod_l+0x126>
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d09d      	beq.n	80050fa <_strtod_l+0x72>
 80051be:	2301      	movs	r3, #1
 80051c0:	2700      	movs	r7, #0
 80051c2:	9308      	str	r3, [sp, #32]
 80051c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80051c6:	930c      	str	r3, [sp, #48]	@ 0x30
 80051c8:	970b      	str	r7, [sp, #44]	@ 0x2c
 80051ca:	46b9      	mov	r9, r7
 80051cc:	220a      	movs	r2, #10
 80051ce:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80051d0:	7805      	ldrb	r5, [r0, #0]
 80051d2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80051d6:	b2d9      	uxtb	r1, r3
 80051d8:	2909      	cmp	r1, #9
 80051da:	d928      	bls.n	800522e <_strtod_l+0x1a6>
 80051dc:	494f      	ldr	r1, [pc, #316]	@ (800531c <_strtod_l+0x294>)
 80051de:	2201      	movs	r2, #1
 80051e0:	f000 ffd6 	bl	8006190 <strncmp>
 80051e4:	2800      	cmp	r0, #0
 80051e6:	d032      	beq.n	800524e <_strtod_l+0x1c6>
 80051e8:	2000      	movs	r0, #0
 80051ea:	462a      	mov	r2, r5
 80051ec:	900a      	str	r0, [sp, #40]	@ 0x28
 80051ee:	464d      	mov	r5, r9
 80051f0:	4603      	mov	r3, r0
 80051f2:	2a65      	cmp	r2, #101	@ 0x65
 80051f4:	d001      	beq.n	80051fa <_strtod_l+0x172>
 80051f6:	2a45      	cmp	r2, #69	@ 0x45
 80051f8:	d114      	bne.n	8005224 <_strtod_l+0x19c>
 80051fa:	b91d      	cbnz	r5, 8005204 <_strtod_l+0x17c>
 80051fc:	9a08      	ldr	r2, [sp, #32]
 80051fe:	4302      	orrs	r2, r0
 8005200:	d096      	beq.n	8005130 <_strtod_l+0xa8>
 8005202:	2500      	movs	r5, #0
 8005204:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005206:	1c62      	adds	r2, r4, #1
 8005208:	9219      	str	r2, [sp, #100]	@ 0x64
 800520a:	7862      	ldrb	r2, [r4, #1]
 800520c:	2a2b      	cmp	r2, #43	@ 0x2b
 800520e:	d07a      	beq.n	8005306 <_strtod_l+0x27e>
 8005210:	2a2d      	cmp	r2, #45	@ 0x2d
 8005212:	d07e      	beq.n	8005312 <_strtod_l+0x28a>
 8005214:	f04f 0c00 	mov.w	ip, #0
 8005218:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800521c:	2909      	cmp	r1, #9
 800521e:	f240 8085 	bls.w	800532c <_strtod_l+0x2a4>
 8005222:	9419      	str	r4, [sp, #100]	@ 0x64
 8005224:	f04f 0800 	mov.w	r8, #0
 8005228:	e0a5      	b.n	8005376 <_strtod_l+0x2ee>
 800522a:	2300      	movs	r3, #0
 800522c:	e7c8      	b.n	80051c0 <_strtod_l+0x138>
 800522e:	f1b9 0f08 	cmp.w	r9, #8
 8005232:	bfd8      	it	le
 8005234:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8005236:	f100 0001 	add.w	r0, r0, #1
 800523a:	bfda      	itte	le
 800523c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005240:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8005242:	fb02 3707 	mlagt	r7, r2, r7, r3
 8005246:	f109 0901 	add.w	r9, r9, #1
 800524a:	9019      	str	r0, [sp, #100]	@ 0x64
 800524c:	e7bf      	b.n	80051ce <_strtod_l+0x146>
 800524e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	9219      	str	r2, [sp, #100]	@ 0x64
 8005254:	785a      	ldrb	r2, [r3, #1]
 8005256:	f1b9 0f00 	cmp.w	r9, #0
 800525a:	d03b      	beq.n	80052d4 <_strtod_l+0x24c>
 800525c:	900a      	str	r0, [sp, #40]	@ 0x28
 800525e:	464d      	mov	r5, r9
 8005260:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005264:	2b09      	cmp	r3, #9
 8005266:	d912      	bls.n	800528e <_strtod_l+0x206>
 8005268:	2301      	movs	r3, #1
 800526a:	e7c2      	b.n	80051f2 <_strtod_l+0x16a>
 800526c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800526e:	1c5a      	adds	r2, r3, #1
 8005270:	9219      	str	r2, [sp, #100]	@ 0x64
 8005272:	785a      	ldrb	r2, [r3, #1]
 8005274:	3001      	adds	r0, #1
 8005276:	2a30      	cmp	r2, #48	@ 0x30
 8005278:	d0f8      	beq.n	800526c <_strtod_l+0x1e4>
 800527a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800527e:	2b08      	cmp	r3, #8
 8005280:	f200 84d2 	bhi.w	8005c28 <_strtod_l+0xba0>
 8005284:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005286:	900a      	str	r0, [sp, #40]	@ 0x28
 8005288:	2000      	movs	r0, #0
 800528a:	930c      	str	r3, [sp, #48]	@ 0x30
 800528c:	4605      	mov	r5, r0
 800528e:	3a30      	subs	r2, #48	@ 0x30
 8005290:	f100 0301 	add.w	r3, r0, #1
 8005294:	d018      	beq.n	80052c8 <_strtod_l+0x240>
 8005296:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005298:	4419      	add	r1, r3
 800529a:	910a      	str	r1, [sp, #40]	@ 0x28
 800529c:	462e      	mov	r6, r5
 800529e:	f04f 0e0a 	mov.w	lr, #10
 80052a2:	1c71      	adds	r1, r6, #1
 80052a4:	eba1 0c05 	sub.w	ip, r1, r5
 80052a8:	4563      	cmp	r3, ip
 80052aa:	dc15      	bgt.n	80052d8 <_strtod_l+0x250>
 80052ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80052b0:	182b      	adds	r3, r5, r0
 80052b2:	2b08      	cmp	r3, #8
 80052b4:	f105 0501 	add.w	r5, r5, #1
 80052b8:	4405      	add	r5, r0
 80052ba:	dc1a      	bgt.n	80052f2 <_strtod_l+0x26a>
 80052bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80052be:	230a      	movs	r3, #10
 80052c0:	fb03 2301 	mla	r3, r3, r1, r2
 80052c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80052c6:	2300      	movs	r3, #0
 80052c8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80052ca:	1c51      	adds	r1, r2, #1
 80052cc:	9119      	str	r1, [sp, #100]	@ 0x64
 80052ce:	7852      	ldrb	r2, [r2, #1]
 80052d0:	4618      	mov	r0, r3
 80052d2:	e7c5      	b.n	8005260 <_strtod_l+0x1d8>
 80052d4:	4648      	mov	r0, r9
 80052d6:	e7ce      	b.n	8005276 <_strtod_l+0x1ee>
 80052d8:	2e08      	cmp	r6, #8
 80052da:	dc05      	bgt.n	80052e8 <_strtod_l+0x260>
 80052dc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80052de:	fb0e f606 	mul.w	r6, lr, r6
 80052e2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80052e4:	460e      	mov	r6, r1
 80052e6:	e7dc      	b.n	80052a2 <_strtod_l+0x21a>
 80052e8:	2910      	cmp	r1, #16
 80052ea:	bfd8      	it	le
 80052ec:	fb0e f707 	mulle.w	r7, lr, r7
 80052f0:	e7f8      	b.n	80052e4 <_strtod_l+0x25c>
 80052f2:	2b0f      	cmp	r3, #15
 80052f4:	bfdc      	itt	le
 80052f6:	230a      	movle	r3, #10
 80052f8:	fb03 2707 	mlale	r7, r3, r7, r2
 80052fc:	e7e3      	b.n	80052c6 <_strtod_l+0x23e>
 80052fe:	2300      	movs	r3, #0
 8005300:	930a      	str	r3, [sp, #40]	@ 0x28
 8005302:	2301      	movs	r3, #1
 8005304:	e77a      	b.n	80051fc <_strtod_l+0x174>
 8005306:	f04f 0c00 	mov.w	ip, #0
 800530a:	1ca2      	adds	r2, r4, #2
 800530c:	9219      	str	r2, [sp, #100]	@ 0x64
 800530e:	78a2      	ldrb	r2, [r4, #2]
 8005310:	e782      	b.n	8005218 <_strtod_l+0x190>
 8005312:	f04f 0c01 	mov.w	ip, #1
 8005316:	e7f8      	b.n	800530a <_strtod_l+0x282>
 8005318:	080071f4 	.word	0x080071f4
 800531c:	08007027 	.word	0x08007027
 8005320:	7ff00000 	.word	0x7ff00000
 8005324:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005326:	1c51      	adds	r1, r2, #1
 8005328:	9119      	str	r1, [sp, #100]	@ 0x64
 800532a:	7852      	ldrb	r2, [r2, #1]
 800532c:	2a30      	cmp	r2, #48	@ 0x30
 800532e:	d0f9      	beq.n	8005324 <_strtod_l+0x29c>
 8005330:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005334:	2908      	cmp	r1, #8
 8005336:	f63f af75 	bhi.w	8005224 <_strtod_l+0x19c>
 800533a:	3a30      	subs	r2, #48	@ 0x30
 800533c:	9209      	str	r2, [sp, #36]	@ 0x24
 800533e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005340:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005342:	f04f 080a 	mov.w	r8, #10
 8005346:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005348:	1c56      	adds	r6, r2, #1
 800534a:	9619      	str	r6, [sp, #100]	@ 0x64
 800534c:	7852      	ldrb	r2, [r2, #1]
 800534e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005352:	f1be 0f09 	cmp.w	lr, #9
 8005356:	d939      	bls.n	80053cc <_strtod_l+0x344>
 8005358:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800535a:	1a76      	subs	r6, r6, r1
 800535c:	2e08      	cmp	r6, #8
 800535e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005362:	dc03      	bgt.n	800536c <_strtod_l+0x2e4>
 8005364:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005366:	4588      	cmp	r8, r1
 8005368:	bfa8      	it	ge
 800536a:	4688      	movge	r8, r1
 800536c:	f1bc 0f00 	cmp.w	ip, #0
 8005370:	d001      	beq.n	8005376 <_strtod_l+0x2ee>
 8005372:	f1c8 0800 	rsb	r8, r8, #0
 8005376:	2d00      	cmp	r5, #0
 8005378:	d14e      	bne.n	8005418 <_strtod_l+0x390>
 800537a:	9908      	ldr	r1, [sp, #32]
 800537c:	4308      	orrs	r0, r1
 800537e:	f47f aebc 	bne.w	80050fa <_strtod_l+0x72>
 8005382:	2b00      	cmp	r3, #0
 8005384:	f47f aed4 	bne.w	8005130 <_strtod_l+0xa8>
 8005388:	2a69      	cmp	r2, #105	@ 0x69
 800538a:	d028      	beq.n	80053de <_strtod_l+0x356>
 800538c:	dc25      	bgt.n	80053da <_strtod_l+0x352>
 800538e:	2a49      	cmp	r2, #73	@ 0x49
 8005390:	d025      	beq.n	80053de <_strtod_l+0x356>
 8005392:	2a4e      	cmp	r2, #78	@ 0x4e
 8005394:	f47f aecc 	bne.w	8005130 <_strtod_l+0xa8>
 8005398:	499a      	ldr	r1, [pc, #616]	@ (8005604 <_strtod_l+0x57c>)
 800539a:	a819      	add	r0, sp, #100	@ 0x64
 800539c:	f001 f9ec 	bl	8006778 <__match>
 80053a0:	2800      	cmp	r0, #0
 80053a2:	f43f aec5 	beq.w	8005130 <_strtod_l+0xa8>
 80053a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	2b28      	cmp	r3, #40	@ 0x28
 80053ac:	d12e      	bne.n	800540c <_strtod_l+0x384>
 80053ae:	4996      	ldr	r1, [pc, #600]	@ (8005608 <_strtod_l+0x580>)
 80053b0:	aa1c      	add	r2, sp, #112	@ 0x70
 80053b2:	a819      	add	r0, sp, #100	@ 0x64
 80053b4:	f001 f9f4 	bl	80067a0 <__hexnan>
 80053b8:	2805      	cmp	r0, #5
 80053ba:	d127      	bne.n	800540c <_strtod_l+0x384>
 80053bc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80053be:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80053c2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80053c6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80053ca:	e696      	b.n	80050fa <_strtod_l+0x72>
 80053cc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80053ce:	fb08 2101 	mla	r1, r8, r1, r2
 80053d2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80053d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80053d8:	e7b5      	b.n	8005346 <_strtod_l+0x2be>
 80053da:	2a6e      	cmp	r2, #110	@ 0x6e
 80053dc:	e7da      	b.n	8005394 <_strtod_l+0x30c>
 80053de:	498b      	ldr	r1, [pc, #556]	@ (800560c <_strtod_l+0x584>)
 80053e0:	a819      	add	r0, sp, #100	@ 0x64
 80053e2:	f001 f9c9 	bl	8006778 <__match>
 80053e6:	2800      	cmp	r0, #0
 80053e8:	f43f aea2 	beq.w	8005130 <_strtod_l+0xa8>
 80053ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80053ee:	4988      	ldr	r1, [pc, #544]	@ (8005610 <_strtod_l+0x588>)
 80053f0:	3b01      	subs	r3, #1
 80053f2:	a819      	add	r0, sp, #100	@ 0x64
 80053f4:	9319      	str	r3, [sp, #100]	@ 0x64
 80053f6:	f001 f9bf 	bl	8006778 <__match>
 80053fa:	b910      	cbnz	r0, 8005402 <_strtod_l+0x37a>
 80053fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80053fe:	3301      	adds	r3, #1
 8005400:	9319      	str	r3, [sp, #100]	@ 0x64
 8005402:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8005620 <_strtod_l+0x598>
 8005406:	f04f 0a00 	mov.w	sl, #0
 800540a:	e676      	b.n	80050fa <_strtod_l+0x72>
 800540c:	4881      	ldr	r0, [pc, #516]	@ (8005614 <_strtod_l+0x58c>)
 800540e:	f000 feef 	bl	80061f0 <nan>
 8005412:	ec5b ab10 	vmov	sl, fp, d0
 8005416:	e670      	b.n	80050fa <_strtod_l+0x72>
 8005418:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800541a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800541c:	eba8 0303 	sub.w	r3, r8, r3
 8005420:	f1b9 0f00 	cmp.w	r9, #0
 8005424:	bf08      	it	eq
 8005426:	46a9      	moveq	r9, r5
 8005428:	2d10      	cmp	r5, #16
 800542a:	9309      	str	r3, [sp, #36]	@ 0x24
 800542c:	462c      	mov	r4, r5
 800542e:	bfa8      	it	ge
 8005430:	2410      	movge	r4, #16
 8005432:	f7fb f867 	bl	8000504 <__aeabi_ui2d>
 8005436:	2d09      	cmp	r5, #9
 8005438:	4682      	mov	sl, r0
 800543a:	468b      	mov	fp, r1
 800543c:	dc13      	bgt.n	8005466 <_strtod_l+0x3de>
 800543e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005440:	2b00      	cmp	r3, #0
 8005442:	f43f ae5a 	beq.w	80050fa <_strtod_l+0x72>
 8005446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005448:	dd78      	ble.n	800553c <_strtod_l+0x4b4>
 800544a:	2b16      	cmp	r3, #22
 800544c:	dc5f      	bgt.n	800550e <_strtod_l+0x486>
 800544e:	4972      	ldr	r1, [pc, #456]	@ (8005618 <_strtod_l+0x590>)
 8005450:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005454:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005458:	4652      	mov	r2, sl
 800545a:	465b      	mov	r3, fp
 800545c:	f7fb f8cc 	bl	80005f8 <__aeabi_dmul>
 8005460:	4682      	mov	sl, r0
 8005462:	468b      	mov	fp, r1
 8005464:	e649      	b.n	80050fa <_strtod_l+0x72>
 8005466:	4b6c      	ldr	r3, [pc, #432]	@ (8005618 <_strtod_l+0x590>)
 8005468:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800546c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005470:	f7fb f8c2 	bl	80005f8 <__aeabi_dmul>
 8005474:	4682      	mov	sl, r0
 8005476:	4638      	mov	r0, r7
 8005478:	468b      	mov	fp, r1
 800547a:	f7fb f843 	bl	8000504 <__aeabi_ui2d>
 800547e:	4602      	mov	r2, r0
 8005480:	460b      	mov	r3, r1
 8005482:	4650      	mov	r0, sl
 8005484:	4659      	mov	r1, fp
 8005486:	f7fa ff01 	bl	800028c <__adddf3>
 800548a:	2d0f      	cmp	r5, #15
 800548c:	4682      	mov	sl, r0
 800548e:	468b      	mov	fp, r1
 8005490:	ddd5      	ble.n	800543e <_strtod_l+0x3b6>
 8005492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005494:	1b2c      	subs	r4, r5, r4
 8005496:	441c      	add	r4, r3
 8005498:	2c00      	cmp	r4, #0
 800549a:	f340 8093 	ble.w	80055c4 <_strtod_l+0x53c>
 800549e:	f014 030f 	ands.w	r3, r4, #15
 80054a2:	d00a      	beq.n	80054ba <_strtod_l+0x432>
 80054a4:	495c      	ldr	r1, [pc, #368]	@ (8005618 <_strtod_l+0x590>)
 80054a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80054aa:	4652      	mov	r2, sl
 80054ac:	465b      	mov	r3, fp
 80054ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054b2:	f7fb f8a1 	bl	80005f8 <__aeabi_dmul>
 80054b6:	4682      	mov	sl, r0
 80054b8:	468b      	mov	fp, r1
 80054ba:	f034 040f 	bics.w	r4, r4, #15
 80054be:	d073      	beq.n	80055a8 <_strtod_l+0x520>
 80054c0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80054c4:	dd49      	ble.n	800555a <_strtod_l+0x4d2>
 80054c6:	2400      	movs	r4, #0
 80054c8:	46a0      	mov	r8, r4
 80054ca:	940b      	str	r4, [sp, #44]	@ 0x2c
 80054cc:	46a1      	mov	r9, r4
 80054ce:	9a05      	ldr	r2, [sp, #20]
 80054d0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8005620 <_strtod_l+0x598>
 80054d4:	2322      	movs	r3, #34	@ 0x22
 80054d6:	6013      	str	r3, [r2, #0]
 80054d8:	f04f 0a00 	mov.w	sl, #0
 80054dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f43f ae0b 	beq.w	80050fa <_strtod_l+0x72>
 80054e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80054e6:	9805      	ldr	r0, [sp, #20]
 80054e8:	f7ff f946 	bl	8004778 <_Bfree>
 80054ec:	9805      	ldr	r0, [sp, #20]
 80054ee:	4649      	mov	r1, r9
 80054f0:	f7ff f942 	bl	8004778 <_Bfree>
 80054f4:	9805      	ldr	r0, [sp, #20]
 80054f6:	4641      	mov	r1, r8
 80054f8:	f7ff f93e 	bl	8004778 <_Bfree>
 80054fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80054fe:	9805      	ldr	r0, [sp, #20]
 8005500:	f7ff f93a 	bl	8004778 <_Bfree>
 8005504:	9805      	ldr	r0, [sp, #20]
 8005506:	4621      	mov	r1, r4
 8005508:	f7ff f936 	bl	8004778 <_Bfree>
 800550c:	e5f5      	b.n	80050fa <_strtod_l+0x72>
 800550e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005510:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005514:	4293      	cmp	r3, r2
 8005516:	dbbc      	blt.n	8005492 <_strtod_l+0x40a>
 8005518:	4c3f      	ldr	r4, [pc, #252]	@ (8005618 <_strtod_l+0x590>)
 800551a:	f1c5 050f 	rsb	r5, r5, #15
 800551e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005522:	4652      	mov	r2, sl
 8005524:	465b      	mov	r3, fp
 8005526:	e9d1 0100 	ldrd	r0, r1, [r1]
 800552a:	f7fb f865 	bl	80005f8 <__aeabi_dmul>
 800552e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005530:	1b5d      	subs	r5, r3, r5
 8005532:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005536:	e9d4 2300 	ldrd	r2, r3, [r4]
 800553a:	e78f      	b.n	800545c <_strtod_l+0x3d4>
 800553c:	3316      	adds	r3, #22
 800553e:	dba8      	blt.n	8005492 <_strtod_l+0x40a>
 8005540:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005542:	eba3 0808 	sub.w	r8, r3, r8
 8005546:	4b34      	ldr	r3, [pc, #208]	@ (8005618 <_strtod_l+0x590>)
 8005548:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800554c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005550:	4650      	mov	r0, sl
 8005552:	4659      	mov	r1, fp
 8005554:	f7fb f97a 	bl	800084c <__aeabi_ddiv>
 8005558:	e782      	b.n	8005460 <_strtod_l+0x3d8>
 800555a:	2300      	movs	r3, #0
 800555c:	4f2f      	ldr	r7, [pc, #188]	@ (800561c <_strtod_l+0x594>)
 800555e:	1124      	asrs	r4, r4, #4
 8005560:	4650      	mov	r0, sl
 8005562:	4659      	mov	r1, fp
 8005564:	461e      	mov	r6, r3
 8005566:	2c01      	cmp	r4, #1
 8005568:	dc21      	bgt.n	80055ae <_strtod_l+0x526>
 800556a:	b10b      	cbz	r3, 8005570 <_strtod_l+0x4e8>
 800556c:	4682      	mov	sl, r0
 800556e:	468b      	mov	fp, r1
 8005570:	492a      	ldr	r1, [pc, #168]	@ (800561c <_strtod_l+0x594>)
 8005572:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005576:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800557a:	4652      	mov	r2, sl
 800557c:	465b      	mov	r3, fp
 800557e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005582:	f7fb f839 	bl	80005f8 <__aeabi_dmul>
 8005586:	4b26      	ldr	r3, [pc, #152]	@ (8005620 <_strtod_l+0x598>)
 8005588:	460a      	mov	r2, r1
 800558a:	400b      	ands	r3, r1
 800558c:	4925      	ldr	r1, [pc, #148]	@ (8005624 <_strtod_l+0x59c>)
 800558e:	428b      	cmp	r3, r1
 8005590:	4682      	mov	sl, r0
 8005592:	d898      	bhi.n	80054c6 <_strtod_l+0x43e>
 8005594:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005598:	428b      	cmp	r3, r1
 800559a:	bf86      	itte	hi
 800559c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8005628 <_strtod_l+0x5a0>
 80055a0:	f04f 3aff 	movhi.w	sl, #4294967295
 80055a4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80055a8:	2300      	movs	r3, #0
 80055aa:	9308      	str	r3, [sp, #32]
 80055ac:	e076      	b.n	800569c <_strtod_l+0x614>
 80055ae:	07e2      	lsls	r2, r4, #31
 80055b0:	d504      	bpl.n	80055bc <_strtod_l+0x534>
 80055b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055b6:	f7fb f81f 	bl	80005f8 <__aeabi_dmul>
 80055ba:	2301      	movs	r3, #1
 80055bc:	3601      	adds	r6, #1
 80055be:	1064      	asrs	r4, r4, #1
 80055c0:	3708      	adds	r7, #8
 80055c2:	e7d0      	b.n	8005566 <_strtod_l+0x4de>
 80055c4:	d0f0      	beq.n	80055a8 <_strtod_l+0x520>
 80055c6:	4264      	negs	r4, r4
 80055c8:	f014 020f 	ands.w	r2, r4, #15
 80055cc:	d00a      	beq.n	80055e4 <_strtod_l+0x55c>
 80055ce:	4b12      	ldr	r3, [pc, #72]	@ (8005618 <_strtod_l+0x590>)
 80055d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055d4:	4650      	mov	r0, sl
 80055d6:	4659      	mov	r1, fp
 80055d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055dc:	f7fb f936 	bl	800084c <__aeabi_ddiv>
 80055e0:	4682      	mov	sl, r0
 80055e2:	468b      	mov	fp, r1
 80055e4:	1124      	asrs	r4, r4, #4
 80055e6:	d0df      	beq.n	80055a8 <_strtod_l+0x520>
 80055e8:	2c1f      	cmp	r4, #31
 80055ea:	dd1f      	ble.n	800562c <_strtod_l+0x5a4>
 80055ec:	2400      	movs	r4, #0
 80055ee:	46a0      	mov	r8, r4
 80055f0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80055f2:	46a1      	mov	r9, r4
 80055f4:	9a05      	ldr	r2, [sp, #20]
 80055f6:	2322      	movs	r3, #34	@ 0x22
 80055f8:	f04f 0a00 	mov.w	sl, #0
 80055fc:	f04f 0b00 	mov.w	fp, #0
 8005600:	6013      	str	r3, [r2, #0]
 8005602:	e76b      	b.n	80054dc <_strtod_l+0x454>
 8005604:	08006f15 	.word	0x08006f15
 8005608:	080071e0 	.word	0x080071e0
 800560c:	08006f0d 	.word	0x08006f0d
 8005610:	08006f44 	.word	0x08006f44
 8005614:	0800707d 	.word	0x0800707d
 8005618:	08007118 	.word	0x08007118
 800561c:	080070f0 	.word	0x080070f0
 8005620:	7ff00000 	.word	0x7ff00000
 8005624:	7ca00000 	.word	0x7ca00000
 8005628:	7fefffff 	.word	0x7fefffff
 800562c:	f014 0310 	ands.w	r3, r4, #16
 8005630:	bf18      	it	ne
 8005632:	236a      	movne	r3, #106	@ 0x6a
 8005634:	4ea9      	ldr	r6, [pc, #676]	@ (80058dc <_strtod_l+0x854>)
 8005636:	9308      	str	r3, [sp, #32]
 8005638:	4650      	mov	r0, sl
 800563a:	4659      	mov	r1, fp
 800563c:	2300      	movs	r3, #0
 800563e:	07e7      	lsls	r7, r4, #31
 8005640:	d504      	bpl.n	800564c <_strtod_l+0x5c4>
 8005642:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005646:	f7fa ffd7 	bl	80005f8 <__aeabi_dmul>
 800564a:	2301      	movs	r3, #1
 800564c:	1064      	asrs	r4, r4, #1
 800564e:	f106 0608 	add.w	r6, r6, #8
 8005652:	d1f4      	bne.n	800563e <_strtod_l+0x5b6>
 8005654:	b10b      	cbz	r3, 800565a <_strtod_l+0x5d2>
 8005656:	4682      	mov	sl, r0
 8005658:	468b      	mov	fp, r1
 800565a:	9b08      	ldr	r3, [sp, #32]
 800565c:	b1b3      	cbz	r3, 800568c <_strtod_l+0x604>
 800565e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005662:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005666:	2b00      	cmp	r3, #0
 8005668:	4659      	mov	r1, fp
 800566a:	dd0f      	ble.n	800568c <_strtod_l+0x604>
 800566c:	2b1f      	cmp	r3, #31
 800566e:	dd56      	ble.n	800571e <_strtod_l+0x696>
 8005670:	2b34      	cmp	r3, #52	@ 0x34
 8005672:	bfde      	ittt	le
 8005674:	f04f 33ff 	movle.w	r3, #4294967295
 8005678:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800567c:	4093      	lslle	r3, r2
 800567e:	f04f 0a00 	mov.w	sl, #0
 8005682:	bfcc      	ite	gt
 8005684:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005688:	ea03 0b01 	andle.w	fp, r3, r1
 800568c:	2200      	movs	r2, #0
 800568e:	2300      	movs	r3, #0
 8005690:	4650      	mov	r0, sl
 8005692:	4659      	mov	r1, fp
 8005694:	f7fb fa18 	bl	8000ac8 <__aeabi_dcmpeq>
 8005698:	2800      	cmp	r0, #0
 800569a:	d1a7      	bne.n	80055ec <_strtod_l+0x564>
 800569c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800569e:	9300      	str	r3, [sp, #0]
 80056a0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80056a2:	9805      	ldr	r0, [sp, #20]
 80056a4:	462b      	mov	r3, r5
 80056a6:	464a      	mov	r2, r9
 80056a8:	f7ff f8ce 	bl	8004848 <__s2b>
 80056ac:	900b      	str	r0, [sp, #44]	@ 0x2c
 80056ae:	2800      	cmp	r0, #0
 80056b0:	f43f af09 	beq.w	80054c6 <_strtod_l+0x43e>
 80056b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056b8:	2a00      	cmp	r2, #0
 80056ba:	eba3 0308 	sub.w	r3, r3, r8
 80056be:	bfa8      	it	ge
 80056c0:	2300      	movge	r3, #0
 80056c2:	9312      	str	r3, [sp, #72]	@ 0x48
 80056c4:	2400      	movs	r4, #0
 80056c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80056ca:	9316      	str	r3, [sp, #88]	@ 0x58
 80056cc:	46a0      	mov	r8, r4
 80056ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056d0:	9805      	ldr	r0, [sp, #20]
 80056d2:	6859      	ldr	r1, [r3, #4]
 80056d4:	f7ff f810 	bl	80046f8 <_Balloc>
 80056d8:	4681      	mov	r9, r0
 80056da:	2800      	cmp	r0, #0
 80056dc:	f43f aef7 	beq.w	80054ce <_strtod_l+0x446>
 80056e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056e2:	691a      	ldr	r2, [r3, #16]
 80056e4:	3202      	adds	r2, #2
 80056e6:	f103 010c 	add.w	r1, r3, #12
 80056ea:	0092      	lsls	r2, r2, #2
 80056ec:	300c      	adds	r0, #12
 80056ee:	f000 fd71 	bl	80061d4 <memcpy>
 80056f2:	ec4b ab10 	vmov	d0, sl, fp
 80056f6:	9805      	ldr	r0, [sp, #20]
 80056f8:	aa1c      	add	r2, sp, #112	@ 0x70
 80056fa:	a91b      	add	r1, sp, #108	@ 0x6c
 80056fc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8005700:	f7ff fbd6 	bl	8004eb0 <__d2b>
 8005704:	901a      	str	r0, [sp, #104]	@ 0x68
 8005706:	2800      	cmp	r0, #0
 8005708:	f43f aee1 	beq.w	80054ce <_strtod_l+0x446>
 800570c:	9805      	ldr	r0, [sp, #20]
 800570e:	2101      	movs	r1, #1
 8005710:	f7ff f930 	bl	8004974 <__i2b>
 8005714:	4680      	mov	r8, r0
 8005716:	b948      	cbnz	r0, 800572c <_strtod_l+0x6a4>
 8005718:	f04f 0800 	mov.w	r8, #0
 800571c:	e6d7      	b.n	80054ce <_strtod_l+0x446>
 800571e:	f04f 32ff 	mov.w	r2, #4294967295
 8005722:	fa02 f303 	lsl.w	r3, r2, r3
 8005726:	ea03 0a0a 	and.w	sl, r3, sl
 800572a:	e7af      	b.n	800568c <_strtod_l+0x604>
 800572c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800572e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8005730:	2d00      	cmp	r5, #0
 8005732:	bfab      	itete	ge
 8005734:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8005736:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8005738:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800573a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800573c:	bfac      	ite	ge
 800573e:	18ef      	addge	r7, r5, r3
 8005740:	1b5e      	sublt	r6, r3, r5
 8005742:	9b08      	ldr	r3, [sp, #32]
 8005744:	1aed      	subs	r5, r5, r3
 8005746:	4415      	add	r5, r2
 8005748:	4b65      	ldr	r3, [pc, #404]	@ (80058e0 <_strtod_l+0x858>)
 800574a:	3d01      	subs	r5, #1
 800574c:	429d      	cmp	r5, r3
 800574e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005752:	da50      	bge.n	80057f6 <_strtod_l+0x76e>
 8005754:	1b5b      	subs	r3, r3, r5
 8005756:	2b1f      	cmp	r3, #31
 8005758:	eba2 0203 	sub.w	r2, r2, r3
 800575c:	f04f 0101 	mov.w	r1, #1
 8005760:	dc3d      	bgt.n	80057de <_strtod_l+0x756>
 8005762:	fa01 f303 	lsl.w	r3, r1, r3
 8005766:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005768:	2300      	movs	r3, #0
 800576a:	9310      	str	r3, [sp, #64]	@ 0x40
 800576c:	18bd      	adds	r5, r7, r2
 800576e:	9b08      	ldr	r3, [sp, #32]
 8005770:	42af      	cmp	r7, r5
 8005772:	4416      	add	r6, r2
 8005774:	441e      	add	r6, r3
 8005776:	463b      	mov	r3, r7
 8005778:	bfa8      	it	ge
 800577a:	462b      	movge	r3, r5
 800577c:	42b3      	cmp	r3, r6
 800577e:	bfa8      	it	ge
 8005780:	4633      	movge	r3, r6
 8005782:	2b00      	cmp	r3, #0
 8005784:	bfc2      	ittt	gt
 8005786:	1aed      	subgt	r5, r5, r3
 8005788:	1af6      	subgt	r6, r6, r3
 800578a:	1aff      	subgt	r7, r7, r3
 800578c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800578e:	2b00      	cmp	r3, #0
 8005790:	dd16      	ble.n	80057c0 <_strtod_l+0x738>
 8005792:	4641      	mov	r1, r8
 8005794:	9805      	ldr	r0, [sp, #20]
 8005796:	461a      	mov	r2, r3
 8005798:	f7ff f9a4 	bl	8004ae4 <__pow5mult>
 800579c:	4680      	mov	r8, r0
 800579e:	2800      	cmp	r0, #0
 80057a0:	d0ba      	beq.n	8005718 <_strtod_l+0x690>
 80057a2:	4601      	mov	r1, r0
 80057a4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80057a6:	9805      	ldr	r0, [sp, #20]
 80057a8:	f7ff f8fa 	bl	80049a0 <__multiply>
 80057ac:	900a      	str	r0, [sp, #40]	@ 0x28
 80057ae:	2800      	cmp	r0, #0
 80057b0:	f43f ae8d 	beq.w	80054ce <_strtod_l+0x446>
 80057b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80057b6:	9805      	ldr	r0, [sp, #20]
 80057b8:	f7fe ffde 	bl	8004778 <_Bfree>
 80057bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057be:	931a      	str	r3, [sp, #104]	@ 0x68
 80057c0:	2d00      	cmp	r5, #0
 80057c2:	dc1d      	bgt.n	8005800 <_strtod_l+0x778>
 80057c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	dd23      	ble.n	8005812 <_strtod_l+0x78a>
 80057ca:	4649      	mov	r1, r9
 80057cc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80057ce:	9805      	ldr	r0, [sp, #20]
 80057d0:	f7ff f988 	bl	8004ae4 <__pow5mult>
 80057d4:	4681      	mov	r9, r0
 80057d6:	b9e0      	cbnz	r0, 8005812 <_strtod_l+0x78a>
 80057d8:	f04f 0900 	mov.w	r9, #0
 80057dc:	e677      	b.n	80054ce <_strtod_l+0x446>
 80057de:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80057e2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80057e6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80057ea:	35e2      	adds	r5, #226	@ 0xe2
 80057ec:	fa01 f305 	lsl.w	r3, r1, r5
 80057f0:	9310      	str	r3, [sp, #64]	@ 0x40
 80057f2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80057f4:	e7ba      	b.n	800576c <_strtod_l+0x6e4>
 80057f6:	2300      	movs	r3, #0
 80057f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80057fa:	2301      	movs	r3, #1
 80057fc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80057fe:	e7b5      	b.n	800576c <_strtod_l+0x6e4>
 8005800:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005802:	9805      	ldr	r0, [sp, #20]
 8005804:	462a      	mov	r2, r5
 8005806:	f7ff f9c7 	bl	8004b98 <__lshift>
 800580a:	901a      	str	r0, [sp, #104]	@ 0x68
 800580c:	2800      	cmp	r0, #0
 800580e:	d1d9      	bne.n	80057c4 <_strtod_l+0x73c>
 8005810:	e65d      	b.n	80054ce <_strtod_l+0x446>
 8005812:	2e00      	cmp	r6, #0
 8005814:	dd07      	ble.n	8005826 <_strtod_l+0x79e>
 8005816:	4649      	mov	r1, r9
 8005818:	9805      	ldr	r0, [sp, #20]
 800581a:	4632      	mov	r2, r6
 800581c:	f7ff f9bc 	bl	8004b98 <__lshift>
 8005820:	4681      	mov	r9, r0
 8005822:	2800      	cmp	r0, #0
 8005824:	d0d8      	beq.n	80057d8 <_strtod_l+0x750>
 8005826:	2f00      	cmp	r7, #0
 8005828:	dd08      	ble.n	800583c <_strtod_l+0x7b4>
 800582a:	4641      	mov	r1, r8
 800582c:	9805      	ldr	r0, [sp, #20]
 800582e:	463a      	mov	r2, r7
 8005830:	f7ff f9b2 	bl	8004b98 <__lshift>
 8005834:	4680      	mov	r8, r0
 8005836:	2800      	cmp	r0, #0
 8005838:	f43f ae49 	beq.w	80054ce <_strtod_l+0x446>
 800583c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800583e:	9805      	ldr	r0, [sp, #20]
 8005840:	464a      	mov	r2, r9
 8005842:	f7ff fa31 	bl	8004ca8 <__mdiff>
 8005846:	4604      	mov	r4, r0
 8005848:	2800      	cmp	r0, #0
 800584a:	f43f ae40 	beq.w	80054ce <_strtod_l+0x446>
 800584e:	68c3      	ldr	r3, [r0, #12]
 8005850:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005852:	2300      	movs	r3, #0
 8005854:	60c3      	str	r3, [r0, #12]
 8005856:	4641      	mov	r1, r8
 8005858:	f7ff fa0a 	bl	8004c70 <__mcmp>
 800585c:	2800      	cmp	r0, #0
 800585e:	da45      	bge.n	80058ec <_strtod_l+0x864>
 8005860:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005862:	ea53 030a 	orrs.w	r3, r3, sl
 8005866:	d16b      	bne.n	8005940 <_strtod_l+0x8b8>
 8005868:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800586c:	2b00      	cmp	r3, #0
 800586e:	d167      	bne.n	8005940 <_strtod_l+0x8b8>
 8005870:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005874:	0d1b      	lsrs	r3, r3, #20
 8005876:	051b      	lsls	r3, r3, #20
 8005878:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800587c:	d960      	bls.n	8005940 <_strtod_l+0x8b8>
 800587e:	6963      	ldr	r3, [r4, #20]
 8005880:	b913      	cbnz	r3, 8005888 <_strtod_l+0x800>
 8005882:	6923      	ldr	r3, [r4, #16]
 8005884:	2b01      	cmp	r3, #1
 8005886:	dd5b      	ble.n	8005940 <_strtod_l+0x8b8>
 8005888:	4621      	mov	r1, r4
 800588a:	2201      	movs	r2, #1
 800588c:	9805      	ldr	r0, [sp, #20]
 800588e:	f7ff f983 	bl	8004b98 <__lshift>
 8005892:	4641      	mov	r1, r8
 8005894:	4604      	mov	r4, r0
 8005896:	f7ff f9eb 	bl	8004c70 <__mcmp>
 800589a:	2800      	cmp	r0, #0
 800589c:	dd50      	ble.n	8005940 <_strtod_l+0x8b8>
 800589e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80058a2:	9a08      	ldr	r2, [sp, #32]
 80058a4:	0d1b      	lsrs	r3, r3, #20
 80058a6:	051b      	lsls	r3, r3, #20
 80058a8:	2a00      	cmp	r2, #0
 80058aa:	d06a      	beq.n	8005982 <_strtod_l+0x8fa>
 80058ac:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80058b0:	d867      	bhi.n	8005982 <_strtod_l+0x8fa>
 80058b2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80058b6:	f67f ae9d 	bls.w	80055f4 <_strtod_l+0x56c>
 80058ba:	4b0a      	ldr	r3, [pc, #40]	@ (80058e4 <_strtod_l+0x85c>)
 80058bc:	4650      	mov	r0, sl
 80058be:	4659      	mov	r1, fp
 80058c0:	2200      	movs	r2, #0
 80058c2:	f7fa fe99 	bl	80005f8 <__aeabi_dmul>
 80058c6:	4b08      	ldr	r3, [pc, #32]	@ (80058e8 <_strtod_l+0x860>)
 80058c8:	400b      	ands	r3, r1
 80058ca:	4682      	mov	sl, r0
 80058cc:	468b      	mov	fp, r1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f47f ae08 	bne.w	80054e4 <_strtod_l+0x45c>
 80058d4:	9a05      	ldr	r2, [sp, #20]
 80058d6:	2322      	movs	r3, #34	@ 0x22
 80058d8:	6013      	str	r3, [r2, #0]
 80058da:	e603      	b.n	80054e4 <_strtod_l+0x45c>
 80058dc:	08007208 	.word	0x08007208
 80058e0:	fffffc02 	.word	0xfffffc02
 80058e4:	39500000 	.word	0x39500000
 80058e8:	7ff00000 	.word	0x7ff00000
 80058ec:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80058f0:	d165      	bne.n	80059be <_strtod_l+0x936>
 80058f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80058f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80058f8:	b35a      	cbz	r2, 8005952 <_strtod_l+0x8ca>
 80058fa:	4a9f      	ldr	r2, [pc, #636]	@ (8005b78 <_strtod_l+0xaf0>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d12b      	bne.n	8005958 <_strtod_l+0x8d0>
 8005900:	9b08      	ldr	r3, [sp, #32]
 8005902:	4651      	mov	r1, sl
 8005904:	b303      	cbz	r3, 8005948 <_strtod_l+0x8c0>
 8005906:	4b9d      	ldr	r3, [pc, #628]	@ (8005b7c <_strtod_l+0xaf4>)
 8005908:	465a      	mov	r2, fp
 800590a:	4013      	ands	r3, r2
 800590c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005910:	f04f 32ff 	mov.w	r2, #4294967295
 8005914:	d81b      	bhi.n	800594e <_strtod_l+0x8c6>
 8005916:	0d1b      	lsrs	r3, r3, #20
 8005918:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800591c:	fa02 f303 	lsl.w	r3, r2, r3
 8005920:	4299      	cmp	r1, r3
 8005922:	d119      	bne.n	8005958 <_strtod_l+0x8d0>
 8005924:	4b96      	ldr	r3, [pc, #600]	@ (8005b80 <_strtod_l+0xaf8>)
 8005926:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005928:	429a      	cmp	r2, r3
 800592a:	d102      	bne.n	8005932 <_strtod_l+0x8aa>
 800592c:	3101      	adds	r1, #1
 800592e:	f43f adce 	beq.w	80054ce <_strtod_l+0x446>
 8005932:	4b92      	ldr	r3, [pc, #584]	@ (8005b7c <_strtod_l+0xaf4>)
 8005934:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005936:	401a      	ands	r2, r3
 8005938:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800593c:	f04f 0a00 	mov.w	sl, #0
 8005940:	9b08      	ldr	r3, [sp, #32]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1b9      	bne.n	80058ba <_strtod_l+0x832>
 8005946:	e5cd      	b.n	80054e4 <_strtod_l+0x45c>
 8005948:	f04f 33ff 	mov.w	r3, #4294967295
 800594c:	e7e8      	b.n	8005920 <_strtod_l+0x898>
 800594e:	4613      	mov	r3, r2
 8005950:	e7e6      	b.n	8005920 <_strtod_l+0x898>
 8005952:	ea53 030a 	orrs.w	r3, r3, sl
 8005956:	d0a2      	beq.n	800589e <_strtod_l+0x816>
 8005958:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800595a:	b1db      	cbz	r3, 8005994 <_strtod_l+0x90c>
 800595c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800595e:	4213      	tst	r3, r2
 8005960:	d0ee      	beq.n	8005940 <_strtod_l+0x8b8>
 8005962:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005964:	9a08      	ldr	r2, [sp, #32]
 8005966:	4650      	mov	r0, sl
 8005968:	4659      	mov	r1, fp
 800596a:	b1bb      	cbz	r3, 800599c <_strtod_l+0x914>
 800596c:	f7ff fb6e 	bl	800504c <sulp>
 8005970:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005974:	ec53 2b10 	vmov	r2, r3, d0
 8005978:	f7fa fc88 	bl	800028c <__adddf3>
 800597c:	4682      	mov	sl, r0
 800597e:	468b      	mov	fp, r1
 8005980:	e7de      	b.n	8005940 <_strtod_l+0x8b8>
 8005982:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005986:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800598a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800598e:	f04f 3aff 	mov.w	sl, #4294967295
 8005992:	e7d5      	b.n	8005940 <_strtod_l+0x8b8>
 8005994:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005996:	ea13 0f0a 	tst.w	r3, sl
 800599a:	e7e1      	b.n	8005960 <_strtod_l+0x8d8>
 800599c:	f7ff fb56 	bl	800504c <sulp>
 80059a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059a4:	ec53 2b10 	vmov	r2, r3, d0
 80059a8:	f7fa fc6e 	bl	8000288 <__aeabi_dsub>
 80059ac:	2200      	movs	r2, #0
 80059ae:	2300      	movs	r3, #0
 80059b0:	4682      	mov	sl, r0
 80059b2:	468b      	mov	fp, r1
 80059b4:	f7fb f888 	bl	8000ac8 <__aeabi_dcmpeq>
 80059b8:	2800      	cmp	r0, #0
 80059ba:	d0c1      	beq.n	8005940 <_strtod_l+0x8b8>
 80059bc:	e61a      	b.n	80055f4 <_strtod_l+0x56c>
 80059be:	4641      	mov	r1, r8
 80059c0:	4620      	mov	r0, r4
 80059c2:	f7ff facd 	bl	8004f60 <__ratio>
 80059c6:	ec57 6b10 	vmov	r6, r7, d0
 80059ca:	2200      	movs	r2, #0
 80059cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80059d0:	4630      	mov	r0, r6
 80059d2:	4639      	mov	r1, r7
 80059d4:	f7fb f88c 	bl	8000af0 <__aeabi_dcmple>
 80059d8:	2800      	cmp	r0, #0
 80059da:	d06f      	beq.n	8005abc <_strtod_l+0xa34>
 80059dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d17a      	bne.n	8005ad8 <_strtod_l+0xa50>
 80059e2:	f1ba 0f00 	cmp.w	sl, #0
 80059e6:	d158      	bne.n	8005a9a <_strtod_l+0xa12>
 80059e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d15a      	bne.n	8005aa8 <_strtod_l+0xa20>
 80059f2:	4b64      	ldr	r3, [pc, #400]	@ (8005b84 <_strtod_l+0xafc>)
 80059f4:	2200      	movs	r2, #0
 80059f6:	4630      	mov	r0, r6
 80059f8:	4639      	mov	r1, r7
 80059fa:	f7fb f86f 	bl	8000adc <__aeabi_dcmplt>
 80059fe:	2800      	cmp	r0, #0
 8005a00:	d159      	bne.n	8005ab6 <_strtod_l+0xa2e>
 8005a02:	4630      	mov	r0, r6
 8005a04:	4639      	mov	r1, r7
 8005a06:	4b60      	ldr	r3, [pc, #384]	@ (8005b88 <_strtod_l+0xb00>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f7fa fdf5 	bl	80005f8 <__aeabi_dmul>
 8005a0e:	4606      	mov	r6, r0
 8005a10:	460f      	mov	r7, r1
 8005a12:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8005a16:	9606      	str	r6, [sp, #24]
 8005a18:	9307      	str	r3, [sp, #28]
 8005a1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a1e:	4d57      	ldr	r5, [pc, #348]	@ (8005b7c <_strtod_l+0xaf4>)
 8005a20:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005a24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a26:	401d      	ands	r5, r3
 8005a28:	4b58      	ldr	r3, [pc, #352]	@ (8005b8c <_strtod_l+0xb04>)
 8005a2a:	429d      	cmp	r5, r3
 8005a2c:	f040 80b2 	bne.w	8005b94 <_strtod_l+0xb0c>
 8005a30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a32:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8005a36:	ec4b ab10 	vmov	d0, sl, fp
 8005a3a:	f7ff f9c9 	bl	8004dd0 <__ulp>
 8005a3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a42:	ec51 0b10 	vmov	r0, r1, d0
 8005a46:	f7fa fdd7 	bl	80005f8 <__aeabi_dmul>
 8005a4a:	4652      	mov	r2, sl
 8005a4c:	465b      	mov	r3, fp
 8005a4e:	f7fa fc1d 	bl	800028c <__adddf3>
 8005a52:	460b      	mov	r3, r1
 8005a54:	4949      	ldr	r1, [pc, #292]	@ (8005b7c <_strtod_l+0xaf4>)
 8005a56:	4a4e      	ldr	r2, [pc, #312]	@ (8005b90 <_strtod_l+0xb08>)
 8005a58:	4019      	ands	r1, r3
 8005a5a:	4291      	cmp	r1, r2
 8005a5c:	4682      	mov	sl, r0
 8005a5e:	d942      	bls.n	8005ae6 <_strtod_l+0xa5e>
 8005a60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005a62:	4b47      	ldr	r3, [pc, #284]	@ (8005b80 <_strtod_l+0xaf8>)
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d103      	bne.n	8005a70 <_strtod_l+0x9e8>
 8005a68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	f43f ad2f 	beq.w	80054ce <_strtod_l+0x446>
 8005a70:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8005b80 <_strtod_l+0xaf8>
 8005a74:	f04f 3aff 	mov.w	sl, #4294967295
 8005a78:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005a7a:	9805      	ldr	r0, [sp, #20]
 8005a7c:	f7fe fe7c 	bl	8004778 <_Bfree>
 8005a80:	9805      	ldr	r0, [sp, #20]
 8005a82:	4649      	mov	r1, r9
 8005a84:	f7fe fe78 	bl	8004778 <_Bfree>
 8005a88:	9805      	ldr	r0, [sp, #20]
 8005a8a:	4641      	mov	r1, r8
 8005a8c:	f7fe fe74 	bl	8004778 <_Bfree>
 8005a90:	9805      	ldr	r0, [sp, #20]
 8005a92:	4621      	mov	r1, r4
 8005a94:	f7fe fe70 	bl	8004778 <_Bfree>
 8005a98:	e619      	b.n	80056ce <_strtod_l+0x646>
 8005a9a:	f1ba 0f01 	cmp.w	sl, #1
 8005a9e:	d103      	bne.n	8005aa8 <_strtod_l+0xa20>
 8005aa0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f43f ada6 	beq.w	80055f4 <_strtod_l+0x56c>
 8005aa8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8005b58 <_strtod_l+0xad0>
 8005aac:	4f35      	ldr	r7, [pc, #212]	@ (8005b84 <_strtod_l+0xafc>)
 8005aae:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005ab2:	2600      	movs	r6, #0
 8005ab4:	e7b1      	b.n	8005a1a <_strtod_l+0x992>
 8005ab6:	4f34      	ldr	r7, [pc, #208]	@ (8005b88 <_strtod_l+0xb00>)
 8005ab8:	2600      	movs	r6, #0
 8005aba:	e7aa      	b.n	8005a12 <_strtod_l+0x98a>
 8005abc:	4b32      	ldr	r3, [pc, #200]	@ (8005b88 <_strtod_l+0xb00>)
 8005abe:	4630      	mov	r0, r6
 8005ac0:	4639      	mov	r1, r7
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f7fa fd98 	bl	80005f8 <__aeabi_dmul>
 8005ac8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005aca:	4606      	mov	r6, r0
 8005acc:	460f      	mov	r7, r1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d09f      	beq.n	8005a12 <_strtod_l+0x98a>
 8005ad2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005ad6:	e7a0      	b.n	8005a1a <_strtod_l+0x992>
 8005ad8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8005b60 <_strtod_l+0xad8>
 8005adc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005ae0:	ec57 6b17 	vmov	r6, r7, d7
 8005ae4:	e799      	b.n	8005a1a <_strtod_l+0x992>
 8005ae6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8005aea:	9b08      	ldr	r3, [sp, #32]
 8005aec:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1c1      	bne.n	8005a78 <_strtod_l+0x9f0>
 8005af4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005af8:	0d1b      	lsrs	r3, r3, #20
 8005afa:	051b      	lsls	r3, r3, #20
 8005afc:	429d      	cmp	r5, r3
 8005afe:	d1bb      	bne.n	8005a78 <_strtod_l+0x9f0>
 8005b00:	4630      	mov	r0, r6
 8005b02:	4639      	mov	r1, r7
 8005b04:	f7fb f8c0 	bl	8000c88 <__aeabi_d2lz>
 8005b08:	f7fa fd48 	bl	800059c <__aeabi_l2d>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	460b      	mov	r3, r1
 8005b10:	4630      	mov	r0, r6
 8005b12:	4639      	mov	r1, r7
 8005b14:	f7fa fbb8 	bl	8000288 <__aeabi_dsub>
 8005b18:	460b      	mov	r3, r1
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005b20:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8005b24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b26:	ea46 060a 	orr.w	r6, r6, sl
 8005b2a:	431e      	orrs	r6, r3
 8005b2c:	d06f      	beq.n	8005c0e <_strtod_l+0xb86>
 8005b2e:	a30e      	add	r3, pc, #56	@ (adr r3, 8005b68 <_strtod_l+0xae0>)
 8005b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b34:	f7fa ffd2 	bl	8000adc <__aeabi_dcmplt>
 8005b38:	2800      	cmp	r0, #0
 8005b3a:	f47f acd3 	bne.w	80054e4 <_strtod_l+0x45c>
 8005b3e:	a30c      	add	r3, pc, #48	@ (adr r3, 8005b70 <_strtod_l+0xae8>)
 8005b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b48:	f7fa ffe6 	bl	8000b18 <__aeabi_dcmpgt>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	d093      	beq.n	8005a78 <_strtod_l+0x9f0>
 8005b50:	e4c8      	b.n	80054e4 <_strtod_l+0x45c>
 8005b52:	bf00      	nop
 8005b54:	f3af 8000 	nop.w
 8005b58:	00000000 	.word	0x00000000
 8005b5c:	bff00000 	.word	0xbff00000
 8005b60:	00000000 	.word	0x00000000
 8005b64:	3ff00000 	.word	0x3ff00000
 8005b68:	94a03595 	.word	0x94a03595
 8005b6c:	3fdfffff 	.word	0x3fdfffff
 8005b70:	35afe535 	.word	0x35afe535
 8005b74:	3fe00000 	.word	0x3fe00000
 8005b78:	000fffff 	.word	0x000fffff
 8005b7c:	7ff00000 	.word	0x7ff00000
 8005b80:	7fefffff 	.word	0x7fefffff
 8005b84:	3ff00000 	.word	0x3ff00000
 8005b88:	3fe00000 	.word	0x3fe00000
 8005b8c:	7fe00000 	.word	0x7fe00000
 8005b90:	7c9fffff 	.word	0x7c9fffff
 8005b94:	9b08      	ldr	r3, [sp, #32]
 8005b96:	b323      	cbz	r3, 8005be2 <_strtod_l+0xb5a>
 8005b98:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8005b9c:	d821      	bhi.n	8005be2 <_strtod_l+0xb5a>
 8005b9e:	a328      	add	r3, pc, #160	@ (adr r3, 8005c40 <_strtod_l+0xbb8>)
 8005ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba4:	4630      	mov	r0, r6
 8005ba6:	4639      	mov	r1, r7
 8005ba8:	f7fa ffa2 	bl	8000af0 <__aeabi_dcmple>
 8005bac:	b1a0      	cbz	r0, 8005bd8 <_strtod_l+0xb50>
 8005bae:	4639      	mov	r1, r7
 8005bb0:	4630      	mov	r0, r6
 8005bb2:	f7fa fff9 	bl	8000ba8 <__aeabi_d2uiz>
 8005bb6:	2801      	cmp	r0, #1
 8005bb8:	bf38      	it	cc
 8005bba:	2001      	movcc	r0, #1
 8005bbc:	f7fa fca2 	bl	8000504 <__aeabi_ui2d>
 8005bc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005bc2:	4606      	mov	r6, r0
 8005bc4:	460f      	mov	r7, r1
 8005bc6:	b9fb      	cbnz	r3, 8005c08 <_strtod_l+0xb80>
 8005bc8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005bcc:	9014      	str	r0, [sp, #80]	@ 0x50
 8005bce:	9315      	str	r3, [sp, #84]	@ 0x54
 8005bd0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8005bd4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005bd8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005bda:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8005bde:	1b5b      	subs	r3, r3, r5
 8005be0:	9311      	str	r3, [sp, #68]	@ 0x44
 8005be2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005be6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8005bea:	f7ff f8f1 	bl	8004dd0 <__ulp>
 8005bee:	4650      	mov	r0, sl
 8005bf0:	ec53 2b10 	vmov	r2, r3, d0
 8005bf4:	4659      	mov	r1, fp
 8005bf6:	f7fa fcff 	bl	80005f8 <__aeabi_dmul>
 8005bfa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005bfe:	f7fa fb45 	bl	800028c <__adddf3>
 8005c02:	4682      	mov	sl, r0
 8005c04:	468b      	mov	fp, r1
 8005c06:	e770      	b.n	8005aea <_strtod_l+0xa62>
 8005c08:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8005c0c:	e7e0      	b.n	8005bd0 <_strtod_l+0xb48>
 8005c0e:	a30e      	add	r3, pc, #56	@ (adr r3, 8005c48 <_strtod_l+0xbc0>)
 8005c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c14:	f7fa ff62 	bl	8000adc <__aeabi_dcmplt>
 8005c18:	e798      	b.n	8005b4c <_strtod_l+0xac4>
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	930e      	str	r3, [sp, #56]	@ 0x38
 8005c1e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005c20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c22:	6013      	str	r3, [r2, #0]
 8005c24:	f7ff ba6d 	b.w	8005102 <_strtod_l+0x7a>
 8005c28:	2a65      	cmp	r2, #101	@ 0x65
 8005c2a:	f43f ab68 	beq.w	80052fe <_strtod_l+0x276>
 8005c2e:	2a45      	cmp	r2, #69	@ 0x45
 8005c30:	f43f ab65 	beq.w	80052fe <_strtod_l+0x276>
 8005c34:	2301      	movs	r3, #1
 8005c36:	f7ff bba0 	b.w	800537a <_strtod_l+0x2f2>
 8005c3a:	bf00      	nop
 8005c3c:	f3af 8000 	nop.w
 8005c40:	ffc00000 	.word	0xffc00000
 8005c44:	41dfffff 	.word	0x41dfffff
 8005c48:	94a03595 	.word	0x94a03595
 8005c4c:	3fcfffff 	.word	0x3fcfffff

08005c50 <_strtod_r>:
 8005c50:	4b01      	ldr	r3, [pc, #4]	@ (8005c58 <_strtod_r+0x8>)
 8005c52:	f7ff ba19 	b.w	8005088 <_strtod_l>
 8005c56:	bf00      	nop
 8005c58:	20000074 	.word	0x20000074

08005c5c <_strtol_l.isra.0>:
 8005c5c:	2b24      	cmp	r3, #36	@ 0x24
 8005c5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c62:	4686      	mov	lr, r0
 8005c64:	4690      	mov	r8, r2
 8005c66:	d801      	bhi.n	8005c6c <_strtol_l.isra.0+0x10>
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d106      	bne.n	8005c7a <_strtol_l.isra.0+0x1e>
 8005c6c:	f7fd fdb8 	bl	80037e0 <__errno>
 8005c70:	2316      	movs	r3, #22
 8005c72:	6003      	str	r3, [r0, #0]
 8005c74:	2000      	movs	r0, #0
 8005c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c7a:	4834      	ldr	r0, [pc, #208]	@ (8005d4c <_strtol_l.isra.0+0xf0>)
 8005c7c:	460d      	mov	r5, r1
 8005c7e:	462a      	mov	r2, r5
 8005c80:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c84:	5d06      	ldrb	r6, [r0, r4]
 8005c86:	f016 0608 	ands.w	r6, r6, #8
 8005c8a:	d1f8      	bne.n	8005c7e <_strtol_l.isra.0+0x22>
 8005c8c:	2c2d      	cmp	r4, #45	@ 0x2d
 8005c8e:	d110      	bne.n	8005cb2 <_strtol_l.isra.0+0x56>
 8005c90:	782c      	ldrb	r4, [r5, #0]
 8005c92:	2601      	movs	r6, #1
 8005c94:	1c95      	adds	r5, r2, #2
 8005c96:	f033 0210 	bics.w	r2, r3, #16
 8005c9a:	d115      	bne.n	8005cc8 <_strtol_l.isra.0+0x6c>
 8005c9c:	2c30      	cmp	r4, #48	@ 0x30
 8005c9e:	d10d      	bne.n	8005cbc <_strtol_l.isra.0+0x60>
 8005ca0:	782a      	ldrb	r2, [r5, #0]
 8005ca2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005ca6:	2a58      	cmp	r2, #88	@ 0x58
 8005ca8:	d108      	bne.n	8005cbc <_strtol_l.isra.0+0x60>
 8005caa:	786c      	ldrb	r4, [r5, #1]
 8005cac:	3502      	adds	r5, #2
 8005cae:	2310      	movs	r3, #16
 8005cb0:	e00a      	b.n	8005cc8 <_strtol_l.isra.0+0x6c>
 8005cb2:	2c2b      	cmp	r4, #43	@ 0x2b
 8005cb4:	bf04      	itt	eq
 8005cb6:	782c      	ldrbeq	r4, [r5, #0]
 8005cb8:	1c95      	addeq	r5, r2, #2
 8005cba:	e7ec      	b.n	8005c96 <_strtol_l.isra.0+0x3a>
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1f6      	bne.n	8005cae <_strtol_l.isra.0+0x52>
 8005cc0:	2c30      	cmp	r4, #48	@ 0x30
 8005cc2:	bf14      	ite	ne
 8005cc4:	230a      	movne	r3, #10
 8005cc6:	2308      	moveq	r3, #8
 8005cc8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005ccc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	fbbc f9f3 	udiv	r9, ip, r3
 8005cd6:	4610      	mov	r0, r2
 8005cd8:	fb03 ca19 	mls	sl, r3, r9, ip
 8005cdc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005ce0:	2f09      	cmp	r7, #9
 8005ce2:	d80f      	bhi.n	8005d04 <_strtol_l.isra.0+0xa8>
 8005ce4:	463c      	mov	r4, r7
 8005ce6:	42a3      	cmp	r3, r4
 8005ce8:	dd1b      	ble.n	8005d22 <_strtol_l.isra.0+0xc6>
 8005cea:	1c57      	adds	r7, r2, #1
 8005cec:	d007      	beq.n	8005cfe <_strtol_l.isra.0+0xa2>
 8005cee:	4581      	cmp	r9, r0
 8005cf0:	d314      	bcc.n	8005d1c <_strtol_l.isra.0+0xc0>
 8005cf2:	d101      	bne.n	8005cf8 <_strtol_l.isra.0+0x9c>
 8005cf4:	45a2      	cmp	sl, r4
 8005cf6:	db11      	blt.n	8005d1c <_strtol_l.isra.0+0xc0>
 8005cf8:	fb00 4003 	mla	r0, r0, r3, r4
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d02:	e7eb      	b.n	8005cdc <_strtol_l.isra.0+0x80>
 8005d04:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005d08:	2f19      	cmp	r7, #25
 8005d0a:	d801      	bhi.n	8005d10 <_strtol_l.isra.0+0xb4>
 8005d0c:	3c37      	subs	r4, #55	@ 0x37
 8005d0e:	e7ea      	b.n	8005ce6 <_strtol_l.isra.0+0x8a>
 8005d10:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005d14:	2f19      	cmp	r7, #25
 8005d16:	d804      	bhi.n	8005d22 <_strtol_l.isra.0+0xc6>
 8005d18:	3c57      	subs	r4, #87	@ 0x57
 8005d1a:	e7e4      	b.n	8005ce6 <_strtol_l.isra.0+0x8a>
 8005d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d20:	e7ed      	b.n	8005cfe <_strtol_l.isra.0+0xa2>
 8005d22:	1c53      	adds	r3, r2, #1
 8005d24:	d108      	bne.n	8005d38 <_strtol_l.isra.0+0xdc>
 8005d26:	2322      	movs	r3, #34	@ 0x22
 8005d28:	f8ce 3000 	str.w	r3, [lr]
 8005d2c:	4660      	mov	r0, ip
 8005d2e:	f1b8 0f00 	cmp.w	r8, #0
 8005d32:	d0a0      	beq.n	8005c76 <_strtol_l.isra.0+0x1a>
 8005d34:	1e69      	subs	r1, r5, #1
 8005d36:	e006      	b.n	8005d46 <_strtol_l.isra.0+0xea>
 8005d38:	b106      	cbz	r6, 8005d3c <_strtol_l.isra.0+0xe0>
 8005d3a:	4240      	negs	r0, r0
 8005d3c:	f1b8 0f00 	cmp.w	r8, #0
 8005d40:	d099      	beq.n	8005c76 <_strtol_l.isra.0+0x1a>
 8005d42:	2a00      	cmp	r2, #0
 8005d44:	d1f6      	bne.n	8005d34 <_strtol_l.isra.0+0xd8>
 8005d46:	f8c8 1000 	str.w	r1, [r8]
 8005d4a:	e794      	b.n	8005c76 <_strtol_l.isra.0+0x1a>
 8005d4c:	08007231 	.word	0x08007231

08005d50 <_strtol_r>:
 8005d50:	f7ff bf84 	b.w	8005c5c <_strtol_l.isra.0>

08005d54 <__ssputs_r>:
 8005d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d58:	688e      	ldr	r6, [r1, #8]
 8005d5a:	461f      	mov	r7, r3
 8005d5c:	42be      	cmp	r6, r7
 8005d5e:	680b      	ldr	r3, [r1, #0]
 8005d60:	4682      	mov	sl, r0
 8005d62:	460c      	mov	r4, r1
 8005d64:	4690      	mov	r8, r2
 8005d66:	d82d      	bhi.n	8005dc4 <__ssputs_r+0x70>
 8005d68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005d70:	d026      	beq.n	8005dc0 <__ssputs_r+0x6c>
 8005d72:	6965      	ldr	r5, [r4, #20]
 8005d74:	6909      	ldr	r1, [r1, #16]
 8005d76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d7a:	eba3 0901 	sub.w	r9, r3, r1
 8005d7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d82:	1c7b      	adds	r3, r7, #1
 8005d84:	444b      	add	r3, r9
 8005d86:	106d      	asrs	r5, r5, #1
 8005d88:	429d      	cmp	r5, r3
 8005d8a:	bf38      	it	cc
 8005d8c:	461d      	movcc	r5, r3
 8005d8e:	0553      	lsls	r3, r2, #21
 8005d90:	d527      	bpl.n	8005de2 <__ssputs_r+0x8e>
 8005d92:	4629      	mov	r1, r5
 8005d94:	f7fe fc24 	bl	80045e0 <_malloc_r>
 8005d98:	4606      	mov	r6, r0
 8005d9a:	b360      	cbz	r0, 8005df6 <__ssputs_r+0xa2>
 8005d9c:	6921      	ldr	r1, [r4, #16]
 8005d9e:	464a      	mov	r2, r9
 8005da0:	f000 fa18 	bl	80061d4 <memcpy>
 8005da4:	89a3      	ldrh	r3, [r4, #12]
 8005da6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005daa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dae:	81a3      	strh	r3, [r4, #12]
 8005db0:	6126      	str	r6, [r4, #16]
 8005db2:	6165      	str	r5, [r4, #20]
 8005db4:	444e      	add	r6, r9
 8005db6:	eba5 0509 	sub.w	r5, r5, r9
 8005dba:	6026      	str	r6, [r4, #0]
 8005dbc:	60a5      	str	r5, [r4, #8]
 8005dbe:	463e      	mov	r6, r7
 8005dc0:	42be      	cmp	r6, r7
 8005dc2:	d900      	bls.n	8005dc6 <__ssputs_r+0x72>
 8005dc4:	463e      	mov	r6, r7
 8005dc6:	6820      	ldr	r0, [r4, #0]
 8005dc8:	4632      	mov	r2, r6
 8005dca:	4641      	mov	r1, r8
 8005dcc:	f000 f9c6 	bl	800615c <memmove>
 8005dd0:	68a3      	ldr	r3, [r4, #8]
 8005dd2:	1b9b      	subs	r3, r3, r6
 8005dd4:	60a3      	str	r3, [r4, #8]
 8005dd6:	6823      	ldr	r3, [r4, #0]
 8005dd8:	4433      	add	r3, r6
 8005dda:	6023      	str	r3, [r4, #0]
 8005ddc:	2000      	movs	r0, #0
 8005dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005de2:	462a      	mov	r2, r5
 8005de4:	f000 fd89 	bl	80068fa <_realloc_r>
 8005de8:	4606      	mov	r6, r0
 8005dea:	2800      	cmp	r0, #0
 8005dec:	d1e0      	bne.n	8005db0 <__ssputs_r+0x5c>
 8005dee:	6921      	ldr	r1, [r4, #16]
 8005df0:	4650      	mov	r0, sl
 8005df2:	f7fe fb81 	bl	80044f8 <_free_r>
 8005df6:	230c      	movs	r3, #12
 8005df8:	f8ca 3000 	str.w	r3, [sl]
 8005dfc:	89a3      	ldrh	r3, [r4, #12]
 8005dfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e02:	81a3      	strh	r3, [r4, #12]
 8005e04:	f04f 30ff 	mov.w	r0, #4294967295
 8005e08:	e7e9      	b.n	8005dde <__ssputs_r+0x8a>
	...

08005e0c <_svfiprintf_r>:
 8005e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e10:	4698      	mov	r8, r3
 8005e12:	898b      	ldrh	r3, [r1, #12]
 8005e14:	061b      	lsls	r3, r3, #24
 8005e16:	b09d      	sub	sp, #116	@ 0x74
 8005e18:	4607      	mov	r7, r0
 8005e1a:	460d      	mov	r5, r1
 8005e1c:	4614      	mov	r4, r2
 8005e1e:	d510      	bpl.n	8005e42 <_svfiprintf_r+0x36>
 8005e20:	690b      	ldr	r3, [r1, #16]
 8005e22:	b973      	cbnz	r3, 8005e42 <_svfiprintf_r+0x36>
 8005e24:	2140      	movs	r1, #64	@ 0x40
 8005e26:	f7fe fbdb 	bl	80045e0 <_malloc_r>
 8005e2a:	6028      	str	r0, [r5, #0]
 8005e2c:	6128      	str	r0, [r5, #16]
 8005e2e:	b930      	cbnz	r0, 8005e3e <_svfiprintf_r+0x32>
 8005e30:	230c      	movs	r3, #12
 8005e32:	603b      	str	r3, [r7, #0]
 8005e34:	f04f 30ff 	mov.w	r0, #4294967295
 8005e38:	b01d      	add	sp, #116	@ 0x74
 8005e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e3e:	2340      	movs	r3, #64	@ 0x40
 8005e40:	616b      	str	r3, [r5, #20]
 8005e42:	2300      	movs	r3, #0
 8005e44:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e46:	2320      	movs	r3, #32
 8005e48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e50:	2330      	movs	r3, #48	@ 0x30
 8005e52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005ff0 <_svfiprintf_r+0x1e4>
 8005e56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e5a:	f04f 0901 	mov.w	r9, #1
 8005e5e:	4623      	mov	r3, r4
 8005e60:	469a      	mov	sl, r3
 8005e62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e66:	b10a      	cbz	r2, 8005e6c <_svfiprintf_r+0x60>
 8005e68:	2a25      	cmp	r2, #37	@ 0x25
 8005e6a:	d1f9      	bne.n	8005e60 <_svfiprintf_r+0x54>
 8005e6c:	ebba 0b04 	subs.w	fp, sl, r4
 8005e70:	d00b      	beq.n	8005e8a <_svfiprintf_r+0x7e>
 8005e72:	465b      	mov	r3, fp
 8005e74:	4622      	mov	r2, r4
 8005e76:	4629      	mov	r1, r5
 8005e78:	4638      	mov	r0, r7
 8005e7a:	f7ff ff6b 	bl	8005d54 <__ssputs_r>
 8005e7e:	3001      	adds	r0, #1
 8005e80:	f000 80a7 	beq.w	8005fd2 <_svfiprintf_r+0x1c6>
 8005e84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e86:	445a      	add	r2, fp
 8005e88:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e8a:	f89a 3000 	ldrb.w	r3, [sl]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	f000 809f 	beq.w	8005fd2 <_svfiprintf_r+0x1c6>
 8005e94:	2300      	movs	r3, #0
 8005e96:	f04f 32ff 	mov.w	r2, #4294967295
 8005e9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e9e:	f10a 0a01 	add.w	sl, sl, #1
 8005ea2:	9304      	str	r3, [sp, #16]
 8005ea4:	9307      	str	r3, [sp, #28]
 8005ea6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005eaa:	931a      	str	r3, [sp, #104]	@ 0x68
 8005eac:	4654      	mov	r4, sl
 8005eae:	2205      	movs	r2, #5
 8005eb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eb4:	484e      	ldr	r0, [pc, #312]	@ (8005ff0 <_svfiprintf_r+0x1e4>)
 8005eb6:	f7fa f98b 	bl	80001d0 <memchr>
 8005eba:	9a04      	ldr	r2, [sp, #16]
 8005ebc:	b9d8      	cbnz	r0, 8005ef6 <_svfiprintf_r+0xea>
 8005ebe:	06d0      	lsls	r0, r2, #27
 8005ec0:	bf44      	itt	mi
 8005ec2:	2320      	movmi	r3, #32
 8005ec4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ec8:	0711      	lsls	r1, r2, #28
 8005eca:	bf44      	itt	mi
 8005ecc:	232b      	movmi	r3, #43	@ 0x2b
 8005ece:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ed2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ed6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ed8:	d015      	beq.n	8005f06 <_svfiprintf_r+0xfa>
 8005eda:	9a07      	ldr	r2, [sp, #28]
 8005edc:	4654      	mov	r4, sl
 8005ede:	2000      	movs	r0, #0
 8005ee0:	f04f 0c0a 	mov.w	ip, #10
 8005ee4:	4621      	mov	r1, r4
 8005ee6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005eea:	3b30      	subs	r3, #48	@ 0x30
 8005eec:	2b09      	cmp	r3, #9
 8005eee:	d94b      	bls.n	8005f88 <_svfiprintf_r+0x17c>
 8005ef0:	b1b0      	cbz	r0, 8005f20 <_svfiprintf_r+0x114>
 8005ef2:	9207      	str	r2, [sp, #28]
 8005ef4:	e014      	b.n	8005f20 <_svfiprintf_r+0x114>
 8005ef6:	eba0 0308 	sub.w	r3, r0, r8
 8005efa:	fa09 f303 	lsl.w	r3, r9, r3
 8005efe:	4313      	orrs	r3, r2
 8005f00:	9304      	str	r3, [sp, #16]
 8005f02:	46a2      	mov	sl, r4
 8005f04:	e7d2      	b.n	8005eac <_svfiprintf_r+0xa0>
 8005f06:	9b03      	ldr	r3, [sp, #12]
 8005f08:	1d19      	adds	r1, r3, #4
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	9103      	str	r1, [sp, #12]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	bfbb      	ittet	lt
 8005f12:	425b      	neglt	r3, r3
 8005f14:	f042 0202 	orrlt.w	r2, r2, #2
 8005f18:	9307      	strge	r3, [sp, #28]
 8005f1a:	9307      	strlt	r3, [sp, #28]
 8005f1c:	bfb8      	it	lt
 8005f1e:	9204      	strlt	r2, [sp, #16]
 8005f20:	7823      	ldrb	r3, [r4, #0]
 8005f22:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f24:	d10a      	bne.n	8005f3c <_svfiprintf_r+0x130>
 8005f26:	7863      	ldrb	r3, [r4, #1]
 8005f28:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f2a:	d132      	bne.n	8005f92 <_svfiprintf_r+0x186>
 8005f2c:	9b03      	ldr	r3, [sp, #12]
 8005f2e:	1d1a      	adds	r2, r3, #4
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	9203      	str	r2, [sp, #12]
 8005f34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f38:	3402      	adds	r4, #2
 8005f3a:	9305      	str	r3, [sp, #20]
 8005f3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006000 <_svfiprintf_r+0x1f4>
 8005f40:	7821      	ldrb	r1, [r4, #0]
 8005f42:	2203      	movs	r2, #3
 8005f44:	4650      	mov	r0, sl
 8005f46:	f7fa f943 	bl	80001d0 <memchr>
 8005f4a:	b138      	cbz	r0, 8005f5c <_svfiprintf_r+0x150>
 8005f4c:	9b04      	ldr	r3, [sp, #16]
 8005f4e:	eba0 000a 	sub.w	r0, r0, sl
 8005f52:	2240      	movs	r2, #64	@ 0x40
 8005f54:	4082      	lsls	r2, r0
 8005f56:	4313      	orrs	r3, r2
 8005f58:	3401      	adds	r4, #1
 8005f5a:	9304      	str	r3, [sp, #16]
 8005f5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f60:	4824      	ldr	r0, [pc, #144]	@ (8005ff4 <_svfiprintf_r+0x1e8>)
 8005f62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f66:	2206      	movs	r2, #6
 8005f68:	f7fa f932 	bl	80001d0 <memchr>
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	d036      	beq.n	8005fde <_svfiprintf_r+0x1d2>
 8005f70:	4b21      	ldr	r3, [pc, #132]	@ (8005ff8 <_svfiprintf_r+0x1ec>)
 8005f72:	bb1b      	cbnz	r3, 8005fbc <_svfiprintf_r+0x1b0>
 8005f74:	9b03      	ldr	r3, [sp, #12]
 8005f76:	3307      	adds	r3, #7
 8005f78:	f023 0307 	bic.w	r3, r3, #7
 8005f7c:	3308      	adds	r3, #8
 8005f7e:	9303      	str	r3, [sp, #12]
 8005f80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f82:	4433      	add	r3, r6
 8005f84:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f86:	e76a      	b.n	8005e5e <_svfiprintf_r+0x52>
 8005f88:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f8c:	460c      	mov	r4, r1
 8005f8e:	2001      	movs	r0, #1
 8005f90:	e7a8      	b.n	8005ee4 <_svfiprintf_r+0xd8>
 8005f92:	2300      	movs	r3, #0
 8005f94:	3401      	adds	r4, #1
 8005f96:	9305      	str	r3, [sp, #20]
 8005f98:	4619      	mov	r1, r3
 8005f9a:	f04f 0c0a 	mov.w	ip, #10
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fa4:	3a30      	subs	r2, #48	@ 0x30
 8005fa6:	2a09      	cmp	r2, #9
 8005fa8:	d903      	bls.n	8005fb2 <_svfiprintf_r+0x1a6>
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d0c6      	beq.n	8005f3c <_svfiprintf_r+0x130>
 8005fae:	9105      	str	r1, [sp, #20]
 8005fb0:	e7c4      	b.n	8005f3c <_svfiprintf_r+0x130>
 8005fb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fb6:	4604      	mov	r4, r0
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e7f0      	b.n	8005f9e <_svfiprintf_r+0x192>
 8005fbc:	ab03      	add	r3, sp, #12
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	462a      	mov	r2, r5
 8005fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8005ffc <_svfiprintf_r+0x1f0>)
 8005fc4:	a904      	add	r1, sp, #16
 8005fc6:	4638      	mov	r0, r7
 8005fc8:	f7fc fccc 	bl	8002964 <_printf_float>
 8005fcc:	1c42      	adds	r2, r0, #1
 8005fce:	4606      	mov	r6, r0
 8005fd0:	d1d6      	bne.n	8005f80 <_svfiprintf_r+0x174>
 8005fd2:	89ab      	ldrh	r3, [r5, #12]
 8005fd4:	065b      	lsls	r3, r3, #25
 8005fd6:	f53f af2d 	bmi.w	8005e34 <_svfiprintf_r+0x28>
 8005fda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005fdc:	e72c      	b.n	8005e38 <_svfiprintf_r+0x2c>
 8005fde:	ab03      	add	r3, sp, #12
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	462a      	mov	r2, r5
 8005fe4:	4b05      	ldr	r3, [pc, #20]	@ (8005ffc <_svfiprintf_r+0x1f0>)
 8005fe6:	a904      	add	r1, sp, #16
 8005fe8:	4638      	mov	r0, r7
 8005fea:	f7fc ff53 	bl	8002e94 <_printf_i>
 8005fee:	e7ed      	b.n	8005fcc <_svfiprintf_r+0x1c0>
 8005ff0:	08007029 	.word	0x08007029
 8005ff4:	08007033 	.word	0x08007033
 8005ff8:	08002965 	.word	0x08002965
 8005ffc:	08005d55 	.word	0x08005d55
 8006000:	0800702f 	.word	0x0800702f

08006004 <__sflush_r>:
 8006004:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800600c:	0716      	lsls	r6, r2, #28
 800600e:	4605      	mov	r5, r0
 8006010:	460c      	mov	r4, r1
 8006012:	d454      	bmi.n	80060be <__sflush_r+0xba>
 8006014:	684b      	ldr	r3, [r1, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	dc02      	bgt.n	8006020 <__sflush_r+0x1c>
 800601a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800601c:	2b00      	cmp	r3, #0
 800601e:	dd48      	ble.n	80060b2 <__sflush_r+0xae>
 8006020:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006022:	2e00      	cmp	r6, #0
 8006024:	d045      	beq.n	80060b2 <__sflush_r+0xae>
 8006026:	2300      	movs	r3, #0
 8006028:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800602c:	682f      	ldr	r7, [r5, #0]
 800602e:	6a21      	ldr	r1, [r4, #32]
 8006030:	602b      	str	r3, [r5, #0]
 8006032:	d030      	beq.n	8006096 <__sflush_r+0x92>
 8006034:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006036:	89a3      	ldrh	r3, [r4, #12]
 8006038:	0759      	lsls	r1, r3, #29
 800603a:	d505      	bpl.n	8006048 <__sflush_r+0x44>
 800603c:	6863      	ldr	r3, [r4, #4]
 800603e:	1ad2      	subs	r2, r2, r3
 8006040:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006042:	b10b      	cbz	r3, 8006048 <__sflush_r+0x44>
 8006044:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006046:	1ad2      	subs	r2, r2, r3
 8006048:	2300      	movs	r3, #0
 800604a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800604c:	6a21      	ldr	r1, [r4, #32]
 800604e:	4628      	mov	r0, r5
 8006050:	47b0      	blx	r6
 8006052:	1c43      	adds	r3, r0, #1
 8006054:	89a3      	ldrh	r3, [r4, #12]
 8006056:	d106      	bne.n	8006066 <__sflush_r+0x62>
 8006058:	6829      	ldr	r1, [r5, #0]
 800605a:	291d      	cmp	r1, #29
 800605c:	d82b      	bhi.n	80060b6 <__sflush_r+0xb2>
 800605e:	4a2a      	ldr	r2, [pc, #168]	@ (8006108 <__sflush_r+0x104>)
 8006060:	40ca      	lsrs	r2, r1
 8006062:	07d6      	lsls	r6, r2, #31
 8006064:	d527      	bpl.n	80060b6 <__sflush_r+0xb2>
 8006066:	2200      	movs	r2, #0
 8006068:	6062      	str	r2, [r4, #4]
 800606a:	04d9      	lsls	r1, r3, #19
 800606c:	6922      	ldr	r2, [r4, #16]
 800606e:	6022      	str	r2, [r4, #0]
 8006070:	d504      	bpl.n	800607c <__sflush_r+0x78>
 8006072:	1c42      	adds	r2, r0, #1
 8006074:	d101      	bne.n	800607a <__sflush_r+0x76>
 8006076:	682b      	ldr	r3, [r5, #0]
 8006078:	b903      	cbnz	r3, 800607c <__sflush_r+0x78>
 800607a:	6560      	str	r0, [r4, #84]	@ 0x54
 800607c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800607e:	602f      	str	r7, [r5, #0]
 8006080:	b1b9      	cbz	r1, 80060b2 <__sflush_r+0xae>
 8006082:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006086:	4299      	cmp	r1, r3
 8006088:	d002      	beq.n	8006090 <__sflush_r+0x8c>
 800608a:	4628      	mov	r0, r5
 800608c:	f7fe fa34 	bl	80044f8 <_free_r>
 8006090:	2300      	movs	r3, #0
 8006092:	6363      	str	r3, [r4, #52]	@ 0x34
 8006094:	e00d      	b.n	80060b2 <__sflush_r+0xae>
 8006096:	2301      	movs	r3, #1
 8006098:	4628      	mov	r0, r5
 800609a:	47b0      	blx	r6
 800609c:	4602      	mov	r2, r0
 800609e:	1c50      	adds	r0, r2, #1
 80060a0:	d1c9      	bne.n	8006036 <__sflush_r+0x32>
 80060a2:	682b      	ldr	r3, [r5, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d0c6      	beq.n	8006036 <__sflush_r+0x32>
 80060a8:	2b1d      	cmp	r3, #29
 80060aa:	d001      	beq.n	80060b0 <__sflush_r+0xac>
 80060ac:	2b16      	cmp	r3, #22
 80060ae:	d11e      	bne.n	80060ee <__sflush_r+0xea>
 80060b0:	602f      	str	r7, [r5, #0]
 80060b2:	2000      	movs	r0, #0
 80060b4:	e022      	b.n	80060fc <__sflush_r+0xf8>
 80060b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060ba:	b21b      	sxth	r3, r3
 80060bc:	e01b      	b.n	80060f6 <__sflush_r+0xf2>
 80060be:	690f      	ldr	r7, [r1, #16]
 80060c0:	2f00      	cmp	r7, #0
 80060c2:	d0f6      	beq.n	80060b2 <__sflush_r+0xae>
 80060c4:	0793      	lsls	r3, r2, #30
 80060c6:	680e      	ldr	r6, [r1, #0]
 80060c8:	bf08      	it	eq
 80060ca:	694b      	ldreq	r3, [r1, #20]
 80060cc:	600f      	str	r7, [r1, #0]
 80060ce:	bf18      	it	ne
 80060d0:	2300      	movne	r3, #0
 80060d2:	eba6 0807 	sub.w	r8, r6, r7
 80060d6:	608b      	str	r3, [r1, #8]
 80060d8:	f1b8 0f00 	cmp.w	r8, #0
 80060dc:	dde9      	ble.n	80060b2 <__sflush_r+0xae>
 80060de:	6a21      	ldr	r1, [r4, #32]
 80060e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80060e2:	4643      	mov	r3, r8
 80060e4:	463a      	mov	r2, r7
 80060e6:	4628      	mov	r0, r5
 80060e8:	47b0      	blx	r6
 80060ea:	2800      	cmp	r0, #0
 80060ec:	dc08      	bgt.n	8006100 <__sflush_r+0xfc>
 80060ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060f6:	81a3      	strh	r3, [r4, #12]
 80060f8:	f04f 30ff 	mov.w	r0, #4294967295
 80060fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006100:	4407      	add	r7, r0
 8006102:	eba8 0800 	sub.w	r8, r8, r0
 8006106:	e7e7      	b.n	80060d8 <__sflush_r+0xd4>
 8006108:	20400001 	.word	0x20400001

0800610c <_fflush_r>:
 800610c:	b538      	push	{r3, r4, r5, lr}
 800610e:	690b      	ldr	r3, [r1, #16]
 8006110:	4605      	mov	r5, r0
 8006112:	460c      	mov	r4, r1
 8006114:	b913      	cbnz	r3, 800611c <_fflush_r+0x10>
 8006116:	2500      	movs	r5, #0
 8006118:	4628      	mov	r0, r5
 800611a:	bd38      	pop	{r3, r4, r5, pc}
 800611c:	b118      	cbz	r0, 8006126 <_fflush_r+0x1a>
 800611e:	6a03      	ldr	r3, [r0, #32]
 8006120:	b90b      	cbnz	r3, 8006126 <_fflush_r+0x1a>
 8006122:	f7fd fa6f 	bl	8003604 <__sinit>
 8006126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d0f3      	beq.n	8006116 <_fflush_r+0xa>
 800612e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006130:	07d0      	lsls	r0, r2, #31
 8006132:	d404      	bmi.n	800613e <_fflush_r+0x32>
 8006134:	0599      	lsls	r1, r3, #22
 8006136:	d402      	bmi.n	800613e <_fflush_r+0x32>
 8006138:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800613a:	f7fd fb7c 	bl	8003836 <__retarget_lock_acquire_recursive>
 800613e:	4628      	mov	r0, r5
 8006140:	4621      	mov	r1, r4
 8006142:	f7ff ff5f 	bl	8006004 <__sflush_r>
 8006146:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006148:	07da      	lsls	r2, r3, #31
 800614a:	4605      	mov	r5, r0
 800614c:	d4e4      	bmi.n	8006118 <_fflush_r+0xc>
 800614e:	89a3      	ldrh	r3, [r4, #12]
 8006150:	059b      	lsls	r3, r3, #22
 8006152:	d4e1      	bmi.n	8006118 <_fflush_r+0xc>
 8006154:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006156:	f7fd fb6f 	bl	8003838 <__retarget_lock_release_recursive>
 800615a:	e7dd      	b.n	8006118 <_fflush_r+0xc>

0800615c <memmove>:
 800615c:	4288      	cmp	r0, r1
 800615e:	b510      	push	{r4, lr}
 8006160:	eb01 0402 	add.w	r4, r1, r2
 8006164:	d902      	bls.n	800616c <memmove+0x10>
 8006166:	4284      	cmp	r4, r0
 8006168:	4623      	mov	r3, r4
 800616a:	d807      	bhi.n	800617c <memmove+0x20>
 800616c:	1e43      	subs	r3, r0, #1
 800616e:	42a1      	cmp	r1, r4
 8006170:	d008      	beq.n	8006184 <memmove+0x28>
 8006172:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006176:	f803 2f01 	strb.w	r2, [r3, #1]!
 800617a:	e7f8      	b.n	800616e <memmove+0x12>
 800617c:	4402      	add	r2, r0
 800617e:	4601      	mov	r1, r0
 8006180:	428a      	cmp	r2, r1
 8006182:	d100      	bne.n	8006186 <memmove+0x2a>
 8006184:	bd10      	pop	{r4, pc}
 8006186:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800618a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800618e:	e7f7      	b.n	8006180 <memmove+0x24>

08006190 <strncmp>:
 8006190:	b510      	push	{r4, lr}
 8006192:	b16a      	cbz	r2, 80061b0 <strncmp+0x20>
 8006194:	3901      	subs	r1, #1
 8006196:	1884      	adds	r4, r0, r2
 8006198:	f810 2b01 	ldrb.w	r2, [r0], #1
 800619c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d103      	bne.n	80061ac <strncmp+0x1c>
 80061a4:	42a0      	cmp	r0, r4
 80061a6:	d001      	beq.n	80061ac <strncmp+0x1c>
 80061a8:	2a00      	cmp	r2, #0
 80061aa:	d1f5      	bne.n	8006198 <strncmp+0x8>
 80061ac:	1ad0      	subs	r0, r2, r3
 80061ae:	bd10      	pop	{r4, pc}
 80061b0:	4610      	mov	r0, r2
 80061b2:	e7fc      	b.n	80061ae <strncmp+0x1e>

080061b4 <_sbrk_r>:
 80061b4:	b538      	push	{r3, r4, r5, lr}
 80061b6:	4d06      	ldr	r5, [pc, #24]	@ (80061d0 <_sbrk_r+0x1c>)
 80061b8:	2300      	movs	r3, #0
 80061ba:	4604      	mov	r4, r0
 80061bc:	4608      	mov	r0, r1
 80061be:	602b      	str	r3, [r5, #0]
 80061c0:	f7fc fad2 	bl	8002768 <_sbrk>
 80061c4:	1c43      	adds	r3, r0, #1
 80061c6:	d102      	bne.n	80061ce <_sbrk_r+0x1a>
 80061c8:	682b      	ldr	r3, [r5, #0]
 80061ca:	b103      	cbz	r3, 80061ce <_sbrk_r+0x1a>
 80061cc:	6023      	str	r3, [r4, #0]
 80061ce:	bd38      	pop	{r3, r4, r5, pc}
 80061d0:	20000370 	.word	0x20000370

080061d4 <memcpy>:
 80061d4:	440a      	add	r2, r1
 80061d6:	4291      	cmp	r1, r2
 80061d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80061dc:	d100      	bne.n	80061e0 <memcpy+0xc>
 80061de:	4770      	bx	lr
 80061e0:	b510      	push	{r4, lr}
 80061e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061ea:	4291      	cmp	r1, r2
 80061ec:	d1f9      	bne.n	80061e2 <memcpy+0xe>
 80061ee:	bd10      	pop	{r4, pc}

080061f0 <nan>:
 80061f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80061f8 <nan+0x8>
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	00000000 	.word	0x00000000
 80061fc:	7ff80000 	.word	0x7ff80000

08006200 <__assert_func>:
 8006200:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006202:	4614      	mov	r4, r2
 8006204:	461a      	mov	r2, r3
 8006206:	4b09      	ldr	r3, [pc, #36]	@ (800622c <__assert_func+0x2c>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4605      	mov	r5, r0
 800620c:	68d8      	ldr	r0, [r3, #12]
 800620e:	b14c      	cbz	r4, 8006224 <__assert_func+0x24>
 8006210:	4b07      	ldr	r3, [pc, #28]	@ (8006230 <__assert_func+0x30>)
 8006212:	9100      	str	r1, [sp, #0]
 8006214:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006218:	4906      	ldr	r1, [pc, #24]	@ (8006234 <__assert_func+0x34>)
 800621a:	462b      	mov	r3, r5
 800621c:	f000 fba8 	bl	8006970 <fiprintf>
 8006220:	f000 fbb8 	bl	8006994 <abort>
 8006224:	4b04      	ldr	r3, [pc, #16]	@ (8006238 <__assert_func+0x38>)
 8006226:	461c      	mov	r4, r3
 8006228:	e7f3      	b.n	8006212 <__assert_func+0x12>
 800622a:	bf00      	nop
 800622c:	20000024 	.word	0x20000024
 8006230:	08007042 	.word	0x08007042
 8006234:	0800704f 	.word	0x0800704f
 8006238:	0800707d 	.word	0x0800707d

0800623c <_calloc_r>:
 800623c:	b570      	push	{r4, r5, r6, lr}
 800623e:	fba1 5402 	umull	r5, r4, r1, r2
 8006242:	b934      	cbnz	r4, 8006252 <_calloc_r+0x16>
 8006244:	4629      	mov	r1, r5
 8006246:	f7fe f9cb 	bl	80045e0 <_malloc_r>
 800624a:	4606      	mov	r6, r0
 800624c:	b928      	cbnz	r0, 800625a <_calloc_r+0x1e>
 800624e:	4630      	mov	r0, r6
 8006250:	bd70      	pop	{r4, r5, r6, pc}
 8006252:	220c      	movs	r2, #12
 8006254:	6002      	str	r2, [r0, #0]
 8006256:	2600      	movs	r6, #0
 8006258:	e7f9      	b.n	800624e <_calloc_r+0x12>
 800625a:	462a      	mov	r2, r5
 800625c:	4621      	mov	r1, r4
 800625e:	f7fd fa6c 	bl	800373a <memset>
 8006262:	e7f4      	b.n	800624e <_calloc_r+0x12>

08006264 <rshift>:
 8006264:	6903      	ldr	r3, [r0, #16]
 8006266:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800626a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800626e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006272:	f100 0414 	add.w	r4, r0, #20
 8006276:	dd45      	ble.n	8006304 <rshift+0xa0>
 8006278:	f011 011f 	ands.w	r1, r1, #31
 800627c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006280:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006284:	d10c      	bne.n	80062a0 <rshift+0x3c>
 8006286:	f100 0710 	add.w	r7, r0, #16
 800628a:	4629      	mov	r1, r5
 800628c:	42b1      	cmp	r1, r6
 800628e:	d334      	bcc.n	80062fa <rshift+0x96>
 8006290:	1a9b      	subs	r3, r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	1eea      	subs	r2, r5, #3
 8006296:	4296      	cmp	r6, r2
 8006298:	bf38      	it	cc
 800629a:	2300      	movcc	r3, #0
 800629c:	4423      	add	r3, r4
 800629e:	e015      	b.n	80062cc <rshift+0x68>
 80062a0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80062a4:	f1c1 0820 	rsb	r8, r1, #32
 80062a8:	40cf      	lsrs	r7, r1
 80062aa:	f105 0e04 	add.w	lr, r5, #4
 80062ae:	46a1      	mov	r9, r4
 80062b0:	4576      	cmp	r6, lr
 80062b2:	46f4      	mov	ip, lr
 80062b4:	d815      	bhi.n	80062e2 <rshift+0x7e>
 80062b6:	1a9a      	subs	r2, r3, r2
 80062b8:	0092      	lsls	r2, r2, #2
 80062ba:	3a04      	subs	r2, #4
 80062bc:	3501      	adds	r5, #1
 80062be:	42ae      	cmp	r6, r5
 80062c0:	bf38      	it	cc
 80062c2:	2200      	movcc	r2, #0
 80062c4:	18a3      	adds	r3, r4, r2
 80062c6:	50a7      	str	r7, [r4, r2]
 80062c8:	b107      	cbz	r7, 80062cc <rshift+0x68>
 80062ca:	3304      	adds	r3, #4
 80062cc:	1b1a      	subs	r2, r3, r4
 80062ce:	42a3      	cmp	r3, r4
 80062d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80062d4:	bf08      	it	eq
 80062d6:	2300      	moveq	r3, #0
 80062d8:	6102      	str	r2, [r0, #16]
 80062da:	bf08      	it	eq
 80062dc:	6143      	streq	r3, [r0, #20]
 80062de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062e2:	f8dc c000 	ldr.w	ip, [ip]
 80062e6:	fa0c fc08 	lsl.w	ip, ip, r8
 80062ea:	ea4c 0707 	orr.w	r7, ip, r7
 80062ee:	f849 7b04 	str.w	r7, [r9], #4
 80062f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80062f6:	40cf      	lsrs	r7, r1
 80062f8:	e7da      	b.n	80062b0 <rshift+0x4c>
 80062fa:	f851 cb04 	ldr.w	ip, [r1], #4
 80062fe:	f847 cf04 	str.w	ip, [r7, #4]!
 8006302:	e7c3      	b.n	800628c <rshift+0x28>
 8006304:	4623      	mov	r3, r4
 8006306:	e7e1      	b.n	80062cc <rshift+0x68>

08006308 <__hexdig_fun>:
 8006308:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800630c:	2b09      	cmp	r3, #9
 800630e:	d802      	bhi.n	8006316 <__hexdig_fun+0xe>
 8006310:	3820      	subs	r0, #32
 8006312:	b2c0      	uxtb	r0, r0
 8006314:	4770      	bx	lr
 8006316:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800631a:	2b05      	cmp	r3, #5
 800631c:	d801      	bhi.n	8006322 <__hexdig_fun+0x1a>
 800631e:	3847      	subs	r0, #71	@ 0x47
 8006320:	e7f7      	b.n	8006312 <__hexdig_fun+0xa>
 8006322:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8006326:	2b05      	cmp	r3, #5
 8006328:	d801      	bhi.n	800632e <__hexdig_fun+0x26>
 800632a:	3827      	subs	r0, #39	@ 0x27
 800632c:	e7f1      	b.n	8006312 <__hexdig_fun+0xa>
 800632e:	2000      	movs	r0, #0
 8006330:	4770      	bx	lr
	...

08006334 <__gethex>:
 8006334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006338:	b085      	sub	sp, #20
 800633a:	468a      	mov	sl, r1
 800633c:	9302      	str	r3, [sp, #8]
 800633e:	680b      	ldr	r3, [r1, #0]
 8006340:	9001      	str	r0, [sp, #4]
 8006342:	4690      	mov	r8, r2
 8006344:	1c9c      	adds	r4, r3, #2
 8006346:	46a1      	mov	r9, r4
 8006348:	f814 0b01 	ldrb.w	r0, [r4], #1
 800634c:	2830      	cmp	r0, #48	@ 0x30
 800634e:	d0fa      	beq.n	8006346 <__gethex+0x12>
 8006350:	eba9 0303 	sub.w	r3, r9, r3
 8006354:	f1a3 0b02 	sub.w	fp, r3, #2
 8006358:	f7ff ffd6 	bl	8006308 <__hexdig_fun>
 800635c:	4605      	mov	r5, r0
 800635e:	2800      	cmp	r0, #0
 8006360:	d168      	bne.n	8006434 <__gethex+0x100>
 8006362:	49a0      	ldr	r1, [pc, #640]	@ (80065e4 <__gethex+0x2b0>)
 8006364:	2201      	movs	r2, #1
 8006366:	4648      	mov	r0, r9
 8006368:	f7ff ff12 	bl	8006190 <strncmp>
 800636c:	4607      	mov	r7, r0
 800636e:	2800      	cmp	r0, #0
 8006370:	d167      	bne.n	8006442 <__gethex+0x10e>
 8006372:	f899 0001 	ldrb.w	r0, [r9, #1]
 8006376:	4626      	mov	r6, r4
 8006378:	f7ff ffc6 	bl	8006308 <__hexdig_fun>
 800637c:	2800      	cmp	r0, #0
 800637e:	d062      	beq.n	8006446 <__gethex+0x112>
 8006380:	4623      	mov	r3, r4
 8006382:	7818      	ldrb	r0, [r3, #0]
 8006384:	2830      	cmp	r0, #48	@ 0x30
 8006386:	4699      	mov	r9, r3
 8006388:	f103 0301 	add.w	r3, r3, #1
 800638c:	d0f9      	beq.n	8006382 <__gethex+0x4e>
 800638e:	f7ff ffbb 	bl	8006308 <__hexdig_fun>
 8006392:	fab0 f580 	clz	r5, r0
 8006396:	096d      	lsrs	r5, r5, #5
 8006398:	f04f 0b01 	mov.w	fp, #1
 800639c:	464a      	mov	r2, r9
 800639e:	4616      	mov	r6, r2
 80063a0:	3201      	adds	r2, #1
 80063a2:	7830      	ldrb	r0, [r6, #0]
 80063a4:	f7ff ffb0 	bl	8006308 <__hexdig_fun>
 80063a8:	2800      	cmp	r0, #0
 80063aa:	d1f8      	bne.n	800639e <__gethex+0x6a>
 80063ac:	498d      	ldr	r1, [pc, #564]	@ (80065e4 <__gethex+0x2b0>)
 80063ae:	2201      	movs	r2, #1
 80063b0:	4630      	mov	r0, r6
 80063b2:	f7ff feed 	bl	8006190 <strncmp>
 80063b6:	2800      	cmp	r0, #0
 80063b8:	d13f      	bne.n	800643a <__gethex+0x106>
 80063ba:	b944      	cbnz	r4, 80063ce <__gethex+0x9a>
 80063bc:	1c74      	adds	r4, r6, #1
 80063be:	4622      	mov	r2, r4
 80063c0:	4616      	mov	r6, r2
 80063c2:	3201      	adds	r2, #1
 80063c4:	7830      	ldrb	r0, [r6, #0]
 80063c6:	f7ff ff9f 	bl	8006308 <__hexdig_fun>
 80063ca:	2800      	cmp	r0, #0
 80063cc:	d1f8      	bne.n	80063c0 <__gethex+0x8c>
 80063ce:	1ba4      	subs	r4, r4, r6
 80063d0:	00a7      	lsls	r7, r4, #2
 80063d2:	7833      	ldrb	r3, [r6, #0]
 80063d4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80063d8:	2b50      	cmp	r3, #80	@ 0x50
 80063da:	d13e      	bne.n	800645a <__gethex+0x126>
 80063dc:	7873      	ldrb	r3, [r6, #1]
 80063de:	2b2b      	cmp	r3, #43	@ 0x2b
 80063e0:	d033      	beq.n	800644a <__gethex+0x116>
 80063e2:	2b2d      	cmp	r3, #45	@ 0x2d
 80063e4:	d034      	beq.n	8006450 <__gethex+0x11c>
 80063e6:	1c71      	adds	r1, r6, #1
 80063e8:	2400      	movs	r4, #0
 80063ea:	7808      	ldrb	r0, [r1, #0]
 80063ec:	f7ff ff8c 	bl	8006308 <__hexdig_fun>
 80063f0:	1e43      	subs	r3, r0, #1
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b18      	cmp	r3, #24
 80063f6:	d830      	bhi.n	800645a <__gethex+0x126>
 80063f8:	f1a0 0210 	sub.w	r2, r0, #16
 80063fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006400:	f7ff ff82 	bl	8006308 <__hexdig_fun>
 8006404:	f100 3cff 	add.w	ip, r0, #4294967295
 8006408:	fa5f fc8c 	uxtb.w	ip, ip
 800640c:	f1bc 0f18 	cmp.w	ip, #24
 8006410:	f04f 030a 	mov.w	r3, #10
 8006414:	d91e      	bls.n	8006454 <__gethex+0x120>
 8006416:	b104      	cbz	r4, 800641a <__gethex+0xe6>
 8006418:	4252      	negs	r2, r2
 800641a:	4417      	add	r7, r2
 800641c:	f8ca 1000 	str.w	r1, [sl]
 8006420:	b1ed      	cbz	r5, 800645e <__gethex+0x12a>
 8006422:	f1bb 0f00 	cmp.w	fp, #0
 8006426:	bf0c      	ite	eq
 8006428:	2506      	moveq	r5, #6
 800642a:	2500      	movne	r5, #0
 800642c:	4628      	mov	r0, r5
 800642e:	b005      	add	sp, #20
 8006430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006434:	2500      	movs	r5, #0
 8006436:	462c      	mov	r4, r5
 8006438:	e7b0      	b.n	800639c <__gethex+0x68>
 800643a:	2c00      	cmp	r4, #0
 800643c:	d1c7      	bne.n	80063ce <__gethex+0x9a>
 800643e:	4627      	mov	r7, r4
 8006440:	e7c7      	b.n	80063d2 <__gethex+0x9e>
 8006442:	464e      	mov	r6, r9
 8006444:	462f      	mov	r7, r5
 8006446:	2501      	movs	r5, #1
 8006448:	e7c3      	b.n	80063d2 <__gethex+0x9e>
 800644a:	2400      	movs	r4, #0
 800644c:	1cb1      	adds	r1, r6, #2
 800644e:	e7cc      	b.n	80063ea <__gethex+0xb6>
 8006450:	2401      	movs	r4, #1
 8006452:	e7fb      	b.n	800644c <__gethex+0x118>
 8006454:	fb03 0002 	mla	r0, r3, r2, r0
 8006458:	e7ce      	b.n	80063f8 <__gethex+0xc4>
 800645a:	4631      	mov	r1, r6
 800645c:	e7de      	b.n	800641c <__gethex+0xe8>
 800645e:	eba6 0309 	sub.w	r3, r6, r9
 8006462:	3b01      	subs	r3, #1
 8006464:	4629      	mov	r1, r5
 8006466:	2b07      	cmp	r3, #7
 8006468:	dc0a      	bgt.n	8006480 <__gethex+0x14c>
 800646a:	9801      	ldr	r0, [sp, #4]
 800646c:	f7fe f944 	bl	80046f8 <_Balloc>
 8006470:	4604      	mov	r4, r0
 8006472:	b940      	cbnz	r0, 8006486 <__gethex+0x152>
 8006474:	4b5c      	ldr	r3, [pc, #368]	@ (80065e8 <__gethex+0x2b4>)
 8006476:	4602      	mov	r2, r0
 8006478:	21e4      	movs	r1, #228	@ 0xe4
 800647a:	485c      	ldr	r0, [pc, #368]	@ (80065ec <__gethex+0x2b8>)
 800647c:	f7ff fec0 	bl	8006200 <__assert_func>
 8006480:	3101      	adds	r1, #1
 8006482:	105b      	asrs	r3, r3, #1
 8006484:	e7ef      	b.n	8006466 <__gethex+0x132>
 8006486:	f100 0a14 	add.w	sl, r0, #20
 800648a:	2300      	movs	r3, #0
 800648c:	4655      	mov	r5, sl
 800648e:	469b      	mov	fp, r3
 8006490:	45b1      	cmp	r9, r6
 8006492:	d337      	bcc.n	8006504 <__gethex+0x1d0>
 8006494:	f845 bb04 	str.w	fp, [r5], #4
 8006498:	eba5 050a 	sub.w	r5, r5, sl
 800649c:	10ad      	asrs	r5, r5, #2
 800649e:	6125      	str	r5, [r4, #16]
 80064a0:	4658      	mov	r0, fp
 80064a2:	f7fe fa1b 	bl	80048dc <__hi0bits>
 80064a6:	016d      	lsls	r5, r5, #5
 80064a8:	f8d8 6000 	ldr.w	r6, [r8]
 80064ac:	1a2d      	subs	r5, r5, r0
 80064ae:	42b5      	cmp	r5, r6
 80064b0:	dd54      	ble.n	800655c <__gethex+0x228>
 80064b2:	1bad      	subs	r5, r5, r6
 80064b4:	4629      	mov	r1, r5
 80064b6:	4620      	mov	r0, r4
 80064b8:	f7fe fda7 	bl	800500a <__any_on>
 80064bc:	4681      	mov	r9, r0
 80064be:	b178      	cbz	r0, 80064e0 <__gethex+0x1ac>
 80064c0:	1e6b      	subs	r3, r5, #1
 80064c2:	1159      	asrs	r1, r3, #5
 80064c4:	f003 021f 	and.w	r2, r3, #31
 80064c8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80064cc:	f04f 0901 	mov.w	r9, #1
 80064d0:	fa09 f202 	lsl.w	r2, r9, r2
 80064d4:	420a      	tst	r2, r1
 80064d6:	d003      	beq.n	80064e0 <__gethex+0x1ac>
 80064d8:	454b      	cmp	r3, r9
 80064da:	dc36      	bgt.n	800654a <__gethex+0x216>
 80064dc:	f04f 0902 	mov.w	r9, #2
 80064e0:	4629      	mov	r1, r5
 80064e2:	4620      	mov	r0, r4
 80064e4:	f7ff febe 	bl	8006264 <rshift>
 80064e8:	442f      	add	r7, r5
 80064ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80064ee:	42bb      	cmp	r3, r7
 80064f0:	da42      	bge.n	8006578 <__gethex+0x244>
 80064f2:	9801      	ldr	r0, [sp, #4]
 80064f4:	4621      	mov	r1, r4
 80064f6:	f7fe f93f 	bl	8004778 <_Bfree>
 80064fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80064fc:	2300      	movs	r3, #0
 80064fe:	6013      	str	r3, [r2, #0]
 8006500:	25a3      	movs	r5, #163	@ 0xa3
 8006502:	e793      	b.n	800642c <__gethex+0xf8>
 8006504:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8006508:	2a2e      	cmp	r2, #46	@ 0x2e
 800650a:	d012      	beq.n	8006532 <__gethex+0x1fe>
 800650c:	2b20      	cmp	r3, #32
 800650e:	d104      	bne.n	800651a <__gethex+0x1e6>
 8006510:	f845 bb04 	str.w	fp, [r5], #4
 8006514:	f04f 0b00 	mov.w	fp, #0
 8006518:	465b      	mov	r3, fp
 800651a:	7830      	ldrb	r0, [r6, #0]
 800651c:	9303      	str	r3, [sp, #12]
 800651e:	f7ff fef3 	bl	8006308 <__hexdig_fun>
 8006522:	9b03      	ldr	r3, [sp, #12]
 8006524:	f000 000f 	and.w	r0, r0, #15
 8006528:	4098      	lsls	r0, r3
 800652a:	ea4b 0b00 	orr.w	fp, fp, r0
 800652e:	3304      	adds	r3, #4
 8006530:	e7ae      	b.n	8006490 <__gethex+0x15c>
 8006532:	45b1      	cmp	r9, r6
 8006534:	d8ea      	bhi.n	800650c <__gethex+0x1d8>
 8006536:	492b      	ldr	r1, [pc, #172]	@ (80065e4 <__gethex+0x2b0>)
 8006538:	9303      	str	r3, [sp, #12]
 800653a:	2201      	movs	r2, #1
 800653c:	4630      	mov	r0, r6
 800653e:	f7ff fe27 	bl	8006190 <strncmp>
 8006542:	9b03      	ldr	r3, [sp, #12]
 8006544:	2800      	cmp	r0, #0
 8006546:	d1e1      	bne.n	800650c <__gethex+0x1d8>
 8006548:	e7a2      	b.n	8006490 <__gethex+0x15c>
 800654a:	1ea9      	subs	r1, r5, #2
 800654c:	4620      	mov	r0, r4
 800654e:	f7fe fd5c 	bl	800500a <__any_on>
 8006552:	2800      	cmp	r0, #0
 8006554:	d0c2      	beq.n	80064dc <__gethex+0x1a8>
 8006556:	f04f 0903 	mov.w	r9, #3
 800655a:	e7c1      	b.n	80064e0 <__gethex+0x1ac>
 800655c:	da09      	bge.n	8006572 <__gethex+0x23e>
 800655e:	1b75      	subs	r5, r6, r5
 8006560:	4621      	mov	r1, r4
 8006562:	9801      	ldr	r0, [sp, #4]
 8006564:	462a      	mov	r2, r5
 8006566:	f7fe fb17 	bl	8004b98 <__lshift>
 800656a:	1b7f      	subs	r7, r7, r5
 800656c:	4604      	mov	r4, r0
 800656e:	f100 0a14 	add.w	sl, r0, #20
 8006572:	f04f 0900 	mov.w	r9, #0
 8006576:	e7b8      	b.n	80064ea <__gethex+0x1b6>
 8006578:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800657c:	42bd      	cmp	r5, r7
 800657e:	dd6f      	ble.n	8006660 <__gethex+0x32c>
 8006580:	1bed      	subs	r5, r5, r7
 8006582:	42ae      	cmp	r6, r5
 8006584:	dc34      	bgt.n	80065f0 <__gethex+0x2bc>
 8006586:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800658a:	2b02      	cmp	r3, #2
 800658c:	d022      	beq.n	80065d4 <__gethex+0x2a0>
 800658e:	2b03      	cmp	r3, #3
 8006590:	d024      	beq.n	80065dc <__gethex+0x2a8>
 8006592:	2b01      	cmp	r3, #1
 8006594:	d115      	bne.n	80065c2 <__gethex+0x28e>
 8006596:	42ae      	cmp	r6, r5
 8006598:	d113      	bne.n	80065c2 <__gethex+0x28e>
 800659a:	2e01      	cmp	r6, #1
 800659c:	d10b      	bne.n	80065b6 <__gethex+0x282>
 800659e:	9a02      	ldr	r2, [sp, #8]
 80065a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80065a4:	6013      	str	r3, [r2, #0]
 80065a6:	2301      	movs	r3, #1
 80065a8:	6123      	str	r3, [r4, #16]
 80065aa:	f8ca 3000 	str.w	r3, [sl]
 80065ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065b0:	2562      	movs	r5, #98	@ 0x62
 80065b2:	601c      	str	r4, [r3, #0]
 80065b4:	e73a      	b.n	800642c <__gethex+0xf8>
 80065b6:	1e71      	subs	r1, r6, #1
 80065b8:	4620      	mov	r0, r4
 80065ba:	f7fe fd26 	bl	800500a <__any_on>
 80065be:	2800      	cmp	r0, #0
 80065c0:	d1ed      	bne.n	800659e <__gethex+0x26a>
 80065c2:	9801      	ldr	r0, [sp, #4]
 80065c4:	4621      	mov	r1, r4
 80065c6:	f7fe f8d7 	bl	8004778 <_Bfree>
 80065ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80065cc:	2300      	movs	r3, #0
 80065ce:	6013      	str	r3, [r2, #0]
 80065d0:	2550      	movs	r5, #80	@ 0x50
 80065d2:	e72b      	b.n	800642c <__gethex+0xf8>
 80065d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1f3      	bne.n	80065c2 <__gethex+0x28e>
 80065da:	e7e0      	b.n	800659e <__gethex+0x26a>
 80065dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1dd      	bne.n	800659e <__gethex+0x26a>
 80065e2:	e7ee      	b.n	80065c2 <__gethex+0x28e>
 80065e4:	08007027 	.word	0x08007027
 80065e8:	08006fbd 	.word	0x08006fbd
 80065ec:	0800707e 	.word	0x0800707e
 80065f0:	1e6f      	subs	r7, r5, #1
 80065f2:	f1b9 0f00 	cmp.w	r9, #0
 80065f6:	d130      	bne.n	800665a <__gethex+0x326>
 80065f8:	b127      	cbz	r7, 8006604 <__gethex+0x2d0>
 80065fa:	4639      	mov	r1, r7
 80065fc:	4620      	mov	r0, r4
 80065fe:	f7fe fd04 	bl	800500a <__any_on>
 8006602:	4681      	mov	r9, r0
 8006604:	117a      	asrs	r2, r7, #5
 8006606:	2301      	movs	r3, #1
 8006608:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800660c:	f007 071f 	and.w	r7, r7, #31
 8006610:	40bb      	lsls	r3, r7
 8006612:	4213      	tst	r3, r2
 8006614:	4629      	mov	r1, r5
 8006616:	4620      	mov	r0, r4
 8006618:	bf18      	it	ne
 800661a:	f049 0902 	orrne.w	r9, r9, #2
 800661e:	f7ff fe21 	bl	8006264 <rshift>
 8006622:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8006626:	1b76      	subs	r6, r6, r5
 8006628:	2502      	movs	r5, #2
 800662a:	f1b9 0f00 	cmp.w	r9, #0
 800662e:	d047      	beq.n	80066c0 <__gethex+0x38c>
 8006630:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006634:	2b02      	cmp	r3, #2
 8006636:	d015      	beq.n	8006664 <__gethex+0x330>
 8006638:	2b03      	cmp	r3, #3
 800663a:	d017      	beq.n	800666c <__gethex+0x338>
 800663c:	2b01      	cmp	r3, #1
 800663e:	d109      	bne.n	8006654 <__gethex+0x320>
 8006640:	f019 0f02 	tst.w	r9, #2
 8006644:	d006      	beq.n	8006654 <__gethex+0x320>
 8006646:	f8da 3000 	ldr.w	r3, [sl]
 800664a:	ea49 0903 	orr.w	r9, r9, r3
 800664e:	f019 0f01 	tst.w	r9, #1
 8006652:	d10e      	bne.n	8006672 <__gethex+0x33e>
 8006654:	f045 0510 	orr.w	r5, r5, #16
 8006658:	e032      	b.n	80066c0 <__gethex+0x38c>
 800665a:	f04f 0901 	mov.w	r9, #1
 800665e:	e7d1      	b.n	8006604 <__gethex+0x2d0>
 8006660:	2501      	movs	r5, #1
 8006662:	e7e2      	b.n	800662a <__gethex+0x2f6>
 8006664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006666:	f1c3 0301 	rsb	r3, r3, #1
 800666a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800666c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800666e:	2b00      	cmp	r3, #0
 8006670:	d0f0      	beq.n	8006654 <__gethex+0x320>
 8006672:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006676:	f104 0314 	add.w	r3, r4, #20
 800667a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800667e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006682:	f04f 0c00 	mov.w	ip, #0
 8006686:	4618      	mov	r0, r3
 8006688:	f853 2b04 	ldr.w	r2, [r3], #4
 800668c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006690:	d01b      	beq.n	80066ca <__gethex+0x396>
 8006692:	3201      	adds	r2, #1
 8006694:	6002      	str	r2, [r0, #0]
 8006696:	2d02      	cmp	r5, #2
 8006698:	f104 0314 	add.w	r3, r4, #20
 800669c:	d13c      	bne.n	8006718 <__gethex+0x3e4>
 800669e:	f8d8 2000 	ldr.w	r2, [r8]
 80066a2:	3a01      	subs	r2, #1
 80066a4:	42b2      	cmp	r2, r6
 80066a6:	d109      	bne.n	80066bc <__gethex+0x388>
 80066a8:	1171      	asrs	r1, r6, #5
 80066aa:	2201      	movs	r2, #1
 80066ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80066b0:	f006 061f 	and.w	r6, r6, #31
 80066b4:	fa02 f606 	lsl.w	r6, r2, r6
 80066b8:	421e      	tst	r6, r3
 80066ba:	d13a      	bne.n	8006732 <__gethex+0x3fe>
 80066bc:	f045 0520 	orr.w	r5, r5, #32
 80066c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066c2:	601c      	str	r4, [r3, #0]
 80066c4:	9b02      	ldr	r3, [sp, #8]
 80066c6:	601f      	str	r7, [r3, #0]
 80066c8:	e6b0      	b.n	800642c <__gethex+0xf8>
 80066ca:	4299      	cmp	r1, r3
 80066cc:	f843 cc04 	str.w	ip, [r3, #-4]
 80066d0:	d8d9      	bhi.n	8006686 <__gethex+0x352>
 80066d2:	68a3      	ldr	r3, [r4, #8]
 80066d4:	459b      	cmp	fp, r3
 80066d6:	db17      	blt.n	8006708 <__gethex+0x3d4>
 80066d8:	6861      	ldr	r1, [r4, #4]
 80066da:	9801      	ldr	r0, [sp, #4]
 80066dc:	3101      	adds	r1, #1
 80066de:	f7fe f80b 	bl	80046f8 <_Balloc>
 80066e2:	4681      	mov	r9, r0
 80066e4:	b918      	cbnz	r0, 80066ee <__gethex+0x3ba>
 80066e6:	4b1a      	ldr	r3, [pc, #104]	@ (8006750 <__gethex+0x41c>)
 80066e8:	4602      	mov	r2, r0
 80066ea:	2184      	movs	r1, #132	@ 0x84
 80066ec:	e6c5      	b.n	800647a <__gethex+0x146>
 80066ee:	6922      	ldr	r2, [r4, #16]
 80066f0:	3202      	adds	r2, #2
 80066f2:	f104 010c 	add.w	r1, r4, #12
 80066f6:	0092      	lsls	r2, r2, #2
 80066f8:	300c      	adds	r0, #12
 80066fa:	f7ff fd6b 	bl	80061d4 <memcpy>
 80066fe:	4621      	mov	r1, r4
 8006700:	9801      	ldr	r0, [sp, #4]
 8006702:	f7fe f839 	bl	8004778 <_Bfree>
 8006706:	464c      	mov	r4, r9
 8006708:	6923      	ldr	r3, [r4, #16]
 800670a:	1c5a      	adds	r2, r3, #1
 800670c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006710:	6122      	str	r2, [r4, #16]
 8006712:	2201      	movs	r2, #1
 8006714:	615a      	str	r2, [r3, #20]
 8006716:	e7be      	b.n	8006696 <__gethex+0x362>
 8006718:	6922      	ldr	r2, [r4, #16]
 800671a:	455a      	cmp	r2, fp
 800671c:	dd0b      	ble.n	8006736 <__gethex+0x402>
 800671e:	2101      	movs	r1, #1
 8006720:	4620      	mov	r0, r4
 8006722:	f7ff fd9f 	bl	8006264 <rshift>
 8006726:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800672a:	3701      	adds	r7, #1
 800672c:	42bb      	cmp	r3, r7
 800672e:	f6ff aee0 	blt.w	80064f2 <__gethex+0x1be>
 8006732:	2501      	movs	r5, #1
 8006734:	e7c2      	b.n	80066bc <__gethex+0x388>
 8006736:	f016 061f 	ands.w	r6, r6, #31
 800673a:	d0fa      	beq.n	8006732 <__gethex+0x3fe>
 800673c:	4453      	add	r3, sl
 800673e:	f1c6 0620 	rsb	r6, r6, #32
 8006742:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006746:	f7fe f8c9 	bl	80048dc <__hi0bits>
 800674a:	42b0      	cmp	r0, r6
 800674c:	dbe7      	blt.n	800671e <__gethex+0x3ea>
 800674e:	e7f0      	b.n	8006732 <__gethex+0x3fe>
 8006750:	08006fbd 	.word	0x08006fbd

08006754 <L_shift>:
 8006754:	f1c2 0208 	rsb	r2, r2, #8
 8006758:	0092      	lsls	r2, r2, #2
 800675a:	b570      	push	{r4, r5, r6, lr}
 800675c:	f1c2 0620 	rsb	r6, r2, #32
 8006760:	6843      	ldr	r3, [r0, #4]
 8006762:	6804      	ldr	r4, [r0, #0]
 8006764:	fa03 f506 	lsl.w	r5, r3, r6
 8006768:	432c      	orrs	r4, r5
 800676a:	40d3      	lsrs	r3, r2
 800676c:	6004      	str	r4, [r0, #0]
 800676e:	f840 3f04 	str.w	r3, [r0, #4]!
 8006772:	4288      	cmp	r0, r1
 8006774:	d3f4      	bcc.n	8006760 <L_shift+0xc>
 8006776:	bd70      	pop	{r4, r5, r6, pc}

08006778 <__match>:
 8006778:	b530      	push	{r4, r5, lr}
 800677a:	6803      	ldr	r3, [r0, #0]
 800677c:	3301      	adds	r3, #1
 800677e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006782:	b914      	cbnz	r4, 800678a <__match+0x12>
 8006784:	6003      	str	r3, [r0, #0]
 8006786:	2001      	movs	r0, #1
 8006788:	bd30      	pop	{r4, r5, pc}
 800678a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800678e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8006792:	2d19      	cmp	r5, #25
 8006794:	bf98      	it	ls
 8006796:	3220      	addls	r2, #32
 8006798:	42a2      	cmp	r2, r4
 800679a:	d0f0      	beq.n	800677e <__match+0x6>
 800679c:	2000      	movs	r0, #0
 800679e:	e7f3      	b.n	8006788 <__match+0x10>

080067a0 <__hexnan>:
 80067a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a4:	680b      	ldr	r3, [r1, #0]
 80067a6:	6801      	ldr	r1, [r0, #0]
 80067a8:	115e      	asrs	r6, r3, #5
 80067aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80067ae:	f013 031f 	ands.w	r3, r3, #31
 80067b2:	b087      	sub	sp, #28
 80067b4:	bf18      	it	ne
 80067b6:	3604      	addne	r6, #4
 80067b8:	2500      	movs	r5, #0
 80067ba:	1f37      	subs	r7, r6, #4
 80067bc:	4682      	mov	sl, r0
 80067be:	4690      	mov	r8, r2
 80067c0:	9301      	str	r3, [sp, #4]
 80067c2:	f846 5c04 	str.w	r5, [r6, #-4]
 80067c6:	46b9      	mov	r9, r7
 80067c8:	463c      	mov	r4, r7
 80067ca:	9502      	str	r5, [sp, #8]
 80067cc:	46ab      	mov	fp, r5
 80067ce:	784a      	ldrb	r2, [r1, #1]
 80067d0:	1c4b      	adds	r3, r1, #1
 80067d2:	9303      	str	r3, [sp, #12]
 80067d4:	b342      	cbz	r2, 8006828 <__hexnan+0x88>
 80067d6:	4610      	mov	r0, r2
 80067d8:	9105      	str	r1, [sp, #20]
 80067da:	9204      	str	r2, [sp, #16]
 80067dc:	f7ff fd94 	bl	8006308 <__hexdig_fun>
 80067e0:	2800      	cmp	r0, #0
 80067e2:	d151      	bne.n	8006888 <__hexnan+0xe8>
 80067e4:	9a04      	ldr	r2, [sp, #16]
 80067e6:	9905      	ldr	r1, [sp, #20]
 80067e8:	2a20      	cmp	r2, #32
 80067ea:	d818      	bhi.n	800681e <__hexnan+0x7e>
 80067ec:	9b02      	ldr	r3, [sp, #8]
 80067ee:	459b      	cmp	fp, r3
 80067f0:	dd13      	ble.n	800681a <__hexnan+0x7a>
 80067f2:	454c      	cmp	r4, r9
 80067f4:	d206      	bcs.n	8006804 <__hexnan+0x64>
 80067f6:	2d07      	cmp	r5, #7
 80067f8:	dc04      	bgt.n	8006804 <__hexnan+0x64>
 80067fa:	462a      	mov	r2, r5
 80067fc:	4649      	mov	r1, r9
 80067fe:	4620      	mov	r0, r4
 8006800:	f7ff ffa8 	bl	8006754 <L_shift>
 8006804:	4544      	cmp	r4, r8
 8006806:	d952      	bls.n	80068ae <__hexnan+0x10e>
 8006808:	2300      	movs	r3, #0
 800680a:	f1a4 0904 	sub.w	r9, r4, #4
 800680e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006812:	f8cd b008 	str.w	fp, [sp, #8]
 8006816:	464c      	mov	r4, r9
 8006818:	461d      	mov	r5, r3
 800681a:	9903      	ldr	r1, [sp, #12]
 800681c:	e7d7      	b.n	80067ce <__hexnan+0x2e>
 800681e:	2a29      	cmp	r2, #41	@ 0x29
 8006820:	d157      	bne.n	80068d2 <__hexnan+0x132>
 8006822:	3102      	adds	r1, #2
 8006824:	f8ca 1000 	str.w	r1, [sl]
 8006828:	f1bb 0f00 	cmp.w	fp, #0
 800682c:	d051      	beq.n	80068d2 <__hexnan+0x132>
 800682e:	454c      	cmp	r4, r9
 8006830:	d206      	bcs.n	8006840 <__hexnan+0xa0>
 8006832:	2d07      	cmp	r5, #7
 8006834:	dc04      	bgt.n	8006840 <__hexnan+0xa0>
 8006836:	462a      	mov	r2, r5
 8006838:	4649      	mov	r1, r9
 800683a:	4620      	mov	r0, r4
 800683c:	f7ff ff8a 	bl	8006754 <L_shift>
 8006840:	4544      	cmp	r4, r8
 8006842:	d936      	bls.n	80068b2 <__hexnan+0x112>
 8006844:	f1a8 0204 	sub.w	r2, r8, #4
 8006848:	4623      	mov	r3, r4
 800684a:	f853 1b04 	ldr.w	r1, [r3], #4
 800684e:	f842 1f04 	str.w	r1, [r2, #4]!
 8006852:	429f      	cmp	r7, r3
 8006854:	d2f9      	bcs.n	800684a <__hexnan+0xaa>
 8006856:	1b3b      	subs	r3, r7, r4
 8006858:	f023 0303 	bic.w	r3, r3, #3
 800685c:	3304      	adds	r3, #4
 800685e:	3401      	adds	r4, #1
 8006860:	3e03      	subs	r6, #3
 8006862:	42b4      	cmp	r4, r6
 8006864:	bf88      	it	hi
 8006866:	2304      	movhi	r3, #4
 8006868:	4443      	add	r3, r8
 800686a:	2200      	movs	r2, #0
 800686c:	f843 2b04 	str.w	r2, [r3], #4
 8006870:	429f      	cmp	r7, r3
 8006872:	d2fb      	bcs.n	800686c <__hexnan+0xcc>
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	b91b      	cbnz	r3, 8006880 <__hexnan+0xe0>
 8006878:	4547      	cmp	r7, r8
 800687a:	d128      	bne.n	80068ce <__hexnan+0x12e>
 800687c:	2301      	movs	r3, #1
 800687e:	603b      	str	r3, [r7, #0]
 8006880:	2005      	movs	r0, #5
 8006882:	b007      	add	sp, #28
 8006884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006888:	3501      	adds	r5, #1
 800688a:	2d08      	cmp	r5, #8
 800688c:	f10b 0b01 	add.w	fp, fp, #1
 8006890:	dd06      	ble.n	80068a0 <__hexnan+0x100>
 8006892:	4544      	cmp	r4, r8
 8006894:	d9c1      	bls.n	800681a <__hexnan+0x7a>
 8006896:	2300      	movs	r3, #0
 8006898:	f844 3c04 	str.w	r3, [r4, #-4]
 800689c:	2501      	movs	r5, #1
 800689e:	3c04      	subs	r4, #4
 80068a0:	6822      	ldr	r2, [r4, #0]
 80068a2:	f000 000f 	and.w	r0, r0, #15
 80068a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80068aa:	6020      	str	r0, [r4, #0]
 80068ac:	e7b5      	b.n	800681a <__hexnan+0x7a>
 80068ae:	2508      	movs	r5, #8
 80068b0:	e7b3      	b.n	800681a <__hexnan+0x7a>
 80068b2:	9b01      	ldr	r3, [sp, #4]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d0dd      	beq.n	8006874 <__hexnan+0xd4>
 80068b8:	f1c3 0320 	rsb	r3, r3, #32
 80068bc:	f04f 32ff 	mov.w	r2, #4294967295
 80068c0:	40da      	lsrs	r2, r3
 80068c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80068c6:	4013      	ands	r3, r2
 80068c8:	f846 3c04 	str.w	r3, [r6, #-4]
 80068cc:	e7d2      	b.n	8006874 <__hexnan+0xd4>
 80068ce:	3f04      	subs	r7, #4
 80068d0:	e7d0      	b.n	8006874 <__hexnan+0xd4>
 80068d2:	2004      	movs	r0, #4
 80068d4:	e7d5      	b.n	8006882 <__hexnan+0xe2>

080068d6 <__ascii_mbtowc>:
 80068d6:	b082      	sub	sp, #8
 80068d8:	b901      	cbnz	r1, 80068dc <__ascii_mbtowc+0x6>
 80068da:	a901      	add	r1, sp, #4
 80068dc:	b142      	cbz	r2, 80068f0 <__ascii_mbtowc+0x1a>
 80068de:	b14b      	cbz	r3, 80068f4 <__ascii_mbtowc+0x1e>
 80068e0:	7813      	ldrb	r3, [r2, #0]
 80068e2:	600b      	str	r3, [r1, #0]
 80068e4:	7812      	ldrb	r2, [r2, #0]
 80068e6:	1e10      	subs	r0, r2, #0
 80068e8:	bf18      	it	ne
 80068ea:	2001      	movne	r0, #1
 80068ec:	b002      	add	sp, #8
 80068ee:	4770      	bx	lr
 80068f0:	4610      	mov	r0, r2
 80068f2:	e7fb      	b.n	80068ec <__ascii_mbtowc+0x16>
 80068f4:	f06f 0001 	mvn.w	r0, #1
 80068f8:	e7f8      	b.n	80068ec <__ascii_mbtowc+0x16>

080068fa <_realloc_r>:
 80068fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068fe:	4607      	mov	r7, r0
 8006900:	4614      	mov	r4, r2
 8006902:	460d      	mov	r5, r1
 8006904:	b921      	cbnz	r1, 8006910 <_realloc_r+0x16>
 8006906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800690a:	4611      	mov	r1, r2
 800690c:	f7fd be68 	b.w	80045e0 <_malloc_r>
 8006910:	b92a      	cbnz	r2, 800691e <_realloc_r+0x24>
 8006912:	f7fd fdf1 	bl	80044f8 <_free_r>
 8006916:	4625      	mov	r5, r4
 8006918:	4628      	mov	r0, r5
 800691a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800691e:	f000 f840 	bl	80069a2 <_malloc_usable_size_r>
 8006922:	4284      	cmp	r4, r0
 8006924:	4606      	mov	r6, r0
 8006926:	d802      	bhi.n	800692e <_realloc_r+0x34>
 8006928:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800692c:	d8f4      	bhi.n	8006918 <_realloc_r+0x1e>
 800692e:	4621      	mov	r1, r4
 8006930:	4638      	mov	r0, r7
 8006932:	f7fd fe55 	bl	80045e0 <_malloc_r>
 8006936:	4680      	mov	r8, r0
 8006938:	b908      	cbnz	r0, 800693e <_realloc_r+0x44>
 800693a:	4645      	mov	r5, r8
 800693c:	e7ec      	b.n	8006918 <_realloc_r+0x1e>
 800693e:	42b4      	cmp	r4, r6
 8006940:	4622      	mov	r2, r4
 8006942:	4629      	mov	r1, r5
 8006944:	bf28      	it	cs
 8006946:	4632      	movcs	r2, r6
 8006948:	f7ff fc44 	bl	80061d4 <memcpy>
 800694c:	4629      	mov	r1, r5
 800694e:	4638      	mov	r0, r7
 8006950:	f7fd fdd2 	bl	80044f8 <_free_r>
 8006954:	e7f1      	b.n	800693a <_realloc_r+0x40>

08006956 <__ascii_wctomb>:
 8006956:	4603      	mov	r3, r0
 8006958:	4608      	mov	r0, r1
 800695a:	b141      	cbz	r1, 800696e <__ascii_wctomb+0x18>
 800695c:	2aff      	cmp	r2, #255	@ 0xff
 800695e:	d904      	bls.n	800696a <__ascii_wctomb+0x14>
 8006960:	228a      	movs	r2, #138	@ 0x8a
 8006962:	601a      	str	r2, [r3, #0]
 8006964:	f04f 30ff 	mov.w	r0, #4294967295
 8006968:	4770      	bx	lr
 800696a:	700a      	strb	r2, [r1, #0]
 800696c:	2001      	movs	r0, #1
 800696e:	4770      	bx	lr

08006970 <fiprintf>:
 8006970:	b40e      	push	{r1, r2, r3}
 8006972:	b503      	push	{r0, r1, lr}
 8006974:	4601      	mov	r1, r0
 8006976:	ab03      	add	r3, sp, #12
 8006978:	4805      	ldr	r0, [pc, #20]	@ (8006990 <fiprintf+0x20>)
 800697a:	f853 2b04 	ldr.w	r2, [r3], #4
 800697e:	6800      	ldr	r0, [r0, #0]
 8006980:	9301      	str	r3, [sp, #4]
 8006982:	f000 f83f 	bl	8006a04 <_vfiprintf_r>
 8006986:	b002      	add	sp, #8
 8006988:	f85d eb04 	ldr.w	lr, [sp], #4
 800698c:	b003      	add	sp, #12
 800698e:	4770      	bx	lr
 8006990:	20000024 	.word	0x20000024

08006994 <abort>:
 8006994:	b508      	push	{r3, lr}
 8006996:	2006      	movs	r0, #6
 8006998:	f000 fa08 	bl	8006dac <raise>
 800699c:	2001      	movs	r0, #1
 800699e:	f7fb fe6b 	bl	8002678 <_exit>

080069a2 <_malloc_usable_size_r>:
 80069a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069a6:	1f18      	subs	r0, r3, #4
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	bfbc      	itt	lt
 80069ac:	580b      	ldrlt	r3, [r1, r0]
 80069ae:	18c0      	addlt	r0, r0, r3
 80069b0:	4770      	bx	lr

080069b2 <__sfputc_r>:
 80069b2:	6893      	ldr	r3, [r2, #8]
 80069b4:	3b01      	subs	r3, #1
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	b410      	push	{r4}
 80069ba:	6093      	str	r3, [r2, #8]
 80069bc:	da08      	bge.n	80069d0 <__sfputc_r+0x1e>
 80069be:	6994      	ldr	r4, [r2, #24]
 80069c0:	42a3      	cmp	r3, r4
 80069c2:	db01      	blt.n	80069c8 <__sfputc_r+0x16>
 80069c4:	290a      	cmp	r1, #10
 80069c6:	d103      	bne.n	80069d0 <__sfputc_r+0x1e>
 80069c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069cc:	f000 b932 	b.w	8006c34 <__swbuf_r>
 80069d0:	6813      	ldr	r3, [r2, #0]
 80069d2:	1c58      	adds	r0, r3, #1
 80069d4:	6010      	str	r0, [r2, #0]
 80069d6:	7019      	strb	r1, [r3, #0]
 80069d8:	4608      	mov	r0, r1
 80069da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <__sfputs_r>:
 80069e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069e2:	4606      	mov	r6, r0
 80069e4:	460f      	mov	r7, r1
 80069e6:	4614      	mov	r4, r2
 80069e8:	18d5      	adds	r5, r2, r3
 80069ea:	42ac      	cmp	r4, r5
 80069ec:	d101      	bne.n	80069f2 <__sfputs_r+0x12>
 80069ee:	2000      	movs	r0, #0
 80069f0:	e007      	b.n	8006a02 <__sfputs_r+0x22>
 80069f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069f6:	463a      	mov	r2, r7
 80069f8:	4630      	mov	r0, r6
 80069fa:	f7ff ffda 	bl	80069b2 <__sfputc_r>
 80069fe:	1c43      	adds	r3, r0, #1
 8006a00:	d1f3      	bne.n	80069ea <__sfputs_r+0xa>
 8006a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006a04 <_vfiprintf_r>:
 8006a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a08:	460d      	mov	r5, r1
 8006a0a:	b09d      	sub	sp, #116	@ 0x74
 8006a0c:	4614      	mov	r4, r2
 8006a0e:	4698      	mov	r8, r3
 8006a10:	4606      	mov	r6, r0
 8006a12:	b118      	cbz	r0, 8006a1c <_vfiprintf_r+0x18>
 8006a14:	6a03      	ldr	r3, [r0, #32]
 8006a16:	b90b      	cbnz	r3, 8006a1c <_vfiprintf_r+0x18>
 8006a18:	f7fc fdf4 	bl	8003604 <__sinit>
 8006a1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a1e:	07d9      	lsls	r1, r3, #31
 8006a20:	d405      	bmi.n	8006a2e <_vfiprintf_r+0x2a>
 8006a22:	89ab      	ldrh	r3, [r5, #12]
 8006a24:	059a      	lsls	r2, r3, #22
 8006a26:	d402      	bmi.n	8006a2e <_vfiprintf_r+0x2a>
 8006a28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a2a:	f7fc ff04 	bl	8003836 <__retarget_lock_acquire_recursive>
 8006a2e:	89ab      	ldrh	r3, [r5, #12]
 8006a30:	071b      	lsls	r3, r3, #28
 8006a32:	d501      	bpl.n	8006a38 <_vfiprintf_r+0x34>
 8006a34:	692b      	ldr	r3, [r5, #16]
 8006a36:	b99b      	cbnz	r3, 8006a60 <_vfiprintf_r+0x5c>
 8006a38:	4629      	mov	r1, r5
 8006a3a:	4630      	mov	r0, r6
 8006a3c:	f000 f938 	bl	8006cb0 <__swsetup_r>
 8006a40:	b170      	cbz	r0, 8006a60 <_vfiprintf_r+0x5c>
 8006a42:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a44:	07dc      	lsls	r4, r3, #31
 8006a46:	d504      	bpl.n	8006a52 <_vfiprintf_r+0x4e>
 8006a48:	f04f 30ff 	mov.w	r0, #4294967295
 8006a4c:	b01d      	add	sp, #116	@ 0x74
 8006a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a52:	89ab      	ldrh	r3, [r5, #12]
 8006a54:	0598      	lsls	r0, r3, #22
 8006a56:	d4f7      	bmi.n	8006a48 <_vfiprintf_r+0x44>
 8006a58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a5a:	f7fc feed 	bl	8003838 <__retarget_lock_release_recursive>
 8006a5e:	e7f3      	b.n	8006a48 <_vfiprintf_r+0x44>
 8006a60:	2300      	movs	r3, #0
 8006a62:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a64:	2320      	movs	r3, #32
 8006a66:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006a6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a6e:	2330      	movs	r3, #48	@ 0x30
 8006a70:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006c20 <_vfiprintf_r+0x21c>
 8006a74:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a78:	f04f 0901 	mov.w	r9, #1
 8006a7c:	4623      	mov	r3, r4
 8006a7e:	469a      	mov	sl, r3
 8006a80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a84:	b10a      	cbz	r2, 8006a8a <_vfiprintf_r+0x86>
 8006a86:	2a25      	cmp	r2, #37	@ 0x25
 8006a88:	d1f9      	bne.n	8006a7e <_vfiprintf_r+0x7a>
 8006a8a:	ebba 0b04 	subs.w	fp, sl, r4
 8006a8e:	d00b      	beq.n	8006aa8 <_vfiprintf_r+0xa4>
 8006a90:	465b      	mov	r3, fp
 8006a92:	4622      	mov	r2, r4
 8006a94:	4629      	mov	r1, r5
 8006a96:	4630      	mov	r0, r6
 8006a98:	f7ff ffa2 	bl	80069e0 <__sfputs_r>
 8006a9c:	3001      	adds	r0, #1
 8006a9e:	f000 80a7 	beq.w	8006bf0 <_vfiprintf_r+0x1ec>
 8006aa2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006aa4:	445a      	add	r2, fp
 8006aa6:	9209      	str	r2, [sp, #36]	@ 0x24
 8006aa8:	f89a 3000 	ldrb.w	r3, [sl]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f000 809f 	beq.w	8006bf0 <_vfiprintf_r+0x1ec>
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006abc:	f10a 0a01 	add.w	sl, sl, #1
 8006ac0:	9304      	str	r3, [sp, #16]
 8006ac2:	9307      	str	r3, [sp, #28]
 8006ac4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ac8:	931a      	str	r3, [sp, #104]	@ 0x68
 8006aca:	4654      	mov	r4, sl
 8006acc:	2205      	movs	r2, #5
 8006ace:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ad2:	4853      	ldr	r0, [pc, #332]	@ (8006c20 <_vfiprintf_r+0x21c>)
 8006ad4:	f7f9 fb7c 	bl	80001d0 <memchr>
 8006ad8:	9a04      	ldr	r2, [sp, #16]
 8006ada:	b9d8      	cbnz	r0, 8006b14 <_vfiprintf_r+0x110>
 8006adc:	06d1      	lsls	r1, r2, #27
 8006ade:	bf44      	itt	mi
 8006ae0:	2320      	movmi	r3, #32
 8006ae2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ae6:	0713      	lsls	r3, r2, #28
 8006ae8:	bf44      	itt	mi
 8006aea:	232b      	movmi	r3, #43	@ 0x2b
 8006aec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006af0:	f89a 3000 	ldrb.w	r3, [sl]
 8006af4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006af6:	d015      	beq.n	8006b24 <_vfiprintf_r+0x120>
 8006af8:	9a07      	ldr	r2, [sp, #28]
 8006afa:	4654      	mov	r4, sl
 8006afc:	2000      	movs	r0, #0
 8006afe:	f04f 0c0a 	mov.w	ip, #10
 8006b02:	4621      	mov	r1, r4
 8006b04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b08:	3b30      	subs	r3, #48	@ 0x30
 8006b0a:	2b09      	cmp	r3, #9
 8006b0c:	d94b      	bls.n	8006ba6 <_vfiprintf_r+0x1a2>
 8006b0e:	b1b0      	cbz	r0, 8006b3e <_vfiprintf_r+0x13a>
 8006b10:	9207      	str	r2, [sp, #28]
 8006b12:	e014      	b.n	8006b3e <_vfiprintf_r+0x13a>
 8006b14:	eba0 0308 	sub.w	r3, r0, r8
 8006b18:	fa09 f303 	lsl.w	r3, r9, r3
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	9304      	str	r3, [sp, #16]
 8006b20:	46a2      	mov	sl, r4
 8006b22:	e7d2      	b.n	8006aca <_vfiprintf_r+0xc6>
 8006b24:	9b03      	ldr	r3, [sp, #12]
 8006b26:	1d19      	adds	r1, r3, #4
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	9103      	str	r1, [sp, #12]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	bfbb      	ittet	lt
 8006b30:	425b      	neglt	r3, r3
 8006b32:	f042 0202 	orrlt.w	r2, r2, #2
 8006b36:	9307      	strge	r3, [sp, #28]
 8006b38:	9307      	strlt	r3, [sp, #28]
 8006b3a:	bfb8      	it	lt
 8006b3c:	9204      	strlt	r2, [sp, #16]
 8006b3e:	7823      	ldrb	r3, [r4, #0]
 8006b40:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b42:	d10a      	bne.n	8006b5a <_vfiprintf_r+0x156>
 8006b44:	7863      	ldrb	r3, [r4, #1]
 8006b46:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b48:	d132      	bne.n	8006bb0 <_vfiprintf_r+0x1ac>
 8006b4a:	9b03      	ldr	r3, [sp, #12]
 8006b4c:	1d1a      	adds	r2, r3, #4
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	9203      	str	r2, [sp, #12]
 8006b52:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006b56:	3402      	adds	r4, #2
 8006b58:	9305      	str	r3, [sp, #20]
 8006b5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006c30 <_vfiprintf_r+0x22c>
 8006b5e:	7821      	ldrb	r1, [r4, #0]
 8006b60:	2203      	movs	r2, #3
 8006b62:	4650      	mov	r0, sl
 8006b64:	f7f9 fb34 	bl	80001d0 <memchr>
 8006b68:	b138      	cbz	r0, 8006b7a <_vfiprintf_r+0x176>
 8006b6a:	9b04      	ldr	r3, [sp, #16]
 8006b6c:	eba0 000a 	sub.w	r0, r0, sl
 8006b70:	2240      	movs	r2, #64	@ 0x40
 8006b72:	4082      	lsls	r2, r0
 8006b74:	4313      	orrs	r3, r2
 8006b76:	3401      	adds	r4, #1
 8006b78:	9304      	str	r3, [sp, #16]
 8006b7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b7e:	4829      	ldr	r0, [pc, #164]	@ (8006c24 <_vfiprintf_r+0x220>)
 8006b80:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b84:	2206      	movs	r2, #6
 8006b86:	f7f9 fb23 	bl	80001d0 <memchr>
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	d03f      	beq.n	8006c0e <_vfiprintf_r+0x20a>
 8006b8e:	4b26      	ldr	r3, [pc, #152]	@ (8006c28 <_vfiprintf_r+0x224>)
 8006b90:	bb1b      	cbnz	r3, 8006bda <_vfiprintf_r+0x1d6>
 8006b92:	9b03      	ldr	r3, [sp, #12]
 8006b94:	3307      	adds	r3, #7
 8006b96:	f023 0307 	bic.w	r3, r3, #7
 8006b9a:	3308      	adds	r3, #8
 8006b9c:	9303      	str	r3, [sp, #12]
 8006b9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ba0:	443b      	add	r3, r7
 8006ba2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ba4:	e76a      	b.n	8006a7c <_vfiprintf_r+0x78>
 8006ba6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006baa:	460c      	mov	r4, r1
 8006bac:	2001      	movs	r0, #1
 8006bae:	e7a8      	b.n	8006b02 <_vfiprintf_r+0xfe>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	3401      	adds	r4, #1
 8006bb4:	9305      	str	r3, [sp, #20]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	f04f 0c0a 	mov.w	ip, #10
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bc2:	3a30      	subs	r2, #48	@ 0x30
 8006bc4:	2a09      	cmp	r2, #9
 8006bc6:	d903      	bls.n	8006bd0 <_vfiprintf_r+0x1cc>
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d0c6      	beq.n	8006b5a <_vfiprintf_r+0x156>
 8006bcc:	9105      	str	r1, [sp, #20]
 8006bce:	e7c4      	b.n	8006b5a <_vfiprintf_r+0x156>
 8006bd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bd4:	4604      	mov	r4, r0
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e7f0      	b.n	8006bbc <_vfiprintf_r+0x1b8>
 8006bda:	ab03      	add	r3, sp, #12
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	462a      	mov	r2, r5
 8006be0:	4b12      	ldr	r3, [pc, #72]	@ (8006c2c <_vfiprintf_r+0x228>)
 8006be2:	a904      	add	r1, sp, #16
 8006be4:	4630      	mov	r0, r6
 8006be6:	f7fb febd 	bl	8002964 <_printf_float>
 8006bea:	4607      	mov	r7, r0
 8006bec:	1c78      	adds	r0, r7, #1
 8006bee:	d1d6      	bne.n	8006b9e <_vfiprintf_r+0x19a>
 8006bf0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006bf2:	07d9      	lsls	r1, r3, #31
 8006bf4:	d405      	bmi.n	8006c02 <_vfiprintf_r+0x1fe>
 8006bf6:	89ab      	ldrh	r3, [r5, #12]
 8006bf8:	059a      	lsls	r2, r3, #22
 8006bfa:	d402      	bmi.n	8006c02 <_vfiprintf_r+0x1fe>
 8006bfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006bfe:	f7fc fe1b 	bl	8003838 <__retarget_lock_release_recursive>
 8006c02:	89ab      	ldrh	r3, [r5, #12]
 8006c04:	065b      	lsls	r3, r3, #25
 8006c06:	f53f af1f 	bmi.w	8006a48 <_vfiprintf_r+0x44>
 8006c0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c0c:	e71e      	b.n	8006a4c <_vfiprintf_r+0x48>
 8006c0e:	ab03      	add	r3, sp, #12
 8006c10:	9300      	str	r3, [sp, #0]
 8006c12:	462a      	mov	r2, r5
 8006c14:	4b05      	ldr	r3, [pc, #20]	@ (8006c2c <_vfiprintf_r+0x228>)
 8006c16:	a904      	add	r1, sp, #16
 8006c18:	4630      	mov	r0, r6
 8006c1a:	f7fc f93b 	bl	8002e94 <_printf_i>
 8006c1e:	e7e4      	b.n	8006bea <_vfiprintf_r+0x1e6>
 8006c20:	08007029 	.word	0x08007029
 8006c24:	08007033 	.word	0x08007033
 8006c28:	08002965 	.word	0x08002965
 8006c2c:	080069e1 	.word	0x080069e1
 8006c30:	0800702f 	.word	0x0800702f

08006c34 <__swbuf_r>:
 8006c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c36:	460e      	mov	r6, r1
 8006c38:	4614      	mov	r4, r2
 8006c3a:	4605      	mov	r5, r0
 8006c3c:	b118      	cbz	r0, 8006c46 <__swbuf_r+0x12>
 8006c3e:	6a03      	ldr	r3, [r0, #32]
 8006c40:	b90b      	cbnz	r3, 8006c46 <__swbuf_r+0x12>
 8006c42:	f7fc fcdf 	bl	8003604 <__sinit>
 8006c46:	69a3      	ldr	r3, [r4, #24]
 8006c48:	60a3      	str	r3, [r4, #8]
 8006c4a:	89a3      	ldrh	r3, [r4, #12]
 8006c4c:	071a      	lsls	r2, r3, #28
 8006c4e:	d501      	bpl.n	8006c54 <__swbuf_r+0x20>
 8006c50:	6923      	ldr	r3, [r4, #16]
 8006c52:	b943      	cbnz	r3, 8006c66 <__swbuf_r+0x32>
 8006c54:	4621      	mov	r1, r4
 8006c56:	4628      	mov	r0, r5
 8006c58:	f000 f82a 	bl	8006cb0 <__swsetup_r>
 8006c5c:	b118      	cbz	r0, 8006c66 <__swbuf_r+0x32>
 8006c5e:	f04f 37ff 	mov.w	r7, #4294967295
 8006c62:	4638      	mov	r0, r7
 8006c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c66:	6823      	ldr	r3, [r4, #0]
 8006c68:	6922      	ldr	r2, [r4, #16]
 8006c6a:	1a98      	subs	r0, r3, r2
 8006c6c:	6963      	ldr	r3, [r4, #20]
 8006c6e:	b2f6      	uxtb	r6, r6
 8006c70:	4283      	cmp	r3, r0
 8006c72:	4637      	mov	r7, r6
 8006c74:	dc05      	bgt.n	8006c82 <__swbuf_r+0x4e>
 8006c76:	4621      	mov	r1, r4
 8006c78:	4628      	mov	r0, r5
 8006c7a:	f7ff fa47 	bl	800610c <_fflush_r>
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	d1ed      	bne.n	8006c5e <__swbuf_r+0x2a>
 8006c82:	68a3      	ldr	r3, [r4, #8]
 8006c84:	3b01      	subs	r3, #1
 8006c86:	60a3      	str	r3, [r4, #8]
 8006c88:	6823      	ldr	r3, [r4, #0]
 8006c8a:	1c5a      	adds	r2, r3, #1
 8006c8c:	6022      	str	r2, [r4, #0]
 8006c8e:	701e      	strb	r6, [r3, #0]
 8006c90:	6962      	ldr	r2, [r4, #20]
 8006c92:	1c43      	adds	r3, r0, #1
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d004      	beq.n	8006ca2 <__swbuf_r+0x6e>
 8006c98:	89a3      	ldrh	r3, [r4, #12]
 8006c9a:	07db      	lsls	r3, r3, #31
 8006c9c:	d5e1      	bpl.n	8006c62 <__swbuf_r+0x2e>
 8006c9e:	2e0a      	cmp	r6, #10
 8006ca0:	d1df      	bne.n	8006c62 <__swbuf_r+0x2e>
 8006ca2:	4621      	mov	r1, r4
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	f7ff fa31 	bl	800610c <_fflush_r>
 8006caa:	2800      	cmp	r0, #0
 8006cac:	d0d9      	beq.n	8006c62 <__swbuf_r+0x2e>
 8006cae:	e7d6      	b.n	8006c5e <__swbuf_r+0x2a>

08006cb0 <__swsetup_r>:
 8006cb0:	b538      	push	{r3, r4, r5, lr}
 8006cb2:	4b29      	ldr	r3, [pc, #164]	@ (8006d58 <__swsetup_r+0xa8>)
 8006cb4:	4605      	mov	r5, r0
 8006cb6:	6818      	ldr	r0, [r3, #0]
 8006cb8:	460c      	mov	r4, r1
 8006cba:	b118      	cbz	r0, 8006cc4 <__swsetup_r+0x14>
 8006cbc:	6a03      	ldr	r3, [r0, #32]
 8006cbe:	b90b      	cbnz	r3, 8006cc4 <__swsetup_r+0x14>
 8006cc0:	f7fc fca0 	bl	8003604 <__sinit>
 8006cc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cc8:	0719      	lsls	r1, r3, #28
 8006cca:	d422      	bmi.n	8006d12 <__swsetup_r+0x62>
 8006ccc:	06da      	lsls	r2, r3, #27
 8006cce:	d407      	bmi.n	8006ce0 <__swsetup_r+0x30>
 8006cd0:	2209      	movs	r2, #9
 8006cd2:	602a      	str	r2, [r5, #0]
 8006cd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cd8:	81a3      	strh	r3, [r4, #12]
 8006cda:	f04f 30ff 	mov.w	r0, #4294967295
 8006cde:	e033      	b.n	8006d48 <__swsetup_r+0x98>
 8006ce0:	0758      	lsls	r0, r3, #29
 8006ce2:	d512      	bpl.n	8006d0a <__swsetup_r+0x5a>
 8006ce4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ce6:	b141      	cbz	r1, 8006cfa <__swsetup_r+0x4a>
 8006ce8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006cec:	4299      	cmp	r1, r3
 8006cee:	d002      	beq.n	8006cf6 <__swsetup_r+0x46>
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	f7fd fc01 	bl	80044f8 <_free_r>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	6363      	str	r3, [r4, #52]	@ 0x34
 8006cfa:	89a3      	ldrh	r3, [r4, #12]
 8006cfc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006d00:	81a3      	strh	r3, [r4, #12]
 8006d02:	2300      	movs	r3, #0
 8006d04:	6063      	str	r3, [r4, #4]
 8006d06:	6923      	ldr	r3, [r4, #16]
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	89a3      	ldrh	r3, [r4, #12]
 8006d0c:	f043 0308 	orr.w	r3, r3, #8
 8006d10:	81a3      	strh	r3, [r4, #12]
 8006d12:	6923      	ldr	r3, [r4, #16]
 8006d14:	b94b      	cbnz	r3, 8006d2a <__swsetup_r+0x7a>
 8006d16:	89a3      	ldrh	r3, [r4, #12]
 8006d18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006d1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d20:	d003      	beq.n	8006d2a <__swsetup_r+0x7a>
 8006d22:	4621      	mov	r1, r4
 8006d24:	4628      	mov	r0, r5
 8006d26:	f000 f883 	bl	8006e30 <__smakebuf_r>
 8006d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d2e:	f013 0201 	ands.w	r2, r3, #1
 8006d32:	d00a      	beq.n	8006d4a <__swsetup_r+0x9a>
 8006d34:	2200      	movs	r2, #0
 8006d36:	60a2      	str	r2, [r4, #8]
 8006d38:	6962      	ldr	r2, [r4, #20]
 8006d3a:	4252      	negs	r2, r2
 8006d3c:	61a2      	str	r2, [r4, #24]
 8006d3e:	6922      	ldr	r2, [r4, #16]
 8006d40:	b942      	cbnz	r2, 8006d54 <__swsetup_r+0xa4>
 8006d42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006d46:	d1c5      	bne.n	8006cd4 <__swsetup_r+0x24>
 8006d48:	bd38      	pop	{r3, r4, r5, pc}
 8006d4a:	0799      	lsls	r1, r3, #30
 8006d4c:	bf58      	it	pl
 8006d4e:	6962      	ldrpl	r2, [r4, #20]
 8006d50:	60a2      	str	r2, [r4, #8]
 8006d52:	e7f4      	b.n	8006d3e <__swsetup_r+0x8e>
 8006d54:	2000      	movs	r0, #0
 8006d56:	e7f7      	b.n	8006d48 <__swsetup_r+0x98>
 8006d58:	20000024 	.word	0x20000024

08006d5c <_raise_r>:
 8006d5c:	291f      	cmp	r1, #31
 8006d5e:	b538      	push	{r3, r4, r5, lr}
 8006d60:	4605      	mov	r5, r0
 8006d62:	460c      	mov	r4, r1
 8006d64:	d904      	bls.n	8006d70 <_raise_r+0x14>
 8006d66:	2316      	movs	r3, #22
 8006d68:	6003      	str	r3, [r0, #0]
 8006d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d6e:	bd38      	pop	{r3, r4, r5, pc}
 8006d70:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006d72:	b112      	cbz	r2, 8006d7a <_raise_r+0x1e>
 8006d74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006d78:	b94b      	cbnz	r3, 8006d8e <_raise_r+0x32>
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	f000 f830 	bl	8006de0 <_getpid_r>
 8006d80:	4622      	mov	r2, r4
 8006d82:	4601      	mov	r1, r0
 8006d84:	4628      	mov	r0, r5
 8006d86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d8a:	f000 b817 	b.w	8006dbc <_kill_r>
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d00a      	beq.n	8006da8 <_raise_r+0x4c>
 8006d92:	1c59      	adds	r1, r3, #1
 8006d94:	d103      	bne.n	8006d9e <_raise_r+0x42>
 8006d96:	2316      	movs	r3, #22
 8006d98:	6003      	str	r3, [r0, #0]
 8006d9a:	2001      	movs	r0, #1
 8006d9c:	e7e7      	b.n	8006d6e <_raise_r+0x12>
 8006d9e:	2100      	movs	r1, #0
 8006da0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006da4:	4620      	mov	r0, r4
 8006da6:	4798      	blx	r3
 8006da8:	2000      	movs	r0, #0
 8006daa:	e7e0      	b.n	8006d6e <_raise_r+0x12>

08006dac <raise>:
 8006dac:	4b02      	ldr	r3, [pc, #8]	@ (8006db8 <raise+0xc>)
 8006dae:	4601      	mov	r1, r0
 8006db0:	6818      	ldr	r0, [r3, #0]
 8006db2:	f7ff bfd3 	b.w	8006d5c <_raise_r>
 8006db6:	bf00      	nop
 8006db8:	20000024 	.word	0x20000024

08006dbc <_kill_r>:
 8006dbc:	b538      	push	{r3, r4, r5, lr}
 8006dbe:	4d07      	ldr	r5, [pc, #28]	@ (8006ddc <_kill_r+0x20>)
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	4604      	mov	r4, r0
 8006dc4:	4608      	mov	r0, r1
 8006dc6:	4611      	mov	r1, r2
 8006dc8:	602b      	str	r3, [r5, #0]
 8006dca:	f7fb fc45 	bl	8002658 <_kill>
 8006dce:	1c43      	adds	r3, r0, #1
 8006dd0:	d102      	bne.n	8006dd8 <_kill_r+0x1c>
 8006dd2:	682b      	ldr	r3, [r5, #0]
 8006dd4:	b103      	cbz	r3, 8006dd8 <_kill_r+0x1c>
 8006dd6:	6023      	str	r3, [r4, #0]
 8006dd8:	bd38      	pop	{r3, r4, r5, pc}
 8006dda:	bf00      	nop
 8006ddc:	20000370 	.word	0x20000370

08006de0 <_getpid_r>:
 8006de0:	f7fb bc32 	b.w	8002648 <_getpid>

08006de4 <__swhatbuf_r>:
 8006de4:	b570      	push	{r4, r5, r6, lr}
 8006de6:	460c      	mov	r4, r1
 8006de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dec:	2900      	cmp	r1, #0
 8006dee:	b096      	sub	sp, #88	@ 0x58
 8006df0:	4615      	mov	r5, r2
 8006df2:	461e      	mov	r6, r3
 8006df4:	da0d      	bge.n	8006e12 <__swhatbuf_r+0x2e>
 8006df6:	89a3      	ldrh	r3, [r4, #12]
 8006df8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006dfc:	f04f 0100 	mov.w	r1, #0
 8006e00:	bf14      	ite	ne
 8006e02:	2340      	movne	r3, #64	@ 0x40
 8006e04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006e08:	2000      	movs	r0, #0
 8006e0a:	6031      	str	r1, [r6, #0]
 8006e0c:	602b      	str	r3, [r5, #0]
 8006e0e:	b016      	add	sp, #88	@ 0x58
 8006e10:	bd70      	pop	{r4, r5, r6, pc}
 8006e12:	466a      	mov	r2, sp
 8006e14:	f000 f848 	bl	8006ea8 <_fstat_r>
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	dbec      	blt.n	8006df6 <__swhatbuf_r+0x12>
 8006e1c:	9901      	ldr	r1, [sp, #4]
 8006e1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006e22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006e26:	4259      	negs	r1, r3
 8006e28:	4159      	adcs	r1, r3
 8006e2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e2e:	e7eb      	b.n	8006e08 <__swhatbuf_r+0x24>

08006e30 <__smakebuf_r>:
 8006e30:	898b      	ldrh	r3, [r1, #12]
 8006e32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e34:	079d      	lsls	r5, r3, #30
 8006e36:	4606      	mov	r6, r0
 8006e38:	460c      	mov	r4, r1
 8006e3a:	d507      	bpl.n	8006e4c <__smakebuf_r+0x1c>
 8006e3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006e40:	6023      	str	r3, [r4, #0]
 8006e42:	6123      	str	r3, [r4, #16]
 8006e44:	2301      	movs	r3, #1
 8006e46:	6163      	str	r3, [r4, #20]
 8006e48:	b003      	add	sp, #12
 8006e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e4c:	ab01      	add	r3, sp, #4
 8006e4e:	466a      	mov	r2, sp
 8006e50:	f7ff ffc8 	bl	8006de4 <__swhatbuf_r>
 8006e54:	9f00      	ldr	r7, [sp, #0]
 8006e56:	4605      	mov	r5, r0
 8006e58:	4639      	mov	r1, r7
 8006e5a:	4630      	mov	r0, r6
 8006e5c:	f7fd fbc0 	bl	80045e0 <_malloc_r>
 8006e60:	b948      	cbnz	r0, 8006e76 <__smakebuf_r+0x46>
 8006e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e66:	059a      	lsls	r2, r3, #22
 8006e68:	d4ee      	bmi.n	8006e48 <__smakebuf_r+0x18>
 8006e6a:	f023 0303 	bic.w	r3, r3, #3
 8006e6e:	f043 0302 	orr.w	r3, r3, #2
 8006e72:	81a3      	strh	r3, [r4, #12]
 8006e74:	e7e2      	b.n	8006e3c <__smakebuf_r+0xc>
 8006e76:	89a3      	ldrh	r3, [r4, #12]
 8006e78:	6020      	str	r0, [r4, #0]
 8006e7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e7e:	81a3      	strh	r3, [r4, #12]
 8006e80:	9b01      	ldr	r3, [sp, #4]
 8006e82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006e86:	b15b      	cbz	r3, 8006ea0 <__smakebuf_r+0x70>
 8006e88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e8c:	4630      	mov	r0, r6
 8006e8e:	f000 f81d 	bl	8006ecc <_isatty_r>
 8006e92:	b128      	cbz	r0, 8006ea0 <__smakebuf_r+0x70>
 8006e94:	89a3      	ldrh	r3, [r4, #12]
 8006e96:	f023 0303 	bic.w	r3, r3, #3
 8006e9a:	f043 0301 	orr.w	r3, r3, #1
 8006e9e:	81a3      	strh	r3, [r4, #12]
 8006ea0:	89a3      	ldrh	r3, [r4, #12]
 8006ea2:	431d      	orrs	r5, r3
 8006ea4:	81a5      	strh	r5, [r4, #12]
 8006ea6:	e7cf      	b.n	8006e48 <__smakebuf_r+0x18>

08006ea8 <_fstat_r>:
 8006ea8:	b538      	push	{r3, r4, r5, lr}
 8006eaa:	4d07      	ldr	r5, [pc, #28]	@ (8006ec8 <_fstat_r+0x20>)
 8006eac:	2300      	movs	r3, #0
 8006eae:	4604      	mov	r4, r0
 8006eb0:	4608      	mov	r0, r1
 8006eb2:	4611      	mov	r1, r2
 8006eb4:	602b      	str	r3, [r5, #0]
 8006eb6:	f7fb fc2f 	bl	8002718 <_fstat>
 8006eba:	1c43      	adds	r3, r0, #1
 8006ebc:	d102      	bne.n	8006ec4 <_fstat_r+0x1c>
 8006ebe:	682b      	ldr	r3, [r5, #0]
 8006ec0:	b103      	cbz	r3, 8006ec4 <_fstat_r+0x1c>
 8006ec2:	6023      	str	r3, [r4, #0]
 8006ec4:	bd38      	pop	{r3, r4, r5, pc}
 8006ec6:	bf00      	nop
 8006ec8:	20000370 	.word	0x20000370

08006ecc <_isatty_r>:
 8006ecc:	b538      	push	{r3, r4, r5, lr}
 8006ece:	4d06      	ldr	r5, [pc, #24]	@ (8006ee8 <_isatty_r+0x1c>)
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	4604      	mov	r4, r0
 8006ed4:	4608      	mov	r0, r1
 8006ed6:	602b      	str	r3, [r5, #0]
 8006ed8:	f7fb fc2e 	bl	8002738 <_isatty>
 8006edc:	1c43      	adds	r3, r0, #1
 8006ede:	d102      	bne.n	8006ee6 <_isatty_r+0x1a>
 8006ee0:	682b      	ldr	r3, [r5, #0]
 8006ee2:	b103      	cbz	r3, 8006ee6 <_isatty_r+0x1a>
 8006ee4:	6023      	str	r3, [r4, #0]
 8006ee6:	bd38      	pop	{r3, r4, r5, pc}
 8006ee8:	20000370 	.word	0x20000370

08006eec <_init>:
 8006eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eee:	bf00      	nop
 8006ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ef2:	bc08      	pop	{r3}
 8006ef4:	469e      	mov	lr, r3
 8006ef6:	4770      	bx	lr

08006ef8 <_fini>:
 8006ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006efa:	bf00      	nop
 8006efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006efe:	bc08      	pop	{r3}
 8006f00:	469e      	mov	lr, r3
 8006f02:	4770      	bx	lr
