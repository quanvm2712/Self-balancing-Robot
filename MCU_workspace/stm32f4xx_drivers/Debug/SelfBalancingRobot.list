
SelfBalancingRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078ec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  08007a80  08007a80  00008a80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007eec  08007eec  000091e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007eec  08007eec  00008eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ef4  08007ef4  000091e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ef4  08007ef4  00008ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ef8  08007ef8  00008ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08007efc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091e0  2**0
                  CONTENTS
 10 .bss          000001f4  200001e0  200001e0  000091e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200003d4  200003d4  000091e0  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000091e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003c56  00000000  00000000  0000920a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000e76  00000000  00000000  0000ce60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000460  00000000  00000000  0000dcd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000338  00000000  00000000  0000e138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000045fb  00000000  00000000  0000e470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005d92  00000000  00000000  00012a6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000f8a2  00000000  00000000  000187fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0002809f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000282c  00000000  00000000  000280e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0002a910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007a64 	.word	0x08007a64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08007a64 	.word	0x08007a64

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_frsub>:
 8000c88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c8c:	e002      	b.n	8000c94 <__addsf3>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_fsub>:
 8000c90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c94 <__addsf3>:
 8000c94:	0042      	lsls	r2, r0, #1
 8000c96:	bf1f      	itttt	ne
 8000c98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c9c:	ea92 0f03 	teqne	r2, r3
 8000ca0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ca4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca8:	d06a      	beq.n	8000d80 <__addsf3+0xec>
 8000caa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cb2:	bfc1      	itttt	gt
 8000cb4:	18d2      	addgt	r2, r2, r3
 8000cb6:	4041      	eorgt	r1, r0
 8000cb8:	4048      	eorgt	r0, r1
 8000cba:	4041      	eorgt	r1, r0
 8000cbc:	bfb8      	it	lt
 8000cbe:	425b      	neglt	r3, r3
 8000cc0:	2b19      	cmp	r3, #25
 8000cc2:	bf88      	it	hi
 8000cc4:	4770      	bxhi	lr
 8000cc6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cce:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000cd2:	bf18      	it	ne
 8000cd4:	4240      	negne	r0, r0
 8000cd6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cda:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cde:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4249      	negne	r1, r1
 8000ce6:	ea92 0f03 	teq	r2, r3
 8000cea:	d03f      	beq.n	8000d6c <__addsf3+0xd8>
 8000cec:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cf4:	eb10 000c 	adds.w	r0, r0, ip
 8000cf8:	f1c3 0320 	rsb	r3, r3, #32
 8000cfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000d00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__addsf3+0x78>
 8000d06:	4249      	negs	r1, r1
 8000d08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d10:	d313      	bcc.n	8000d3a <__addsf3+0xa6>
 8000d12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d16:	d306      	bcc.n	8000d26 <__addsf3+0x92>
 8000d18:	0840      	lsrs	r0, r0, #1
 8000d1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d1e:	f102 0201 	add.w	r2, r2, #1
 8000d22:	2afe      	cmp	r2, #254	@ 0xfe
 8000d24:	d251      	bcs.n	8000dca <__addsf3+0x136>
 8000d26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d2e:	bf08      	it	eq
 8000d30:	f020 0001 	biceq.w	r0, r0, #1
 8000d34:	ea40 0003 	orr.w	r0, r0, r3
 8000d38:	4770      	bx	lr
 8000d3a:	0049      	lsls	r1, r1, #1
 8000d3c:	eb40 0000 	adc.w	r0, r0, r0
 8000d40:	3a01      	subs	r2, #1
 8000d42:	bf28      	it	cs
 8000d44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d48:	d2ed      	bcs.n	8000d26 <__addsf3+0x92>
 8000d4a:	fab0 fc80 	clz	ip, r0
 8000d4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d52:	ebb2 020c 	subs.w	r2, r2, ip
 8000d56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d5a:	bfaa      	itet	ge
 8000d5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d60:	4252      	neglt	r2, r2
 8000d62:	4318      	orrge	r0, r3
 8000d64:	bfbc      	itt	lt
 8000d66:	40d0      	lsrlt	r0, r2
 8000d68:	4318      	orrlt	r0, r3
 8000d6a:	4770      	bx	lr
 8000d6c:	f092 0f00 	teq	r2, #0
 8000d70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d74:	bf06      	itte	eq
 8000d76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d7a:	3201      	addeq	r2, #1
 8000d7c:	3b01      	subne	r3, #1
 8000d7e:	e7b5      	b.n	8000cec <__addsf3+0x58>
 8000d80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d88:	bf18      	it	ne
 8000d8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d8e:	d021      	beq.n	8000dd4 <__addsf3+0x140>
 8000d90:	ea92 0f03 	teq	r2, r3
 8000d94:	d004      	beq.n	8000da0 <__addsf3+0x10c>
 8000d96:	f092 0f00 	teq	r2, #0
 8000d9a:	bf08      	it	eq
 8000d9c:	4608      	moveq	r0, r1
 8000d9e:	4770      	bx	lr
 8000da0:	ea90 0f01 	teq	r0, r1
 8000da4:	bf1c      	itt	ne
 8000da6:	2000      	movne	r0, #0
 8000da8:	4770      	bxne	lr
 8000daa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dae:	d104      	bne.n	8000dba <__addsf3+0x126>
 8000db0:	0040      	lsls	r0, r0, #1
 8000db2:	bf28      	it	cs
 8000db4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dbe:	bf3c      	itt	cc
 8000dc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000dc4:	4770      	bxcc	lr
 8000dc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000dca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd2:	4770      	bx	lr
 8000dd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dd8:	bf16      	itet	ne
 8000dda:	4608      	movne	r0, r1
 8000ddc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de0:	4601      	movne	r1, r0
 8000de2:	0242      	lsls	r2, r0, #9
 8000de4:	bf06      	itte	eq
 8000de6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dea:	ea90 0f01 	teqeq	r0, r1
 8000dee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_ui2f>:
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e004      	b.n	8000e04 <__aeabi_i2f+0x8>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_i2f>:
 8000dfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e00:	bf48      	it	mi
 8000e02:	4240      	negmi	r0, r0
 8000e04:	ea5f 0c00 	movs.w	ip, r0
 8000e08:	bf08      	it	eq
 8000e0a:	4770      	bxeq	lr
 8000e0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e10:	4601      	mov	r1, r0
 8000e12:	f04f 0000 	mov.w	r0, #0
 8000e16:	e01c      	b.n	8000e52 <__aeabi_l2f+0x2a>

08000e18 <__aeabi_ul2f>:
 8000e18:	ea50 0201 	orrs.w	r2, r0, r1
 8000e1c:	bf08      	it	eq
 8000e1e:	4770      	bxeq	lr
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	e00a      	b.n	8000e3c <__aeabi_l2f+0x14>
 8000e26:	bf00      	nop

08000e28 <__aeabi_l2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e34:	d502      	bpl.n	8000e3c <__aeabi_l2f+0x14>
 8000e36:	4240      	negs	r0, r0
 8000e38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e3c:	ea5f 0c01 	movs.w	ip, r1
 8000e40:	bf02      	ittt	eq
 8000e42:	4684      	moveq	ip, r0
 8000e44:	4601      	moveq	r1, r0
 8000e46:	2000      	moveq	r0, #0
 8000e48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e4c:	bf08      	it	eq
 8000e4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e56:	fabc f28c 	clz	r2, ip
 8000e5a:	3a08      	subs	r2, #8
 8000e5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e60:	db10      	blt.n	8000e84 <__aeabi_l2f+0x5c>
 8000e62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e66:	4463      	add	r3, ip
 8000e68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6c:	f1c2 0220 	rsb	r2, r2, #32
 8000e70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e74:	fa20 f202 	lsr.w	r2, r0, r2
 8000e78:	eb43 0002 	adc.w	r0, r3, r2
 8000e7c:	bf08      	it	eq
 8000e7e:	f020 0001 	biceq.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	f102 0220 	add.w	r2, r2, #32
 8000e88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e94:	fa21 f202 	lsr.w	r2, r1, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_fmul>:
 8000ea4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ea8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eac:	bf1e      	ittt	ne
 8000eae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eb2:	ea92 0f0c 	teqne	r2, ip
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d06f      	beq.n	8000f9c <__aeabi_fmul+0xf8>
 8000ebc:	441a      	add	r2, r3
 8000ebe:	ea80 0c01 	eor.w	ip, r0, r1
 8000ec2:	0240      	lsls	r0, r0, #9
 8000ec4:	bf18      	it	ne
 8000ec6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000eca:	d01e      	beq.n	8000f0a <__aeabi_fmul+0x66>
 8000ecc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000ed0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ed4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ed8:	fba0 3101 	umull	r3, r1, r0, r1
 8000edc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ee4:	bf3e      	ittt	cc
 8000ee6:	0049      	lslcc	r1, r1, #1
 8000ee8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000eec:	005b      	lslcc	r3, r3, #1
 8000eee:	ea40 0001 	orr.w	r0, r0, r1
 8000ef2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000ef6:	2afd      	cmp	r2, #253	@ 0xfd
 8000ef8:	d81d      	bhi.n	8000f36 <__aeabi_fmul+0x92>
 8000efa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000efe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f02:	bf08      	it	eq
 8000f04:	f020 0001 	biceq.w	r0, r0, #1
 8000f08:	4770      	bx	lr
 8000f0a:	f090 0f00 	teq	r0, #0
 8000f0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f12:	bf08      	it	eq
 8000f14:	0249      	lsleq	r1, r1, #9
 8000f16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000f1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000f20:	bfc2      	ittt	gt
 8000f22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f2a:	4770      	bxgt	lr
 8000f2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f30:	f04f 0300 	mov.w	r3, #0
 8000f34:	3a01      	subs	r2, #1
 8000f36:	dc5d      	bgt.n	8000ff4 <__aeabi_fmul+0x150>
 8000f38:	f112 0f19 	cmn.w	r2, #25
 8000f3c:	bfdc      	itt	le
 8000f3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000f42:	4770      	bxle	lr
 8000f44:	f1c2 0200 	rsb	r2, r2, #0
 8000f48:	0041      	lsls	r1, r0, #1
 8000f4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000f4e:	f1c2 0220 	rsb	r2, r2, #32
 8000f52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f5a:	f140 0000 	adc.w	r0, r0, #0
 8000f5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f62:	bf08      	it	eq
 8000f64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f68:	4770      	bx	lr
 8000f6a:	f092 0f00 	teq	r2, #0
 8000f6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f72:	bf02      	ittt	eq
 8000f74:	0040      	lsleq	r0, r0, #1
 8000f76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f7a:	3a01      	subeq	r2, #1
 8000f7c:	d0f9      	beq.n	8000f72 <__aeabi_fmul+0xce>
 8000f7e:	ea40 000c 	orr.w	r0, r0, ip
 8000f82:	f093 0f00 	teq	r3, #0
 8000f86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f8a:	bf02      	ittt	eq
 8000f8c:	0049      	lsleq	r1, r1, #1
 8000f8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f92:	3b01      	subeq	r3, #1
 8000f94:	d0f9      	beq.n	8000f8a <__aeabi_fmul+0xe6>
 8000f96:	ea41 010c 	orr.w	r1, r1, ip
 8000f9a:	e78f      	b.n	8000ebc <__aeabi_fmul+0x18>
 8000f9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fa0:	ea92 0f0c 	teq	r2, ip
 8000fa4:	bf18      	it	ne
 8000fa6:	ea93 0f0c 	teqne	r3, ip
 8000faa:	d00a      	beq.n	8000fc2 <__aeabi_fmul+0x11e>
 8000fac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fb0:	bf18      	it	ne
 8000fb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fb6:	d1d8      	bne.n	8000f6a <__aeabi_fmul+0xc6>
 8000fb8:	ea80 0001 	eor.w	r0, r0, r1
 8000fbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000fc0:	4770      	bx	lr
 8000fc2:	f090 0f00 	teq	r0, #0
 8000fc6:	bf17      	itett	ne
 8000fc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000fcc:	4608      	moveq	r0, r1
 8000fce:	f091 0f00 	teqne	r1, #0
 8000fd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000fd6:	d014      	beq.n	8001002 <__aeabi_fmul+0x15e>
 8000fd8:	ea92 0f0c 	teq	r2, ip
 8000fdc:	d101      	bne.n	8000fe2 <__aeabi_fmul+0x13e>
 8000fde:	0242      	lsls	r2, r0, #9
 8000fe0:	d10f      	bne.n	8001002 <__aeabi_fmul+0x15e>
 8000fe2:	ea93 0f0c 	teq	r3, ip
 8000fe6:	d103      	bne.n	8000ff0 <__aeabi_fmul+0x14c>
 8000fe8:	024b      	lsls	r3, r1, #9
 8000fea:	bf18      	it	ne
 8000fec:	4608      	movne	r0, r1
 8000fee:	d108      	bne.n	8001002 <__aeabi_fmul+0x15e>
 8000ff0:	ea80 0001 	eor.w	r0, r0, r1
 8000ff4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ff8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ffc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001000:	4770      	bx	lr
 8001002:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8001006:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800100a:	4770      	bx	lr

0800100c <__aeabi_fdiv>:
 800100c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8001010:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8001014:	bf1e      	ittt	ne
 8001016:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800101a:	ea92 0f0c 	teqne	r2, ip
 800101e:	ea93 0f0c 	teqne	r3, ip
 8001022:	d069      	beq.n	80010f8 <__aeabi_fdiv+0xec>
 8001024:	eba2 0203 	sub.w	r2, r2, r3
 8001028:	ea80 0c01 	eor.w	ip, r0, r1
 800102c:	0249      	lsls	r1, r1, #9
 800102e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8001032:	d037      	beq.n	80010a4 <__aeabi_fdiv+0x98>
 8001034:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001038:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800103c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001040:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8001044:	428b      	cmp	r3, r1
 8001046:	bf38      	it	cc
 8001048:	005b      	lslcc	r3, r3, #1
 800104a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 800104e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8001052:	428b      	cmp	r3, r1
 8001054:	bf24      	itt	cs
 8001056:	1a5b      	subcs	r3, r3, r1
 8001058:	ea40 000c 	orrcs.w	r0, r0, ip
 800105c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001060:	bf24      	itt	cs
 8001062:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001066:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800106a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800106e:	bf24      	itt	cs
 8001070:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001074:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001078:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800107c:	bf24      	itt	cs
 800107e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001082:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001086:	011b      	lsls	r3, r3, #4
 8001088:	bf18      	it	ne
 800108a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800108e:	d1e0      	bne.n	8001052 <__aeabi_fdiv+0x46>
 8001090:	2afd      	cmp	r2, #253	@ 0xfd
 8001092:	f63f af50 	bhi.w	8000f36 <__aeabi_fmul+0x92>
 8001096:	428b      	cmp	r3, r1
 8001098:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800109c:	bf08      	it	eq
 800109e:	f020 0001 	biceq.w	r0, r0, #1
 80010a2:	4770      	bx	lr
 80010a4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80010a8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80010ac:	327f      	adds	r2, #127	@ 0x7f
 80010ae:	bfc2      	ittt	gt
 80010b0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80010b4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80010b8:	4770      	bxgt	lr
 80010ba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80010be:	f04f 0300 	mov.w	r3, #0
 80010c2:	3a01      	subs	r2, #1
 80010c4:	e737      	b.n	8000f36 <__aeabi_fmul+0x92>
 80010c6:	f092 0f00 	teq	r2, #0
 80010ca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80010ce:	bf02      	ittt	eq
 80010d0:	0040      	lsleq	r0, r0, #1
 80010d2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80010d6:	3a01      	subeq	r2, #1
 80010d8:	d0f9      	beq.n	80010ce <__aeabi_fdiv+0xc2>
 80010da:	ea40 000c 	orr.w	r0, r0, ip
 80010de:	f093 0f00 	teq	r3, #0
 80010e2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80010e6:	bf02      	ittt	eq
 80010e8:	0049      	lsleq	r1, r1, #1
 80010ea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80010ee:	3b01      	subeq	r3, #1
 80010f0:	d0f9      	beq.n	80010e6 <__aeabi_fdiv+0xda>
 80010f2:	ea41 010c 	orr.w	r1, r1, ip
 80010f6:	e795      	b.n	8001024 <__aeabi_fdiv+0x18>
 80010f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010fc:	ea92 0f0c 	teq	r2, ip
 8001100:	d108      	bne.n	8001114 <__aeabi_fdiv+0x108>
 8001102:	0242      	lsls	r2, r0, #9
 8001104:	f47f af7d 	bne.w	8001002 <__aeabi_fmul+0x15e>
 8001108:	ea93 0f0c 	teq	r3, ip
 800110c:	f47f af70 	bne.w	8000ff0 <__aeabi_fmul+0x14c>
 8001110:	4608      	mov	r0, r1
 8001112:	e776      	b.n	8001002 <__aeabi_fmul+0x15e>
 8001114:	ea93 0f0c 	teq	r3, ip
 8001118:	d104      	bne.n	8001124 <__aeabi_fdiv+0x118>
 800111a:	024b      	lsls	r3, r1, #9
 800111c:	f43f af4c 	beq.w	8000fb8 <__aeabi_fmul+0x114>
 8001120:	4608      	mov	r0, r1
 8001122:	e76e      	b.n	8001002 <__aeabi_fmul+0x15e>
 8001124:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001128:	bf18      	it	ne
 800112a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800112e:	d1ca      	bne.n	80010c6 <__aeabi_fdiv+0xba>
 8001130:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001134:	f47f af5c 	bne.w	8000ff0 <__aeabi_fmul+0x14c>
 8001138:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800113c:	f47f af3c 	bne.w	8000fb8 <__aeabi_fmul+0x114>
 8001140:	e75f      	b.n	8001002 <__aeabi_fmul+0x15e>
 8001142:	bf00      	nop

08001144 <__gesf2>:
 8001144:	f04f 3cff 	mov.w	ip, #4294967295
 8001148:	e006      	b.n	8001158 <__cmpsf2+0x4>
 800114a:	bf00      	nop

0800114c <__lesf2>:
 800114c:	f04f 0c01 	mov.w	ip, #1
 8001150:	e002      	b.n	8001158 <__cmpsf2+0x4>
 8001152:	bf00      	nop

08001154 <__cmpsf2>:
 8001154:	f04f 0c01 	mov.w	ip, #1
 8001158:	f84d cd04 	str.w	ip, [sp, #-4]!
 800115c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001160:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001164:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001168:	bf18      	it	ne
 800116a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800116e:	d011      	beq.n	8001194 <__cmpsf2+0x40>
 8001170:	b001      	add	sp, #4
 8001172:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001176:	bf18      	it	ne
 8001178:	ea90 0f01 	teqne	r0, r1
 800117c:	bf58      	it	pl
 800117e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001182:	bf88      	it	hi
 8001184:	17c8      	asrhi	r0, r1, #31
 8001186:	bf38      	it	cc
 8001188:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800118c:	bf18      	it	ne
 800118e:	f040 0001 	orrne.w	r0, r0, #1
 8001192:	4770      	bx	lr
 8001194:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001198:	d102      	bne.n	80011a0 <__cmpsf2+0x4c>
 800119a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800119e:	d105      	bne.n	80011ac <__cmpsf2+0x58>
 80011a0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80011a4:	d1e4      	bne.n	8001170 <__cmpsf2+0x1c>
 80011a6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80011aa:	d0e1      	beq.n	8001170 <__cmpsf2+0x1c>
 80011ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop

080011b4 <__aeabi_cfrcmple>:
 80011b4:	4684      	mov	ip, r0
 80011b6:	4608      	mov	r0, r1
 80011b8:	4661      	mov	r1, ip
 80011ba:	e7ff      	b.n	80011bc <__aeabi_cfcmpeq>

080011bc <__aeabi_cfcmpeq>:
 80011bc:	b50f      	push	{r0, r1, r2, r3, lr}
 80011be:	f7ff ffc9 	bl	8001154 <__cmpsf2>
 80011c2:	2800      	cmp	r0, #0
 80011c4:	bf48      	it	mi
 80011c6:	f110 0f00 	cmnmi.w	r0, #0
 80011ca:	bd0f      	pop	{r0, r1, r2, r3, pc}

080011cc <__aeabi_fcmpeq>:
 80011cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d0:	f7ff fff4 	bl	80011bc <__aeabi_cfcmpeq>
 80011d4:	bf0c      	ite	eq
 80011d6:	2001      	moveq	r0, #1
 80011d8:	2000      	movne	r0, #0
 80011da:	f85d fb08 	ldr.w	pc, [sp], #8
 80011de:	bf00      	nop

080011e0 <__aeabi_fcmplt>:
 80011e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011e4:	f7ff ffea 	bl	80011bc <__aeabi_cfcmpeq>
 80011e8:	bf34      	ite	cc
 80011ea:	2001      	movcc	r0, #1
 80011ec:	2000      	movcs	r0, #0
 80011ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80011f2:	bf00      	nop

080011f4 <__aeabi_fcmple>:
 80011f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011f8:	f7ff ffe0 	bl	80011bc <__aeabi_cfcmpeq>
 80011fc:	bf94      	ite	ls
 80011fe:	2001      	movls	r0, #1
 8001200:	2000      	movhi	r0, #0
 8001202:	f85d fb08 	ldr.w	pc, [sp], #8
 8001206:	bf00      	nop

08001208 <__aeabi_fcmpge>:
 8001208:	f84d ed08 	str.w	lr, [sp, #-8]!
 800120c:	f7ff ffd2 	bl	80011b4 <__aeabi_cfrcmple>
 8001210:	bf94      	ite	ls
 8001212:	2001      	movls	r0, #1
 8001214:	2000      	movhi	r0, #0
 8001216:	f85d fb08 	ldr.w	pc, [sp], #8
 800121a:	bf00      	nop

0800121c <__aeabi_fcmpgt>:
 800121c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001220:	f7ff ffc8 	bl	80011b4 <__aeabi_cfrcmple>
 8001224:	bf34      	ite	cc
 8001226:	2001      	movcc	r0, #1
 8001228:	2000      	movcs	r0, #0
 800122a:	f85d fb08 	ldr.w	pc, [sp], #8
 800122e:	bf00      	nop

08001230 <__aeabi_fcmpun>:
 8001230:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001234:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001238:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800123c:	d102      	bne.n	8001244 <__aeabi_fcmpun+0x14>
 800123e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001242:	d108      	bne.n	8001256 <__aeabi_fcmpun+0x26>
 8001244:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001248:	d102      	bne.n	8001250 <__aeabi_fcmpun+0x20>
 800124a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800124e:	d102      	bne.n	8001256 <__aeabi_fcmpun+0x26>
 8001250:	f04f 0000 	mov.w	r0, #0
 8001254:	4770      	bx	lr
 8001256:	f04f 0001 	mov.w	r0, #1
 800125a:	4770      	bx	lr

0800125c <__aeabi_d2lz>:
 800125c:	b538      	push	{r3, r4, r5, lr}
 800125e:	2200      	movs	r2, #0
 8001260:	2300      	movs	r3, #0
 8001262:	4604      	mov	r4, r0
 8001264:	460d      	mov	r5, r1
 8001266:	f7ff fc39 	bl	8000adc <__aeabi_dcmplt>
 800126a:	b928      	cbnz	r0, 8001278 <__aeabi_d2lz+0x1c>
 800126c:	4620      	mov	r0, r4
 800126e:	4629      	mov	r1, r5
 8001270:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001274:	f000 b80a 	b.w	800128c <__aeabi_d2ulz>
 8001278:	4620      	mov	r0, r4
 800127a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800127e:	f000 f805 	bl	800128c <__aeabi_d2ulz>
 8001282:	4240      	negs	r0, r0
 8001284:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001288:	bd38      	pop	{r3, r4, r5, pc}
 800128a:	bf00      	nop

0800128c <__aeabi_d2ulz>:
 800128c:	b5d0      	push	{r4, r6, r7, lr}
 800128e:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <__aeabi_d2ulz+0x34>)
 8001290:	2200      	movs	r2, #0
 8001292:	4606      	mov	r6, r0
 8001294:	460f      	mov	r7, r1
 8001296:	f7ff f9af 	bl	80005f8 <__aeabi_dmul>
 800129a:	f7ff fc85 	bl	8000ba8 <__aeabi_d2uiz>
 800129e:	4604      	mov	r4, r0
 80012a0:	f7ff f930 	bl	8000504 <__aeabi_ui2d>
 80012a4:	4b07      	ldr	r3, [pc, #28]	@ (80012c4 <__aeabi_d2ulz+0x38>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	f7ff f9a6 	bl	80005f8 <__aeabi_dmul>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4630      	mov	r0, r6
 80012b2:	4639      	mov	r1, r7
 80012b4:	f7fe ffe8 	bl	8000288 <__aeabi_dsub>
 80012b8:	f7ff fc76 	bl	8000ba8 <__aeabi_d2uiz>
 80012bc:	4621      	mov	r1, r4
 80012be:	bdd0      	pop	{r4, r6, r7, pc}
 80012c0:	3df00000 	.word	0x3df00000
 80012c4:	41f00000 	.word	0x41f00000

080012c8 <main>:
//			test = MPU6050_GetAngle(&converted_data);
//		}
//	}
//}

int main(void){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af04      	add	r7, sp, #16

  //Init TIM2 as PWM output.
  TIM_PWM_Init(TIM2, TIM_CHANNEL_1);
 80012ce:	2100      	movs	r1, #0
 80012d0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80012d4:	f001 f9dc 	bl	8002690 <TIM_PWM_Init>
  TIM_SetConfigPWM(TIM2, TIM_COUNTERMODE_UP, TIM_CHANNEL_1, TIM_OC_POLARITY_HIGH, 15, 999, 0, TIM_OCMODE_PWM1);
 80012d8:	2306      	movs	r3, #6
 80012da:	9303      	str	r3, [sp, #12]
 80012dc:	2300      	movs	r3, #0
 80012de:	9302      	str	r3, [sp, #8]
 80012e0:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	230f      	movs	r3, #15
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	2300      	movs	r3, #0
 80012ec:	2200      	movs	r2, #0
 80012ee:	2100      	movs	r1, #0
 80012f0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80012f4:	f001 f940 	bl	8002578 <TIM_SetConfigPWM>
  uint16_t DutyCycle = 500;
 80012f8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80012fc:	80fb      	strh	r3, [r7, #6]


  I2C1_Init(&hi2c1);
 80012fe:	481b      	ldr	r0, [pc, #108]	@ (800136c <main+0xa4>)
 8001300:	f000 fc34 	bl	8001b6c <I2C1_Init>
  if (MPU6050_Init(&hi2c1) != I2C_OK)
 8001304:	4819      	ldr	r0, [pc, #100]	@ (800136c <main+0xa4>)
 8001306:	f001 fbc0 	bl	8002a8a <MPU6050_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <main+0x4c>
  {
	  Error_Handler();
 8001310:	f000 f834 	bl	800137c <Error_Handler>
  }
  MPU6050_CalibGyro();
 8001314:	f001 fc6a 	bl	8002bec <MPU6050_CalibGyro>


  //Init systick to use delay function
  SysTick_Init();
 8001318:	f000 f946 	bl	80015a8 <SysTick_Init>

  while(1){
      //Control signal to L298N driver
      TIM_SetConfigPWM(TIM2, TIM_COUNTERMODE_UP, TIM_CHANNEL_1, TIM_OC_POLARITY_HIGH, 15, 999, DutyCycle, TIM_OCMODE_PWM1);
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	2206      	movs	r2, #6
 8001320:	9203      	str	r2, [sp, #12]
 8001322:	9302      	str	r3, [sp, #8]
 8001324:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001328:	9301      	str	r3, [sp, #4]
 800132a:	230f      	movs	r3, #15
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	2300      	movs	r3, #0
 8001330:	2200      	movs	r2, #0
 8001332:	2100      	movs	r1, #0
 8001334:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001338:	f001 f91e 	bl	8002578 <TIM_SetConfigPWM>

      //Read MPU pitch data from Gyroscope and Acclerometer, and convert to degree.
      if(MPU6050_ReadData(&hi2c1, &sensor_data) == I2C_OK){
 800133c:	490c      	ldr	r1, [pc, #48]	@ (8001370 <main+0xa8>)
 800133e:	480b      	ldr	r0, [pc, #44]	@ (800136c <main+0xa4>)
 8001340:	f001 fc00 	bl	8002b44 <MPU6050_ReadData>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10b      	bne.n	8001362 <main+0x9a>
	  MPU6050_ConvertData(&sensor_data, &converted_data);
 800134a:	490a      	ldr	r1, [pc, #40]	@ (8001374 <main+0xac>)
 800134c:	4808      	ldr	r0, [pc, #32]	@ (8001370 <main+0xa8>)
 800134e:	f001 fc9b 	bl	8002c88 <MPU6050_ConvertData>

	  //Combine the pitch data above using Complementary filter
	  MPU6050_Angle = MPU6050_GetAngle(&converted_data);
 8001352:	4808      	ldr	r0, [pc, #32]	@ (8001374 <main+0xac>)
 8001354:	f001 fd28 	bl	8002da8 <MPU6050_GetAngle>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4906      	ldr	r1, [pc, #24]	@ (8001378 <main+0xb0>)
 800135e:	e9c1 2300 	strd	r2, r3, [r1]
      }




      Delay_ms(10);
 8001362:	200a      	movs	r0, #10
 8001364:	f000 f952 	bl	800160c <Delay_ms>
      TIM_SetConfigPWM(TIM2, TIM_COUNTERMODE_UP, TIM_CHANNEL_1, TIM_OC_POLARITY_HIGH, 15, 999, DutyCycle, TIM_OCMODE_PWM1);
 8001368:	e7d8      	b.n	800131c <main+0x54>
 800136a:	bf00      	nop
 800136c:	200001fc 	.word	0x200001fc
 8001370:	20000224 	.word	0x20000224
 8001374:	20000230 	.word	0x20000230
 8001378:	20000260 	.word	0x20000260

0800137c <Error_Handler>:

  return 0;
}

void Error_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
	while(1);
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <Error_Handler+0x4>

08001384 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return 1;
 8001388:	2301      	movs	r3, #1
}
 800138a:	4618      	mov	r0, r3
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr

08001392 <_kill>:

int _kill(int pid, int sig)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800139c:	f002 fdd6 	bl	8003f4c <__errno>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2216      	movs	r2, #22
 80013a4:	601a      	str	r2, [r3, #0]
  return -1;
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <_exit>:

void _exit (int status)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013ba:	f04f 31ff 	mov.w	r1, #4294967295
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ffe7 	bl	8001392 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <_exit+0x12>

080013c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	e00a      	b.n	80013f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013da:	f3af 8000 	nop.w
 80013de:	4601      	mov	r1, r0
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	1c5a      	adds	r2, r3, #1
 80013e4:	60ba      	str	r2, [r7, #8]
 80013e6:	b2ca      	uxtb	r2, r1
 80013e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	3301      	adds	r3, #1
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	dbf0      	blt.n	80013da <_read+0x12>
  }

  return len;
 80013f8:	687b      	ldr	r3, [r7, #4]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b086      	sub	sp, #24
 8001406:	af00      	add	r7, sp, #0
 8001408:	60f8      	str	r0, [r7, #12]
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	e009      	b.n	8001428 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	60ba      	str	r2, [r7, #8]
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	3301      	adds	r3, #1
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	429a      	cmp	r2, r3
 800142e:	dbf1      	blt.n	8001414 <_write+0x12>
  }
  return len;
 8001430:	687b      	ldr	r3, [r7, #4]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <_close>:

int _close(int file)
{
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001446:	4618      	mov	r0, r3
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001460:	605a      	str	r2, [r3, #4]
  return 0;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr

0800146e <_isatty>:

int _isatty(int file)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001476:	2301      	movs	r3, #1
}
 8001478:	4618      	mov	r0, r3
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr

08001482 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001482:	b480      	push	{r7}
 8001484:	b085      	sub	sp, #20
 8001486:	af00      	add	r7, sp, #0
 8001488:	60f8      	str	r0, [r7, #12]
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr
	...

0800149c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a4:	4a14      	ldr	r2, [pc, #80]	@ (80014f8 <_sbrk+0x5c>)
 80014a6:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <_sbrk+0x60>)
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b0:	4b13      	ldr	r3, [pc, #76]	@ (8001500 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d102      	bne.n	80014be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b8:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <_sbrk+0x64>)
 80014ba:	4a12      	ldr	r2, [pc, #72]	@ (8001504 <_sbrk+0x68>)
 80014bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014be:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <_sbrk+0x64>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d207      	bcs.n	80014dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014cc:	f002 fd3e 	bl	8003f4c <__errno>
 80014d0:	4603      	mov	r3, r0
 80014d2:	220c      	movs	r2, #12
 80014d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295
 80014da:	e009      	b.n	80014f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014dc:	4b08      	ldr	r3, [pc, #32]	@ (8001500 <_sbrk+0x64>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014e2:	4b07      	ldr	r3, [pc, #28]	@ (8001500 <_sbrk+0x64>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	4a05      	ldr	r2, [pc, #20]	@ (8001500 <_sbrk+0x64>)
 80014ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ee:	68fb      	ldr	r3, [r7, #12]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20020000 	.word	0x20020000
 80014fc:	00000400 	.word	0x00000400
 8001500:	20000268 	.word	0x20000268
 8001504:	200003d8 	.word	0x200003d8

08001508 <SysTick_SetReloadValue>:
/**
 * @brief Set the SysTick reload value.
 * @param ReloadValue: The value to load into the STK_LOAD register (max 0x00FFFFFF).
 * @retval None
 */
void SysTick_SetReloadValue(uint32_t ReloadValue){
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	SYSTICK->STK_LOAD = ReloadValue;
 8001510:	4a03      	ldr	r2, [pc, #12]	@ (8001520 <SysTick_SetReloadValue+0x18>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6053      	str	r3, [r2, #4]
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	e000e010 	.word	0xe000e010

08001524 <SysTick_EnableCounter>:
/**
 * @brief Enable the SysTick counter.
 * @param None
 * @retval None
 */
void SysTick_EnableCounter(void){
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
	SYSTICK->STK_CTRL |= (1<<0);
 8001528:	4b04      	ldr	r3, [pc, #16]	@ (800153c <SysTick_EnableCounter+0x18>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a03      	ldr	r2, [pc, #12]	@ (800153c <SysTick_EnableCounter+0x18>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6013      	str	r3, [r2, #0]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	e000e010 	.word	0xe000e010

08001540 <SysTick_SelectClockSource>:
/**
 * @brief Select the clock source for SysTick.
 * @param ClockSource: 0 = external (AHB/8), 1 = internal (AHB).
 * @retval None
 */
void SysTick_SelectClockSource(_Bool ClockSource){
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
	SYSTICK->STK_CTRL &= ~(1 << 2);
 800154a:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <SysTick_SelectClockSource+0x30>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a08      	ldr	r2, [pc, #32]	@ (8001570 <SysTick_SelectClockSource+0x30>)
 8001550:	f023 0304 	bic.w	r3, r3, #4
 8001554:	6013      	str	r3, [r2, #0]
	SYSTICK->STK_CTRL |= ClockSource << 2;
 8001556:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <SysTick_SelectClockSource+0x30>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4904      	ldr	r1, [pc, #16]	@ (8001570 <SysTick_SelectClockSource+0x30>)
 8001560:	4313      	orrs	r3, r2
 8001562:	600b      	str	r3, [r1, #0]
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000e010 	.word	0xe000e010

08001574 <SysTick_InterruptConfig>:
/**
 * @brief Configure the SysTick interrupt.
 * @param IsInterruptEnaled: 1 = enable interrupt, 0 = disable interrupt.
 * @retval None
 */
void SysTick_InterruptConfig(_Bool IsInterruptEnaled){
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
	SYSTICK->STK_CTRL &= ~(1 << 1);
 800157e:	4b09      	ldr	r3, [pc, #36]	@ (80015a4 <SysTick_InterruptConfig+0x30>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a08      	ldr	r2, [pc, #32]	@ (80015a4 <SysTick_InterruptConfig+0x30>)
 8001584:	f023 0302 	bic.w	r3, r3, #2
 8001588:	6013      	str	r3, [r2, #0]
	SYSTICK->STK_CTRL |= (IsInterruptEnaled << 1);
 800158a:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <SysTick_InterruptConfig+0x30>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	4904      	ldr	r1, [pc, #16]	@ (80015a4 <SysTick_InterruptConfig+0x30>)
 8001594:	4313      	orrs	r3, r2
 8001596:	600b      	str	r3, [r1, #0]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000e010 	.word	0xe000e010

080015a8 <SysTick_Init>:
/**
 * @brief Initialize SysTick to generate an interrupt every 1 ms (assuming 16 MHz clock and AHB/8).
 * @param None
 * @retval None
 */
void SysTick_Init(void){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
	SysTick_SetReloadValue((ClockFreq / 1000) - 1);
 80015ac:	4b09      	ldr	r3, [pc, #36]	@ (80015d4 <SysTick_Init+0x2c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a09      	ldr	r2, [pc, #36]	@ (80015d8 <SysTick_Init+0x30>)
 80015b2:	fba2 2303 	umull	r2, r3, r2, r3
 80015b6:	099b      	lsrs	r3, r3, #6
 80015b8:	3b01      	subs	r3, #1
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff ffa4 	bl	8001508 <SysTick_SetReloadValue>
	//SysTick_ClearCounterValue();
	SysTick_SelectClockSource(SYSTICK_CLKSOURCE_AHB_DIV_8);
 80015c0:	2000      	movs	r0, #0
 80015c2:	f7ff ffbd 	bl	8001540 <SysTick_SelectClockSource>
	SysTick_InterruptConfig(SYSTICK_INTERRUPT_ENABLED);
 80015c6:	2001      	movs	r0, #1
 80015c8:	f7ff ffd4 	bl	8001574 <SysTick_InterruptConfig>

	SysTick_EnableCounter();
 80015cc:	f7ff ffaa 	bl	8001524 <SysTick_EnableCounter>
}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000000 	.word	0x20000000
 80015d8:	10624dd3 	.word	0x10624dd3

080015dc <getTick>:
/**
 * @brief Returns the current system tick count in milliseconds.
 * @param None
 * @retval Current tick value (in ms)
 */
uint32_t getTick(void){
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
	return ticks;
 80015e0:	4b02      	ldr	r3, [pc, #8]	@ (80015ec <getTick+0x10>)
 80015e2:	681b      	ldr	r3, [r3, #0]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr
 80015ec:	2000026c 	.word	0x2000026c

080015f0 <SysTick_Handler>:
 * @brief SysTick interrupt handler, called every 1 ms.
 * Increments the global tick counter.
 * @param None
 * @retval None
 */
void SysTick_Handler(void){
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
	ticks++;
 80015f4:	4b04      	ldr	r3, [pc, #16]	@ (8001608 <SysTick_Handler+0x18>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	3301      	adds	r3, #1
 80015fa:	4a03      	ldr	r2, [pc, #12]	@ (8001608 <SysTick_Handler+0x18>)
 80015fc:	6013      	str	r3, [r2, #0]
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	2000026c 	.word	0x2000026c

0800160c <Delay_ms>:
 * @brief Delays execution for the specified number of milliseconds.
 * Uses the system tick counter for timing.
 * @param ms: Number of milliseconds to delay
 * @retval None
 */
void Delay_ms(uint16_t ms){
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	80fb      	strh	r3, [r7, #6]
	uint32_t current_ticks = getTick();
 8001616:	f7ff ffe1 	bl	80015dc <getTick>
 800161a:	60f8      	str	r0, [r7, #12]
	while((uint32_t)(getTick() - current_ticks) < ms);
 800161c:	bf00      	nop
 800161e:	f7ff ffdd 	bl	80015dc <getTick>
 8001622:	4602      	mov	r2, r0
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	1ad2      	subs	r2, r2, r3
 8001628:	88fb      	ldrh	r3, [r7, #6]
 800162a:	429a      	cmp	r2, r3
 800162c:	d3f7      	bcc.n	800161e <Delay_ms+0x12>
}
 800162e:	bf00      	nop
 8001630:	bf00      	nop
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <GPIO_PeriClockControl>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral .
  * @param  clockState Specifies whether to ENABLE or DISABLE of the clock for the given GPIO peripheral.
  * @retval None
  */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t clockState)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	70fb      	strb	r3, [r7, #3]
    if (clockState == ENABLE) {
 8001644:	78fb      	ldrb	r3, [r7, #3]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d162      	bne.n	8001710 <GPIO_PeriClockControl+0xd8>
        if (pGPIOx == GPIOA) {
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a64      	ldr	r2, [pc, #400]	@ (80017e0 <GPIO_PeriClockControl+0x1a8>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d106      	bne.n	8001660 <GPIO_PeriClockControl+0x28>
            GPIOA_CLK_ENABLE();
 8001652:	4b64      	ldr	r3, [pc, #400]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	4a63      	ldr	r2, [pc, #396]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6313      	str	r3, [r2, #48]	@ 0x30
            GPIOH_CLK_DISABLE();
        }else if (pGPIOx == GPIOI) {
            GPIOI_CLK_DISABLE();
        }
    }
}
 800165e:	e0b9      	b.n	80017d4 <GPIO_PeriClockControl+0x19c>
        }else if (pGPIOx == GPIOB) {
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a61      	ldr	r2, [pc, #388]	@ (80017e8 <GPIO_PeriClockControl+0x1b0>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d106      	bne.n	8001676 <GPIO_PeriClockControl+0x3e>
            GPIOB_CLK_ENABLE();
 8001668:	4b5e      	ldr	r3, [pc, #376]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 800166a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166c:	4a5d      	ldr	r2, [pc, #372]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 800166e:	f043 0302 	orr.w	r3, r3, #2
 8001672:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001674:	e0ae      	b.n	80017d4 <GPIO_PeriClockControl+0x19c>
        }else if (pGPIOx == GPIOC) {
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a5c      	ldr	r2, [pc, #368]	@ (80017ec <GPIO_PeriClockControl+0x1b4>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d106      	bne.n	800168c <GPIO_PeriClockControl+0x54>
            GPIOC_CLK_ENABLE();
 800167e:	4b59      	ldr	r3, [pc, #356]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	4a58      	ldr	r2, [pc, #352]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800168a:	e0a3      	b.n	80017d4 <GPIO_PeriClockControl+0x19c>
        }else if (pGPIOx == GPIOD) {
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a58      	ldr	r2, [pc, #352]	@ (80017f0 <GPIO_PeriClockControl+0x1b8>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d106      	bne.n	80016a2 <GPIO_PeriClockControl+0x6a>
            GPIOD_CLK_ENABLE();
 8001694:	4b53      	ldr	r3, [pc, #332]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001698:	4a52      	ldr	r2, [pc, #328]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 800169a:	f043 0308 	orr.w	r3, r3, #8
 800169e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80016a0:	e098      	b.n	80017d4 <GPIO_PeriClockControl+0x19c>
        }else if (pGPIOx == GPIOE) {
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a53      	ldr	r2, [pc, #332]	@ (80017f4 <GPIO_PeriClockControl+0x1bc>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d106      	bne.n	80016b8 <GPIO_PeriClockControl+0x80>
            GPIOE_CLK_ENABLE();
 80016aa:	4b4e      	ldr	r3, [pc, #312]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	4a4d      	ldr	r2, [pc, #308]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 80016b0:	f043 0310 	orr.w	r3, r3, #16
 80016b4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80016b6:	e08d      	b.n	80017d4 <GPIO_PeriClockControl+0x19c>
        }else if (pGPIOx == GPIOF) {
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a4f      	ldr	r2, [pc, #316]	@ (80017f8 <GPIO_PeriClockControl+0x1c0>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d106      	bne.n	80016ce <GPIO_PeriClockControl+0x96>
            GPIOF_CLK_ENABLE();
 80016c0:	4b48      	ldr	r3, [pc, #288]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 80016c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c4:	4a47      	ldr	r2, [pc, #284]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 80016c6:	f043 0320 	orr.w	r3, r3, #32
 80016ca:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80016cc:	e082      	b.n	80017d4 <GPIO_PeriClockControl+0x19c>
        }else if (pGPIOx == GPIOG) {
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a4a      	ldr	r2, [pc, #296]	@ (80017fc <GPIO_PeriClockControl+0x1c4>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d106      	bne.n	80016e4 <GPIO_PeriClockControl+0xac>
            GPIOG_CLK_ENABLE();
 80016d6:	4b43      	ldr	r3, [pc, #268]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	4a42      	ldr	r2, [pc, #264]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 80016dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016e0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80016e2:	e077      	b.n	80017d4 <GPIO_PeriClockControl+0x19c>
        }else if (pGPIOx == GPIOH) {
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a46      	ldr	r2, [pc, #280]	@ (8001800 <GPIO_PeriClockControl+0x1c8>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d106      	bne.n	80016fa <GPIO_PeriClockControl+0xc2>
            GPIOH_CLK_ENABLE();
 80016ec:	4b3d      	ldr	r3, [pc, #244]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 80016ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f0:	4a3c      	ldr	r2, [pc, #240]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 80016f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016f6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80016f8:	e06c      	b.n	80017d4 <GPIO_PeriClockControl+0x19c>
        }else if (pGPIOx == GPIOI) {
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a41      	ldr	r2, [pc, #260]	@ (8001804 <GPIO_PeriClockControl+0x1cc>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d168      	bne.n	80017d4 <GPIO_PeriClockControl+0x19c>
            GPIOI_CLK_ENABLE();
 8001702:	4b38      	ldr	r3, [pc, #224]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	4a37      	ldr	r2, [pc, #220]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 8001708:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800170c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800170e:	e061      	b.n	80017d4 <GPIO_PeriClockControl+0x19c>
        if (pGPIOx == GPIOA) {
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a33      	ldr	r2, [pc, #204]	@ (80017e0 <GPIO_PeriClockControl+0x1a8>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d106      	bne.n	8001726 <GPIO_PeriClockControl+0xee>
            GPIOA_CLK_DISABLE();
 8001718:	4b32      	ldr	r3, [pc, #200]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 800171a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171c:	4a31      	ldr	r2, [pc, #196]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 800171e:	f023 0301 	bic.w	r3, r3, #1
 8001722:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001724:	e056      	b.n	80017d4 <GPIO_PeriClockControl+0x19c>
        }else if (pGPIOx == GPIOB) {
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a2f      	ldr	r2, [pc, #188]	@ (80017e8 <GPIO_PeriClockControl+0x1b0>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d106      	bne.n	800173c <GPIO_PeriClockControl+0x104>
            GPIOB_CLK_DISABLE();
 800172e:	4b2d      	ldr	r3, [pc, #180]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	4a2c      	ldr	r2, [pc, #176]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 8001734:	f023 0302 	bic.w	r3, r3, #2
 8001738:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800173a:	e04b      	b.n	80017d4 <GPIO_PeriClockControl+0x19c>
        }else if (pGPIOx == GPIOC) {
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a2b      	ldr	r2, [pc, #172]	@ (80017ec <GPIO_PeriClockControl+0x1b4>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d106      	bne.n	8001752 <GPIO_PeriClockControl+0x11a>
            GPIOC_CLK_DISABLE();
 8001744:	4b27      	ldr	r3, [pc, #156]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 8001746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001748:	4a26      	ldr	r2, [pc, #152]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 800174a:	f023 0304 	bic.w	r3, r3, #4
 800174e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001750:	e040      	b.n	80017d4 <GPIO_PeriClockControl+0x19c>
        }else if (pGPIOx == GPIOD) {
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a26      	ldr	r2, [pc, #152]	@ (80017f0 <GPIO_PeriClockControl+0x1b8>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d106      	bne.n	8001768 <GPIO_PeriClockControl+0x130>
            GPIOD_CLK_DISABLE();
 800175a:	4b22      	ldr	r3, [pc, #136]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	4a21      	ldr	r2, [pc, #132]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 8001760:	f023 0308 	bic.w	r3, r3, #8
 8001764:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001766:	e035      	b.n	80017d4 <GPIO_PeriClockControl+0x19c>
        }else if (pGPIOx == GPIOE) {
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a22      	ldr	r2, [pc, #136]	@ (80017f4 <GPIO_PeriClockControl+0x1bc>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d106      	bne.n	800177e <GPIO_PeriClockControl+0x146>
            GPIOE_CLK_DISABLE();
 8001770:	4b1c      	ldr	r3, [pc, #112]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 8001772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001774:	4a1b      	ldr	r2, [pc, #108]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 8001776:	f023 0310 	bic.w	r3, r3, #16
 800177a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800177c:	e02a      	b.n	80017d4 <GPIO_PeriClockControl+0x19c>
        }else if (pGPIOx == GPIOF) {
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a1d      	ldr	r2, [pc, #116]	@ (80017f8 <GPIO_PeriClockControl+0x1c0>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d106      	bne.n	8001794 <GPIO_PeriClockControl+0x15c>
            GPIOF_CLK_DISABLE();
 8001786:	4b17      	ldr	r3, [pc, #92]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	4a16      	ldr	r2, [pc, #88]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 800178c:	f023 0320 	bic.w	r3, r3, #32
 8001790:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001792:	e01f      	b.n	80017d4 <GPIO_PeriClockControl+0x19c>
        }else if (pGPIOx == GPIOG) {
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a19      	ldr	r2, [pc, #100]	@ (80017fc <GPIO_PeriClockControl+0x1c4>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d106      	bne.n	80017aa <GPIO_PeriClockControl+0x172>
            GPIOG_CLK_DISABLE();
 800179c:	4b11      	ldr	r3, [pc, #68]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 800179e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a0:	4a10      	ldr	r2, [pc, #64]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 80017a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80017a6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80017a8:	e014      	b.n	80017d4 <GPIO_PeriClockControl+0x19c>
        }else if (pGPIOx == GPIOH) {
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a14      	ldr	r2, [pc, #80]	@ (8001800 <GPIO_PeriClockControl+0x1c8>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d106      	bne.n	80017c0 <GPIO_PeriClockControl+0x188>
            GPIOH_CLK_DISABLE();
 80017b2:	4b0c      	ldr	r3, [pc, #48]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	4a0b      	ldr	r2, [pc, #44]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 80017b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80017bc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80017be:	e009      	b.n	80017d4 <GPIO_PeriClockControl+0x19c>
        }else if (pGPIOx == GPIOI) {
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a10      	ldr	r2, [pc, #64]	@ (8001804 <GPIO_PeriClockControl+0x1cc>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d105      	bne.n	80017d4 <GPIO_PeriClockControl+0x19c>
            GPIOI_CLK_DISABLE();
 80017c8:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 80017ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017cc:	4a05      	ldr	r2, [pc, #20]	@ (80017e4 <GPIO_PeriClockControl+0x1ac>)
 80017ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017d2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40020000 	.word	0x40020000
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020400 	.word	0x40020400
 80017ec:	40020800 	.word	0x40020800
 80017f0:	40020c00 	.word	0x40020c00
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40021400 	.word	0x40021400
 80017fc:	40021800 	.word	0x40021800
 8001800:	40021c00 	.word	0x40021c00
 8001804:	40022000 	.word	0x40022000

08001808 <GPIO_Init>:
  * @param  hGPIO pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_HandleTypeDef *hGPIO)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
    uint32_t temp;
    // Enable the clock peripheral
    GPIO_PeriClockControl(hGPIO->pGPIOx, ENABLE);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2101      	movs	r1, #1
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff ff0e 	bl	8001638 <GPIO_PeriClockControl>

    // 1. Configure mode
    if (hGPIO->Init.Mode <= GPIO_MODE_ANALOG) {
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	795b      	ldrb	r3, [r3, #5]
 8001820:	2b03      	cmp	r3, #3
 8001822:	d820      	bhi.n	8001866 <GPIO_Init+0x5e>
	    // The non interrupt mode
	    temp = (hGPIO->Init.Mode << (2 * hGPIO->Init.Pin));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	795b      	ldrb	r3, [r3, #5]
 8001828:	461a      	mov	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	791b      	ldrb	r3, [r3, #4]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	613b      	str	r3, [r7, #16]
	    hGPIO->pGPIOx->MODER &= ~(0x3 << (2 * hGPIO->Init.Pin)); // clearing
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	791b      	ldrb	r3, [r3, #4]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	2103      	movs	r1, #3
 8001844:	fa01 f303 	lsl.w	r3, r1, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	4619      	mov	r1, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	400a      	ands	r2, r1
 8001852:	601a      	str	r2, [r3, #0]
	    hGPIO->pGPIOx->MODER |= temp;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6819      	ldr	r1, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	430a      	orrs	r2, r1
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	e0e4      	b.n	8001a30 <GPIO_Init+0x228>
    }else {
	    // Interrupt mode
	    if (hGPIO->Init.Mode == GPIO_MODE_IT_FALLING) {
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	795b      	ldrb	r3, [r3, #5]
 800186a:	2b04      	cmp	r3, #4
 800186c:	d117      	bne.n	800189e <GPIO_Init+0x96>
		    // Configure the FTSR
		    EXTI->FTSR |= (1 << hGPIO->Init.Pin);
 800186e:	4b4b      	ldr	r3, [pc, #300]	@ (800199c <GPIO_Init+0x194>)
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	7912      	ldrb	r2, [r2, #4]
 8001876:	4611      	mov	r1, r2
 8001878:	2201      	movs	r2, #1
 800187a:	408a      	lsls	r2, r1
 800187c:	4611      	mov	r1, r2
 800187e:	4a47      	ldr	r2, [pc, #284]	@ (800199c <GPIO_Init+0x194>)
 8001880:	430b      	orrs	r3, r1
 8001882:	60d3      	str	r3, [r2, #12]
		    // Clear the corresponding the RTSR
		    EXTI->RTSR &= ~(1 << hGPIO->Init.Pin);
 8001884:	4b45      	ldr	r3, [pc, #276]	@ (800199c <GPIO_Init+0x194>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	7912      	ldrb	r2, [r2, #4]
 800188c:	4611      	mov	r1, r2
 800188e:	2201      	movs	r2, #1
 8001890:	408a      	lsls	r2, r1
 8001892:	43d2      	mvns	r2, r2
 8001894:	4611      	mov	r1, r2
 8001896:	4a41      	ldr	r2, [pc, #260]	@ (800199c <GPIO_Init+0x194>)
 8001898:	400b      	ands	r3, r1
 800189a:	6093      	str	r3, [r2, #8]
 800189c:	e035      	b.n	800190a <GPIO_Init+0x102>
	    }else if (hGPIO->Init.Mode == GPIO_MODE_IT_RISING) {
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	795b      	ldrb	r3, [r3, #5]
 80018a2:	2b05      	cmp	r3, #5
 80018a4:	d117      	bne.n	80018d6 <GPIO_Init+0xce>
		    EXTI->RTSR |= (1 << hGPIO->Init.Pin);
 80018a6:	4b3d      	ldr	r3, [pc, #244]	@ (800199c <GPIO_Init+0x194>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	7912      	ldrb	r2, [r2, #4]
 80018ae:	4611      	mov	r1, r2
 80018b0:	2201      	movs	r2, #1
 80018b2:	408a      	lsls	r2, r1
 80018b4:	4611      	mov	r1, r2
 80018b6:	4a39      	ldr	r2, [pc, #228]	@ (800199c <GPIO_Init+0x194>)
 80018b8:	430b      	orrs	r3, r1
 80018ba:	6093      	str	r3, [r2, #8]
		    EXTI->FTSR &= ~(1 << hGPIO->Init.Pin);
 80018bc:	4b37      	ldr	r3, [pc, #220]	@ (800199c <GPIO_Init+0x194>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	7912      	ldrb	r2, [r2, #4]
 80018c4:	4611      	mov	r1, r2
 80018c6:	2201      	movs	r2, #1
 80018c8:	408a      	lsls	r2, r1
 80018ca:	43d2      	mvns	r2, r2
 80018cc:	4611      	mov	r1, r2
 80018ce:	4a33      	ldr	r2, [pc, #204]	@ (800199c <GPIO_Init+0x194>)
 80018d0:	400b      	ands	r3, r1
 80018d2:	60d3      	str	r3, [r2, #12]
 80018d4:	e019      	b.n	800190a <GPIO_Init+0x102>
	    }else if (hGPIO->Init.Mode == GPIO_MODE_IT_RISING_FALLING) {
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	795b      	ldrb	r3, [r3, #5]
 80018da:	2b06      	cmp	r3, #6
 80018dc:	d115      	bne.n	800190a <GPIO_Init+0x102>
		    EXTI->RTSR |= (1 << hGPIO->Init.Pin);
 80018de:	4b2f      	ldr	r3, [pc, #188]	@ (800199c <GPIO_Init+0x194>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	7912      	ldrb	r2, [r2, #4]
 80018e6:	4611      	mov	r1, r2
 80018e8:	2201      	movs	r2, #1
 80018ea:	408a      	lsls	r2, r1
 80018ec:	4611      	mov	r1, r2
 80018ee:	4a2b      	ldr	r2, [pc, #172]	@ (800199c <GPIO_Init+0x194>)
 80018f0:	430b      	orrs	r3, r1
 80018f2:	6093      	str	r3, [r2, #8]
		    EXTI->FTSR |= (1 << hGPIO->Init.Pin);
 80018f4:	4b29      	ldr	r3, [pc, #164]	@ (800199c <GPIO_Init+0x194>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	7912      	ldrb	r2, [r2, #4]
 80018fc:	4611      	mov	r1, r2
 80018fe:	2201      	movs	r2, #1
 8001900:	408a      	lsls	r2, r1
 8001902:	4611      	mov	r1, r2
 8001904:	4a25      	ldr	r2, [pc, #148]	@ (800199c <GPIO_Init+0x194>)
 8001906:	430b      	orrs	r3, r1
 8001908:	60d3      	str	r3, [r2, #12]
	    }
	    // Configure the GPIO port selection in SYSCFG_EXTICR
	    uint8_t tmp1 = hGPIO->Init.Pin / 4;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	791b      	ldrb	r3, [r3, #4]
 800190e:	089b      	lsrs	r3, r3, #2
 8001910:	75fb      	strb	r3, [r7, #23]
	    uint8_t tmp2 = hGPIO->Init.Pin % 4;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	791b      	ldrb	r3, [r3, #4]
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	75bb      	strb	r3, [r7, #22]
	    uint8_t portCode = GPIO_BASEADDR_TO_CODE(hGPIO->pGPIOx);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a1f      	ldr	r2, [pc, #124]	@ (80019a0 <GPIO_Init+0x198>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d04e      	beq.n	80019c4 <GPIO_Init+0x1bc>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a1e      	ldr	r2, [pc, #120]	@ (80019a4 <GPIO_Init+0x19c>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d032      	beq.n	8001996 <GPIO_Init+0x18e>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a1c      	ldr	r2, [pc, #112]	@ (80019a8 <GPIO_Init+0x1a0>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d02b      	beq.n	8001992 <GPIO_Init+0x18a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a1b      	ldr	r2, [pc, #108]	@ (80019ac <GPIO_Init+0x1a4>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d024      	beq.n	800198e <GPIO_Init+0x186>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a19      	ldr	r2, [pc, #100]	@ (80019b0 <GPIO_Init+0x1a8>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d01d      	beq.n	800198a <GPIO_Init+0x182>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a18      	ldr	r2, [pc, #96]	@ (80019b4 <GPIO_Init+0x1ac>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d016      	beq.n	8001986 <GPIO_Init+0x17e>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a16      	ldr	r2, [pc, #88]	@ (80019b8 <GPIO_Init+0x1b0>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d00f      	beq.n	8001982 <GPIO_Init+0x17a>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a15      	ldr	r2, [pc, #84]	@ (80019bc <GPIO_Init+0x1b4>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d008      	beq.n	800197e <GPIO_Init+0x176>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a13      	ldr	r2, [pc, #76]	@ (80019c0 <GPIO_Init+0x1b8>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d101      	bne.n	800197a <GPIO_Init+0x172>
 8001976:	2308      	movs	r3, #8
 8001978:	e025      	b.n	80019c6 <GPIO_Init+0x1be>
 800197a:	2300      	movs	r3, #0
 800197c:	e023      	b.n	80019c6 <GPIO_Init+0x1be>
 800197e:	2307      	movs	r3, #7
 8001980:	e021      	b.n	80019c6 <GPIO_Init+0x1be>
 8001982:	2306      	movs	r3, #6
 8001984:	e01f      	b.n	80019c6 <GPIO_Init+0x1be>
 8001986:	2305      	movs	r3, #5
 8001988:	e01d      	b.n	80019c6 <GPIO_Init+0x1be>
 800198a:	2304      	movs	r3, #4
 800198c:	e01b      	b.n	80019c6 <GPIO_Init+0x1be>
 800198e:	2303      	movs	r3, #3
 8001990:	e019      	b.n	80019c6 <GPIO_Init+0x1be>
 8001992:	2302      	movs	r3, #2
 8001994:	e017      	b.n	80019c6 <GPIO_Init+0x1be>
 8001996:	2301      	movs	r3, #1
 8001998:	e015      	b.n	80019c6 <GPIO_Init+0x1be>
 800199a:	bf00      	nop
 800199c:	40013c00 	.word	0x40013c00
 80019a0:	40020000 	.word	0x40020000
 80019a4:	40020400 	.word	0x40020400
 80019a8:	40020800 	.word	0x40020800
 80019ac:	40020c00 	.word	0x40020c00
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40021400 	.word	0x40021400
 80019b8:	40021800 	.word	0x40021800
 80019bc:	40021c00 	.word	0x40021c00
 80019c0:	40022000 	.word	0x40022000
 80019c4:	2300      	movs	r3, #0
 80019c6:	757b      	strb	r3, [r7, #21]
	    SYSCFG_CLK_ENABLE();
 80019c8:	4b65      	ldr	r3, [pc, #404]	@ (8001b60 <GPIO_Init+0x358>)
 80019ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019cc:	4a64      	ldr	r2, [pc, #400]	@ (8001b60 <GPIO_Init+0x358>)
 80019ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019d2:	6453      	str	r3, [r2, #68]	@ 0x44
	    SYSCFG->EXTICR[tmp1] &= ~(0xF << (tmp2 * 4)); // Clear bits first
 80019d4:	4a63      	ldr	r2, [pc, #396]	@ (8001b64 <GPIO_Init+0x35c>)
 80019d6:	7dfb      	ldrb	r3, [r7, #23]
 80019d8:	3302      	adds	r3, #2
 80019da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019de:	7dbb      	ldrb	r3, [r7, #22]
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	210f      	movs	r1, #15
 80019e4:	fa01 f303 	lsl.w	r3, r1, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	4618      	mov	r0, r3
 80019ec:	495d      	ldr	r1, [pc, #372]	@ (8001b64 <GPIO_Init+0x35c>)
 80019ee:	7dfb      	ldrb	r3, [r7, #23]
 80019f0:	4002      	ands	r2, r0
 80019f2:	3302      	adds	r3, #2
 80019f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    SYSCFG->EXTICR[tmp1] |= portCode << (tmp2 * 4);
 80019f8:	4a5a      	ldr	r2, [pc, #360]	@ (8001b64 <GPIO_Init+0x35c>)
 80019fa:	7dfb      	ldrb	r3, [r7, #23]
 80019fc:	3302      	adds	r3, #2
 80019fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a02:	7d79      	ldrb	r1, [r7, #21]
 8001a04:	7dbb      	ldrb	r3, [r7, #22]
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	4955      	ldr	r1, [pc, #340]	@ (8001b64 <GPIO_Init+0x35c>)
 8001a10:	7dfb      	ldrb	r3, [r7, #23]
 8001a12:	4302      	orrs	r2, r0
 8001a14:	3302      	adds	r3, #2
 8001a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	    // Enable the EXTI Interrupt delivery using IMR
	    EXTI->IMR |= 1 << hGPIO->Init.Pin;
 8001a1a:	4b53      	ldr	r3, [pc, #332]	@ (8001b68 <GPIO_Init+0x360>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	7912      	ldrb	r2, [r2, #4]
 8001a22:	4611      	mov	r1, r2
 8001a24:	2201      	movs	r2, #1
 8001a26:	408a      	lsls	r2, r1
 8001a28:	4611      	mov	r1, r2
 8001a2a:	4a4f      	ldr	r2, [pc, #316]	@ (8001b68 <GPIO_Init+0x360>)
 8001a2c:	430b      	orrs	r3, r1
 8001a2e:	6013      	str	r3, [r2, #0]
    }

    // 2. Configure speed
    temp = ((hGPIO->Init.Speed) << (2 * hGPIO->Init.Pin));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	79db      	ldrb	r3, [r3, #7]
 8001a34:	461a      	mov	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	791b      	ldrb	r3, [r3, #4]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	613b      	str	r3, [r7, #16]
    hGPIO->pGPIOx->OSPEEDR &= ~(0x3 << (2 * hGPIO->Init.Pin)); // clearing
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	791b      	ldrb	r3, [r3, #4]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	2103      	movs	r1, #3
 8001a50:	fa01 f303 	lsl.w	r3, r1, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	4619      	mov	r1, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	400a      	ands	r2, r1
 8001a5e:	609a      	str	r2, [r3, #8]
    hGPIO->pGPIOx->OSPEEDR |= temp;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6899      	ldr	r1, [r3, #8]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	609a      	str	r2, [r3, #8]

    // 3. Configure pull settings
    temp = (hGPIO->Init.Pull) << (2 * hGPIO->Init.Pin);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	799b      	ldrb	r3, [r3, #6]
 8001a74:	461a      	mov	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	791b      	ldrb	r3, [r3, #4]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	613b      	str	r3, [r7, #16]
    hGPIO->pGPIOx->PUPDR &= ~(0x3 << (2 * hGPIO->Init.Pin)); // clearing
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68da      	ldr	r2, [r3, #12]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	791b      	ldrb	r3, [r3, #4]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	2103      	movs	r1, #3
 8001a90:	fa01 f303 	lsl.w	r3, r1, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	4619      	mov	r1, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	400a      	ands	r2, r1
 8001a9e:	60da      	str	r2, [r3, #12]
    hGPIO->pGPIOx->PUPDR |= temp;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68d9      	ldr	r1, [r3, #12]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	60da      	str	r2, [r3, #12]

    // 4. Configure OPType
    temp = (hGPIO->Init.OPType) << hGPIO->Init.Pin;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	7a1b      	ldrb	r3, [r3, #8]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	791b      	ldrb	r3, [r3, #4]
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	613b      	str	r3, [r7, #16]
    hGPIO->pGPIOx->OTYPER &= ~(0x1 << hGPIO->Init.Pin); // clearing
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	791b      	ldrb	r3, [r3, #4]
 8001aca:	4619      	mov	r1, r3
 8001acc:	2301      	movs	r3, #1
 8001ace:	408b      	lsls	r3, r1
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	400a      	ands	r2, r1
 8001ada:	605a      	str	r2, [r3, #4]
    hGPIO->pGPIOx->OTYPER |= temp;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6859      	ldr	r1, [r3, #4]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	605a      	str	r2, [r3, #4]

    // 5. Configure the alternate function
    if (hGPIO->Init.Mode == GPIO_MODE_AF) {
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	795b      	ldrb	r3, [r3, #5]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d131      	bne.n	8001b58 <GPIO_Init+0x350>
	    uint8_t temp1, temp2;

	    temp1 = hGPIO->Init.Pin / 8; // AFR[0] or AFR[1]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	791b      	ldrb	r3, [r3, #4]
 8001af8:	08db      	lsrs	r3, r3, #3
 8001afa:	73fb      	strb	r3, [r7, #15]
	    temp2 = hGPIO->Init.Pin % 8; // Position in AFR register
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	791b      	ldrb	r3, [r3, #4]
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	73bb      	strb	r3, [r7, #14]
	    hGPIO->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); // clearing
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	7bfa      	ldrb	r2, [r7, #15]
 8001b0c:	3208      	adds	r2, #8
 8001b0e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001b12:	7bbb      	ldrb	r3, [r7, #14]
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	220f      	movs	r2, #15
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	4618      	mov	r0, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	7bfa      	ldrb	r2, [r7, #15]
 8001b26:	4001      	ands	r1, r0
 8001b28:	3208      	adds	r2, #8
 8001b2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    hGPIO->pGPIOx->AFR[temp1] |= (hGPIO->Init.Alternate << (4 * temp2));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	7bfa      	ldrb	r2, [r7, #15]
 8001b34:	3208      	adds	r2, #8
 8001b36:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	7a5b      	ldrb	r3, [r3, #9]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	7bbb      	ldrb	r3, [r7, #14]
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	4618      	mov	r0, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	7bfa      	ldrb	r2, [r7, #15]
 8001b50:	4301      	orrs	r1, r0
 8001b52:	3208      	adds	r2, #8
 8001b54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
}
 8001b58:	bf00      	nop
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40013800 	.word	0x40013800
 8001b68:	40013c00 	.word	0x40013c00

08001b6c <I2C1_Init>:
/**
  * @brief  Initialize I2C1 peripheral
  * @retval None
  */
 void I2C1_Init(I2C_HandleTypeDef *hi2c1)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  hi2c1->pI2Cx = I2C1;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a0d      	ldr	r2, [pc, #52]	@ (8001bac <I2C1_Init+0x40>)
 8001b78:	601a      	str	r2, [r3, #0]
  hi2c1->Init.ClockSpeed = I2C_CLOCKSPEED_SM;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a0c      	ldr	r2, [pc, #48]	@ (8001bb0 <I2C1_Init+0x44>)
 8001b7e:	605a      	str	r2, [r3, #4]
  hi2c1->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	721a      	strb	r2, [r3, #8]
  hi2c1->Init.DeviceAddress = MPU6050_ADDRESS;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2268      	movs	r2, #104	@ 0x68
 8001b8a:	729a      	strb	r2, [r3, #10]
  hi2c1->Init.AckControl = I2C_ACK_ENABLE;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	725a      	strb	r2, [r3, #9]
  I2C_Init(hi2c1);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f91a 	bl	8001dcc <I2C_Init>
  I2C1_GPIOInits();
 8001b98:	f000 f80c 	bl	8001bb4 <I2C1_GPIOInits>
  I2C_PeripheralControl(I2C1,ENABLE);
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	4803      	ldr	r0, [pc, #12]	@ (8001bac <I2C1_Init+0x40>)
 8001ba0:	f000 fb08 	bl	80021b4 <I2C_PeripheralControl>
}
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40005400 	.word	0x40005400
 8001bb0:	000186a0 	.word	0x000186a0

08001bb4 <I2C1_GPIOInits>:
   * @brief  Initialize GPIO pins for I2C1
   * @retval None
   *
   */
 void I2C1_GPIOInits(void)
 {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 	GPIO_HandleTypeDef GPIO_InitStruct;

 	GPIO_InitStruct.pGPIOx = GPIOB;
 8001bba:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf0 <I2C1_GPIOInits+0x3c>)
 8001bbc:	607b      	str	r3, [r7, #4]
 	GPIO_InitStruct.Init.Pin = GPIO_PIN_6;  //SCL Pin
 8001bbe:	2306      	movs	r3, #6
 8001bc0:	723b      	strb	r3, [r7, #8]
 	GPIO_InitStruct.Init.Mode = GPIO_MODE_AF;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	727b      	strb	r3, [r7, #9]
 	GPIO_InitStruct.Init.Pull = GPIO_PULLUP;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	72bb      	strb	r3, [r7, #10]
 	GPIO_InitStruct.Init.Speed = GPIO_SPEED_FAST;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	72fb      	strb	r3, [r7, #11]
 	GPIO_InitStruct.Init.Alternate = GPIO_AF4_I2C1;
 8001bce:	2304      	movs	r3, #4
 8001bd0:	737b      	strb	r3, [r7, #13]
 	GPIO_Init(&GPIO_InitStruct);
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fe17 	bl	8001808 <GPIO_Init>

 	GPIO_InitStruct.Init.Pin = GPIO_PIN_7; //SDA Pin
 8001bda:	2307      	movs	r3, #7
 8001bdc:	723b      	strb	r3, [r7, #8]
 	GPIO_Init(&GPIO_InitStruct);
 8001bde:	1d3b      	adds	r3, r7, #4
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff fe11 	bl	8001808 <GPIO_Init>

 }
 8001be6:	bf00      	nop
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40020400 	.word	0x40020400

08001bf4 <I2C_GenerateStartCondition>:
  * @brief Generates a START condition on the I2C bus.
  * @param pI2Cx Pointer to I2C registers.
  * @retval None
  */
void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
    pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	601a      	str	r2, [r3, #0]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr

08001c12 <I2C_GenerateStopCondition>:
  * @brief Generates a STOP condition on the I2C bus.
  * @param pI2Cx Pointer to I2C registers.
  * @retval None
  */
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
    pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	601a      	str	r2, [r3, #0]
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr

08001c30 <I2C_MasterRequestWrite>:
  * @param pI2Cx Pointer to I2C registers.
  * @param DevAddress The 7-bit slave address.
  * @retval None
  */
static void I2C_MasterRequestWrite(I2C_RegDef_t *pI2Cx, uint8_t DevAddress)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	70fb      	strb	r3, [r7, #3]
    DevAddress = DevAddress << 1;
 8001c3c:	78fb      	ldrb	r3, [r7, #3]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	70fb      	strb	r3, [r7, #3]
    DevAddress &= ~(1); // Ensure the R/nW bit is 0 for write.
 8001c42:	78fb      	ldrb	r3, [r7, #3]
 8001c44:	f023 0301 	bic.w	r3, r3, #1
 8001c48:	70fb      	strb	r3, [r7, #3]
    pI2Cx->DR = DevAddress;
 8001c4a:	78fa      	ldrb	r2, [r7, #3]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	611a      	str	r2, [r3, #16]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr

08001c5a <I2C_MasterRequestRead>:
  * @param pI2Cx Pointer to I2C registers.
  * @param DevAddress The 7-bit slave address.
  * @retval None
  */
static void I2C_MasterRequestRead(I2C_RegDef_t *pI2Cx, uint8_t DevAddress)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	460b      	mov	r3, r1
 8001c64:	70fb      	strb	r3, [r7, #3]
    DevAddress = DevAddress << 1;
 8001c66:	78fb      	ldrb	r3, [r7, #3]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	70fb      	strb	r3, [r7, #3]
    DevAddress |= 1; // Ensure the R/nW bit is 1 for read.
 8001c6c:	78fb      	ldrb	r3, [r7, #3]
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	70fb      	strb	r3, [r7, #3]
    pI2Cx->DR = DevAddress;
 8001c74:	78fa      	ldrb	r2, [r7, #3]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	611a      	str	r2, [r3, #16]
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr

08001c84 <I2C_Clear_ADDRFlag>:
  * @brief Clears the ADDR flag by reading SR1 and SR2.
  * @param hi2c Pointer to I2C handle.
  * @retval None
  */
static void I2C_Clear_ADDRFlag(I2C_HandleTypeDef *hi2c )
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
    uint32_t dummy_read;

    // Check if the device is in master mode by checking the MSL bit in SR2 (Master/Slave status)
    if (hi2c->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d01f      	beq.n	8001cda <I2C_Clear_ADDRFlag+0x56>
    {
        // Device is in master mode
        if (hi2c->TxRxState == I2C_STATE_BUSY_TX)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	7f1b      	ldrb	r3, [r3, #28]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d112      	bne.n	8001cc8 <I2C_Clear_ADDRFlag+0x44>
        {
            // If we're in transmission mode and we're receiving only 1 byte
            if (hi2c->RxSize == 1)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d11f      	bne.n	8001cea <I2C_Clear_ADDRFlag+0x66>
            {
                // Disable Acknowledge (ACK) for the last byte
                I2C_ManageAcking(hi2c->pI2Cx, DISABLE);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 fa64 	bl	800217e <I2C_ManageAcking>

                // Read SR1 and SR2 to clear the ADDR flag
                dummy_read = hi2c->pI2Cx->SR1;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	60fb      	str	r3, [r7, #12]
                dummy_read = hi2c->pI2Cx->SR2;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	60fb      	str	r3, [r7, #12]
        // Read SR1 and SR2 to clear the ADDR flag in slave mode
        dummy_read = hi2c->pI2Cx->SR1;
        dummy_read = hi2c->pI2Cx->SR2;
        (void)dummy_read;  // Dummy read to clear the flags
    }
}
 8001cc6:	e010      	b.n	8001cea <I2C_Clear_ADDRFlag+0x66>
            dummy_read = hi2c->pI2Cx->SR1;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	60fb      	str	r3, [r7, #12]
            dummy_read = hi2c->pI2Cx->SR2;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	60fb      	str	r3, [r7, #12]
}
 8001cd8:	e007      	b.n	8001cea <I2C_Clear_ADDRFlag+0x66>
        dummy_read = hi2c->pI2Cx->SR1;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	60fb      	str	r3, [r7, #12]
        dummy_read = hi2c->pI2Cx->SR2;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	60fb      	str	r3, [r7, #12]
}
 8001cea:	bf00      	nop
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <I2C_PeriClockControl>:
  * @param  pI2Cx Pointer to I2C_RegDef_t structure representing I2C1, I2C2, or I2C3.
  * @param  clockState ENABLE (1) to enable the clock, DISABLE (0) to disable it.
  * @retval None
  */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t clockState)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	70fb      	strb	r3, [r7, #3]
    if (clockState == ENABLE) {
 8001d00:	78fb      	ldrb	r3, [r7, #3]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d120      	bne.n	8001d48 <I2C_PeriClockControl+0x54>
        if (pI2Cx == I2C1) {
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a22      	ldr	r2, [pc, #136]	@ (8001d94 <I2C_PeriClockControl+0xa0>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d106      	bne.n	8001d1c <I2C_PeriClockControl+0x28>
            I2C1_CLK_ENABLE();
 8001d0e:	4b22      	ldr	r3, [pc, #136]	@ (8001d98 <I2C_PeriClockControl+0xa4>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d12:	4a21      	ldr	r2, [pc, #132]	@ (8001d98 <I2C_PeriClockControl+0xa4>)
 8001d14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d18:	6413      	str	r3, [r2, #64]	@ 0x40
            I2C2_CLK_DISABLE();
        }else if (pI2Cx == I2C3) {
            I2C3_CLK_DISABLE();
        }
    }
}
 8001d1a:	e035      	b.n	8001d88 <I2C_PeriClockControl+0x94>
        }else if (pI2Cx == I2C2) {
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a1f      	ldr	r2, [pc, #124]	@ (8001d9c <I2C_PeriClockControl+0xa8>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d106      	bne.n	8001d32 <I2C_PeriClockControl+0x3e>
            I2C2_CLK_ENABLE();
 8001d24:	4b1c      	ldr	r3, [pc, #112]	@ (8001d98 <I2C_PeriClockControl+0xa4>)
 8001d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d28:	4a1b      	ldr	r2, [pc, #108]	@ (8001d98 <I2C_PeriClockControl+0xa4>)
 8001d2a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d2e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001d30:	e02a      	b.n	8001d88 <I2C_PeriClockControl+0x94>
        }else if (pI2Cx == I2C3) {
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a1a      	ldr	r2, [pc, #104]	@ (8001da0 <I2C_PeriClockControl+0xac>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d126      	bne.n	8001d88 <I2C_PeriClockControl+0x94>
            I2C3_CLK_ENABLE();
 8001d3a:	4b17      	ldr	r3, [pc, #92]	@ (8001d98 <I2C_PeriClockControl+0xa4>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3e:	4a16      	ldr	r2, [pc, #88]	@ (8001d98 <I2C_PeriClockControl+0xa4>)
 8001d40:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d44:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001d46:	e01f      	b.n	8001d88 <I2C_PeriClockControl+0x94>
        if (pI2Cx == I2C1) {
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a12      	ldr	r2, [pc, #72]	@ (8001d94 <I2C_PeriClockControl+0xa0>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d106      	bne.n	8001d5e <I2C_PeriClockControl+0x6a>
            I2C1_CLK_DISABLE();
 8001d50:	4b11      	ldr	r3, [pc, #68]	@ (8001d98 <I2C_PeriClockControl+0xa4>)
 8001d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d54:	4a10      	ldr	r2, [pc, #64]	@ (8001d98 <I2C_PeriClockControl+0xa4>)
 8001d56:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001d5a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001d5c:	e014      	b.n	8001d88 <I2C_PeriClockControl+0x94>
        }else if (pI2Cx == I2C2) {
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a0e      	ldr	r2, [pc, #56]	@ (8001d9c <I2C_PeriClockControl+0xa8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d106      	bne.n	8001d74 <I2C_PeriClockControl+0x80>
            I2C2_CLK_DISABLE();
 8001d66:	4b0c      	ldr	r3, [pc, #48]	@ (8001d98 <I2C_PeriClockControl+0xa4>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6a:	4a0b      	ldr	r2, [pc, #44]	@ (8001d98 <I2C_PeriClockControl+0xa4>)
 8001d6c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001d70:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001d72:	e009      	b.n	8001d88 <I2C_PeriClockControl+0x94>
        }else if (pI2Cx == I2C3) {
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a0a      	ldr	r2, [pc, #40]	@ (8001da0 <I2C_PeriClockControl+0xac>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d105      	bne.n	8001d88 <I2C_PeriClockControl+0x94>
            I2C3_CLK_DISABLE();
 8001d7c:	4b06      	ldr	r3, [pc, #24]	@ (8001d98 <I2C_PeriClockControl+0xa4>)
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d80:	4a05      	ldr	r2, [pc, #20]	@ (8001d98 <I2C_PeriClockControl+0xa4>)
 8001d82:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001d86:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40005400 	.word	0x40005400
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40005800 	.word	0x40005800
 8001da0:	40005c00 	.word	0x40005c00

08001da4 <I2C_GetFlagStatus>:
  * @param  pI2Cx Pointer to the I2C peripheral (I2C1, I2C2 and I2C3).
  * @param  FlagName The flag to check (e.g., I2C_FLAG_TXE, I2C_FLAG_RXNE, I2C_FLAG_BSY).
  * @retval FLAG_SET(1) or FLAG_RESET(0).
  */
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
    if(pI2Cx->SR1 & FlagName)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695a      	ldr	r2, [r3, #20]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <I2C_GetFlagStatus+0x1a>
    {
        return FLAG_SET;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <I2C_GetFlagStatus+0x1c>
    }
    return FLAG_RESET;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr
	...

08001dcc <I2C_Init>:
  * @param  hi2c Pointer to an I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C peripheral.
  * @retval I2C status
  */
I2C_StatusTypeDef I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
    uint32_t tempreg = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60fb      	str	r3, [r7, #12]

    // Enable clock for I2Cx peripheral
    I2C_PeriClockControl(hi2c->pI2Cx, ENABLE);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2101      	movs	r1, #1
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff ff88 	bl	8001cf4 <I2C_PeriClockControl>

    // Set the ACK control bit (Acknowledgment)
    tempreg |= hi2c->Init.AckControl << 10;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	7a5b      	ldrb	r3, [r3, #9]
 8001de8:	029b      	lsls	r3, r3, #10
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	60fb      	str	r3, [r7, #12]
    hi2c->pI2Cx->CR1 = tempreg;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	601a      	str	r2, [r3, #0]

    // Configure the FREQ field of CR2 (Clock control register)
    tempreg = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]
    tempreg = RCC_GetPCLK1_Value() / 1000000;  // Calculate the PCLK1 value in MHz
 8001dfc:	f000 f9f6 	bl	80021ec <RCC_GetPCLK1_Value>
 8001e00:	4603      	mov	r3, r0
 8001e02:	4a43      	ldr	r2, [pc, #268]	@ (8001f10 <I2C_Init+0x144>)
 8001e04:	fba2 2303 	umull	r2, r3, r2, r3
 8001e08:	0c9b      	lsrs	r3, r3, #18
 8001e0a:	60fb      	str	r3, [r7, #12]
    hi2c->pI2Cx->CR2 = (tempreg & 0x3F);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001e16:	605a      	str	r2, [r3, #4]

    // Program the device's own address (7-bit address for I2C)
    tempreg = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]
    tempreg |= hi2c->Init.DeviceAddress << 1;  // Set the 7-bit device address, shifting it to the left by 1 bit
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	7a9b      	ldrb	r3, [r3, #10]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	60fb      	str	r3, [r7, #12]
    tempreg |= (1 << 14);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e2e:	60fb      	str	r3, [r7, #12]
    hi2c->pI2Cx->OAR1 = tempreg;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	609a      	str	r2, [r3, #8]

    // CCR Calculation (Clock control register for I2C)
    uint32_t CCR_value = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60bb      	str	r3, [r7, #8]
    tempreg = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60fb      	str	r3, [r7, #12]

    if (hi2c->Init.ClockSpeed <= I2C_CLOCKSPEED_SM) {
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	4a33      	ldr	r2, [pc, #204]	@ (8001f14 <I2C_Init+0x148>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d809      	bhi.n	8001e5e <I2C_Init+0x92>
        // Standard Mode (100 kHz)
        CCR_value = (RCC_GetPCLK1_Value() / (2 * hi2c->Init.ClockSpeed));
 8001e4a:	f000 f9cf 	bl	80021ec <RCC_GetPCLK1_Value>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	e026      	b.n	8001eac <I2C_Init+0xe0>
    } else {
        // Fast Mode (400 kHz)
        tempreg |= 1 << 15;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e64:	60fb      	str	r3, [r7, #12]
        tempreg |= (hi2c->Init.DutyCycle << 14);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	7a1b      	ldrb	r3, [r3, #8]
 8001e6a:	039b      	lsls	r3, r3, #14
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	60fb      	str	r3, [r7, #12]

        if (hi2c->Init.DutyCycle == I2C_DUTYCYCLE_2) {
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	7a1b      	ldrb	r3, [r3, #8]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10b      	bne.n	8001e92 <I2C_Init+0xc6>
            CCR_value = (RCC_GetPCLK1_Value() / (3 * hi2c->Init.ClockSpeed));  // Calculate CCR value for DutyCycle 2:1
 8001e7a:	f000 f9b7 	bl	80021ec <RCC_GetPCLK1_Value>
 8001e7e:	4601      	mov	r1, r0
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	4413      	add	r3, r2
 8001e8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	e00c      	b.n	8001eac <I2C_Init+0xe0>
        } else {
            CCR_value = (RCC_GetPCLK1_Value() / (25 * hi2c->Init.ClockSpeed));  // Calculate CCR value for DutyCycle 16:9
 8001e92:	f000 f9ab 	bl	80021ec <RCC_GetPCLK1_Value>
 8001e96:	4601      	mov	r1, r0
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	009a      	lsls	r2, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eaa:	60bb      	str	r3, [r7, #8]
        }
    }

    tempreg |= (CCR_value & 0xFFF);
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]
    hi2c->pI2Cx->CCR = tempreg;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	61da      	str	r2, [r3, #28]

    // TRISE Configuration (Tri-state time configuration)
    if (hi2c->Init.ClockSpeed <= I2C_CLOCKSPEED_SM) {
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	4a13      	ldr	r2, [pc, #76]	@ (8001f14 <I2C_Init+0x148>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d809      	bhi.n	8001ede <I2C_Init+0x112>
        // Standard Mode (100 kHz)
        tempreg = (RCC_GetPCLK1_Value() / 1000000U) + 1;
 8001eca:	f000 f98f 	bl	80021ec <RCC_GetPCLK1_Value>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	4a0f      	ldr	r2, [pc, #60]	@ (8001f10 <I2C_Init+0x144>)
 8001ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed6:	0c9b      	lsrs	r3, r3, #18
 8001ed8:	3301      	adds	r3, #1
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	e00d      	b.n	8001efa <I2C_Init+0x12e>
    } else {
        // Fast Mode (400 kHz)
        tempreg = ((RCC_GetPCLK1_Value() * 300) / 1000000000U) + 1;
 8001ede:	f000 f985 	bl	80021ec <RCC_GetPCLK1_Value>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001ee8:	fb02 f303 	mul.w	r3, r2, r3
 8001eec:	0a5b      	lsrs	r3, r3, #9
 8001eee:	4a0a      	ldr	r2, [pc, #40]	@ (8001f18 <I2C_Init+0x14c>)
 8001ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef4:	09db      	lsrs	r3, r3, #7
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	60fb      	str	r3, [r7, #12]
    }
    hi2c->pI2Cx->TRISE = (tempreg & 0x3F);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001f04:	621a      	str	r2, [r3, #32]

    return I2C_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	431bde83 	.word	0x431bde83
 8001f14:	000186a0 	.word	0x000186a0
 8001f18:	00044b83 	.word	0x00044b83

08001f1c <I2C_Master_Transmit>:
  * @param  DevAddress Target device address: The device's 7-bit address (shifted left before sending).
  * @param  Sr Start repeated
  * @retval I2C_status
  */
I2C_StatusTypeDef I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pTxbuffer, uint32_t Len, uint8_t DevAddress, uint8_t Sr)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
 8001f28:	70fb      	strb	r3, [r7, #3]
    // 1. Generate the START condition.
    I2C_GenerateStartCondition(hi2c->pI2Cx);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff fe60 	bl	8001bf4 <I2C_GenerateStartCondition>

    // 2. Wait until the SB (Start Bit) flag is set.
    //    Until SB is cleared, SCL remains low (clock stretching).
    while (!(I2C_GetFlagStatus(hi2c->pI2Cx, I2C_FLAG_SB)));
 8001f34:	bf00      	nop
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff ff31 	bl	8001da4 <I2C_GetFlagStatus>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0f6      	beq.n	8001f36 <I2C_Master_Transmit+0x1a>

    // 3. Send the slave address with the R/nW bit set to Write (0).
    I2C_MasterRequestWrite(hi2c->pI2Cx, DevAddress);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	78fa      	ldrb	r2, [r7, #3]
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fe6d 	bl	8001c30 <I2C_MasterRequestWrite>

    // 4. Wait until the ADDR flag is set indicating address phase completion.
    while (!(I2C_GetFlagStatus(hi2c->pI2Cx, I2C_FLAG_ADDR)));
 8001f56:	bf00      	nop
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2102      	movs	r1, #2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff ff20 	bl	8001da4 <I2C_GetFlagStatus>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0f6      	beq.n	8001f58 <I2C_Master_Transmit+0x3c>

    // 5. Clear the ADDR flag (by reading SR1 then SR2).
    //    Until ADDR is cleared, SCL remains low.
    I2C_Clear_ADDRFlag(hi2c);
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f7ff fe8a 	bl	8001c84 <I2C_Clear_ADDRFlag>

    // 6. Transmit data bytes until the length becomes 0.
    while (Len > 0)
 8001f70:	e014      	b.n	8001f9c <I2C_Master_Transmit+0x80>
    {
        // Wait until TXE (Transmit Data Register Empty) flag is set.
        while (!(I2C_GetFlagStatus(hi2c->pI2Cx, I2C_FLAG_TXE)));
 8001f72:	bf00      	nop
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2180      	movs	r1, #128	@ 0x80
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff ff12 	bl	8001da4 <I2C_GetFlagStatus>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f6      	beq.n	8001f74 <I2C_Master_Transmit+0x58>
        // Write data to the data register.
        hi2c->pI2Cx->DR = *pTxbuffer;
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	781a      	ldrb	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	611a      	str	r2, [r3, #16]
        pTxbuffer++;
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	3301      	adds	r3, #1
 8001f94:	60bb      	str	r3, [r7, #8]
        Len--;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	607b      	str	r3, [r7, #4]
    while (Len > 0)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1e7      	bne.n	8001f72 <I2C_Master_Transmit+0x56>
    }

    // 7. Wait for the final byte transfer to complete:
    //    Wait until TXE and BTF (Byte Transfer Finished) flags are set.
    while (!(I2C_GetFlagStatus(hi2c->pI2Cx, I2C_FLAG_TXE)));
 8001fa2:	bf00      	nop
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2180      	movs	r1, #128	@ 0x80
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fefa 	bl	8001da4 <I2C_GetFlagStatus>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0f6      	beq.n	8001fa4 <I2C_Master_Transmit+0x88>
    while (!(I2C_GetFlagStatus(hi2c->pI2Cx, I2C_FLAG_BTF)));
 8001fb6:	bf00      	nop
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2104      	movs	r1, #4
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fef0 	bl	8001da4 <I2C_GetFlagStatus>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0f6      	beq.n	8001fb8 <I2C_Master_Transmit+0x9c>

    // 8. Generate the STOP condition if repeated start is disabled.
    //    Generating STOP automatically clears the BTF flag.
    if (Sr == I2C_SR_DISABLE) {
 8001fca:	7e3b      	ldrb	r3, [r7, #24]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d104      	bne.n	8001fda <I2C_Master_Transmit+0xbe>
        I2C_GenerateStopCondition(hi2c->pI2Cx);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff fe1c 	bl	8001c12 <I2C_GenerateStopCondition>
    }
    return I2C_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <I2C_Master_Receive>:
  * @param  DevAddress Target device address: The device's 7-bit address (shifted left before sending).
  * @param  Sr Start repeated
  * @retval i2c_status
  */
I2C_StatusTypeDef I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pRxbuffer, uint32_t Len, uint8_t DevAddress, uint8_t Sr)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
 8001ff0:	70fb      	strb	r3, [r7, #3]
    // 1. Generate the START condition
    I2C_GenerateStartCondition(hi2c->pI2Cx);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff fdfc 	bl	8001bf4 <I2C_GenerateStartCondition>

     // 2. Wait until the SB (Start Bit) flag is set.
     //    Until SB is cleared, SCL remains low (clock stretching).
    while (!(I2C_GetFlagStatus(hi2c->pI2Cx, I2C_FLAG_SB)));
 8001ffc:	bf00      	nop
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2101      	movs	r1, #1
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff fecd 	bl	8001da4 <I2C_GetFlagStatus>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0f6      	beq.n	8001ffe <I2C_Master_Receive+0x1a>

    // 3. Send the slave address with the R/nW bit set to Read (1).
    I2C_MasterRequestRead(hi2c->pI2Cx, DevAddress);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	78fa      	ldrb	r2, [r7, #3]
 8002016:	4611      	mov	r1, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fe1e 	bl	8001c5a <I2C_MasterRequestRead>

    // 4. Wait until the ADDR flag is set indicating address phase completion.
    while (!(I2C_GetFlagStatus(hi2c->pI2Cx, I2C_FLAG_ADDR)));
 800201e:	bf00      	nop
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2102      	movs	r1, #2
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff febc 	bl	8001da4 <I2C_GetFlagStatus>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0f6      	beq.n	8002020 <I2C_Master_Receive+0x3c>

    // Read only 1 byte from slave
    if (Len == 1)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d121      	bne.n	800207c <I2C_Master_Receive+0x98>
    {
        // Disable Acknowledge
        I2C_ManageAcking(hi2c->pI2Cx, I2C_ACK_DISABLE);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2100      	movs	r1, #0
 800203e:	4618      	mov	r0, r3
 8002040:	f000 f89d 	bl	800217e <I2C_ManageAcking>

        // Clear the ADDR flag
        I2C_Clear_ADDRFlag(hi2c);
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f7ff fe1d 	bl	8001c84 <I2C_Clear_ADDRFlag>

        // wait until RXNE becomes 1
        while (! (I2C_GetFlagStatus(hi2c->pI2Cx, I2C_FLAG_RXNE)));
 800204a:	bf00      	nop
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2140      	movs	r1, #64	@ 0x40
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff fea6 	bl	8001da4 <I2C_GetFlagStatus>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0f6      	beq.n	800204c <I2C_Master_Receive+0x68>

        // generate the STOP condition
        if (Sr == I2C_SR_DISABLE) {
 800205e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d104      	bne.n	8002070 <I2C_Master_Receive+0x8c>
            I2C_GenerateStopCondition(hi2c->pI2Cx);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff fdd1 	bl	8001c12 <I2C_GenerateStopCondition>
        }

        // Read the single data byte from the data register into the buffer
        *pRxbuffer = hi2c->pI2Cx->DR;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	b2da      	uxtb	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	701a      	strb	r2, [r3, #0]
    }

    // Read data from slave when Len > 1
    if (Len > 1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d930      	bls.n	80020e4 <I2C_Master_Receive+0x100>
    {
        // clear the ADDR flag
        I2C_Clear_ADDRFlag(hi2c);
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f7ff fdfe 	bl	8001c84 <I2C_Clear_ADDRFlag>

        // Read data until all bytes are received.
        for (uint32_t i = Len; i > 0; i--)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	e027      	b.n	80020de <I2C_Master_Receive+0xfa>
        {
            // wait until RXNE becomes 1
            while (! (I2C_GetFlagStatus(hi2c->pI2Cx, I2C_FLAG_RXNE)));
 800208e:	bf00      	nop
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2140      	movs	r1, #64	@ 0x40
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff fe84 	bl	8001da4 <I2C_GetFlagStatus>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f6      	beq.n	8002090 <I2C_Master_Receive+0xac>

            // Check if this is the second-to-last byte (for NACK and Stop/ReStart)
            if (i == 2)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d10e      	bne.n	80020c6 <I2C_Master_Receive+0xe2>
            {
                // Disable Acknowledge
                I2C_ManageAcking(hi2c->pI2Cx, I2C_ACK_DISABLE);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2100      	movs	r1, #0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 f865 	bl	800217e <I2C_ManageAcking>

                // generate the STOP condition
                if (Sr == I2C_SR_DISABLE) {
 80020b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d104      	bne.n	80020c6 <I2C_Master_Receive+0xe2>
                        I2C_GenerateStopCondition(hi2c->pI2Cx);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff fda6 	bl	8001c12 <I2C_GenerateStopCondition>
                }
            }

            // read the data from data register into buffer
            *pRxbuffer = hi2c->pI2Cx->DR;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	701a      	strb	r2, [r3, #0]

            // increment the buffer address
            pRxbuffer++;
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	3301      	adds	r3, #1
 80020d6:	60bb      	str	r3, [r7, #8]
        for (uint32_t i = Len; i > 0; i--)
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	3b01      	subs	r3, #1
 80020dc:	617b      	str	r3, [r7, #20]
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1d4      	bne.n	800208e <I2C_Master_Receive+0xaa>
        }
    }
    //re-enable ACKing
    if(hi2c->Init.AckControl == I2C_ACK_ENABLE)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	7a5b      	ldrb	r3, [r3, #9]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d105      	bne.n	80020f8 <I2C_Master_Receive+0x114>
    {
        I2C_ManageAcking(hi2c->pI2Cx,I2C_ACK_ENABLE);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2101      	movs	r1, #1
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 f843 	bl	800217e <I2C_ManageAcking>
    }
    return I2C_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <I2C_Mem_Read>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval i2c_status
  */
I2C_StatusTypeDef I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b088      	sub	sp, #32
 8002106:	af02      	add	r7, sp, #8
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	4608      	mov	r0, r1
 800210c:	4611      	mov	r1, r2
 800210e:	461a      	mov	r2, r3
 8002110:	4603      	mov	r3, r0
 8002112:	817b      	strh	r3, [r7, #10]
 8002114:	460b      	mov	r3, r1
 8002116:	813b      	strh	r3, [r7, #8]
 8002118:	4613      	mov	r3, r2
 800211a:	80fb      	strh	r3, [r7, #6]
	// 1. Send memory address in write mode
	uint8_t mem_addr[2];

	if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800211c:	88fb      	ldrh	r3, [r7, #6]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d10d      	bne.n	800213e <I2C_Mem_Read+0x3c>
	{
		// 1byte
		mem_addr[0] = (uint8_t)MemAddress;
 8002122:	893b      	ldrh	r3, [r7, #8]
 8002124:	b2db      	uxtb	r3, r3
 8002126:	753b      	strb	r3, [r7, #20]
		I2C_Master_Transmit(hi2c, mem_addr, 1, DevAddress, I2C_SR_ENABLE); // repeated start
 8002128:	897b      	ldrh	r3, [r7, #10]
 800212a:	b2db      	uxtb	r3, r3
 800212c:	f107 0114 	add.w	r1, r7, #20
 8002130:	2201      	movs	r2, #1
 8002132:	9200      	str	r2, [sp, #0]
 8002134:	2201      	movs	r2, #1
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f7ff fef0 	bl	8001f1c <I2C_Master_Transmit>
 800213c:	e011      	b.n	8002162 <I2C_Mem_Read+0x60>
	}else {
		// 2byte
		mem_addr[0] = (uint8_t)(MemAddress >> 8);
 800213e:	893b      	ldrh	r3, [r7, #8]
 8002140:	0a1b      	lsrs	r3, r3, #8
 8002142:	b29b      	uxth	r3, r3
 8002144:	b2db      	uxtb	r3, r3
 8002146:	753b      	strb	r3, [r7, #20]
		mem_addr[1] = (uint8_t)MemAddress;
 8002148:	893b      	ldrh	r3, [r7, #8]
 800214a:	b2db      	uxtb	r3, r3
 800214c:	757b      	strb	r3, [r7, #21]
		I2C_Master_Transmit(hi2c, mem_addr, 2, DevAddress, I2C_SR_ENABLE); // repeated start
 800214e:	897b      	ldrh	r3, [r7, #10]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	f107 0114 	add.w	r1, r7, #20
 8002156:	2201      	movs	r2, #1
 8002158:	9200      	str	r2, [sp, #0]
 800215a:	2202      	movs	r2, #2
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f7ff fedd 	bl	8001f1c <I2C_Master_Transmit>
	}
	// Read data from slave
	I2C_Master_Receive(hi2c, pData, Size, DevAddress, I2C_SR_DISABLE);
 8002162:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002164:	897b      	ldrh	r3, [r7, #10]
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2100      	movs	r1, #0
 800216a:	9100      	str	r1, [sp, #0]
 800216c:	6a39      	ldr	r1, [r7, #32]
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f7ff ff38 	bl	8001fe4 <I2C_Master_Receive>

	return I2C_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <I2C_ManageAcking>:
  * @param  pI2Cx Pointer to the I2C peripheral (I2C1, I2C2 and I2C3).
  * @param  state I2C_ACK_ENABLE (1) to enable the ack, I2C_ACK_DISABLE (0) to disable it.
  * @retval None
  */
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t state)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	460b      	mov	r3, r1
 8002188:	70fb      	strb	r3, [r7, #3]
    if (state == I2C_ACK_ENABLE)
 800218a:	78fb      	ldrb	r3, [r7, #3]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d106      	bne.n	800219e <I2C_ManageAcking+0x20>
    {
        pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	601a      	str	r2, [r3, #0]
    }else
    {
        pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
    }
}
 800219c:	e005      	b.n	80021aa <I2C_ManageAcking+0x2c>
        pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	601a      	str	r2, [r3, #0]
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <I2C_PeripheralControl>:
  * @param  pI2Cx Pointer to the I2C peripheral (I2C1, I2C2 and I2C3).
  * @param  controlState ENABLE (1) to enable the Peripheral, DISABLE (0) to disable it.
  * @retval None
  */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t controlState)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	70fb      	strb	r3, [r7, #3]
    if (controlState == ENABLE)
 80021c0:	78fb      	ldrb	r3, [r7, #3]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d106      	bne.n	80021d4 <I2C_PeripheralControl+0x20>
    {
        pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f043 0201 	orr.w	r2, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	601a      	str	r2, [r3, #0]
    }else {
        pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
    }
}
 80021d2:	e005      	b.n	80021e0 <I2C_PeripheralControl+0x2c>
        pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f023 0201 	bic.w	r2, r3, #1
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	601a      	str	r2, [r3, #0]
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr
	...

080021ec <RCC_GetPCLK1_Value>:
 * @retval uint32_t PCLK1 frequency in Hz, or 0 if an error occurs.
 * @note   Assumes HSI = 16 MHz, HSE = 8 MHz, or PLL output as system clock source.
 *         Uses RCC_CFGR to determine clock source, AHB, and APB1 prescalers.
 */
uint32_t RCC_GetPCLK1_Value(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
    uint32_t PCLK1_value, systemClock;
    uint8_t clockSrc, temp, AHBP_value, APB1P_value;

    // Extract the clock source bits (bits 2:3 of RCC->CFGR)
    clockSrc = ((RCC->CFGR >> 2) & 0x3);
 80021f2:	4b24      	ldr	r3, [pc, #144]	@ (8002284 <RCC_GetPCLK1_Value+0x98>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	089b      	lsrs	r3, r3, #2
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	727b      	strb	r3, [r7, #9]
    if (clockSrc == 0) {
 8002200:	7a7b      	ldrb	r3, [r7, #9]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d102      	bne.n	800220c <RCC_GetPCLK1_Value+0x20>
        // Clock source is HSI (internal oscillator)
        systemClock = HSI_FREQ_DEFAULT;  // e.g., 16 MHz
 8002206:	4b20      	ldr	r3, [pc, #128]	@ (8002288 <RCC_GetPCLK1_Value+0x9c>)
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	e008      	b.n	800221e <RCC_GetPCLK1_Value+0x32>
    } else if (clockSrc == 1) {
 800220c:	7a7b      	ldrb	r3, [r7, #9]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d102      	bne.n	8002218 <RCC_GetPCLK1_Value+0x2c>
        // Clock source is HSE (external oscillator)
        systemClock = HSE_FREQ_DEFAULT;  // e.g., 8 MHz
 8002212:	4b1e      	ldr	r3, [pc, #120]	@ (800228c <RCC_GetPCLK1_Value+0xa0>)
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	e002      	b.n	800221e <RCC_GetPCLK1_Value+0x32>
    } else {
        // Clock source is PLL, so get the PLL output frequency
        systemClock = RCC_GetPLLOutputClock();
 8002218:	f000 f83e 	bl	8002298 <RCC_GetPLLOutputClock>
 800221c:	60f8      	str	r0, [r7, #12]
    }

    // Get the AHB prescaler value from RCC->CFGR (bits 4:7)
    temp = ((RCC->CFGR >> 4) & 0xF);
 800221e:	4b19      	ldr	r3, [pc, #100]	@ (8002284 <RCC_GetPCLK1_Value+0x98>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	091b      	lsrs	r3, r3, #4
 8002224:	b2db      	uxtb	r3, r3
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	723b      	strb	r3, [r7, #8]
    if (temp < 8) {
 800222c:	7a3b      	ldrb	r3, [r7, #8]
 800222e:	2b07      	cmp	r3, #7
 8002230:	d802      	bhi.n	8002238 <RCC_GetPCLK1_Value+0x4c>
        // No division; AHB clock is equal to system clock
        AHBP_value = 1;
 8002232:	2301      	movs	r3, #1
 8002234:	72fb      	strb	r3, [r7, #11]
 8002236:	e005      	b.n	8002244 <RCC_GetPCLK1_Value+0x58>
    } else {
        // Division factor is determined from the AHP_Prescaler array.
        AHBP_value = AHP_Prescaler[temp - 8];
 8002238:	7a3b      	ldrb	r3, [r7, #8]
 800223a:	3b08      	subs	r3, #8
 800223c:	4a14      	ldr	r2, [pc, #80]	@ (8002290 <RCC_GetPCLK1_Value+0xa4>)
 800223e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002242:	72fb      	strb	r3, [r7, #11]
    }

    // Get the APB1 prescaler value from RCC->CFGR (bits 10:12)
    temp = ((RCC->CFGR >> 10) & 0x7);
 8002244:	4b0f      	ldr	r3, [pc, #60]	@ (8002284 <RCC_GetPCLK1_Value+0x98>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	0a9b      	lsrs	r3, r3, #10
 800224a:	b2db      	uxtb	r3, r3
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	723b      	strb	r3, [r7, #8]
    if (temp < 4) {
 8002252:	7a3b      	ldrb	r3, [r7, #8]
 8002254:	2b03      	cmp	r3, #3
 8002256:	d802      	bhi.n	800225e <RCC_GetPCLK1_Value+0x72>
        // No division; APB1 clock is equal to AHB clock
        APB1P_value = 1;
 8002258:	2301      	movs	r3, #1
 800225a:	72bb      	strb	r3, [r7, #10]
 800225c:	e004      	b.n	8002268 <RCC_GetPCLK1_Value+0x7c>
    } else {
        // Division factor is determined from the APB_Prescaler array.
        APB1P_value = APB_Prescaler[temp - 4];
 800225e:	7a3b      	ldrb	r3, [r7, #8]
 8002260:	3b04      	subs	r3, #4
 8002262:	4a0c      	ldr	r2, [pc, #48]	@ (8002294 <RCC_GetPCLK1_Value+0xa8>)
 8002264:	5cd3      	ldrb	r3, [r2, r3]
 8002266:	72bb      	strb	r3, [r7, #10]
    }

    // Compute PCLK1: First, divide the system clock by the AHB prescaler,
    // then divide that result by the APB1 prescaler.
    PCLK1_value = (systemClock / AHBP_value) / APB1P_value;
 8002268:	7afb      	ldrb	r3, [r7, #11]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002270:	7abb      	ldrb	r3, [r7, #10]
 8002272:	fbb2 f3f3 	udiv	r3, r2, r3
 8002276:	607b      	str	r3, [r7, #4]

    return PCLK1_value;
 8002278:	687b      	ldr	r3, [r7, #4]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40023800 	.word	0x40023800
 8002288:	00f42400 	.word	0x00f42400
 800228c:	007a1200 	.word	0x007a1200
 8002290:	20000004 	.word	0x20000004
 8002294:	20000014 	.word	0x20000014

08002298 <RCC_GetPLLOutputClock>:
    return PCLK2_value;
}


uint32_t  RCC_GetPLLOutputClock()
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
	return 0;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr
	...

080022a8 <TIM_PeriClockControl>:
  * @brief  Initializes the TIMx peripheral according to the specified parameters in the TIMx_Init.
  * @param  clockState Specifies whether to ENABLE or DISABLE of the clock for the TIM2 peripheral.
  * @retval None
  */
void TIM_PeriClockControl(TIM_RegDef_t *pTIMx, uint8_t clockState)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	70fb      	strb	r3, [r7, #3]
    if (clockState == ENABLE)
 80022b4:	78fb      	ldrb	r3, [r7, #3]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	f040 809b 	bne.w	80023f2 <TIM_PeriClockControl+0x14a>
    {
        if (pTIMx == TIM1)       TIM1_CLK_ENABLE();
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a89      	ldr	r2, [pc, #548]	@ (80024e4 <TIM_PeriClockControl+0x23c>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d106      	bne.n	80022d2 <TIM_PeriClockControl+0x2a>
 80022c4:	4b88      	ldr	r3, [pc, #544]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 80022c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c8:	4a87      	ldr	r2, [pc, #540]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	6453      	str	r3, [r2, #68]	@ 0x44
        else if (pTIMx == TIM11) TIM11_CLK_DISABLE();
        else if (pTIMx == TIM12) TIM12_CLK_DISABLE();
        else if (pTIMx == TIM13) TIM13_CLK_DISABLE();
        else if (pTIMx == TIM14) TIM14_CLK_DISABLE();
    }
}
 80022d0:	e144      	b.n	800255c <TIM_PeriClockControl+0x2b4>
        else if (pTIMx == TIM2)  TIM2_CLK_ENABLE();
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022d8:	d106      	bne.n	80022e8 <TIM_PeriClockControl+0x40>
 80022da:	4b83      	ldr	r3, [pc, #524]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022de:	4a82      	ldr	r2, [pc, #520]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80022e6:	e139      	b.n	800255c <TIM_PeriClockControl+0x2b4>
        else if (pTIMx == TIM3)  TIM3_CLK_ENABLE();
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a80      	ldr	r2, [pc, #512]	@ (80024ec <TIM_PeriClockControl+0x244>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d106      	bne.n	80022fe <TIM_PeriClockControl+0x56>
 80022f0:	4b7d      	ldr	r3, [pc, #500]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 80022f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f4:	4a7c      	ldr	r2, [pc, #496]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 80022f6:	f043 0302 	orr.w	r3, r3, #2
 80022fa:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80022fc:	e12e      	b.n	800255c <TIM_PeriClockControl+0x2b4>
        else if (pTIMx == TIM4)  TIM4_CLK_ENABLE();
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a7b      	ldr	r2, [pc, #492]	@ (80024f0 <TIM_PeriClockControl+0x248>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d106      	bne.n	8002314 <TIM_PeriClockControl+0x6c>
 8002306:	4b78      	ldr	r3, [pc, #480]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230a:	4a77      	ldr	r2, [pc, #476]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 800230c:	f043 0304 	orr.w	r3, r3, #4
 8002310:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002312:	e123      	b.n	800255c <TIM_PeriClockControl+0x2b4>
        else if (pTIMx == TIM5)  TIM5_CLK_ENABLE();
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a77      	ldr	r2, [pc, #476]	@ (80024f4 <TIM_PeriClockControl+0x24c>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d106      	bne.n	800232a <TIM_PeriClockControl+0x82>
 800231c:	4b72      	ldr	r3, [pc, #456]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 800231e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002320:	4a71      	ldr	r2, [pc, #452]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 8002322:	f043 0308 	orr.w	r3, r3, #8
 8002326:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002328:	e118      	b.n	800255c <TIM_PeriClockControl+0x2b4>
        else if (pTIMx == TIM6)  TIM6_CLK_ENABLE();
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a72      	ldr	r2, [pc, #456]	@ (80024f8 <TIM_PeriClockControl+0x250>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d106      	bne.n	8002340 <TIM_PeriClockControl+0x98>
 8002332:	4b6d      	ldr	r3, [pc, #436]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002336:	4a6c      	ldr	r2, [pc, #432]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 8002338:	f043 0310 	orr.w	r3, r3, #16
 800233c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800233e:	e10d      	b.n	800255c <TIM_PeriClockControl+0x2b4>
        else if (pTIMx == TIM7)  TIM7_CLK_ENABLE();
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a6e      	ldr	r2, [pc, #440]	@ (80024fc <TIM_PeriClockControl+0x254>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d106      	bne.n	8002356 <TIM_PeriClockControl+0xae>
 8002348:	4b67      	ldr	r3, [pc, #412]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 800234a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234c:	4a66      	ldr	r2, [pc, #408]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 800234e:	f043 0320 	orr.w	r3, r3, #32
 8002352:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002354:	e102      	b.n	800255c <TIM_PeriClockControl+0x2b4>
        else if (pTIMx == TIM8)  TIM8_CLK_ENABLE();
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a69      	ldr	r2, [pc, #420]	@ (8002500 <TIM_PeriClockControl+0x258>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d106      	bne.n	800236c <TIM_PeriClockControl+0xc4>
 800235e:	4b62      	ldr	r3, [pc, #392]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002362:	4a61      	ldr	r2, [pc, #388]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 8002364:	f043 0302 	orr.w	r3, r3, #2
 8002368:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800236a:	e0f7      	b.n	800255c <TIM_PeriClockControl+0x2b4>
        else if (pTIMx == TIM9)  TIM9_CLK_ENABLE();
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a65      	ldr	r2, [pc, #404]	@ (8002504 <TIM_PeriClockControl+0x25c>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d106      	bne.n	8002382 <TIM_PeriClockControl+0xda>
 8002374:	4b5c      	ldr	r3, [pc, #368]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 8002376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002378:	4a5b      	ldr	r2, [pc, #364]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 800237a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800237e:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8002380:	e0ec      	b.n	800255c <TIM_PeriClockControl+0x2b4>
        else if (pTIMx == TIM10) TIM10_CLK_ENABLE();
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a60      	ldr	r2, [pc, #384]	@ (8002508 <TIM_PeriClockControl+0x260>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d106      	bne.n	8002398 <TIM_PeriClockControl+0xf0>
 800238a:	4b57      	ldr	r3, [pc, #348]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 800238c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800238e:	4a56      	ldr	r2, [pc, #344]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 8002390:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002394:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8002396:	e0e1      	b.n	800255c <TIM_PeriClockControl+0x2b4>
        else if (pTIMx == TIM11) TIM11_CLK_ENABLE();
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a5c      	ldr	r2, [pc, #368]	@ (800250c <TIM_PeriClockControl+0x264>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d106      	bne.n	80023ae <TIM_PeriClockControl+0x106>
 80023a0:	4b51      	ldr	r3, [pc, #324]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 80023a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a4:	4a50      	ldr	r2, [pc, #320]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 80023a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023aa:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80023ac:	e0d6      	b.n	800255c <TIM_PeriClockControl+0x2b4>
        else if (pTIMx == TIM12) TIM12_CLK_ENABLE();
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a57      	ldr	r2, [pc, #348]	@ (8002510 <TIM_PeriClockControl+0x268>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d106      	bne.n	80023c4 <TIM_PeriClockControl+0x11c>
 80023b6:	4b4c      	ldr	r3, [pc, #304]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ba:	4a4b      	ldr	r2, [pc, #300]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 80023bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023c0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80023c2:	e0cb      	b.n	800255c <TIM_PeriClockControl+0x2b4>
        else if (pTIMx == TIM13) TIM13_CLK_ENABLE();
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a53      	ldr	r2, [pc, #332]	@ (8002514 <TIM_PeriClockControl+0x26c>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d106      	bne.n	80023da <TIM_PeriClockControl+0x132>
 80023cc:	4b46      	ldr	r3, [pc, #280]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 80023ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d0:	4a45      	ldr	r2, [pc, #276]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 80023d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023d6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80023d8:	e0c0      	b.n	800255c <TIM_PeriClockControl+0x2b4>
        else if (pTIMx == TIM14) TIM14_CLK_ENABLE();
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a4e      	ldr	r2, [pc, #312]	@ (8002518 <TIM_PeriClockControl+0x270>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	f040 80bc 	bne.w	800255c <TIM_PeriClockControl+0x2b4>
 80023e4:	4b40      	ldr	r3, [pc, #256]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 80023e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e8:	4a3f      	ldr	r2, [pc, #252]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 80023ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ee:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80023f0:	e0b4      	b.n	800255c <TIM_PeriClockControl+0x2b4>
        if (pTIMx == TIM1)       TIM1_CLK_DISABLE();
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a3b      	ldr	r2, [pc, #236]	@ (80024e4 <TIM_PeriClockControl+0x23c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d106      	bne.n	8002408 <TIM_PeriClockControl+0x160>
 80023fa:	4b3b      	ldr	r3, [pc, #236]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 80023fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023fe:	4a3a      	ldr	r2, [pc, #232]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 8002400:	f023 0301 	bic.w	r3, r3, #1
 8002404:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8002406:	e0a9      	b.n	800255c <TIM_PeriClockControl+0x2b4>
        else if (pTIMx == TIM2)  TIM2_CLK_DISABLE();
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800240e:	d106      	bne.n	800241e <TIM_PeriClockControl+0x176>
 8002410:	4b35      	ldr	r3, [pc, #212]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 8002412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002414:	4a34      	ldr	r2, [pc, #208]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 8002416:	f023 0301 	bic.w	r3, r3, #1
 800241a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800241c:	e09e      	b.n	800255c <TIM_PeriClockControl+0x2b4>
        else if (pTIMx == TIM3)  TIM3_CLK_DISABLE();
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a32      	ldr	r2, [pc, #200]	@ (80024ec <TIM_PeriClockControl+0x244>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d106      	bne.n	8002434 <TIM_PeriClockControl+0x18c>
 8002426:	4b30      	ldr	r3, [pc, #192]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	4a2f      	ldr	r2, [pc, #188]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 800242c:	f023 0302 	bic.w	r3, r3, #2
 8002430:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002432:	e093      	b.n	800255c <TIM_PeriClockControl+0x2b4>
        else if (pTIMx == TIM4)  TIM4_CLK_DISABLE();
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a2e      	ldr	r2, [pc, #184]	@ (80024f0 <TIM_PeriClockControl+0x248>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d106      	bne.n	800244a <TIM_PeriClockControl+0x1a2>
 800243c:	4b2a      	ldr	r3, [pc, #168]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 800243e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002440:	4a29      	ldr	r2, [pc, #164]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 8002442:	f023 0304 	bic.w	r3, r3, #4
 8002446:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002448:	e088      	b.n	800255c <TIM_PeriClockControl+0x2b4>
        else if (pTIMx == TIM5)  TIM5_CLK_DISABLE();
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a29      	ldr	r2, [pc, #164]	@ (80024f4 <TIM_PeriClockControl+0x24c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d106      	bne.n	8002460 <TIM_PeriClockControl+0x1b8>
 8002452:	4b25      	ldr	r3, [pc, #148]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002456:	4a24      	ldr	r2, [pc, #144]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 8002458:	f023 0308 	bic.w	r3, r3, #8
 800245c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800245e:	e07d      	b.n	800255c <TIM_PeriClockControl+0x2b4>
        else if (pTIMx == TIM6)  TIM6_CLK_DISABLE();
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a25      	ldr	r2, [pc, #148]	@ (80024f8 <TIM_PeriClockControl+0x250>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d106      	bne.n	8002476 <TIM_PeriClockControl+0x1ce>
 8002468:	4b1f      	ldr	r3, [pc, #124]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 800246a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246c:	4a1e      	ldr	r2, [pc, #120]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 800246e:	f023 0310 	bic.w	r3, r3, #16
 8002472:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002474:	e072      	b.n	800255c <TIM_PeriClockControl+0x2b4>
        else if (pTIMx == TIM7)  TIM7_CLK_DISABLE();
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a20      	ldr	r2, [pc, #128]	@ (80024fc <TIM_PeriClockControl+0x254>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d106      	bne.n	800248c <TIM_PeriClockControl+0x1e4>
 800247e:	4b1a      	ldr	r3, [pc, #104]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002482:	4a19      	ldr	r2, [pc, #100]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 8002484:	f023 0320 	bic.w	r3, r3, #32
 8002488:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800248a:	e067      	b.n	800255c <TIM_PeriClockControl+0x2b4>
        else if (pTIMx == TIM8)  TIM8_CLK_DISABLE();
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a1c      	ldr	r2, [pc, #112]	@ (8002500 <TIM_PeriClockControl+0x258>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d106      	bne.n	80024a2 <TIM_PeriClockControl+0x1fa>
 8002494:	4b14      	ldr	r3, [pc, #80]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 8002496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002498:	4a13      	ldr	r2, [pc, #76]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 800249a:	f023 0302 	bic.w	r3, r3, #2
 800249e:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80024a0:	e05c      	b.n	800255c <TIM_PeriClockControl+0x2b4>
        else if (pTIMx == TIM9)  TIM9_CLK_DISABLE();
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a17      	ldr	r2, [pc, #92]	@ (8002504 <TIM_PeriClockControl+0x25c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d106      	bne.n	80024b8 <TIM_PeriClockControl+0x210>
 80024aa:	4b0f      	ldr	r3, [pc, #60]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ae:	4a0e      	ldr	r2, [pc, #56]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 80024b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024b4:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80024b6:	e051      	b.n	800255c <TIM_PeriClockControl+0x2b4>
        else if (pTIMx == TIM10) TIM10_CLK_DISABLE();
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a13      	ldr	r2, [pc, #76]	@ (8002508 <TIM_PeriClockControl+0x260>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d106      	bne.n	80024ce <TIM_PeriClockControl+0x226>
 80024c0:	4b09      	ldr	r3, [pc, #36]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 80024c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c4:	4a08      	ldr	r2, [pc, #32]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 80024c6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80024ca:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80024cc:	e046      	b.n	800255c <TIM_PeriClockControl+0x2b4>
        else if (pTIMx == TIM11) TIM11_CLK_DISABLE();
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a0e      	ldr	r2, [pc, #56]	@ (800250c <TIM_PeriClockControl+0x264>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d122      	bne.n	800251c <TIM_PeriClockControl+0x274>
 80024d6:	4b04      	ldr	r3, [pc, #16]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 80024d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024da:	4a03      	ldr	r2, [pc, #12]	@ (80024e8 <TIM_PeriClockControl+0x240>)
 80024dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024e0:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80024e2:	e03b      	b.n	800255c <TIM_PeriClockControl+0x2b4>
 80024e4:	40010000 	.word	0x40010000
 80024e8:	40023800 	.word	0x40023800
 80024ec:	40000400 	.word	0x40000400
 80024f0:	40000800 	.word	0x40000800
 80024f4:	40000c00 	.word	0x40000c00
 80024f8:	40001000 	.word	0x40001000
 80024fc:	40001400 	.word	0x40001400
 8002500:	40010400 	.word	0x40010400
 8002504:	40014000 	.word	0x40014000
 8002508:	40014400 	.word	0x40014400
 800250c:	40014800 	.word	0x40014800
 8002510:	40001800 	.word	0x40001800
 8002514:	40001c00 	.word	0x40001c00
 8002518:	40002000 	.word	0x40002000
        else if (pTIMx == TIM12) TIM12_CLK_DISABLE();
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a12      	ldr	r2, [pc, #72]	@ (8002568 <TIM_PeriClockControl+0x2c0>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d106      	bne.n	8002532 <TIM_PeriClockControl+0x28a>
 8002524:	4b11      	ldr	r3, [pc, #68]	@ (800256c <TIM_PeriClockControl+0x2c4>)
 8002526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002528:	4a10      	ldr	r2, [pc, #64]	@ (800256c <TIM_PeriClockControl+0x2c4>)
 800252a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800252e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002530:	e014      	b.n	800255c <TIM_PeriClockControl+0x2b4>
        else if (pTIMx == TIM13) TIM13_CLK_DISABLE();
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a0e      	ldr	r2, [pc, #56]	@ (8002570 <TIM_PeriClockControl+0x2c8>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d106      	bne.n	8002548 <TIM_PeriClockControl+0x2a0>
 800253a:	4b0c      	ldr	r3, [pc, #48]	@ (800256c <TIM_PeriClockControl+0x2c4>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253e:	4a0b      	ldr	r2, [pc, #44]	@ (800256c <TIM_PeriClockControl+0x2c4>)
 8002540:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002544:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002546:	e009      	b.n	800255c <TIM_PeriClockControl+0x2b4>
        else if (pTIMx == TIM14) TIM14_CLK_DISABLE();
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a0a      	ldr	r2, [pc, #40]	@ (8002574 <TIM_PeriClockControl+0x2cc>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d105      	bne.n	800255c <TIM_PeriClockControl+0x2b4>
 8002550:	4b06      	ldr	r3, [pc, #24]	@ (800256c <TIM_PeriClockControl+0x2c4>)
 8002552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002554:	4a05      	ldr	r2, [pc, #20]	@ (800256c <TIM_PeriClockControl+0x2c4>)
 8002556:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800255a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40001800 	.word	0x40001800
 800256c:	40023800 	.word	0x40023800
 8002570:	40001c00 	.word	0x40001c00
 8002574:	40002000 	.word	0x40002000

08002578 <TIM_SetConfigPWM>:
                   uint8_t polarity,
                   uint32_t Prescaler,
                   uint32_t Period,
                   uint32_t DutyCycle,
                   uint8_t OCMode)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af02      	add	r7, sp, #8
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	4608      	mov	r0, r1
 8002582:	4611      	mov	r1, r2
 8002584:	461a      	mov	r2, r3
 8002586:	4603      	mov	r3, r0
 8002588:	70fb      	strb	r3, [r7, #3]
 800258a:	460b      	mov	r3, r1
 800258c:	70bb      	strb	r3, [r7, #2]
 800258e:	4613      	mov	r3, r2
 8002590:	707b      	strb	r3, [r7, #1]
    // 1. Configure counter mode (up/down/center-aligned)
    TIM_SetCounterMode(pTIMx, CounterMode);
 8002592:	78fb      	ldrb	r3, [r7, #3]
 8002594:	4619      	mov	r1, r3
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f9e4 	bl	8002964 <TIM_SetCounterMode>

    // 2. Configure clock division = no division (CKD = 00)
    pTIMx->CR1 &= ~TIM_CR1_CKD;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	601a      	str	r2, [r3, #0]
    pTIMx->CR1 |= 0;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	601a      	str	r2, [r3, #0]

    // 3. Set prescaler, period, and duty cycle
    TIM_ConfigTimeBase(pTIMx, Prescaler, Period, DutyCycle, Channel);
 80025b0:	78bb      	ldrb	r3, [r7, #2]
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	6939      	ldr	r1, [r7, #16]
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f94c 	bl	8002858 <TIM_ConfigTimeBase>

    // 4. Enable counter
    TIM_CounterControl(pTIMx, ENABLE);
 80025c0:	2101      	movs	r1, #1
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 fa12 	bl	80029ec <TIM_CounterControl>

    // 5. Enable output compare for the given channel
    TIM_ChannelOutputControl(pTIMx, Channel, ENABLE);
 80025c8:	78bb      	ldrb	r3, [r7, #2]
 80025ca:	2201      	movs	r2, #1
 80025cc:	4619      	mov	r1, r3
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f8e2 	bl	8002798 <TIM_ChannelOutputControl>

    // 6. Set output polarity
    TIM_SetChannelPolarity(pTIMx, Channel, polarity);
 80025d4:	787a      	ldrb	r2, [r7, #1]
 80025d6:	78bb      	ldrb	r3, [r7, #2]
 80025d8:	4619      	mov	r1, r3
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f87c 	bl	80026d8 <TIM_SetChannelPolarity>

    // 7. Set Output Compare mode (e.g., PWM1, PWM2, toggle, etc.)
    TIM_SetOCMode(pTIMx, Channel, OCMode);
 80025e0:	7f3a      	ldrb	r2, [r7, #28]
 80025e2:	78bb      	ldrb	r3, [r7, #2]
 80025e4:	4619      	mov	r1, r3
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f968 	bl	80028bc <TIM_SetOCMode>

    // 8. Generate an update event to load all the registers
    pTIMx->EGR |= TIM_EGR_UG;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	f043 0201 	orr.w	r2, r3, #1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	615a      	str	r2, [r3, #20]
}
 80025f8:	bf00      	nop
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <GPIO_Init_TIM>:
 * @brief  Initializes the GPIO pin for the specified timer channel.
 * @param  channel: Specifies the timer channel to configure the GPIO for.
 * @retval None
 */
void GPIO_Init_TIM(uint8_t channel)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	71fb      	strb	r3, [r7, #7]
    GPIO_HandleTypeDef GPIO_InitStruct;

    GPIO_InitStruct.pGPIOx = GPIOA;
 800260a:	4b20      	ldr	r3, [pc, #128]	@ (800268c <GPIO_Init_TIM+0x8c>)
 800260c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Init.Mode = GPIO_MODE_AF;
 800260e:	2302      	movs	r3, #2
 8002610:	747b      	strb	r3, [r7, #17]
    GPIO_InitStruct.Init.OPType = GPIO_OPTYPE_PP;
 8002612:	2300      	movs	r3, #0
 8002614:	753b      	strb	r3, [r7, #20]
    GPIO_InitStruct.Init.Pull = GPIO_NOPULL;
 8002616:	2300      	movs	r3, #0
 8002618:	74bb      	strb	r3, [r7, #18]
    GPIO_InitStruct.Init.Speed = GPIO_SPEED_LOW;
 800261a:	2300      	movs	r3, #0
 800261c:	74fb      	strb	r3, [r7, #19]
    GPIO_InitStruct.Init.Alternate = 1; // TIM2 uses AF1 on PA0–PA3
 800261e:	2301      	movs	r3, #1
 8002620:	757b      	strb	r3, [r7, #21]

    switch (channel)
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	2b03      	cmp	r3, #3
 8002626:	d82b      	bhi.n	8002680 <GPIO_Init_TIM+0x80>
 8002628:	a201      	add	r2, pc, #4	@ (adr r2, 8002630 <GPIO_Init_TIM+0x30>)
 800262a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262e:	bf00      	nop
 8002630:	08002641 	.word	0x08002641
 8002634:	08002651 	.word	0x08002651
 8002638:	08002661 	.word	0x08002661
 800263c:	08002671 	.word	0x08002671
    {
        case TIM_CHANNEL_1: // PA0
            GPIO_InitStruct.Init.Pin = GPIO_PIN_0;
 8002640:	2300      	movs	r3, #0
 8002642:	743b      	strb	r3, [r7, #16]
            GPIO_Init(&GPIO_InitStruct);
 8002644:	f107 030c 	add.w	r3, r7, #12
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff f8dd 	bl	8001808 <GPIO_Init>
            break;
 800264e:	e018      	b.n	8002682 <GPIO_Init_TIM+0x82>

        case TIM_CHANNEL_2: // PA1
            GPIO_InitStruct.Init.Pin = GPIO_PIN_1;
 8002650:	2301      	movs	r3, #1
 8002652:	743b      	strb	r3, [r7, #16]
            GPIO_Init(&GPIO_InitStruct);
 8002654:	f107 030c 	add.w	r3, r7, #12
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff f8d5 	bl	8001808 <GPIO_Init>
            break;
 800265e:	e010      	b.n	8002682 <GPIO_Init_TIM+0x82>

        case TIM_CHANNEL_3: // PA2
            GPIO_InitStruct.Init.Pin = GPIO_PIN_2;
 8002660:	2302      	movs	r3, #2
 8002662:	743b      	strb	r3, [r7, #16]
            GPIO_Init(&GPIO_InitStruct);
 8002664:	f107 030c 	add.w	r3, r7, #12
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff f8cd 	bl	8001808 <GPIO_Init>
            break;
 800266e:	e008      	b.n	8002682 <GPIO_Init_TIM+0x82>

        case TIM_CHANNEL_4: // PA3
            GPIO_InitStruct.Init.Pin = GPIO_PIN_3;
 8002670:	2303      	movs	r3, #3
 8002672:	743b      	strb	r3, [r7, #16]
            GPIO_Init(&GPIO_InitStruct);
 8002674:	f107 030c 	add.w	r3, r7, #12
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff f8c5 	bl	8001808 <GPIO_Init>
            break;
 800267e:	e000      	b.n	8002682 <GPIO_Init_TIM+0x82>

        default:
            // Invalid channel
            break;
 8002680:	bf00      	nop
    }
}
 8002682:	bf00      	nop
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40020000 	.word	0x40020000

08002690 <TIM_PWM_Init>:
 * @param  TIMx: Pointer to the TIM peripheral register structure.
 * @param  channel: Specifies the timer channel to configure for PWM output.
 * @retval None
 */
void TIM_PWM_Init(TIM_RegDef_t *TIMx,uint8_t channel)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af04      	add	r7, sp, #16
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	70fb      	strb	r3, [r7, #3]

	 /* Enable clock for the TIM */
	TIM_PeriClockControl(TIMx, ENABLE);
 800269c:	2101      	movs	r1, #1
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff fe02 	bl	80022a8 <TIM_PeriClockControl>

	/* GPIO Init for the TIM */
	GPIO_Init_TIM(channel);
 80026a4:	78fb      	ldrb	r3, [r7, #3]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff ffaa 	bl	8002600 <GPIO_Init_TIM>

	/* Init the base time for the PWM */
	TIM_SetConfigPWM(TIM2, TIM_COUNTERMODE_UP, TIM_CHANNEL_1, TIM_OC_POLARITY_HIGH, 15, 999, 500, TIM_OCMODE_PWM1);
 80026ac:	2306      	movs	r3, #6
 80026ae:	9303      	str	r3, [sp, #12]
 80026b0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80026b4:	9302      	str	r3, [sp, #8]
 80026b6:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80026ba:	9301      	str	r3, [sp, #4]
 80026bc:	230f      	movs	r3, #15
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	2300      	movs	r3, #0
 80026c2:	2200      	movs	r2, #0
 80026c4:	2100      	movs	r1, #0
 80026c6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80026ca:	f7ff ff55 	bl	8002578 <TIM_SetConfigPWM>
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <TIM_SetChannelPolarity>:
  * @param  channel  Specifies the TIM channel (TIM_CHANNEL_1 to TIM_CHANNEL_4).
  * @param  polarity Specifies the output polarity (TIM_OC_POLARITY_HIGH or TIM_OC_POLARITY_LOW).
  * @retval None
  */
void TIM_SetChannelPolarity(TIM_RegDef_t *TIMx, uint8_t channel, uint8_t polarity)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	460b      	mov	r3, r1
 80026e2:	70fb      	strb	r3, [r7, #3]
 80026e4:	4613      	mov	r3, r2
 80026e6:	70bb      	strb	r3, [r7, #2]
	switch(channel)
 80026e8:	78fb      	ldrb	r3, [r7, #3]
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d84e      	bhi.n	800278c <TIM_SetChannelPolarity+0xb4>
 80026ee:	a201      	add	r2, pc, #4	@ (adr r2, 80026f4 <TIM_SetChannelPolarity+0x1c>)
 80026f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f4:	08002705 	.word	0x08002705
 80026f8:	08002727 	.word	0x08002727
 80026fc:	08002749 	.word	0x08002749
 8002700:	0800276b 	.word	0x0800276b
	{
		case TIM_CHANNEL_1:
			if (polarity == TIM_OC_POLARITY_LOW)
 8002704:	78bb      	ldrb	r3, [r7, #2]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d106      	bne.n	8002718 <TIM_SetChannelPolarity+0x40>
			{
				TIMx->CR1 |= (1 << TIM_CCER_CC1P_Pos);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f043 0202 	orr.w	r2, r3, #2
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	601a      	str	r2, [r3, #0]
			}else {
				TIMx->CR1 &= ~(1 << TIM_CCER_CC1P_Pos);
			}
			break;
 8002716:	e03a      	b.n	800278e <TIM_SetChannelPolarity+0xb6>
				TIMx->CR1 &= ~(1 << TIM_CCER_CC1P_Pos);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f023 0202 	bic.w	r2, r3, #2
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	601a      	str	r2, [r3, #0]
			break;
 8002724:	e033      	b.n	800278e <TIM_SetChannelPolarity+0xb6>

		case TIM_CHANNEL_2:
			if (polarity == TIM_OC_POLARITY_LOW)
 8002726:	78bb      	ldrb	r3, [r7, #2]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d106      	bne.n	800273a <TIM_SetChannelPolarity+0x62>
			{
				TIMx->CR1 |= (1 << TIM_CCER_CC2P_Pos);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f043 0220 	orr.w	r2, r3, #32
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	601a      	str	r2, [r3, #0]
			}else {
				TIMx->CR1 &= ~(1 << TIM_CCER_CC2P_Pos);
			}
			break;
 8002738:	e029      	b.n	800278e <TIM_SetChannelPolarity+0xb6>
				TIMx->CR1 &= ~(1 << TIM_CCER_CC2P_Pos);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f023 0220 	bic.w	r2, r3, #32
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	601a      	str	r2, [r3, #0]
			break;
 8002746:	e022      	b.n	800278e <TIM_SetChannelPolarity+0xb6>

		case TIM_CHANNEL_3:
			if (polarity == TIM_OC_POLARITY_LOW)
 8002748:	78bb      	ldrb	r3, [r7, #2]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d106      	bne.n	800275c <TIM_SetChannelPolarity+0x84>
			{
				TIMx->CR1 |= (1 << TIM_CCER_CC3P_Pos);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	601a      	str	r2, [r3, #0]
			}else {
				TIMx->CR1 &= ~(1 << TIM_CCER_CC3P_Pos);
			}
			break;
 800275a:	e018      	b.n	800278e <TIM_SetChannelPolarity+0xb6>
				TIMx->CR1 &= ~(1 << TIM_CCER_CC3P_Pos);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	601a      	str	r2, [r3, #0]
			break;
 8002768:	e011      	b.n	800278e <TIM_SetChannelPolarity+0xb6>

		case TIM_CHANNEL_4:
			if (polarity == TIM_OC_POLARITY_LOW)
 800276a:	78bb      	ldrb	r3, [r7, #2]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d106      	bne.n	800277e <TIM_SetChannelPolarity+0xa6>
			{
				TIMx->CR1 |= (1 << TIM_CCER_CC4P_Pos);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	601a      	str	r2, [r3, #0]
			}else {
				TIMx->CR1 &= ~(1 << TIM_CCER_CC4P_Pos);
			}
			break;
 800277c:	e007      	b.n	800278e <TIM_SetChannelPolarity+0xb6>
				TIMx->CR1 &= ~(1 << TIM_CCER_CC4P_Pos);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	601a      	str	r2, [r3, #0]
			break;
 800278a:	e000      	b.n	800278e <TIM_SetChannelPolarity+0xb6>

		default:
			/* Nothing to do */
			break;
 800278c:	bf00      	nop

	}
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr

08002798 <TIM_ChannelOutputControl>:
  * @param  channel  Specifies the TIM channel (TIM_CHANNEL_1 to TIM_CHANNEL_4).
  * @param  enable   Set to 1 to enable output, 0 to disable output.
  * @retval None
  */
void TIM_ChannelOutputControl(TIM_RegDef_t *TIMx, uint8_t channel, uint8_t State)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	460b      	mov	r3, r1
 80027a2:	70fb      	strb	r3, [r7, #3]
 80027a4:	4613      	mov	r3, r2
 80027a6:	70bb      	strb	r3, [r7, #2]
    switch(channel)
 80027a8:	78fb      	ldrb	r3, [r7, #3]
 80027aa:	2b03      	cmp	r3, #3
 80027ac:	d84e      	bhi.n	800284c <TIM_ChannelOutputControl+0xb4>
 80027ae:	a201      	add	r2, pc, #4	@ (adr r2, 80027b4 <TIM_ChannelOutputControl+0x1c>)
 80027b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b4:	080027c5 	.word	0x080027c5
 80027b8:	080027e7 	.word	0x080027e7
 80027bc:	08002809 	.word	0x08002809
 80027c0:	0800282b 	.word	0x0800282b
    {
        case TIM_CHANNEL_1:
            if (State == ENABLE)
 80027c4:	78bb      	ldrb	r3, [r7, #2]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d106      	bne.n	80027d8 <TIM_ChannelOutputControl+0x40>
                TIMx->CCER |= (1 << TIM_CCER_CC1E_Pos);   // CC1E: Capture/Compare 1
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	f043 0201 	orr.w	r2, r3, #1
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	621a      	str	r2, [r3, #32]
            else
                TIMx->CCER &= ~(1 << TIM_CCER_CC1E_Pos);
            break;
 80027d6:	e03a      	b.n	800284e <TIM_ChannelOutputControl+0xb6>
                TIMx->CCER &= ~(1 << TIM_CCER_CC1E_Pos);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	f023 0201 	bic.w	r2, r3, #1
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	621a      	str	r2, [r3, #32]
            break;
 80027e4:	e033      	b.n	800284e <TIM_ChannelOutputControl+0xb6>

        case TIM_CHANNEL_2:
            if (State == ENABLE)
 80027e6:	78bb      	ldrb	r3, [r7, #2]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d106      	bne.n	80027fa <TIM_ChannelOutputControl+0x62>
                TIMx->CCER |= (1 << TIM_CCER_CC2E_Pos);   // CC2E: Capture/Compare 2
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	f043 0210 	orr.w	r2, r3, #16
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	621a      	str	r2, [r3, #32]
            else
                TIMx->CCER &= ~(1 << TIM_CCER_CC2E_Pos);
            break;
 80027f8:	e029      	b.n	800284e <TIM_ChannelOutputControl+0xb6>
                TIMx->CCER &= ~(1 << TIM_CCER_CC2E_Pos);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	f023 0210 	bic.w	r2, r3, #16
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	621a      	str	r2, [r3, #32]
            break;
 8002806:	e022      	b.n	800284e <TIM_ChannelOutputControl+0xb6>

        case TIM_CHANNEL_3:
            if (State == ENABLE)
 8002808:	78bb      	ldrb	r3, [r7, #2]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d106      	bne.n	800281c <TIM_ChannelOutputControl+0x84>
                TIMx->CCER |= (1 << TIM_CCER_CC3E_Pos);   // CC3E: Capture/Compare 3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	621a      	str	r2, [r3, #32]
            else
                TIMx->CCER &= ~(1 << TIM_CCER_CC3E_Pos);
            break;
 800281a:	e018      	b.n	800284e <TIM_ChannelOutputControl+0xb6>
                TIMx->CCER &= ~(1 << TIM_CCER_CC3E_Pos);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	621a      	str	r2, [r3, #32]
            break;
 8002828:	e011      	b.n	800284e <TIM_ChannelOutputControl+0xb6>

        case TIM_CHANNEL_4:
            if (State == ENABLE)
 800282a:	78bb      	ldrb	r3, [r7, #2]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d106      	bne.n	800283e <TIM_ChannelOutputControl+0xa6>
                TIMx->CCER |= (1 << TIM_CCER_CC4E_Pos);  // CC4E: Capture/Compare 4
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	621a      	str	r2, [r3, #32]
            else
                TIMx->CCER &= ~(1 << TIM_CCER_CC4E_Pos);
            break;
 800283c:	e007      	b.n	800284e <TIM_ChannelOutputControl+0xb6>
                TIMx->CCER &= ~(1 << TIM_CCER_CC4E_Pos);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	621a      	str	r2, [r3, #32]
            break;
 800284a:	e000      	b.n	800284e <TIM_ChannelOutputControl+0xb6>

        default:
            // Invalid channel
            break;
 800284c:	bf00      	nop
    }
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <TIM_ConfigTimeBase>:
  * @param  DutyCycle  Capture/Compare value (defines the pulse width).
  * @param  Channel    Channel to set duty cycle (1 to 4).
  * @retval None
  */
void TIM_ConfigTimeBase(TIM_RegDef_t *TIMx, uint32_t Prescaler, uint32_t Period, uint32_t DutyCycle, uint8_t Channel)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
 8002864:	603b      	str	r3, [r7, #0]
    // Set prescaler
    TIMx->PSC = Prescaler;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	629a      	str	r2, [r3, #40]	@ 0x28

    // Set auto-reload (period)
    TIMx->ARR = Period;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Set duty cycle based on channel
    switch(Channel)
 8002872:	7e3b      	ldrb	r3, [r7, #24]
 8002874:	2b03      	cmp	r3, #3
 8002876:	d81b      	bhi.n	80028b0 <TIM_ConfigTimeBase+0x58>
 8002878:	a201      	add	r2, pc, #4	@ (adr r2, 8002880 <TIM_ConfigTimeBase+0x28>)
 800287a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287e:	bf00      	nop
 8002880:	08002891 	.word	0x08002891
 8002884:	08002899 	.word	0x08002899
 8002888:	080028a1 	.word	0x080028a1
 800288c:	080028a9 	.word	0x080028a9
    {
        case TIM_CHANNEL_1:
            TIMx->CCR1 = DutyCycle;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8002896:	e00c      	b.n	80028b2 <TIM_ConfigTimeBase+0x5a>

        case TIM_CHANNEL_2:
            TIMx->CCR2 = DutyCycle;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 800289e:	e008      	b.n	80028b2 <TIM_ConfigTimeBase+0x5a>

        case TIM_CHANNEL_3:
            TIMx->CCR3 = DutyCycle;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	63da      	str	r2, [r3, #60]	@ 0x3c
            break;
 80028a6:	e004      	b.n	80028b2 <TIM_ConfigTimeBase+0x5a>

        case TIM_CHANNEL_4:
            TIMx->CCR4 = DutyCycle;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	641a      	str	r2, [r3, #64]	@ 0x40
            break;
 80028ae:	e000      	b.n	80028b2 <TIM_ConfigTimeBase+0x5a>

        default:
            // Invalid channel
            break;
 80028b0:	bf00      	nop
    }
}
 80028b2:	bf00      	nop
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr

080028bc <TIM_SetOCMode>:
  * @param  channel  Channel number (1 to 4).
  * @param  OCmode     Output Compare mode (e.g., TIM_OCMODE_PWM1, TIM_OCMODE_TOGGLE, etc.).
  * @retval None
  */
void TIM_SetOCMode(TIM_RegDef_t *TIMx, uint8_t channel, uint8_t OCmode)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	70fb      	strb	r3, [r7, #3]
 80028c8:	4613      	mov	r3, r2
 80028ca:	70bb      	strb	r3, [r7, #2]
    switch (channel)
 80028cc:	78fb      	ldrb	r3, [r7, #3]
 80028ce:	2b03      	cmp	r3, #3
 80028d0:	d842      	bhi.n	8002958 <TIM_SetOCMode+0x9c>
 80028d2:	a201      	add	r2, pc, #4	@ (adr r2, 80028d8 <TIM_SetOCMode+0x1c>)
 80028d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d8:	080028e9 	.word	0x080028e9
 80028dc:	08002905 	.word	0x08002905
 80028e0:	08002921 	.word	0x08002921
 80028e4:	0800293d 	.word	0x0800293d
    {
        case TIM_CHANNEL_1:
            // Clear bits 6:4 (OC1M) in CCMR1
            TIMx->CCMR1 &= ~(0x7 << TIM_CCMR1_OC1M_Pos);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	619a      	str	r2, [r3, #24]
            // Set new OCmode
            TIMx->CCMR1 |= (OCmode << TIM_CCMR1_OC1M_Pos);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	699a      	ldr	r2, [r3, #24]
 80028f8:	78bb      	ldrb	r3, [r7, #2]
 80028fa:	011b      	lsls	r3, r3, #4
 80028fc:	431a      	orrs	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	619a      	str	r2, [r3, #24]
            break;
 8002902:	e02a      	b.n	800295a <TIM_SetOCMode+0x9e>

        case TIM_CHANNEL_2:
            // Clear bits 14:12 (OC2M) in CCMR1
            TIMx->CCMR1 &= ~(0x7 << TIM_CCMR2_OC1M_Pos);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	619a      	str	r2, [r3, #24]
            // Set new OCmode
            TIMx->CCMR1 |= (OCmode << TIM_CCMR2_OC1M_Pos);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	699a      	ldr	r2, [r3, #24]
 8002914:	78bb      	ldrb	r3, [r7, #2]
 8002916:	031b      	lsls	r3, r3, #12
 8002918:	431a      	orrs	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	619a      	str	r2, [r3, #24]
            break;
 800291e:	e01c      	b.n	800295a <TIM_SetOCMode+0x9e>

        case TIM_CHANNEL_3:
            // Clear bits 6:4 (OC3M) in CCMR2
            TIMx->CCMR2 &= ~(0x7 << TIM_CCMR3_OC1M_Pos);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	61da      	str	r2, [r3, #28]
            // Set new OCmode
            TIMx->CCMR2 |= (OCmode << TIM_CCMR3_OC1M_Pos);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69da      	ldr	r2, [r3, #28]
 8002930:	78bb      	ldrb	r3, [r7, #2]
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	431a      	orrs	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	61da      	str	r2, [r3, #28]
            break;
 800293a:	e00e      	b.n	800295a <TIM_SetOCMode+0x9e>

        case TIM_CHANNEL_4:
            // Clear bits 14:12 (OC4M) in CCMR2
            TIMx->CCMR2 &= ~(0x7 << TIM_CCMR4_OC1M_Pos);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	61da      	str	r2, [r3, #28]
            // Set new OCmode
            TIMx->CCMR2 |= (OCmode << TIM_CCMR4_OC1M_Pos);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69da      	ldr	r2, [r3, #28]
 800294c:	78bb      	ldrb	r3, [r7, #2]
 800294e:	031b      	lsls	r3, r3, #12
 8002950:	431a      	orrs	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	61da      	str	r2, [r3, #28]
            break;
 8002956:	e000      	b.n	800295a <TIM_SetOCMode+0x9e>

        default:
            // Invalid channel
            break;
 8002958:	bf00      	nop
    }
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr

08002964 <TIM_SetCounterMode>:
  * @param  TIMx TIM peripheral
  * @param  Mode
  * @retval None
  */
static void TIM_SetCounterMode(TIM_RegDef_t *TIMx, uint8_t Mode)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	70fb      	strb	r3, [r7, #3]
	// clear bit CMS[1:0] and DIR in CR1 register
	TIMx->CR1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	601a      	str	r2, [r3, #0]

	switch(Mode)
 800297c:	78fb      	ldrb	r3, [r7, #3]
 800297e:	2b04      	cmp	r3, #4
 8002980:	d82d      	bhi.n	80029de <TIM_SetCounterMode+0x7a>
 8002982:	a201      	add	r2, pc, #4	@ (adr r2, 8002988 <TIM_SetCounterMode+0x24>)
 8002984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002988:	0800299d 	.word	0x0800299d
 800298c:	080029a7 	.word	0x080029a7
 8002990:	080029b5 	.word	0x080029b5
 8002994:	080029c3 	.word	0x080029c3
 8002998:	080029d1 	.word	0x080029d1
	{
		case TIM_COUNTERMODE_UP:
			TIMx->CR1 |= 0;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	601a      	str	r2, [r3, #0]
			break;
 80029a4:	e01c      	b.n	80029e0 <TIM_SetCounterMode+0x7c>
		case TIM_COUNTERMODE_DOWN:
			TIMx->CR1 |= TIM_CR1_DIR;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f043 0210 	orr.w	r2, r3, #16
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	601a      	str	r2, [r3, #0]
			break;
 80029b2:	e015      	b.n	80029e0 <TIM_SetCounterMode+0x7c>
		case TIM_COUNTERMODE_CENTERALIGNED1:
			TIMx->CR1 |= TIM_CR1_CMS_0; // CMS = 01
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f043 0220 	orr.w	r2, r3, #32
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	601a      	str	r2, [r3, #0]
			break;
 80029c0:	e00e      	b.n	80029e0 <TIM_SetCounterMode+0x7c>
		case TIM_COUNTERMODE_CENTERALIGNED2:
			TIMx->CR1 |= TIM_CR1_CMS_1; // CMS = 02
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	601a      	str	r2, [r3, #0]
			break;
 80029ce:	e007      	b.n	80029e0 <TIM_SetCounterMode+0x7c>
		case TIM_COUNTERMODE_CENTERALIGNED3:
			TIMx->CR1 |= TIM_CR1_CMS; // CMS = 03
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	601a      	str	r2, [r3, #0]
			break;
 80029dc:	e000      	b.n	80029e0 <TIM_SetCounterMode+0x7c>
		default:
			/* Nothing to do */
			break;
 80029de:	bf00      	nop
	}
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop

080029ec <TIM_CounterControl>:
  * @param  TIMx TIM peripheral
  * @param  State ENABLE or DISABLE
  * @retval None
  */
static void TIM_CounterControl(TIM_RegDef_t *pTIMx, uint8_t State)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	70fb      	strb	r3, [r7, #3]
	if (State == ENABLE)
 80029f8:	78fb      	ldrb	r3, [r7, #3]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d106      	bne.n	8002a0c <TIM_CounterControl+0x20>
	{
		pTIMx->CR1 |= TIM_CR1_CEN;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f043 0201 	orr.w	r2, r3, #1
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	601a      	str	r2, [r3, #0]
	}else {
		pTIMx->CR1 &= ~TIM_CR1_CEN;
	}
}
 8002a0a:	e005      	b.n	8002a18 <TIM_CounterControl+0x2c>
		pTIMx->CR1 &= ~TIM_CR1_CEN;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f023 0201 	bic.w	r2, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	601a      	str	r2, [r3, #0]
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr

08002a22 <MPU6050_WriteRegister>:
  * @param  hi2c: Pointer to I2C_HandleTypeDef structure
  * @param  reg: Register address
  * @param  value: Value to write
  * @retval I2C_StatusTypeDef: Status of the operation
  */
static I2C_StatusTypeDef MPU6050_WriteRegister(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t value) {
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b086      	sub	sp, #24
 8002a26:	af02      	add	r7, sp, #8
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	70fb      	strb	r3, [r7, #3]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	70bb      	strb	r3, [r7, #2]
    uint8_t data[2] = {reg, value};
 8002a32:	78fb      	ldrb	r3, [r7, #3]
 8002a34:	733b      	strb	r3, [r7, #12]
 8002a36:	78bb      	ldrb	r3, [r7, #2]
 8002a38:	737b      	strb	r3, [r7, #13]
    return I2C_Master_Transmit(hi2c, data, 2, MPU6050_ADDRESS, I2C_SR_DISABLE);
 8002a3a:	f107 010c 	add.w	r1, r7, #12
 8002a3e:	2300      	movs	r3, #0
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	2368      	movs	r3, #104	@ 0x68
 8002a44:	2202      	movs	r2, #2
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7ff fa68 	bl	8001f1c <I2C_Master_Transmit>
 8002a4c:	4603      	mov	r3, r0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <MPU6050_ReadRegister>:
  * @param  reg: Register address
  * @param  data: Pointer to data buffer
  * @param  size: Number of bytes to read
  * @retval I2C_StatusTypeDef: Status of the operation
  */
static I2C_StatusTypeDef MPU6050_ReadRegister(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t *data, uint16_t size) {
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b086      	sub	sp, #24
 8002a5a:	af02      	add	r7, sp, #8
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	607a      	str	r2, [r7, #4]
 8002a60:	461a      	mov	r2, r3
 8002a62:	460b      	mov	r3, r1
 8002a64:	72fb      	strb	r3, [r7, #11]
 8002a66:	4613      	mov	r3, r2
 8002a68:	813b      	strh	r3, [r7, #8]
	return I2C_Mem_Read(hi2c, MPU6050_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, size);
 8002a6a:	7afb      	ldrb	r3, [r7, #11]
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	893b      	ldrh	r3, [r7, #8]
 8002a70:	9301      	str	r3, [sp, #4]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	2301      	movs	r3, #1
 8002a78:	2168      	movs	r1, #104	@ 0x68
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f7ff fb41 	bl	8002102 <I2C_Mem_Read>
 8002a80:	4603      	mov	r3, r0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <MPU6050_Init>:
/**
  * @brief  Initialize MPU6050 sensor
  * @param  hi2c: Pointer to I2C_HandleTypeDef structure
  * @retval I2C_StatusTypeDef: Status of the operation
  */
I2C_StatusTypeDef MPU6050_Init(I2C_HandleTypeDef *hi2c) {
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b084      	sub	sp, #16
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
    I2C_StatusTypeDef status;

   // check connect
    status = MPU6050_CheckDevice(hi2c);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f83c 	bl	8002b10 <MPU6050_CheckDevice>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	73fb      	strb	r3, [r7, #15]
    if (status != I2C_OK) {
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <MPU6050_Init+0x1c>
        return status;
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
 8002aa4:	e030      	b.n	8002b08 <MPU6050_Init+0x7e>
    }

    /* wake up */
    status = MPU6050_WriteRegister(hi2c, MPU6050_REG_PWR_MGMT_1, 0x00);
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	216b      	movs	r1, #107	@ 0x6b
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff ffb9 	bl	8002a22 <MPU6050_WriteRegister>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	73fb      	strb	r3, [r7, #15]
    if (status != I2C_OK) {
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <MPU6050_Init+0x34>
        return status;
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
 8002abc:	e024      	b.n	8002b08 <MPU6050_Init+0x7e>
    }

    /* Digital filter configuration (DLPF)) */
    status = MPU6050_WriteRegister(hi2c, MPU6050_REG_CONFIG, 0x03); // DLPF = 3 (44Hz)
 8002abe:	2203      	movs	r2, #3
 8002ac0:	211a      	movs	r1, #26
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff ffad 	bl	8002a22 <MPU6050_WriteRegister>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	73fb      	strb	r3, [r7, #15]
    if (status != I2C_OK) {
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <MPU6050_Init+0x4c>
        return status;
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
 8002ad4:	e018      	b.n	8002b08 <MPU6050_Init+0x7e>
    }

    /* Gyroscope scale configuration  */
    status = MPU6050_WriteRegister(hi2c, MPU6050_REG_GYRO_CONFIG, 0x00);
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	211b      	movs	r1, #27
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff ffa1 	bl	8002a22 <MPU6050_WriteRegister>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	73fb      	strb	r3, [r7, #15]
    if (status != I2C_OK) {
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <MPU6050_Init+0x64>
        return status;
 8002aea:	7bfb      	ldrb	r3, [r7, #15]
 8002aec:	e00c      	b.n	8002b08 <MPU6050_Init+0x7e>
    }

    /* Accelerometer scale configuration */
    status = MPU6050_WriteRegister(hi2c, MPU6050_REG_ACCEL_CONFIG, 0x00);
 8002aee:	2200      	movs	r2, #0
 8002af0:	211c      	movs	r1, #28
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7ff ff95 	bl	8002a22 <MPU6050_WriteRegister>
 8002af8:	4603      	mov	r3, r0
 8002afa:	73fb      	strb	r3, [r7, #15]
    if (status != I2C_OK) {
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <MPU6050_Init+0x7c>
        return status;
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
 8002b04:	e000      	b.n	8002b08 <MPU6050_Init+0x7e>
    }


    return I2C_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <MPU6050_CheckDevice>:
/**
  * @brief  Check MPU6050 device connection
  * @param  hi2c: Pointer to I2C_HandleTypeDef structure
  * @retval I2C_StatusTypeDef: Status of the operation
  */
I2C_StatusTypeDef MPU6050_CheckDevice(I2C_HandleTypeDef *hi2c) {
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
    uint8_t who_am_i;
    I2C_StatusTypeDef status = MPU6050_ReadRegister(hi2c, MPU6050_WHO_AM_I, &who_am_i, 1);
 8002b18:	f107 020e 	add.w	r2, r7, #14
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	2175      	movs	r1, #117	@ 0x75
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7ff ff98 	bl	8002a56 <MPU6050_ReadRegister>
 8002b26:	4603      	mov	r3, r0
 8002b28:	73fb      	strb	r3, [r7, #15]
    if (status != I2C_OK || who_am_i != 0x68) {
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d102      	bne.n	8002b36 <MPU6050_CheckDevice+0x26>
 8002b30:	7bbb      	ldrb	r3, [r7, #14]
 8002b32:	2b68      	cmp	r3, #104	@ 0x68
 8002b34:	d001      	beq.n	8002b3a <MPU6050_CheckDevice+0x2a>
        return I2C_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e000      	b.n	8002b3c <MPU6050_CheckDevice+0x2c>
    }
    return I2C_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <MPU6050_ReadData>:
  * @brief  Read raw data from MPU6050
  * @param  hi2c: Pointer to I2C_HandleTypeDef structure
  * @param  data: Pointer to MPU6050_Data structure
  * @retval I2C_StatusTypeDef: Status of the operation
  */
I2C_StatusTypeDef MPU6050_ReadData(I2C_HandleTypeDef *hi2c, MPU6050_Data *data) {
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
    uint8_t buffer[14];
    I2C_StatusTypeDef status;

    /* Read 14 bytes of data from the ACCEL_XOUT_H register */
    status = MPU6050_ReadRegister(hi2c, MPU6050_REG_ACCEL_XOUT_H, buffer, 14);
 8002b4e:	f107 0208 	add.w	r2, r7, #8
 8002b52:	230e      	movs	r3, #14
 8002b54:	213b      	movs	r1, #59	@ 0x3b
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7ff ff7d 	bl	8002a56 <MPU6050_ReadRegister>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	75fb      	strb	r3, [r7, #23]
    if (status != I2C_OK) {
 8002b60:	7dfb      	ldrb	r3, [r7, #23]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <MPU6050_ReadData+0x26>
        return status;
 8002b66:	7dfb      	ldrb	r3, [r7, #23]
 8002b68:	e03c      	b.n	8002be4 <MPU6050_ReadData+0xa0>
    }

    // data of accel
    data->accel_x = (int16_t)((buffer[0] << 8) | buffer[1]);
 8002b6a:	7a3b      	ldrb	r3, [r7, #8]
 8002b6c:	b21b      	sxth	r3, r3
 8002b6e:	021b      	lsls	r3, r3, #8
 8002b70:	b21a      	sxth	r2, r3
 8002b72:	7a7b      	ldrb	r3, [r7, #9]
 8002b74:	b21b      	sxth	r3, r3
 8002b76:	4313      	orrs	r3, r2
 8002b78:	b21a      	sxth	r2, r3
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	801a      	strh	r2, [r3, #0]
    data->accel_y = (int16_t)((buffer[2] << 8) | buffer[3]);
 8002b7e:	7abb      	ldrb	r3, [r7, #10]
 8002b80:	b21b      	sxth	r3, r3
 8002b82:	021b      	lsls	r3, r3, #8
 8002b84:	b21a      	sxth	r2, r3
 8002b86:	7afb      	ldrb	r3, [r7, #11]
 8002b88:	b21b      	sxth	r3, r3
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	b21a      	sxth	r2, r3
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	805a      	strh	r2, [r3, #2]
    data->accel_z = (int16_t)((buffer[4] << 8) | buffer[5]);
 8002b92:	7b3b      	ldrb	r3, [r7, #12]
 8002b94:	b21b      	sxth	r3, r3
 8002b96:	021b      	lsls	r3, r3, #8
 8002b98:	b21a      	sxth	r2, r3
 8002b9a:	7b7b      	ldrb	r3, [r7, #13]
 8002b9c:	b21b      	sxth	r3, r3
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	b21a      	sxth	r2, r3
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	809a      	strh	r2, [r3, #4]

    // data of gyro
    data->gyro_x = (int16_t)((buffer[8] << 8) | buffer[9]);
 8002ba6:	7c3b      	ldrb	r3, [r7, #16]
 8002ba8:	b21b      	sxth	r3, r3
 8002baa:	021b      	lsls	r3, r3, #8
 8002bac:	b21a      	sxth	r2, r3
 8002bae:	7c7b      	ldrb	r3, [r7, #17]
 8002bb0:	b21b      	sxth	r3, r3
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	b21a      	sxth	r2, r3
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	80da      	strh	r2, [r3, #6]
    data->gyro_y = (int16_t)((buffer[10] << 8) | buffer[11]);
 8002bba:	7cbb      	ldrb	r3, [r7, #18]
 8002bbc:	b21b      	sxth	r3, r3
 8002bbe:	021b      	lsls	r3, r3, #8
 8002bc0:	b21a      	sxth	r2, r3
 8002bc2:	7cfb      	ldrb	r3, [r7, #19]
 8002bc4:	b21b      	sxth	r3, r3
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	b21a      	sxth	r2, r3
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	811a      	strh	r2, [r3, #8]
    data->gyro_z = (int16_t)((buffer[12] << 8) | buffer[13]);
 8002bce:	7d3b      	ldrb	r3, [r7, #20]
 8002bd0:	b21b      	sxth	r3, r3
 8002bd2:	021b      	lsls	r3, r3, #8
 8002bd4:	b21a      	sxth	r2, r3
 8002bd6:	7d7b      	ldrb	r3, [r7, #21]
 8002bd8:	b21b      	sxth	r3, r3
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	b21a      	sxth	r2, r3
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	815a      	strh	r2, [r3, #10]

    return I2C_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <MPU6050_CalibGyro>:

void MPU6050_CalibGyro(void){
 8002bec:	b5b0      	push	{r4, r5, r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
    for(uint16_t count = 0; count < 1000; count++){
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	80fb      	strh	r3, [r7, #6]
 8002bf6:	e020      	b.n	8002c3a <MPU6050_CalibGyro+0x4e>
      if(MPU6050_ReadData(&hi2c1, &sensor_data) == I2C_OK){
 8002bf8:	491d      	ldr	r1, [pc, #116]	@ (8002c70 <MPU6050_CalibGyro+0x84>)
 8002bfa:	481e      	ldr	r0, [pc, #120]	@ (8002c74 <MPU6050_CalibGyro+0x88>)
 8002bfc:	f7ff ffa2 	bl	8002b44 <MPU6050_ReadData>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d116      	bne.n	8002c34 <MPU6050_CalibGyro+0x48>
	  MPU6050_ConvertData(&sensor_data, &converted_data);
 8002c06:	491c      	ldr	r1, [pc, #112]	@ (8002c78 <MPU6050_CalibGyro+0x8c>)
 8002c08:	4819      	ldr	r0, [pc, #100]	@ (8002c70 <MPU6050_CalibGyro+0x84>)
 8002c0a:	f000 f83d 	bl	8002c88 <MPU6050_ConvertData>
	  MPU_CalibValue += converted_data.gyro_x_dps;
 8002c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002c78 <MPU6050_CalibGyro+0x8c>)
 8002c10:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002c14:	4b19      	ldr	r3, [pc, #100]	@ (8002c7c <MPU6050_CalibGyro+0x90>)
 8002c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1a:	f7fd fb37 	bl	800028c <__adddf3>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4916      	ldr	r1, [pc, #88]	@ (8002c7c <MPU6050_CalibGyro+0x90>)
 8002c24:	e9c1 2300 	strd	r2, r3, [r1]
	  data_count ++;
 8002c28:	4b15      	ldr	r3, [pc, #84]	@ (8002c80 <MPU6050_CalibGyro+0x94>)
 8002c2a:	881b      	ldrh	r3, [r3, #0]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	4b13      	ldr	r3, [pc, #76]	@ (8002c80 <MPU6050_CalibGyro+0x94>)
 8002c32:	801a      	strh	r2, [r3, #0]
    for(uint16_t count = 0; count < 1000; count++){
 8002c34:	88fb      	ldrh	r3, [r7, #6]
 8002c36:	3301      	adds	r3, #1
 8002c38:	80fb      	strh	r3, [r7, #6]
 8002c3a:	88fb      	ldrh	r3, [r7, #6]
 8002c3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c40:	d3da      	bcc.n	8002bf8 <MPU6050_CalibGyro+0xc>
      }

    }

    MPU_CalibValue /= data_count;
 8002c42:	4b0e      	ldr	r3, [pc, #56]	@ (8002c7c <MPU6050_CalibGyro+0x90>)
 8002c44:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002c48:	4b0d      	ldr	r3, [pc, #52]	@ (8002c80 <MPU6050_CalibGyro+0x94>)
 8002c4a:	881b      	ldrh	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fd fc69 	bl	8000524 <__aeabi_i2d>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4620      	mov	r0, r4
 8002c58:	4629      	mov	r1, r5
 8002c5a:	f7fd fdf7 	bl	800084c <__aeabi_ddiv>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	4906      	ldr	r1, [pc, #24]	@ (8002c7c <MPU6050_CalibGyro+0x90>)
 8002c64:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002c68:	bf00      	nop
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bdb0      	pop	{r4, r5, r7, pc}
 8002c70:	20000224 	.word	0x20000224
 8002c74:	200001fc 	.word	0x200001fc
 8002c78:	20000230 	.word	0x20000230
 8002c7c:	20000270 	.word	0x20000270
 8002c80:	20000278 	.word	0x20000278
 8002c84:	00000000 	.word	0x00000000

08002c88 <MPU6050_ConvertData>:
  * @brief  Convert raw data to physical units
  * @param  raw_data: Pointer to MPU6050_Data structure
  * @param  converted_data: Pointer to MPU6050_ConvertedData structure
  * @retval None
  */
void MPU6050_ConvertData(const MPU6050_Data *raw_data, MPU6050_ConvertedData *converted_data) {
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]

    converted_data->accel_x_mps2 = (double)raw_data->accel_x * 9.81f / 16384.0f;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fd fc43 	bl	8000524 <__aeabi_i2d>
 8002c9e:	a33c      	add	r3, pc, #240	@ (adr r3, 8002d90 <MPU6050_ConvertData+0x108>)
 8002ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca4:	f7fd fca8 	bl	80005f8 <__aeabi_dmul>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4610      	mov	r0, r2
 8002cae:	4619      	mov	r1, r3
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	4b3a      	ldr	r3, [pc, #232]	@ (8002da0 <MPU6050_ConvertData+0x118>)
 8002cb6:	f7fd fdc9 	bl	800084c <__aeabi_ddiv>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	6839      	ldr	r1, [r7, #0]
 8002cc0:	e9c1 2300 	strd	r2, r3, [r1]
    converted_data->accel_y_mps2 = (double)raw_data->accel_y * 9.81f / 16384.0f;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fd fc2a 	bl	8000524 <__aeabi_i2d>
 8002cd0:	a32f      	add	r3, pc, #188	@ (adr r3, 8002d90 <MPU6050_ConvertData+0x108>)
 8002cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd6:	f7fd fc8f 	bl	80005f8 <__aeabi_dmul>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4610      	mov	r0, r2
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	f04f 0200 	mov.w	r2, #0
 8002ce6:	4b2e      	ldr	r3, [pc, #184]	@ (8002da0 <MPU6050_ConvertData+0x118>)
 8002ce8:	f7fd fdb0 	bl	800084c <__aeabi_ddiv>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	6839      	ldr	r1, [r7, #0]
 8002cf2:	e9c1 2302 	strd	r2, r3, [r1, #8]
    converted_data->accel_z_mps2 = (double)raw_data->accel_z * 9.81f / 16384.0f;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7fd fc11 	bl	8000524 <__aeabi_i2d>
 8002d02:	a323      	add	r3, pc, #140	@ (adr r3, 8002d90 <MPU6050_ConvertData+0x108>)
 8002d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d08:	f7fd fc76 	bl	80005f8 <__aeabi_dmul>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	460b      	mov	r3, r1
 8002d10:	4610      	mov	r0, r2
 8002d12:	4619      	mov	r1, r3
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	4b21      	ldr	r3, [pc, #132]	@ (8002da0 <MPU6050_ConvertData+0x118>)
 8002d1a:	f7fd fd97 	bl	800084c <__aeabi_ddiv>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	6839      	ldr	r1, [r7, #0]
 8002d24:	e9c1 2304 	strd	r2, r3, [r1, #16]

    converted_data->gyro_x_dps = (double)raw_data->gyro_x / 131.0f;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fbf8 	bl	8000524 <__aeabi_i2d>
 8002d34:	a318      	add	r3, pc, #96	@ (adr r3, 8002d98 <MPU6050_ConvertData+0x110>)
 8002d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3a:	f7fd fd87 	bl	800084c <__aeabi_ddiv>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	6839      	ldr	r1, [r7, #0]
 8002d44:	e9c1 2306 	strd	r2, r3, [r1, #24]
    converted_data->gyro_y_dps = (double)raw_data->gyro_y / 131.0f;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fd fbe8 	bl	8000524 <__aeabi_i2d>
 8002d54:	a310      	add	r3, pc, #64	@ (adr r3, 8002d98 <MPU6050_ConvertData+0x110>)
 8002d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5a:	f7fd fd77 	bl	800084c <__aeabi_ddiv>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	6839      	ldr	r1, [r7, #0]
 8002d64:	e9c1 2308 	strd	r2, r3, [r1, #32]
    converted_data->gyro_z_dps = (double)raw_data->gyro_z / 131.0f;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fd fbd8 	bl	8000524 <__aeabi_i2d>
 8002d74:	a308      	add	r3, pc, #32	@ (adr r3, 8002d98 <MPU6050_ConvertData+0x110>)
 8002d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7a:	f7fd fd67 	bl	800084c <__aeabi_ddiv>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	6839      	ldr	r1, [r7, #0]
 8002d84:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

}
 8002d88:	bf00      	nop
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	60000000 	.word	0x60000000
 8002d94:	40239eb8 	.word	0x40239eb8
 8002d98:	00000000 	.word	0x00000000
 8002d9c:	40606000 	.word	0x40606000
 8002da0:	40d00000 	.word	0x40d00000
 8002da4:	00000000 	.word	0x00000000

08002da8 <MPU6050_GetAngle>:
 * @brief Calculate angle using complementary filter
 * @param data: Pointer to MPU6050_ConvertedData structure
 * @param dt: Time step (seconds)
 * @return Current angle (degrees)
 */
double MPU6050_GetAngle(const MPU6050_ConvertedData *data) {
 8002da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002daa:	b095      	sub	sp, #84	@ 0x54
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
    // static double prev_pitch_gyro = 0.0;
    double acc_x = data->accel_x_mps2;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db6:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double acc_y = data->accel_y_mps2;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002dc0:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    double acc_z = data->accel_z_mps2;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002dca:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

    // Complementary filter
    double alpha = 0.02;
 8002dce:	a354      	add	r3, pc, #336	@ (adr r3, 8002f20 <MPU6050_GetAngle+0x178>)
 8002dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    static uint32_t lastTick = 0;
    //Previous gyro pitch data
    static double prev_pitch_gyro = 0.0;

    //Get pitch data from Accelerometer
    double pitch_acc = atan2f(acc_y, sqrtf(acc_x * acc_x + acc_z * acc_z)) * 180.0 / M_PI;
 8002dd8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002ddc:	f7fd ff04 	bl	8000be8 <__aeabi_d2f>
 8002de0:	4606      	mov	r6, r0
 8002de2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002de6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002dea:	f7fd fc05 	bl	80005f8 <__aeabi_dmul>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4614      	mov	r4, r2
 8002df4:	461d      	mov	r5, r3
 8002df6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002dfa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002dfe:	f7fd fbfb 	bl	80005f8 <__aeabi_dmul>
 8002e02:	4602      	mov	r2, r0
 8002e04:	460b      	mov	r3, r1
 8002e06:	4620      	mov	r0, r4
 8002e08:	4629      	mov	r1, r5
 8002e0a:	f7fd fa3f 	bl	800028c <__adddf3>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4610      	mov	r0, r2
 8002e14:	4619      	mov	r1, r3
 8002e16:	f7fd fee7 	bl	8000be8 <__aeabi_d2f>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f004 fbff 	bl	8007620 <sqrtf>
 8002e22:	4603      	mov	r3, r0
 8002e24:	4619      	mov	r1, r3
 8002e26:	4630      	mov	r0, r6
 8002e28:	f004 fbf8 	bl	800761c <atan2f>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fd fb8a 	bl	8000548 <__aeabi_f2d>
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	4b3d      	ldr	r3, [pc, #244]	@ (8002f30 <MPU6050_GetAngle+0x188>)
 8002e3a:	f7fd fbdd 	bl	80005f8 <__aeabi_dmul>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	4610      	mov	r0, r2
 8002e44:	4619      	mov	r1, r3
 8002e46:	a338      	add	r3, pc, #224	@ (adr r3, 8002f28 <MPU6050_GetAngle+0x180>)
 8002e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4c:	f7fd fcfe 	bl	800084c <__aeabi_ddiv>
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    //Calculate dt
    uint32_t currentTick = getTick();
 8002e58:	f7fe fbc0 	bl	80015dc <getTick>
 8002e5c:	6278      	str	r0, [r7, #36]	@ 0x24
    double dt = (currentTick - lastTick) / 1000.0;
 8002e5e:	4b35      	ldr	r3, [pc, #212]	@ (8002f34 <MPU6050_GetAngle+0x18c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fd fb4c 	bl	8000504 <__aeabi_ui2d>
 8002e6c:	f04f 0200 	mov.w	r2, #0
 8002e70:	4b31      	ldr	r3, [pc, #196]	@ (8002f38 <MPU6050_GetAngle+0x190>)
 8002e72:	f7fd fceb 	bl	800084c <__aeabi_ddiv>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    lastTick = currentTick;
 8002e7e:	4a2d      	ldr	r2, [pc, #180]	@ (8002f34 <MPU6050_GetAngle+0x18c>)
 8002e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e82:	6013      	str	r3, [r2, #0]

    //Calculate Gyro pitch data use Complementary filter
    double current_pitch_gyro = prev_pitch_gyro + (data->gyro_x_dps - MPU_CalibValue) * dt;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002e8a:	4b2c      	ldr	r3, [pc, #176]	@ (8002f3c <MPU6050_GetAngle+0x194>)
 8002e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e90:	f7fd f9fa 	bl	8000288 <__aeabi_dsub>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4610      	mov	r0, r2
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ea0:	f7fd fbaa 	bl	80005f8 <__aeabi_dmul>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4b24      	ldr	r3, [pc, #144]	@ (8002f40 <MPU6050_GetAngle+0x198>)
 8002eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb2:	f7fd f9eb 	bl	800028c <__adddf3>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double angle = (1.0 - alpha) * current_pitch_gyro + alpha * pitch_acc;
 8002ebe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002ec2:	f04f 0000 	mov.w	r0, #0
 8002ec6:	491f      	ldr	r1, [pc, #124]	@ (8002f44 <MPU6050_GetAngle+0x19c>)
 8002ec8:	f7fd f9de 	bl	8000288 <__aeabi_dsub>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4610      	mov	r0, r2
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ed8:	f7fd fb8e 	bl	80005f8 <__aeabi_dmul>
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	4614      	mov	r4, r2
 8002ee2:	461d      	mov	r5, r3
 8002ee4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ee8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002eec:	f7fd fb84 	bl	80005f8 <__aeabi_dmul>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	4629      	mov	r1, r5
 8002ef8:	f7fd f9c8 	bl	800028c <__adddf3>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	e9c7 2302 	strd	r2, r3, [r7, #8]
    prev_pitch_gyro = angle;
 8002f04:	490e      	ldr	r1, [pc, #56]	@ (8002f40 <MPU6050_GetAngle+0x198>)
 8002f06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f0a:	e9c1 2300 	strd	r2, r3, [r1]

    return angle;
 8002f0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8002f12:	4610      	mov	r0, r2
 8002f14:	4619      	mov	r1, r3
 8002f16:	3754      	adds	r7, #84	@ 0x54
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f1c:	f3af 8000 	nop.w
 8002f20:	47ae147b 	.word	0x47ae147b
 8002f24:	3f947ae1 	.word	0x3f947ae1
 8002f28:	54442d18 	.word	0x54442d18
 8002f2c:	400921fb 	.word	0x400921fb
 8002f30:	40668000 	.word	0x40668000
 8002f34:	2000027c 	.word	0x2000027c
 8002f38:	408f4000 	.word	0x408f4000
 8002f3c:	20000270 	.word	0x20000270
 8002f40:	20000280 	.word	0x20000280
 8002f44:	3ff00000 	.word	0x3ff00000

08002f48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f48:	480d      	ldr	r0, [pc, #52]	@ (8002f80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f4a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f4c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f50:	480c      	ldr	r0, [pc, #48]	@ (8002f84 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f52:	490d      	ldr	r1, [pc, #52]	@ (8002f88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f54:	4a0d      	ldr	r2, [pc, #52]	@ (8002f8c <LoopForever+0xe>)
  movs r3, #0
 8002f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f58:	e002      	b.n	8002f60 <LoopCopyDataInit>

08002f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f5e:	3304      	adds	r3, #4

08002f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f64:	d3f9      	bcc.n	8002f5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f66:	4a0a      	ldr	r2, [pc, #40]	@ (8002f90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f68:	4c0a      	ldr	r4, [pc, #40]	@ (8002f94 <LoopForever+0x16>)
  movs r3, #0
 8002f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f6c:	e001      	b.n	8002f72 <LoopFillZerobss>

08002f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f70:	3204      	adds	r2, #4

08002f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f74:	d3fb      	bcc.n	8002f6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f76:	f000 ffef 	bl	8003f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f7a:	f7fe f9a5 	bl	80012c8 <main>

08002f7e <LoopForever>:

LoopForever:
  b LoopForever
 8002f7e:	e7fe      	b.n	8002f7e <LoopForever>
  ldr   r0, =_estack
 8002f80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f88:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002f8c:	08007efc 	.word	0x08007efc
  ldr r2, =_sbss
 8002f90:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002f94:	200003d4 	.word	0x200003d4

08002f98 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f98:	e7fe      	b.n	8002f98 <ADC_IRQHandler>

08002f9a <__cvt>:
 8002f9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f9e:	b088      	sub	sp, #32
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	461d      	mov	r5, r3
 8002fa4:	4614      	mov	r4, r2
 8002fa6:	bfbc      	itt	lt
 8002fa8:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8002fac:	4614      	movlt	r4, r2
 8002fae:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8002fb0:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8002fb2:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8002fb6:	bfb6      	itet	lt
 8002fb8:	461d      	movlt	r5, r3
 8002fba:	2300      	movge	r3, #0
 8002fbc:	232d      	movlt	r3, #45	@ 0x2d
 8002fbe:	7013      	strb	r3, [r2, #0]
 8002fc0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002fc2:	f023 0820 	bic.w	r8, r3, #32
 8002fc6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002fca:	d005      	beq.n	8002fd8 <__cvt+0x3e>
 8002fcc:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002fd0:	d100      	bne.n	8002fd4 <__cvt+0x3a>
 8002fd2:	3601      	adds	r6, #1
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e000      	b.n	8002fda <__cvt+0x40>
 8002fd8:	2303      	movs	r3, #3
 8002fda:	aa07      	add	r2, sp, #28
 8002fdc:	9204      	str	r2, [sp, #16]
 8002fde:	aa06      	add	r2, sp, #24
 8002fe0:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002fe4:	e9cd 3600 	strd	r3, r6, [sp]
 8002fe8:	4622      	mov	r2, r4
 8002fea:	462b      	mov	r3, r5
 8002fec:	f001 f868 	bl	80040c0 <_dtoa_r>
 8002ff0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002ff4:	4607      	mov	r7, r0
 8002ff6:	d119      	bne.n	800302c <__cvt+0x92>
 8002ff8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8002ffa:	07db      	lsls	r3, r3, #31
 8002ffc:	d50e      	bpl.n	800301c <__cvt+0x82>
 8002ffe:	eb00 0906 	add.w	r9, r0, r6
 8003002:	2200      	movs	r2, #0
 8003004:	2300      	movs	r3, #0
 8003006:	4620      	mov	r0, r4
 8003008:	4629      	mov	r1, r5
 800300a:	f7fd fd5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800300e:	b108      	cbz	r0, 8003014 <__cvt+0x7a>
 8003010:	f8cd 901c 	str.w	r9, [sp, #28]
 8003014:	2230      	movs	r2, #48	@ 0x30
 8003016:	9b07      	ldr	r3, [sp, #28]
 8003018:	454b      	cmp	r3, r9
 800301a:	d31e      	bcc.n	800305a <__cvt+0xc0>
 800301c:	9b07      	ldr	r3, [sp, #28]
 800301e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003020:	1bdb      	subs	r3, r3, r7
 8003022:	4638      	mov	r0, r7
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	b008      	add	sp, #32
 8003028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800302c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003030:	eb00 0906 	add.w	r9, r0, r6
 8003034:	d1e5      	bne.n	8003002 <__cvt+0x68>
 8003036:	7803      	ldrb	r3, [r0, #0]
 8003038:	2b30      	cmp	r3, #48	@ 0x30
 800303a:	d10a      	bne.n	8003052 <__cvt+0xb8>
 800303c:	2200      	movs	r2, #0
 800303e:	2300      	movs	r3, #0
 8003040:	4620      	mov	r0, r4
 8003042:	4629      	mov	r1, r5
 8003044:	f7fd fd40 	bl	8000ac8 <__aeabi_dcmpeq>
 8003048:	b918      	cbnz	r0, 8003052 <__cvt+0xb8>
 800304a:	f1c6 0601 	rsb	r6, r6, #1
 800304e:	f8ca 6000 	str.w	r6, [sl]
 8003052:	f8da 3000 	ldr.w	r3, [sl]
 8003056:	4499      	add	r9, r3
 8003058:	e7d3      	b.n	8003002 <__cvt+0x68>
 800305a:	1c59      	adds	r1, r3, #1
 800305c:	9107      	str	r1, [sp, #28]
 800305e:	701a      	strb	r2, [r3, #0]
 8003060:	e7d9      	b.n	8003016 <__cvt+0x7c>

08003062 <__exponent>:
 8003062:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003064:	2900      	cmp	r1, #0
 8003066:	bfba      	itte	lt
 8003068:	4249      	neglt	r1, r1
 800306a:	232d      	movlt	r3, #45	@ 0x2d
 800306c:	232b      	movge	r3, #43	@ 0x2b
 800306e:	2909      	cmp	r1, #9
 8003070:	7002      	strb	r2, [r0, #0]
 8003072:	7043      	strb	r3, [r0, #1]
 8003074:	dd29      	ble.n	80030ca <__exponent+0x68>
 8003076:	f10d 0307 	add.w	r3, sp, #7
 800307a:	461d      	mov	r5, r3
 800307c:	270a      	movs	r7, #10
 800307e:	461a      	mov	r2, r3
 8003080:	fbb1 f6f7 	udiv	r6, r1, r7
 8003084:	fb07 1416 	mls	r4, r7, r6, r1
 8003088:	3430      	adds	r4, #48	@ 0x30
 800308a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800308e:	460c      	mov	r4, r1
 8003090:	2c63      	cmp	r4, #99	@ 0x63
 8003092:	f103 33ff 	add.w	r3, r3, #4294967295
 8003096:	4631      	mov	r1, r6
 8003098:	dcf1      	bgt.n	800307e <__exponent+0x1c>
 800309a:	3130      	adds	r1, #48	@ 0x30
 800309c:	1e94      	subs	r4, r2, #2
 800309e:	f803 1c01 	strb.w	r1, [r3, #-1]
 80030a2:	1c41      	adds	r1, r0, #1
 80030a4:	4623      	mov	r3, r4
 80030a6:	42ab      	cmp	r3, r5
 80030a8:	d30a      	bcc.n	80030c0 <__exponent+0x5e>
 80030aa:	f10d 0309 	add.w	r3, sp, #9
 80030ae:	1a9b      	subs	r3, r3, r2
 80030b0:	42ac      	cmp	r4, r5
 80030b2:	bf88      	it	hi
 80030b4:	2300      	movhi	r3, #0
 80030b6:	3302      	adds	r3, #2
 80030b8:	4403      	add	r3, r0
 80030ba:	1a18      	subs	r0, r3, r0
 80030bc:	b003      	add	sp, #12
 80030be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030c0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80030c4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80030c8:	e7ed      	b.n	80030a6 <__exponent+0x44>
 80030ca:	2330      	movs	r3, #48	@ 0x30
 80030cc:	3130      	adds	r1, #48	@ 0x30
 80030ce:	7083      	strb	r3, [r0, #2]
 80030d0:	70c1      	strb	r1, [r0, #3]
 80030d2:	1d03      	adds	r3, r0, #4
 80030d4:	e7f1      	b.n	80030ba <__exponent+0x58>
	...

080030d8 <_printf_float>:
 80030d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030dc:	b091      	sub	sp, #68	@ 0x44
 80030de:	460c      	mov	r4, r1
 80030e0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80030e4:	4616      	mov	r6, r2
 80030e6:	461f      	mov	r7, r3
 80030e8:	4605      	mov	r5, r0
 80030ea:	f000 fee5 	bl	8003eb8 <_localeconv_r>
 80030ee:	6803      	ldr	r3, [r0, #0]
 80030f0:	9308      	str	r3, [sp, #32]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fd f8bc 	bl	8000270 <strlen>
 80030f8:	2300      	movs	r3, #0
 80030fa:	930e      	str	r3, [sp, #56]	@ 0x38
 80030fc:	f8d8 3000 	ldr.w	r3, [r8]
 8003100:	9009      	str	r0, [sp, #36]	@ 0x24
 8003102:	3307      	adds	r3, #7
 8003104:	f023 0307 	bic.w	r3, r3, #7
 8003108:	f103 0208 	add.w	r2, r3, #8
 800310c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003110:	f8d4 b000 	ldr.w	fp, [r4]
 8003114:	f8c8 2000 	str.w	r2, [r8]
 8003118:	e9d3 8900 	ldrd	r8, r9, [r3]
 800311c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003120:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003122:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003126:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800312a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800312e:	4b9d      	ldr	r3, [pc, #628]	@ (80033a4 <_printf_float+0x2cc>)
 8003130:	f04f 32ff 	mov.w	r2, #4294967295
 8003134:	f7fd fcfa 	bl	8000b2c <__aeabi_dcmpun>
 8003138:	bb70      	cbnz	r0, 8003198 <_printf_float+0xc0>
 800313a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800313e:	4b99      	ldr	r3, [pc, #612]	@ (80033a4 <_printf_float+0x2cc>)
 8003140:	f04f 32ff 	mov.w	r2, #4294967295
 8003144:	f7fd fcd4 	bl	8000af0 <__aeabi_dcmple>
 8003148:	bb30      	cbnz	r0, 8003198 <_printf_float+0xc0>
 800314a:	2200      	movs	r2, #0
 800314c:	2300      	movs	r3, #0
 800314e:	4640      	mov	r0, r8
 8003150:	4649      	mov	r1, r9
 8003152:	f7fd fcc3 	bl	8000adc <__aeabi_dcmplt>
 8003156:	b110      	cbz	r0, 800315e <_printf_float+0x86>
 8003158:	232d      	movs	r3, #45	@ 0x2d
 800315a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800315e:	4a92      	ldr	r2, [pc, #584]	@ (80033a8 <_printf_float+0x2d0>)
 8003160:	4b92      	ldr	r3, [pc, #584]	@ (80033ac <_printf_float+0x2d4>)
 8003162:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003166:	bf8c      	ite	hi
 8003168:	4690      	movhi	r8, r2
 800316a:	4698      	movls	r8, r3
 800316c:	2303      	movs	r3, #3
 800316e:	6123      	str	r3, [r4, #16]
 8003170:	f02b 0304 	bic.w	r3, fp, #4
 8003174:	6023      	str	r3, [r4, #0]
 8003176:	f04f 0900 	mov.w	r9, #0
 800317a:	9700      	str	r7, [sp, #0]
 800317c:	4633      	mov	r3, r6
 800317e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003180:	4621      	mov	r1, r4
 8003182:	4628      	mov	r0, r5
 8003184:	f000 f9d4 	bl	8003530 <_printf_common>
 8003188:	3001      	adds	r0, #1
 800318a:	f040 808f 	bne.w	80032ac <_printf_float+0x1d4>
 800318e:	f04f 30ff 	mov.w	r0, #4294967295
 8003192:	b011      	add	sp, #68	@ 0x44
 8003194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003198:	4642      	mov	r2, r8
 800319a:	464b      	mov	r3, r9
 800319c:	4640      	mov	r0, r8
 800319e:	4649      	mov	r1, r9
 80031a0:	f7fd fcc4 	bl	8000b2c <__aeabi_dcmpun>
 80031a4:	b140      	cbz	r0, 80031b8 <_printf_float+0xe0>
 80031a6:	464b      	mov	r3, r9
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	bfbc      	itt	lt
 80031ac:	232d      	movlt	r3, #45	@ 0x2d
 80031ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80031b2:	4a7f      	ldr	r2, [pc, #508]	@ (80033b0 <_printf_float+0x2d8>)
 80031b4:	4b7f      	ldr	r3, [pc, #508]	@ (80033b4 <_printf_float+0x2dc>)
 80031b6:	e7d4      	b.n	8003162 <_printf_float+0x8a>
 80031b8:	6863      	ldr	r3, [r4, #4]
 80031ba:	1c5a      	adds	r2, r3, #1
 80031bc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80031c0:	d13f      	bne.n	8003242 <_printf_float+0x16a>
 80031c2:	2306      	movs	r3, #6
 80031c4:	6063      	str	r3, [r4, #4]
 80031c6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80031ca:	2200      	movs	r2, #0
 80031cc:	6023      	str	r3, [r4, #0]
 80031ce:	9206      	str	r2, [sp, #24]
 80031d0:	aa0e      	add	r2, sp, #56	@ 0x38
 80031d2:	e9cd a204 	strd	sl, r2, [sp, #16]
 80031d6:	aa0d      	add	r2, sp, #52	@ 0x34
 80031d8:	9203      	str	r2, [sp, #12]
 80031da:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80031de:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80031e2:	6863      	ldr	r3, [r4, #4]
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	4642      	mov	r2, r8
 80031e8:	464b      	mov	r3, r9
 80031ea:	4628      	mov	r0, r5
 80031ec:	910a      	str	r1, [sp, #40]	@ 0x28
 80031ee:	f7ff fed4 	bl	8002f9a <__cvt>
 80031f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80031f4:	2947      	cmp	r1, #71	@ 0x47
 80031f6:	4680      	mov	r8, r0
 80031f8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80031fa:	d128      	bne.n	800324e <_printf_float+0x176>
 80031fc:	1cc8      	adds	r0, r1, #3
 80031fe:	db02      	blt.n	8003206 <_printf_float+0x12e>
 8003200:	6863      	ldr	r3, [r4, #4]
 8003202:	4299      	cmp	r1, r3
 8003204:	dd40      	ble.n	8003288 <_printf_float+0x1b0>
 8003206:	f1aa 0a02 	sub.w	sl, sl, #2
 800320a:	fa5f fa8a 	uxtb.w	sl, sl
 800320e:	3901      	subs	r1, #1
 8003210:	4652      	mov	r2, sl
 8003212:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003216:	910d      	str	r1, [sp, #52]	@ 0x34
 8003218:	f7ff ff23 	bl	8003062 <__exponent>
 800321c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800321e:	1813      	adds	r3, r2, r0
 8003220:	2a01      	cmp	r2, #1
 8003222:	4681      	mov	r9, r0
 8003224:	6123      	str	r3, [r4, #16]
 8003226:	dc02      	bgt.n	800322e <_printf_float+0x156>
 8003228:	6822      	ldr	r2, [r4, #0]
 800322a:	07d2      	lsls	r2, r2, #31
 800322c:	d501      	bpl.n	8003232 <_printf_float+0x15a>
 800322e:	3301      	adds	r3, #1
 8003230:	6123      	str	r3, [r4, #16]
 8003232:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003236:	2b00      	cmp	r3, #0
 8003238:	d09f      	beq.n	800317a <_printf_float+0xa2>
 800323a:	232d      	movs	r3, #45	@ 0x2d
 800323c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003240:	e79b      	b.n	800317a <_printf_float+0xa2>
 8003242:	2947      	cmp	r1, #71	@ 0x47
 8003244:	d1bf      	bne.n	80031c6 <_printf_float+0xee>
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1bd      	bne.n	80031c6 <_printf_float+0xee>
 800324a:	2301      	movs	r3, #1
 800324c:	e7ba      	b.n	80031c4 <_printf_float+0xec>
 800324e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003252:	d9dc      	bls.n	800320e <_printf_float+0x136>
 8003254:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003258:	d118      	bne.n	800328c <_printf_float+0x1b4>
 800325a:	2900      	cmp	r1, #0
 800325c:	6863      	ldr	r3, [r4, #4]
 800325e:	dd0b      	ble.n	8003278 <_printf_float+0x1a0>
 8003260:	6121      	str	r1, [r4, #16]
 8003262:	b913      	cbnz	r3, 800326a <_printf_float+0x192>
 8003264:	6822      	ldr	r2, [r4, #0]
 8003266:	07d0      	lsls	r0, r2, #31
 8003268:	d502      	bpl.n	8003270 <_printf_float+0x198>
 800326a:	3301      	adds	r3, #1
 800326c:	440b      	add	r3, r1
 800326e:	6123      	str	r3, [r4, #16]
 8003270:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003272:	f04f 0900 	mov.w	r9, #0
 8003276:	e7dc      	b.n	8003232 <_printf_float+0x15a>
 8003278:	b913      	cbnz	r3, 8003280 <_printf_float+0x1a8>
 800327a:	6822      	ldr	r2, [r4, #0]
 800327c:	07d2      	lsls	r2, r2, #31
 800327e:	d501      	bpl.n	8003284 <_printf_float+0x1ac>
 8003280:	3302      	adds	r3, #2
 8003282:	e7f4      	b.n	800326e <_printf_float+0x196>
 8003284:	2301      	movs	r3, #1
 8003286:	e7f2      	b.n	800326e <_printf_float+0x196>
 8003288:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800328c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800328e:	4299      	cmp	r1, r3
 8003290:	db05      	blt.n	800329e <_printf_float+0x1c6>
 8003292:	6823      	ldr	r3, [r4, #0]
 8003294:	6121      	str	r1, [r4, #16]
 8003296:	07d8      	lsls	r0, r3, #31
 8003298:	d5ea      	bpl.n	8003270 <_printf_float+0x198>
 800329a:	1c4b      	adds	r3, r1, #1
 800329c:	e7e7      	b.n	800326e <_printf_float+0x196>
 800329e:	2900      	cmp	r1, #0
 80032a0:	bfd4      	ite	le
 80032a2:	f1c1 0202 	rsble	r2, r1, #2
 80032a6:	2201      	movgt	r2, #1
 80032a8:	4413      	add	r3, r2
 80032aa:	e7e0      	b.n	800326e <_printf_float+0x196>
 80032ac:	6823      	ldr	r3, [r4, #0]
 80032ae:	055a      	lsls	r2, r3, #21
 80032b0:	d407      	bmi.n	80032c2 <_printf_float+0x1ea>
 80032b2:	6923      	ldr	r3, [r4, #16]
 80032b4:	4642      	mov	r2, r8
 80032b6:	4631      	mov	r1, r6
 80032b8:	4628      	mov	r0, r5
 80032ba:	47b8      	blx	r7
 80032bc:	3001      	adds	r0, #1
 80032be:	d12b      	bne.n	8003318 <_printf_float+0x240>
 80032c0:	e765      	b.n	800318e <_printf_float+0xb6>
 80032c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80032c6:	f240 80dd 	bls.w	8003484 <_printf_float+0x3ac>
 80032ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80032ce:	2200      	movs	r2, #0
 80032d0:	2300      	movs	r3, #0
 80032d2:	f7fd fbf9 	bl	8000ac8 <__aeabi_dcmpeq>
 80032d6:	2800      	cmp	r0, #0
 80032d8:	d033      	beq.n	8003342 <_printf_float+0x26a>
 80032da:	4a37      	ldr	r2, [pc, #220]	@ (80033b8 <_printf_float+0x2e0>)
 80032dc:	2301      	movs	r3, #1
 80032de:	4631      	mov	r1, r6
 80032e0:	4628      	mov	r0, r5
 80032e2:	47b8      	blx	r7
 80032e4:	3001      	adds	r0, #1
 80032e6:	f43f af52 	beq.w	800318e <_printf_float+0xb6>
 80032ea:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80032ee:	4543      	cmp	r3, r8
 80032f0:	db02      	blt.n	80032f8 <_printf_float+0x220>
 80032f2:	6823      	ldr	r3, [r4, #0]
 80032f4:	07d8      	lsls	r0, r3, #31
 80032f6:	d50f      	bpl.n	8003318 <_printf_float+0x240>
 80032f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80032fc:	4631      	mov	r1, r6
 80032fe:	4628      	mov	r0, r5
 8003300:	47b8      	blx	r7
 8003302:	3001      	adds	r0, #1
 8003304:	f43f af43 	beq.w	800318e <_printf_float+0xb6>
 8003308:	f04f 0900 	mov.w	r9, #0
 800330c:	f108 38ff 	add.w	r8, r8, #4294967295
 8003310:	f104 0a1a 	add.w	sl, r4, #26
 8003314:	45c8      	cmp	r8, r9
 8003316:	dc09      	bgt.n	800332c <_printf_float+0x254>
 8003318:	6823      	ldr	r3, [r4, #0]
 800331a:	079b      	lsls	r3, r3, #30
 800331c:	f100 8103 	bmi.w	8003526 <_printf_float+0x44e>
 8003320:	68e0      	ldr	r0, [r4, #12]
 8003322:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003324:	4298      	cmp	r0, r3
 8003326:	bfb8      	it	lt
 8003328:	4618      	movlt	r0, r3
 800332a:	e732      	b.n	8003192 <_printf_float+0xba>
 800332c:	2301      	movs	r3, #1
 800332e:	4652      	mov	r2, sl
 8003330:	4631      	mov	r1, r6
 8003332:	4628      	mov	r0, r5
 8003334:	47b8      	blx	r7
 8003336:	3001      	adds	r0, #1
 8003338:	f43f af29 	beq.w	800318e <_printf_float+0xb6>
 800333c:	f109 0901 	add.w	r9, r9, #1
 8003340:	e7e8      	b.n	8003314 <_printf_float+0x23c>
 8003342:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003344:	2b00      	cmp	r3, #0
 8003346:	dc39      	bgt.n	80033bc <_printf_float+0x2e4>
 8003348:	4a1b      	ldr	r2, [pc, #108]	@ (80033b8 <_printf_float+0x2e0>)
 800334a:	2301      	movs	r3, #1
 800334c:	4631      	mov	r1, r6
 800334e:	4628      	mov	r0, r5
 8003350:	47b8      	blx	r7
 8003352:	3001      	adds	r0, #1
 8003354:	f43f af1b 	beq.w	800318e <_printf_float+0xb6>
 8003358:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800335c:	ea59 0303 	orrs.w	r3, r9, r3
 8003360:	d102      	bne.n	8003368 <_printf_float+0x290>
 8003362:	6823      	ldr	r3, [r4, #0]
 8003364:	07d9      	lsls	r1, r3, #31
 8003366:	d5d7      	bpl.n	8003318 <_printf_float+0x240>
 8003368:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800336c:	4631      	mov	r1, r6
 800336e:	4628      	mov	r0, r5
 8003370:	47b8      	blx	r7
 8003372:	3001      	adds	r0, #1
 8003374:	f43f af0b 	beq.w	800318e <_printf_float+0xb6>
 8003378:	f04f 0a00 	mov.w	sl, #0
 800337c:	f104 0b1a 	add.w	fp, r4, #26
 8003380:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003382:	425b      	negs	r3, r3
 8003384:	4553      	cmp	r3, sl
 8003386:	dc01      	bgt.n	800338c <_printf_float+0x2b4>
 8003388:	464b      	mov	r3, r9
 800338a:	e793      	b.n	80032b4 <_printf_float+0x1dc>
 800338c:	2301      	movs	r3, #1
 800338e:	465a      	mov	r2, fp
 8003390:	4631      	mov	r1, r6
 8003392:	4628      	mov	r0, r5
 8003394:	47b8      	blx	r7
 8003396:	3001      	adds	r0, #1
 8003398:	f43f aef9 	beq.w	800318e <_printf_float+0xb6>
 800339c:	f10a 0a01 	add.w	sl, sl, #1
 80033a0:	e7ee      	b.n	8003380 <_printf_float+0x2a8>
 80033a2:	bf00      	nop
 80033a4:	7fefffff 	.word	0x7fefffff
 80033a8:	08007a84 	.word	0x08007a84
 80033ac:	08007a80 	.word	0x08007a80
 80033b0:	08007a8c 	.word	0x08007a8c
 80033b4:	08007a88 	.word	0x08007a88
 80033b8:	08007a90 	.word	0x08007a90
 80033bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80033be:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80033c2:	4553      	cmp	r3, sl
 80033c4:	bfa8      	it	ge
 80033c6:	4653      	movge	r3, sl
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	4699      	mov	r9, r3
 80033cc:	dc36      	bgt.n	800343c <_printf_float+0x364>
 80033ce:	f04f 0b00 	mov.w	fp, #0
 80033d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80033d6:	f104 021a 	add.w	r2, r4, #26
 80033da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80033dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80033de:	eba3 0309 	sub.w	r3, r3, r9
 80033e2:	455b      	cmp	r3, fp
 80033e4:	dc31      	bgt.n	800344a <_printf_float+0x372>
 80033e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80033e8:	459a      	cmp	sl, r3
 80033ea:	dc3a      	bgt.n	8003462 <_printf_float+0x38a>
 80033ec:	6823      	ldr	r3, [r4, #0]
 80033ee:	07da      	lsls	r2, r3, #31
 80033f0:	d437      	bmi.n	8003462 <_printf_float+0x38a>
 80033f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80033f4:	ebaa 0903 	sub.w	r9, sl, r3
 80033f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80033fa:	ebaa 0303 	sub.w	r3, sl, r3
 80033fe:	4599      	cmp	r9, r3
 8003400:	bfa8      	it	ge
 8003402:	4699      	movge	r9, r3
 8003404:	f1b9 0f00 	cmp.w	r9, #0
 8003408:	dc33      	bgt.n	8003472 <_printf_float+0x39a>
 800340a:	f04f 0800 	mov.w	r8, #0
 800340e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003412:	f104 0b1a 	add.w	fp, r4, #26
 8003416:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003418:	ebaa 0303 	sub.w	r3, sl, r3
 800341c:	eba3 0309 	sub.w	r3, r3, r9
 8003420:	4543      	cmp	r3, r8
 8003422:	f77f af79 	ble.w	8003318 <_printf_float+0x240>
 8003426:	2301      	movs	r3, #1
 8003428:	465a      	mov	r2, fp
 800342a:	4631      	mov	r1, r6
 800342c:	4628      	mov	r0, r5
 800342e:	47b8      	blx	r7
 8003430:	3001      	adds	r0, #1
 8003432:	f43f aeac 	beq.w	800318e <_printf_float+0xb6>
 8003436:	f108 0801 	add.w	r8, r8, #1
 800343a:	e7ec      	b.n	8003416 <_printf_float+0x33e>
 800343c:	4642      	mov	r2, r8
 800343e:	4631      	mov	r1, r6
 8003440:	4628      	mov	r0, r5
 8003442:	47b8      	blx	r7
 8003444:	3001      	adds	r0, #1
 8003446:	d1c2      	bne.n	80033ce <_printf_float+0x2f6>
 8003448:	e6a1      	b.n	800318e <_printf_float+0xb6>
 800344a:	2301      	movs	r3, #1
 800344c:	4631      	mov	r1, r6
 800344e:	4628      	mov	r0, r5
 8003450:	920a      	str	r2, [sp, #40]	@ 0x28
 8003452:	47b8      	blx	r7
 8003454:	3001      	adds	r0, #1
 8003456:	f43f ae9a 	beq.w	800318e <_printf_float+0xb6>
 800345a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800345c:	f10b 0b01 	add.w	fp, fp, #1
 8003460:	e7bb      	b.n	80033da <_printf_float+0x302>
 8003462:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003466:	4631      	mov	r1, r6
 8003468:	4628      	mov	r0, r5
 800346a:	47b8      	blx	r7
 800346c:	3001      	adds	r0, #1
 800346e:	d1c0      	bne.n	80033f2 <_printf_float+0x31a>
 8003470:	e68d      	b.n	800318e <_printf_float+0xb6>
 8003472:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003474:	464b      	mov	r3, r9
 8003476:	4442      	add	r2, r8
 8003478:	4631      	mov	r1, r6
 800347a:	4628      	mov	r0, r5
 800347c:	47b8      	blx	r7
 800347e:	3001      	adds	r0, #1
 8003480:	d1c3      	bne.n	800340a <_printf_float+0x332>
 8003482:	e684      	b.n	800318e <_printf_float+0xb6>
 8003484:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003488:	f1ba 0f01 	cmp.w	sl, #1
 800348c:	dc01      	bgt.n	8003492 <_printf_float+0x3ba>
 800348e:	07db      	lsls	r3, r3, #31
 8003490:	d536      	bpl.n	8003500 <_printf_float+0x428>
 8003492:	2301      	movs	r3, #1
 8003494:	4642      	mov	r2, r8
 8003496:	4631      	mov	r1, r6
 8003498:	4628      	mov	r0, r5
 800349a:	47b8      	blx	r7
 800349c:	3001      	adds	r0, #1
 800349e:	f43f ae76 	beq.w	800318e <_printf_float+0xb6>
 80034a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80034a6:	4631      	mov	r1, r6
 80034a8:	4628      	mov	r0, r5
 80034aa:	47b8      	blx	r7
 80034ac:	3001      	adds	r0, #1
 80034ae:	f43f ae6e 	beq.w	800318e <_printf_float+0xb6>
 80034b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80034b6:	2200      	movs	r2, #0
 80034b8:	2300      	movs	r3, #0
 80034ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80034be:	f7fd fb03 	bl	8000ac8 <__aeabi_dcmpeq>
 80034c2:	b9c0      	cbnz	r0, 80034f6 <_printf_float+0x41e>
 80034c4:	4653      	mov	r3, sl
 80034c6:	f108 0201 	add.w	r2, r8, #1
 80034ca:	4631      	mov	r1, r6
 80034cc:	4628      	mov	r0, r5
 80034ce:	47b8      	blx	r7
 80034d0:	3001      	adds	r0, #1
 80034d2:	d10c      	bne.n	80034ee <_printf_float+0x416>
 80034d4:	e65b      	b.n	800318e <_printf_float+0xb6>
 80034d6:	2301      	movs	r3, #1
 80034d8:	465a      	mov	r2, fp
 80034da:	4631      	mov	r1, r6
 80034dc:	4628      	mov	r0, r5
 80034de:	47b8      	blx	r7
 80034e0:	3001      	adds	r0, #1
 80034e2:	f43f ae54 	beq.w	800318e <_printf_float+0xb6>
 80034e6:	f108 0801 	add.w	r8, r8, #1
 80034ea:	45d0      	cmp	r8, sl
 80034ec:	dbf3      	blt.n	80034d6 <_printf_float+0x3fe>
 80034ee:	464b      	mov	r3, r9
 80034f0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80034f4:	e6df      	b.n	80032b6 <_printf_float+0x1de>
 80034f6:	f04f 0800 	mov.w	r8, #0
 80034fa:	f104 0b1a 	add.w	fp, r4, #26
 80034fe:	e7f4      	b.n	80034ea <_printf_float+0x412>
 8003500:	2301      	movs	r3, #1
 8003502:	4642      	mov	r2, r8
 8003504:	e7e1      	b.n	80034ca <_printf_float+0x3f2>
 8003506:	2301      	movs	r3, #1
 8003508:	464a      	mov	r2, r9
 800350a:	4631      	mov	r1, r6
 800350c:	4628      	mov	r0, r5
 800350e:	47b8      	blx	r7
 8003510:	3001      	adds	r0, #1
 8003512:	f43f ae3c 	beq.w	800318e <_printf_float+0xb6>
 8003516:	f108 0801 	add.w	r8, r8, #1
 800351a:	68e3      	ldr	r3, [r4, #12]
 800351c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800351e:	1a5b      	subs	r3, r3, r1
 8003520:	4543      	cmp	r3, r8
 8003522:	dcf0      	bgt.n	8003506 <_printf_float+0x42e>
 8003524:	e6fc      	b.n	8003320 <_printf_float+0x248>
 8003526:	f04f 0800 	mov.w	r8, #0
 800352a:	f104 0919 	add.w	r9, r4, #25
 800352e:	e7f4      	b.n	800351a <_printf_float+0x442>

08003530 <_printf_common>:
 8003530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003534:	4616      	mov	r6, r2
 8003536:	4698      	mov	r8, r3
 8003538:	688a      	ldr	r2, [r1, #8]
 800353a:	690b      	ldr	r3, [r1, #16]
 800353c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003540:	4293      	cmp	r3, r2
 8003542:	bfb8      	it	lt
 8003544:	4613      	movlt	r3, r2
 8003546:	6033      	str	r3, [r6, #0]
 8003548:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800354c:	4607      	mov	r7, r0
 800354e:	460c      	mov	r4, r1
 8003550:	b10a      	cbz	r2, 8003556 <_printf_common+0x26>
 8003552:	3301      	adds	r3, #1
 8003554:	6033      	str	r3, [r6, #0]
 8003556:	6823      	ldr	r3, [r4, #0]
 8003558:	0699      	lsls	r1, r3, #26
 800355a:	bf42      	ittt	mi
 800355c:	6833      	ldrmi	r3, [r6, #0]
 800355e:	3302      	addmi	r3, #2
 8003560:	6033      	strmi	r3, [r6, #0]
 8003562:	6825      	ldr	r5, [r4, #0]
 8003564:	f015 0506 	ands.w	r5, r5, #6
 8003568:	d106      	bne.n	8003578 <_printf_common+0x48>
 800356a:	f104 0a19 	add.w	sl, r4, #25
 800356e:	68e3      	ldr	r3, [r4, #12]
 8003570:	6832      	ldr	r2, [r6, #0]
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	42ab      	cmp	r3, r5
 8003576:	dc26      	bgt.n	80035c6 <_printf_common+0x96>
 8003578:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800357c:	6822      	ldr	r2, [r4, #0]
 800357e:	3b00      	subs	r3, #0
 8003580:	bf18      	it	ne
 8003582:	2301      	movne	r3, #1
 8003584:	0692      	lsls	r2, r2, #26
 8003586:	d42b      	bmi.n	80035e0 <_printf_common+0xb0>
 8003588:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800358c:	4641      	mov	r1, r8
 800358e:	4638      	mov	r0, r7
 8003590:	47c8      	blx	r9
 8003592:	3001      	adds	r0, #1
 8003594:	d01e      	beq.n	80035d4 <_printf_common+0xa4>
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	6922      	ldr	r2, [r4, #16]
 800359a:	f003 0306 	and.w	r3, r3, #6
 800359e:	2b04      	cmp	r3, #4
 80035a0:	bf02      	ittt	eq
 80035a2:	68e5      	ldreq	r5, [r4, #12]
 80035a4:	6833      	ldreq	r3, [r6, #0]
 80035a6:	1aed      	subeq	r5, r5, r3
 80035a8:	68a3      	ldr	r3, [r4, #8]
 80035aa:	bf0c      	ite	eq
 80035ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035b0:	2500      	movne	r5, #0
 80035b2:	4293      	cmp	r3, r2
 80035b4:	bfc4      	itt	gt
 80035b6:	1a9b      	subgt	r3, r3, r2
 80035b8:	18ed      	addgt	r5, r5, r3
 80035ba:	2600      	movs	r6, #0
 80035bc:	341a      	adds	r4, #26
 80035be:	42b5      	cmp	r5, r6
 80035c0:	d11a      	bne.n	80035f8 <_printf_common+0xc8>
 80035c2:	2000      	movs	r0, #0
 80035c4:	e008      	b.n	80035d8 <_printf_common+0xa8>
 80035c6:	2301      	movs	r3, #1
 80035c8:	4652      	mov	r2, sl
 80035ca:	4641      	mov	r1, r8
 80035cc:	4638      	mov	r0, r7
 80035ce:	47c8      	blx	r9
 80035d0:	3001      	adds	r0, #1
 80035d2:	d103      	bne.n	80035dc <_printf_common+0xac>
 80035d4:	f04f 30ff 	mov.w	r0, #4294967295
 80035d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035dc:	3501      	adds	r5, #1
 80035de:	e7c6      	b.n	800356e <_printf_common+0x3e>
 80035e0:	18e1      	adds	r1, r4, r3
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	2030      	movs	r0, #48	@ 0x30
 80035e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80035ea:	4422      	add	r2, r4
 80035ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80035f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80035f4:	3302      	adds	r3, #2
 80035f6:	e7c7      	b.n	8003588 <_printf_common+0x58>
 80035f8:	2301      	movs	r3, #1
 80035fa:	4622      	mov	r2, r4
 80035fc:	4641      	mov	r1, r8
 80035fe:	4638      	mov	r0, r7
 8003600:	47c8      	blx	r9
 8003602:	3001      	adds	r0, #1
 8003604:	d0e6      	beq.n	80035d4 <_printf_common+0xa4>
 8003606:	3601      	adds	r6, #1
 8003608:	e7d9      	b.n	80035be <_printf_common+0x8e>
	...

0800360c <_printf_i>:
 800360c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003610:	7e0f      	ldrb	r7, [r1, #24]
 8003612:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003614:	2f78      	cmp	r7, #120	@ 0x78
 8003616:	4691      	mov	r9, r2
 8003618:	4680      	mov	r8, r0
 800361a:	460c      	mov	r4, r1
 800361c:	469a      	mov	sl, r3
 800361e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003622:	d807      	bhi.n	8003634 <_printf_i+0x28>
 8003624:	2f62      	cmp	r7, #98	@ 0x62
 8003626:	d80a      	bhi.n	800363e <_printf_i+0x32>
 8003628:	2f00      	cmp	r7, #0
 800362a:	f000 80d1 	beq.w	80037d0 <_printf_i+0x1c4>
 800362e:	2f58      	cmp	r7, #88	@ 0x58
 8003630:	f000 80b8 	beq.w	80037a4 <_printf_i+0x198>
 8003634:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003638:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800363c:	e03a      	b.n	80036b4 <_printf_i+0xa8>
 800363e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003642:	2b15      	cmp	r3, #21
 8003644:	d8f6      	bhi.n	8003634 <_printf_i+0x28>
 8003646:	a101      	add	r1, pc, #4	@ (adr r1, 800364c <_printf_i+0x40>)
 8003648:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800364c:	080036a5 	.word	0x080036a5
 8003650:	080036b9 	.word	0x080036b9
 8003654:	08003635 	.word	0x08003635
 8003658:	08003635 	.word	0x08003635
 800365c:	08003635 	.word	0x08003635
 8003660:	08003635 	.word	0x08003635
 8003664:	080036b9 	.word	0x080036b9
 8003668:	08003635 	.word	0x08003635
 800366c:	08003635 	.word	0x08003635
 8003670:	08003635 	.word	0x08003635
 8003674:	08003635 	.word	0x08003635
 8003678:	080037b7 	.word	0x080037b7
 800367c:	080036e3 	.word	0x080036e3
 8003680:	08003771 	.word	0x08003771
 8003684:	08003635 	.word	0x08003635
 8003688:	08003635 	.word	0x08003635
 800368c:	080037d9 	.word	0x080037d9
 8003690:	08003635 	.word	0x08003635
 8003694:	080036e3 	.word	0x080036e3
 8003698:	08003635 	.word	0x08003635
 800369c:	08003635 	.word	0x08003635
 80036a0:	08003779 	.word	0x08003779
 80036a4:	6833      	ldr	r3, [r6, #0]
 80036a6:	1d1a      	adds	r2, r3, #4
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6032      	str	r2, [r6, #0]
 80036ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80036b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80036b4:	2301      	movs	r3, #1
 80036b6:	e09c      	b.n	80037f2 <_printf_i+0x1e6>
 80036b8:	6833      	ldr	r3, [r6, #0]
 80036ba:	6820      	ldr	r0, [r4, #0]
 80036bc:	1d19      	adds	r1, r3, #4
 80036be:	6031      	str	r1, [r6, #0]
 80036c0:	0606      	lsls	r6, r0, #24
 80036c2:	d501      	bpl.n	80036c8 <_printf_i+0xbc>
 80036c4:	681d      	ldr	r5, [r3, #0]
 80036c6:	e003      	b.n	80036d0 <_printf_i+0xc4>
 80036c8:	0645      	lsls	r5, r0, #25
 80036ca:	d5fb      	bpl.n	80036c4 <_printf_i+0xb8>
 80036cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80036d0:	2d00      	cmp	r5, #0
 80036d2:	da03      	bge.n	80036dc <_printf_i+0xd0>
 80036d4:	232d      	movs	r3, #45	@ 0x2d
 80036d6:	426d      	negs	r5, r5
 80036d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036dc:	4858      	ldr	r0, [pc, #352]	@ (8003840 <_printf_i+0x234>)
 80036de:	230a      	movs	r3, #10
 80036e0:	e011      	b.n	8003706 <_printf_i+0xfa>
 80036e2:	6821      	ldr	r1, [r4, #0]
 80036e4:	6833      	ldr	r3, [r6, #0]
 80036e6:	0608      	lsls	r0, r1, #24
 80036e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80036ec:	d402      	bmi.n	80036f4 <_printf_i+0xe8>
 80036ee:	0649      	lsls	r1, r1, #25
 80036f0:	bf48      	it	mi
 80036f2:	b2ad      	uxthmi	r5, r5
 80036f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80036f6:	4852      	ldr	r0, [pc, #328]	@ (8003840 <_printf_i+0x234>)
 80036f8:	6033      	str	r3, [r6, #0]
 80036fa:	bf14      	ite	ne
 80036fc:	230a      	movne	r3, #10
 80036fe:	2308      	moveq	r3, #8
 8003700:	2100      	movs	r1, #0
 8003702:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003706:	6866      	ldr	r6, [r4, #4]
 8003708:	60a6      	str	r6, [r4, #8]
 800370a:	2e00      	cmp	r6, #0
 800370c:	db05      	blt.n	800371a <_printf_i+0x10e>
 800370e:	6821      	ldr	r1, [r4, #0]
 8003710:	432e      	orrs	r6, r5
 8003712:	f021 0104 	bic.w	r1, r1, #4
 8003716:	6021      	str	r1, [r4, #0]
 8003718:	d04b      	beq.n	80037b2 <_printf_i+0x1a6>
 800371a:	4616      	mov	r6, r2
 800371c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003720:	fb03 5711 	mls	r7, r3, r1, r5
 8003724:	5dc7      	ldrb	r7, [r0, r7]
 8003726:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800372a:	462f      	mov	r7, r5
 800372c:	42bb      	cmp	r3, r7
 800372e:	460d      	mov	r5, r1
 8003730:	d9f4      	bls.n	800371c <_printf_i+0x110>
 8003732:	2b08      	cmp	r3, #8
 8003734:	d10b      	bne.n	800374e <_printf_i+0x142>
 8003736:	6823      	ldr	r3, [r4, #0]
 8003738:	07df      	lsls	r7, r3, #31
 800373a:	d508      	bpl.n	800374e <_printf_i+0x142>
 800373c:	6923      	ldr	r3, [r4, #16]
 800373e:	6861      	ldr	r1, [r4, #4]
 8003740:	4299      	cmp	r1, r3
 8003742:	bfde      	ittt	le
 8003744:	2330      	movle	r3, #48	@ 0x30
 8003746:	f806 3c01 	strble.w	r3, [r6, #-1]
 800374a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800374e:	1b92      	subs	r2, r2, r6
 8003750:	6122      	str	r2, [r4, #16]
 8003752:	f8cd a000 	str.w	sl, [sp]
 8003756:	464b      	mov	r3, r9
 8003758:	aa03      	add	r2, sp, #12
 800375a:	4621      	mov	r1, r4
 800375c:	4640      	mov	r0, r8
 800375e:	f7ff fee7 	bl	8003530 <_printf_common>
 8003762:	3001      	adds	r0, #1
 8003764:	d14a      	bne.n	80037fc <_printf_i+0x1f0>
 8003766:	f04f 30ff 	mov.w	r0, #4294967295
 800376a:	b004      	add	sp, #16
 800376c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003770:	6823      	ldr	r3, [r4, #0]
 8003772:	f043 0320 	orr.w	r3, r3, #32
 8003776:	6023      	str	r3, [r4, #0]
 8003778:	4832      	ldr	r0, [pc, #200]	@ (8003844 <_printf_i+0x238>)
 800377a:	2778      	movs	r7, #120	@ 0x78
 800377c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003780:	6823      	ldr	r3, [r4, #0]
 8003782:	6831      	ldr	r1, [r6, #0]
 8003784:	061f      	lsls	r7, r3, #24
 8003786:	f851 5b04 	ldr.w	r5, [r1], #4
 800378a:	d402      	bmi.n	8003792 <_printf_i+0x186>
 800378c:	065f      	lsls	r7, r3, #25
 800378e:	bf48      	it	mi
 8003790:	b2ad      	uxthmi	r5, r5
 8003792:	6031      	str	r1, [r6, #0]
 8003794:	07d9      	lsls	r1, r3, #31
 8003796:	bf44      	itt	mi
 8003798:	f043 0320 	orrmi.w	r3, r3, #32
 800379c:	6023      	strmi	r3, [r4, #0]
 800379e:	b11d      	cbz	r5, 80037a8 <_printf_i+0x19c>
 80037a0:	2310      	movs	r3, #16
 80037a2:	e7ad      	b.n	8003700 <_printf_i+0xf4>
 80037a4:	4826      	ldr	r0, [pc, #152]	@ (8003840 <_printf_i+0x234>)
 80037a6:	e7e9      	b.n	800377c <_printf_i+0x170>
 80037a8:	6823      	ldr	r3, [r4, #0]
 80037aa:	f023 0320 	bic.w	r3, r3, #32
 80037ae:	6023      	str	r3, [r4, #0]
 80037b0:	e7f6      	b.n	80037a0 <_printf_i+0x194>
 80037b2:	4616      	mov	r6, r2
 80037b4:	e7bd      	b.n	8003732 <_printf_i+0x126>
 80037b6:	6833      	ldr	r3, [r6, #0]
 80037b8:	6825      	ldr	r5, [r4, #0]
 80037ba:	6961      	ldr	r1, [r4, #20]
 80037bc:	1d18      	adds	r0, r3, #4
 80037be:	6030      	str	r0, [r6, #0]
 80037c0:	062e      	lsls	r6, r5, #24
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	d501      	bpl.n	80037ca <_printf_i+0x1be>
 80037c6:	6019      	str	r1, [r3, #0]
 80037c8:	e002      	b.n	80037d0 <_printf_i+0x1c4>
 80037ca:	0668      	lsls	r0, r5, #25
 80037cc:	d5fb      	bpl.n	80037c6 <_printf_i+0x1ba>
 80037ce:	8019      	strh	r1, [r3, #0]
 80037d0:	2300      	movs	r3, #0
 80037d2:	6123      	str	r3, [r4, #16]
 80037d4:	4616      	mov	r6, r2
 80037d6:	e7bc      	b.n	8003752 <_printf_i+0x146>
 80037d8:	6833      	ldr	r3, [r6, #0]
 80037da:	1d1a      	adds	r2, r3, #4
 80037dc:	6032      	str	r2, [r6, #0]
 80037de:	681e      	ldr	r6, [r3, #0]
 80037e0:	6862      	ldr	r2, [r4, #4]
 80037e2:	2100      	movs	r1, #0
 80037e4:	4630      	mov	r0, r6
 80037e6:	f7fc fcf3 	bl	80001d0 <memchr>
 80037ea:	b108      	cbz	r0, 80037f0 <_printf_i+0x1e4>
 80037ec:	1b80      	subs	r0, r0, r6
 80037ee:	6060      	str	r0, [r4, #4]
 80037f0:	6863      	ldr	r3, [r4, #4]
 80037f2:	6123      	str	r3, [r4, #16]
 80037f4:	2300      	movs	r3, #0
 80037f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037fa:	e7aa      	b.n	8003752 <_printf_i+0x146>
 80037fc:	6923      	ldr	r3, [r4, #16]
 80037fe:	4632      	mov	r2, r6
 8003800:	4649      	mov	r1, r9
 8003802:	4640      	mov	r0, r8
 8003804:	47d0      	blx	sl
 8003806:	3001      	adds	r0, #1
 8003808:	d0ad      	beq.n	8003766 <_printf_i+0x15a>
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	079b      	lsls	r3, r3, #30
 800380e:	d413      	bmi.n	8003838 <_printf_i+0x22c>
 8003810:	68e0      	ldr	r0, [r4, #12]
 8003812:	9b03      	ldr	r3, [sp, #12]
 8003814:	4298      	cmp	r0, r3
 8003816:	bfb8      	it	lt
 8003818:	4618      	movlt	r0, r3
 800381a:	e7a6      	b.n	800376a <_printf_i+0x15e>
 800381c:	2301      	movs	r3, #1
 800381e:	4632      	mov	r2, r6
 8003820:	4649      	mov	r1, r9
 8003822:	4640      	mov	r0, r8
 8003824:	47d0      	blx	sl
 8003826:	3001      	adds	r0, #1
 8003828:	d09d      	beq.n	8003766 <_printf_i+0x15a>
 800382a:	3501      	adds	r5, #1
 800382c:	68e3      	ldr	r3, [r4, #12]
 800382e:	9903      	ldr	r1, [sp, #12]
 8003830:	1a5b      	subs	r3, r3, r1
 8003832:	42ab      	cmp	r3, r5
 8003834:	dcf2      	bgt.n	800381c <_printf_i+0x210>
 8003836:	e7eb      	b.n	8003810 <_printf_i+0x204>
 8003838:	2500      	movs	r5, #0
 800383a:	f104 0619 	add.w	r6, r4, #25
 800383e:	e7f5      	b.n	800382c <_printf_i+0x220>
 8003840:	08007a92 	.word	0x08007a92
 8003844:	08007aa3 	.word	0x08007aa3

08003848 <_scanf_float>:
 8003848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800384c:	b087      	sub	sp, #28
 800384e:	4691      	mov	r9, r2
 8003850:	9303      	str	r3, [sp, #12]
 8003852:	688b      	ldr	r3, [r1, #8]
 8003854:	1e5a      	subs	r2, r3, #1
 8003856:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800385a:	bf81      	itttt	hi
 800385c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8003860:	eb03 0b05 	addhi.w	fp, r3, r5
 8003864:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8003868:	608b      	strhi	r3, [r1, #8]
 800386a:	680b      	ldr	r3, [r1, #0]
 800386c:	460a      	mov	r2, r1
 800386e:	f04f 0500 	mov.w	r5, #0
 8003872:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8003876:	f842 3b1c 	str.w	r3, [r2], #28
 800387a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800387e:	4680      	mov	r8, r0
 8003880:	460c      	mov	r4, r1
 8003882:	bf98      	it	ls
 8003884:	f04f 0b00 	movls.w	fp, #0
 8003888:	9201      	str	r2, [sp, #4]
 800388a:	4616      	mov	r6, r2
 800388c:	46aa      	mov	sl, r5
 800388e:	462f      	mov	r7, r5
 8003890:	9502      	str	r5, [sp, #8]
 8003892:	68a2      	ldr	r2, [r4, #8]
 8003894:	b15a      	cbz	r2, 80038ae <_scanf_float+0x66>
 8003896:	f8d9 3000 	ldr.w	r3, [r9]
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b4e      	cmp	r3, #78	@ 0x4e
 800389e:	d863      	bhi.n	8003968 <_scanf_float+0x120>
 80038a0:	2b40      	cmp	r3, #64	@ 0x40
 80038a2:	d83b      	bhi.n	800391c <_scanf_float+0xd4>
 80038a4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80038a8:	b2c8      	uxtb	r0, r1
 80038aa:	280e      	cmp	r0, #14
 80038ac:	d939      	bls.n	8003922 <_scanf_float+0xda>
 80038ae:	b11f      	cbz	r7, 80038b8 <_scanf_float+0x70>
 80038b0:	6823      	ldr	r3, [r4, #0]
 80038b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038b6:	6023      	str	r3, [r4, #0]
 80038b8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80038bc:	f1ba 0f01 	cmp.w	sl, #1
 80038c0:	f200 8114 	bhi.w	8003aec <_scanf_float+0x2a4>
 80038c4:	9b01      	ldr	r3, [sp, #4]
 80038c6:	429e      	cmp	r6, r3
 80038c8:	f200 8105 	bhi.w	8003ad6 <_scanf_float+0x28e>
 80038cc:	2001      	movs	r0, #1
 80038ce:	b007      	add	sp, #28
 80038d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038d4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80038d8:	2a0d      	cmp	r2, #13
 80038da:	d8e8      	bhi.n	80038ae <_scanf_float+0x66>
 80038dc:	a101      	add	r1, pc, #4	@ (adr r1, 80038e4 <_scanf_float+0x9c>)
 80038de:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80038e2:	bf00      	nop
 80038e4:	08003a2d 	.word	0x08003a2d
 80038e8:	080038af 	.word	0x080038af
 80038ec:	080038af 	.word	0x080038af
 80038f0:	080038af 	.word	0x080038af
 80038f4:	08003a89 	.word	0x08003a89
 80038f8:	08003a63 	.word	0x08003a63
 80038fc:	080038af 	.word	0x080038af
 8003900:	080038af 	.word	0x080038af
 8003904:	08003a3b 	.word	0x08003a3b
 8003908:	080038af 	.word	0x080038af
 800390c:	080038af 	.word	0x080038af
 8003910:	080038af 	.word	0x080038af
 8003914:	080038af 	.word	0x080038af
 8003918:	080039f7 	.word	0x080039f7
 800391c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8003920:	e7da      	b.n	80038d8 <_scanf_float+0x90>
 8003922:	290e      	cmp	r1, #14
 8003924:	d8c3      	bhi.n	80038ae <_scanf_float+0x66>
 8003926:	a001      	add	r0, pc, #4	@ (adr r0, 800392c <_scanf_float+0xe4>)
 8003928:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800392c:	080039e7 	.word	0x080039e7
 8003930:	080038af 	.word	0x080038af
 8003934:	080039e7 	.word	0x080039e7
 8003938:	08003a77 	.word	0x08003a77
 800393c:	080038af 	.word	0x080038af
 8003940:	08003989 	.word	0x08003989
 8003944:	080039cd 	.word	0x080039cd
 8003948:	080039cd 	.word	0x080039cd
 800394c:	080039cd 	.word	0x080039cd
 8003950:	080039cd 	.word	0x080039cd
 8003954:	080039cd 	.word	0x080039cd
 8003958:	080039cd 	.word	0x080039cd
 800395c:	080039cd 	.word	0x080039cd
 8003960:	080039cd 	.word	0x080039cd
 8003964:	080039cd 	.word	0x080039cd
 8003968:	2b6e      	cmp	r3, #110	@ 0x6e
 800396a:	d809      	bhi.n	8003980 <_scanf_float+0x138>
 800396c:	2b60      	cmp	r3, #96	@ 0x60
 800396e:	d8b1      	bhi.n	80038d4 <_scanf_float+0x8c>
 8003970:	2b54      	cmp	r3, #84	@ 0x54
 8003972:	d07b      	beq.n	8003a6c <_scanf_float+0x224>
 8003974:	2b59      	cmp	r3, #89	@ 0x59
 8003976:	d19a      	bne.n	80038ae <_scanf_float+0x66>
 8003978:	2d07      	cmp	r5, #7
 800397a:	d198      	bne.n	80038ae <_scanf_float+0x66>
 800397c:	2508      	movs	r5, #8
 800397e:	e02f      	b.n	80039e0 <_scanf_float+0x198>
 8003980:	2b74      	cmp	r3, #116	@ 0x74
 8003982:	d073      	beq.n	8003a6c <_scanf_float+0x224>
 8003984:	2b79      	cmp	r3, #121	@ 0x79
 8003986:	e7f6      	b.n	8003976 <_scanf_float+0x12e>
 8003988:	6821      	ldr	r1, [r4, #0]
 800398a:	05c8      	lsls	r0, r1, #23
 800398c:	d51e      	bpl.n	80039cc <_scanf_float+0x184>
 800398e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8003992:	6021      	str	r1, [r4, #0]
 8003994:	3701      	adds	r7, #1
 8003996:	f1bb 0f00 	cmp.w	fp, #0
 800399a:	d003      	beq.n	80039a4 <_scanf_float+0x15c>
 800399c:	3201      	adds	r2, #1
 800399e:	f10b 3bff 	add.w	fp, fp, #4294967295
 80039a2:	60a2      	str	r2, [r4, #8]
 80039a4:	68a3      	ldr	r3, [r4, #8]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	60a3      	str	r3, [r4, #8]
 80039aa:	6923      	ldr	r3, [r4, #16]
 80039ac:	3301      	adds	r3, #1
 80039ae:	6123      	str	r3, [r4, #16]
 80039b0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80039b4:	3b01      	subs	r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f8c9 3004 	str.w	r3, [r9, #4]
 80039bc:	f340 8082 	ble.w	8003ac4 <_scanf_float+0x27c>
 80039c0:	f8d9 3000 	ldr.w	r3, [r9]
 80039c4:	3301      	adds	r3, #1
 80039c6:	f8c9 3000 	str.w	r3, [r9]
 80039ca:	e762      	b.n	8003892 <_scanf_float+0x4a>
 80039cc:	eb1a 0105 	adds.w	r1, sl, r5
 80039d0:	f47f af6d 	bne.w	80038ae <_scanf_float+0x66>
 80039d4:	6822      	ldr	r2, [r4, #0]
 80039d6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80039da:	6022      	str	r2, [r4, #0]
 80039dc:	460d      	mov	r5, r1
 80039de:	468a      	mov	sl, r1
 80039e0:	f806 3b01 	strb.w	r3, [r6], #1
 80039e4:	e7de      	b.n	80039a4 <_scanf_float+0x15c>
 80039e6:	6822      	ldr	r2, [r4, #0]
 80039e8:	0610      	lsls	r0, r2, #24
 80039ea:	f57f af60 	bpl.w	80038ae <_scanf_float+0x66>
 80039ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039f2:	6022      	str	r2, [r4, #0]
 80039f4:	e7f4      	b.n	80039e0 <_scanf_float+0x198>
 80039f6:	f1ba 0f00 	cmp.w	sl, #0
 80039fa:	d10c      	bne.n	8003a16 <_scanf_float+0x1ce>
 80039fc:	b977      	cbnz	r7, 8003a1c <_scanf_float+0x1d4>
 80039fe:	6822      	ldr	r2, [r4, #0]
 8003a00:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003a04:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003a08:	d108      	bne.n	8003a1c <_scanf_float+0x1d4>
 8003a0a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003a0e:	6022      	str	r2, [r4, #0]
 8003a10:	f04f 0a01 	mov.w	sl, #1
 8003a14:	e7e4      	b.n	80039e0 <_scanf_float+0x198>
 8003a16:	f1ba 0f02 	cmp.w	sl, #2
 8003a1a:	d050      	beq.n	8003abe <_scanf_float+0x276>
 8003a1c:	2d01      	cmp	r5, #1
 8003a1e:	d002      	beq.n	8003a26 <_scanf_float+0x1de>
 8003a20:	2d04      	cmp	r5, #4
 8003a22:	f47f af44 	bne.w	80038ae <_scanf_float+0x66>
 8003a26:	3501      	adds	r5, #1
 8003a28:	b2ed      	uxtb	r5, r5
 8003a2a:	e7d9      	b.n	80039e0 <_scanf_float+0x198>
 8003a2c:	f1ba 0f01 	cmp.w	sl, #1
 8003a30:	f47f af3d 	bne.w	80038ae <_scanf_float+0x66>
 8003a34:	f04f 0a02 	mov.w	sl, #2
 8003a38:	e7d2      	b.n	80039e0 <_scanf_float+0x198>
 8003a3a:	b975      	cbnz	r5, 8003a5a <_scanf_float+0x212>
 8003a3c:	2f00      	cmp	r7, #0
 8003a3e:	f47f af37 	bne.w	80038b0 <_scanf_float+0x68>
 8003a42:	6822      	ldr	r2, [r4, #0]
 8003a44:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003a48:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003a4c:	f040 80fe 	bne.w	8003c4c <_scanf_float+0x404>
 8003a50:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003a54:	6022      	str	r2, [r4, #0]
 8003a56:	2501      	movs	r5, #1
 8003a58:	e7c2      	b.n	80039e0 <_scanf_float+0x198>
 8003a5a:	2d03      	cmp	r5, #3
 8003a5c:	d0e3      	beq.n	8003a26 <_scanf_float+0x1de>
 8003a5e:	2d05      	cmp	r5, #5
 8003a60:	e7df      	b.n	8003a22 <_scanf_float+0x1da>
 8003a62:	2d02      	cmp	r5, #2
 8003a64:	f47f af23 	bne.w	80038ae <_scanf_float+0x66>
 8003a68:	2503      	movs	r5, #3
 8003a6a:	e7b9      	b.n	80039e0 <_scanf_float+0x198>
 8003a6c:	2d06      	cmp	r5, #6
 8003a6e:	f47f af1e 	bne.w	80038ae <_scanf_float+0x66>
 8003a72:	2507      	movs	r5, #7
 8003a74:	e7b4      	b.n	80039e0 <_scanf_float+0x198>
 8003a76:	6822      	ldr	r2, [r4, #0]
 8003a78:	0591      	lsls	r1, r2, #22
 8003a7a:	f57f af18 	bpl.w	80038ae <_scanf_float+0x66>
 8003a7e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8003a82:	6022      	str	r2, [r4, #0]
 8003a84:	9702      	str	r7, [sp, #8]
 8003a86:	e7ab      	b.n	80039e0 <_scanf_float+0x198>
 8003a88:	6822      	ldr	r2, [r4, #0]
 8003a8a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8003a8e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003a92:	d005      	beq.n	8003aa0 <_scanf_float+0x258>
 8003a94:	0550      	lsls	r0, r2, #21
 8003a96:	f57f af0a 	bpl.w	80038ae <_scanf_float+0x66>
 8003a9a:	2f00      	cmp	r7, #0
 8003a9c:	f000 80d6 	beq.w	8003c4c <_scanf_float+0x404>
 8003aa0:	0591      	lsls	r1, r2, #22
 8003aa2:	bf58      	it	pl
 8003aa4:	9902      	ldrpl	r1, [sp, #8]
 8003aa6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003aaa:	bf58      	it	pl
 8003aac:	1a79      	subpl	r1, r7, r1
 8003aae:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8003ab2:	bf58      	it	pl
 8003ab4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003ab8:	6022      	str	r2, [r4, #0]
 8003aba:	2700      	movs	r7, #0
 8003abc:	e790      	b.n	80039e0 <_scanf_float+0x198>
 8003abe:	f04f 0a03 	mov.w	sl, #3
 8003ac2:	e78d      	b.n	80039e0 <_scanf_float+0x198>
 8003ac4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003ac8:	4649      	mov	r1, r9
 8003aca:	4640      	mov	r0, r8
 8003acc:	4798      	blx	r3
 8003ace:	2800      	cmp	r0, #0
 8003ad0:	f43f aedf 	beq.w	8003892 <_scanf_float+0x4a>
 8003ad4:	e6eb      	b.n	80038ae <_scanf_float+0x66>
 8003ad6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003ada:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003ade:	464a      	mov	r2, r9
 8003ae0:	4640      	mov	r0, r8
 8003ae2:	4798      	blx	r3
 8003ae4:	6923      	ldr	r3, [r4, #16]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	6123      	str	r3, [r4, #16]
 8003aea:	e6eb      	b.n	80038c4 <_scanf_float+0x7c>
 8003aec:	1e6b      	subs	r3, r5, #1
 8003aee:	2b06      	cmp	r3, #6
 8003af0:	d824      	bhi.n	8003b3c <_scanf_float+0x2f4>
 8003af2:	2d02      	cmp	r5, #2
 8003af4:	d836      	bhi.n	8003b64 <_scanf_float+0x31c>
 8003af6:	9b01      	ldr	r3, [sp, #4]
 8003af8:	429e      	cmp	r6, r3
 8003afa:	f67f aee7 	bls.w	80038cc <_scanf_float+0x84>
 8003afe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003b02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003b06:	464a      	mov	r2, r9
 8003b08:	4640      	mov	r0, r8
 8003b0a:	4798      	blx	r3
 8003b0c:	6923      	ldr	r3, [r4, #16]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	6123      	str	r3, [r4, #16]
 8003b12:	e7f0      	b.n	8003af6 <_scanf_float+0x2ae>
 8003b14:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003b18:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8003b1c:	464a      	mov	r2, r9
 8003b1e:	4640      	mov	r0, r8
 8003b20:	4798      	blx	r3
 8003b22:	6923      	ldr	r3, [r4, #16]
 8003b24:	3b01      	subs	r3, #1
 8003b26:	6123      	str	r3, [r4, #16]
 8003b28:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003b2c:	fa5f fa8a 	uxtb.w	sl, sl
 8003b30:	f1ba 0f02 	cmp.w	sl, #2
 8003b34:	d1ee      	bne.n	8003b14 <_scanf_float+0x2cc>
 8003b36:	3d03      	subs	r5, #3
 8003b38:	b2ed      	uxtb	r5, r5
 8003b3a:	1b76      	subs	r6, r6, r5
 8003b3c:	6823      	ldr	r3, [r4, #0]
 8003b3e:	05da      	lsls	r2, r3, #23
 8003b40:	d530      	bpl.n	8003ba4 <_scanf_float+0x35c>
 8003b42:	055b      	lsls	r3, r3, #21
 8003b44:	d511      	bpl.n	8003b6a <_scanf_float+0x322>
 8003b46:	9b01      	ldr	r3, [sp, #4]
 8003b48:	429e      	cmp	r6, r3
 8003b4a:	f67f aebf 	bls.w	80038cc <_scanf_float+0x84>
 8003b4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003b52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003b56:	464a      	mov	r2, r9
 8003b58:	4640      	mov	r0, r8
 8003b5a:	4798      	blx	r3
 8003b5c:	6923      	ldr	r3, [r4, #16]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	6123      	str	r3, [r4, #16]
 8003b62:	e7f0      	b.n	8003b46 <_scanf_float+0x2fe>
 8003b64:	46aa      	mov	sl, r5
 8003b66:	46b3      	mov	fp, r6
 8003b68:	e7de      	b.n	8003b28 <_scanf_float+0x2e0>
 8003b6a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003b6e:	6923      	ldr	r3, [r4, #16]
 8003b70:	2965      	cmp	r1, #101	@ 0x65
 8003b72:	f103 33ff 	add.w	r3, r3, #4294967295
 8003b76:	f106 35ff 	add.w	r5, r6, #4294967295
 8003b7a:	6123      	str	r3, [r4, #16]
 8003b7c:	d00c      	beq.n	8003b98 <_scanf_float+0x350>
 8003b7e:	2945      	cmp	r1, #69	@ 0x45
 8003b80:	d00a      	beq.n	8003b98 <_scanf_float+0x350>
 8003b82:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003b86:	464a      	mov	r2, r9
 8003b88:	4640      	mov	r0, r8
 8003b8a:	4798      	blx	r3
 8003b8c:	6923      	ldr	r3, [r4, #16]
 8003b8e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	1eb5      	subs	r5, r6, #2
 8003b96:	6123      	str	r3, [r4, #16]
 8003b98:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003b9c:	464a      	mov	r2, r9
 8003b9e:	4640      	mov	r0, r8
 8003ba0:	4798      	blx	r3
 8003ba2:	462e      	mov	r6, r5
 8003ba4:	6822      	ldr	r2, [r4, #0]
 8003ba6:	f012 0210 	ands.w	r2, r2, #16
 8003baa:	d001      	beq.n	8003bb0 <_scanf_float+0x368>
 8003bac:	2000      	movs	r0, #0
 8003bae:	e68e      	b.n	80038ce <_scanf_float+0x86>
 8003bb0:	7032      	strb	r2, [r6, #0]
 8003bb2:	6823      	ldr	r3, [r4, #0]
 8003bb4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003bb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bbc:	d125      	bne.n	8003c0a <_scanf_float+0x3c2>
 8003bbe:	9b02      	ldr	r3, [sp, #8]
 8003bc0:	429f      	cmp	r7, r3
 8003bc2:	d00a      	beq.n	8003bda <_scanf_float+0x392>
 8003bc4:	1bda      	subs	r2, r3, r7
 8003bc6:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8003bca:	429e      	cmp	r6, r3
 8003bcc:	bf28      	it	cs
 8003bce:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8003bd2:	491f      	ldr	r1, [pc, #124]	@ (8003c50 <_scanf_float+0x408>)
 8003bd4:	4630      	mov	r0, r6
 8003bd6:	f000 f901 	bl	8003ddc <siprintf>
 8003bda:	2200      	movs	r2, #0
 8003bdc:	9901      	ldr	r1, [sp, #4]
 8003bde:	4640      	mov	r0, r8
 8003be0:	f002 fbd6 	bl	8006390 <_strtod_r>
 8003be4:	9b03      	ldr	r3, [sp, #12]
 8003be6:	6825      	ldr	r5, [r4, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f015 0f02 	tst.w	r5, #2
 8003bee:	4606      	mov	r6, r0
 8003bf0:	460f      	mov	r7, r1
 8003bf2:	f103 0204 	add.w	r2, r3, #4
 8003bf6:	d015      	beq.n	8003c24 <_scanf_float+0x3dc>
 8003bf8:	9903      	ldr	r1, [sp, #12]
 8003bfa:	600a      	str	r2, [r1, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	e9c3 6700 	strd	r6, r7, [r3]
 8003c02:	68e3      	ldr	r3, [r4, #12]
 8003c04:	3301      	adds	r3, #1
 8003c06:	60e3      	str	r3, [r4, #12]
 8003c08:	e7d0      	b.n	8003bac <_scanf_float+0x364>
 8003c0a:	9b04      	ldr	r3, [sp, #16]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0e4      	beq.n	8003bda <_scanf_float+0x392>
 8003c10:	9905      	ldr	r1, [sp, #20]
 8003c12:	230a      	movs	r3, #10
 8003c14:	3101      	adds	r1, #1
 8003c16:	4640      	mov	r0, r8
 8003c18:	f002 fc3a 	bl	8006490 <_strtol_r>
 8003c1c:	9b04      	ldr	r3, [sp, #16]
 8003c1e:	9e05      	ldr	r6, [sp, #20]
 8003c20:	1ac2      	subs	r2, r0, r3
 8003c22:	e7d0      	b.n	8003bc6 <_scanf_float+0x37e>
 8003c24:	076d      	lsls	r5, r5, #29
 8003c26:	d4e7      	bmi.n	8003bf8 <_scanf_float+0x3b0>
 8003c28:	9d03      	ldr	r5, [sp, #12]
 8003c2a:	602a      	str	r2, [r5, #0]
 8003c2c:	681d      	ldr	r5, [r3, #0]
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	f7fc ff7b 	bl	8000b2c <__aeabi_dcmpun>
 8003c36:	b120      	cbz	r0, 8003c42 <_scanf_float+0x3fa>
 8003c38:	4806      	ldr	r0, [pc, #24]	@ (8003c54 <_scanf_float+0x40c>)
 8003c3a:	f000 f9b5 	bl	8003fa8 <nanf>
 8003c3e:	6028      	str	r0, [r5, #0]
 8003c40:	e7df      	b.n	8003c02 <_scanf_float+0x3ba>
 8003c42:	4630      	mov	r0, r6
 8003c44:	4639      	mov	r1, r7
 8003c46:	f7fc ffcf 	bl	8000be8 <__aeabi_d2f>
 8003c4a:	e7f8      	b.n	8003c3e <_scanf_float+0x3f6>
 8003c4c:	2700      	movs	r7, #0
 8003c4e:	e633      	b.n	80038b8 <_scanf_float+0x70>
 8003c50:	08007ab4 	.word	0x08007ab4
 8003c54:	08007bf5 	.word	0x08007bf5

08003c58 <std>:
 8003c58:	2300      	movs	r3, #0
 8003c5a:	b510      	push	{r4, lr}
 8003c5c:	4604      	mov	r4, r0
 8003c5e:	e9c0 3300 	strd	r3, r3, [r0]
 8003c62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c66:	6083      	str	r3, [r0, #8]
 8003c68:	8181      	strh	r1, [r0, #12]
 8003c6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003c6c:	81c2      	strh	r2, [r0, #14]
 8003c6e:	6183      	str	r3, [r0, #24]
 8003c70:	4619      	mov	r1, r3
 8003c72:	2208      	movs	r2, #8
 8003c74:	305c      	adds	r0, #92	@ 0x5c
 8003c76:	f000 f916 	bl	8003ea6 <memset>
 8003c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb0 <std+0x58>)
 8003c7c:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb4 <std+0x5c>)
 8003c80:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c82:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb8 <std+0x60>)
 8003c84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c86:	4b0d      	ldr	r3, [pc, #52]	@ (8003cbc <std+0x64>)
 8003c88:	6323      	str	r3, [r4, #48]	@ 0x30
 8003c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003cc0 <std+0x68>)
 8003c8c:	6224      	str	r4, [r4, #32]
 8003c8e:	429c      	cmp	r4, r3
 8003c90:	d006      	beq.n	8003ca0 <std+0x48>
 8003c92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003c96:	4294      	cmp	r4, r2
 8003c98:	d002      	beq.n	8003ca0 <std+0x48>
 8003c9a:	33d0      	adds	r3, #208	@ 0xd0
 8003c9c:	429c      	cmp	r4, r3
 8003c9e:	d105      	bne.n	8003cac <std+0x54>
 8003ca0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ca8:	f000 b97a 	b.w	8003fa0 <__retarget_lock_init_recursive>
 8003cac:	bd10      	pop	{r4, pc}
 8003cae:	bf00      	nop
 8003cb0:	08003e21 	.word	0x08003e21
 8003cb4:	08003e43 	.word	0x08003e43
 8003cb8:	08003e7b 	.word	0x08003e7b
 8003cbc:	08003e9f 	.word	0x08003e9f
 8003cc0:	20000288 	.word	0x20000288

08003cc4 <stdio_exit_handler>:
 8003cc4:	4a02      	ldr	r2, [pc, #8]	@ (8003cd0 <stdio_exit_handler+0xc>)
 8003cc6:	4903      	ldr	r1, [pc, #12]	@ (8003cd4 <stdio_exit_handler+0x10>)
 8003cc8:	4803      	ldr	r0, [pc, #12]	@ (8003cd8 <stdio_exit_handler+0x14>)
 8003cca:	f000 b869 	b.w	8003da0 <_fwalk_sglue>
 8003cce:	bf00      	nop
 8003cd0:	20000018 	.word	0x20000018
 8003cd4:	08006845 	.word	0x08006845
 8003cd8:	20000028 	.word	0x20000028

08003cdc <cleanup_stdio>:
 8003cdc:	6841      	ldr	r1, [r0, #4]
 8003cde:	4b0c      	ldr	r3, [pc, #48]	@ (8003d10 <cleanup_stdio+0x34>)
 8003ce0:	4299      	cmp	r1, r3
 8003ce2:	b510      	push	{r4, lr}
 8003ce4:	4604      	mov	r4, r0
 8003ce6:	d001      	beq.n	8003cec <cleanup_stdio+0x10>
 8003ce8:	f002 fdac 	bl	8006844 <_fflush_r>
 8003cec:	68a1      	ldr	r1, [r4, #8]
 8003cee:	4b09      	ldr	r3, [pc, #36]	@ (8003d14 <cleanup_stdio+0x38>)
 8003cf0:	4299      	cmp	r1, r3
 8003cf2:	d002      	beq.n	8003cfa <cleanup_stdio+0x1e>
 8003cf4:	4620      	mov	r0, r4
 8003cf6:	f002 fda5 	bl	8006844 <_fflush_r>
 8003cfa:	68e1      	ldr	r1, [r4, #12]
 8003cfc:	4b06      	ldr	r3, [pc, #24]	@ (8003d18 <cleanup_stdio+0x3c>)
 8003cfe:	4299      	cmp	r1, r3
 8003d00:	d004      	beq.n	8003d0c <cleanup_stdio+0x30>
 8003d02:	4620      	mov	r0, r4
 8003d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d08:	f002 bd9c 	b.w	8006844 <_fflush_r>
 8003d0c:	bd10      	pop	{r4, pc}
 8003d0e:	bf00      	nop
 8003d10:	20000288 	.word	0x20000288
 8003d14:	200002f0 	.word	0x200002f0
 8003d18:	20000358 	.word	0x20000358

08003d1c <global_stdio_init.part.0>:
 8003d1c:	b510      	push	{r4, lr}
 8003d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d4c <global_stdio_init.part.0+0x30>)
 8003d20:	4c0b      	ldr	r4, [pc, #44]	@ (8003d50 <global_stdio_init.part.0+0x34>)
 8003d22:	4a0c      	ldr	r2, [pc, #48]	@ (8003d54 <global_stdio_init.part.0+0x38>)
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	4620      	mov	r0, r4
 8003d28:	2200      	movs	r2, #0
 8003d2a:	2104      	movs	r1, #4
 8003d2c:	f7ff ff94 	bl	8003c58 <std>
 8003d30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003d34:	2201      	movs	r2, #1
 8003d36:	2109      	movs	r1, #9
 8003d38:	f7ff ff8e 	bl	8003c58 <std>
 8003d3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003d40:	2202      	movs	r2, #2
 8003d42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d46:	2112      	movs	r1, #18
 8003d48:	f7ff bf86 	b.w	8003c58 <std>
 8003d4c:	200003c0 	.word	0x200003c0
 8003d50:	20000288 	.word	0x20000288
 8003d54:	08003cc5 	.word	0x08003cc5

08003d58 <__sfp_lock_acquire>:
 8003d58:	4801      	ldr	r0, [pc, #4]	@ (8003d60 <__sfp_lock_acquire+0x8>)
 8003d5a:	f000 b922 	b.w	8003fa2 <__retarget_lock_acquire_recursive>
 8003d5e:	bf00      	nop
 8003d60:	200003c9 	.word	0x200003c9

08003d64 <__sfp_lock_release>:
 8003d64:	4801      	ldr	r0, [pc, #4]	@ (8003d6c <__sfp_lock_release+0x8>)
 8003d66:	f000 b91d 	b.w	8003fa4 <__retarget_lock_release_recursive>
 8003d6a:	bf00      	nop
 8003d6c:	200003c9 	.word	0x200003c9

08003d70 <__sinit>:
 8003d70:	b510      	push	{r4, lr}
 8003d72:	4604      	mov	r4, r0
 8003d74:	f7ff fff0 	bl	8003d58 <__sfp_lock_acquire>
 8003d78:	6a23      	ldr	r3, [r4, #32]
 8003d7a:	b11b      	cbz	r3, 8003d84 <__sinit+0x14>
 8003d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d80:	f7ff bff0 	b.w	8003d64 <__sfp_lock_release>
 8003d84:	4b04      	ldr	r3, [pc, #16]	@ (8003d98 <__sinit+0x28>)
 8003d86:	6223      	str	r3, [r4, #32]
 8003d88:	4b04      	ldr	r3, [pc, #16]	@ (8003d9c <__sinit+0x2c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1f5      	bne.n	8003d7c <__sinit+0xc>
 8003d90:	f7ff ffc4 	bl	8003d1c <global_stdio_init.part.0>
 8003d94:	e7f2      	b.n	8003d7c <__sinit+0xc>
 8003d96:	bf00      	nop
 8003d98:	08003cdd 	.word	0x08003cdd
 8003d9c:	200003c0 	.word	0x200003c0

08003da0 <_fwalk_sglue>:
 8003da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003da4:	4607      	mov	r7, r0
 8003da6:	4688      	mov	r8, r1
 8003da8:	4614      	mov	r4, r2
 8003daa:	2600      	movs	r6, #0
 8003dac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003db0:	f1b9 0901 	subs.w	r9, r9, #1
 8003db4:	d505      	bpl.n	8003dc2 <_fwalk_sglue+0x22>
 8003db6:	6824      	ldr	r4, [r4, #0]
 8003db8:	2c00      	cmp	r4, #0
 8003dba:	d1f7      	bne.n	8003dac <_fwalk_sglue+0xc>
 8003dbc:	4630      	mov	r0, r6
 8003dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dc2:	89ab      	ldrh	r3, [r5, #12]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d907      	bls.n	8003dd8 <_fwalk_sglue+0x38>
 8003dc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	d003      	beq.n	8003dd8 <_fwalk_sglue+0x38>
 8003dd0:	4629      	mov	r1, r5
 8003dd2:	4638      	mov	r0, r7
 8003dd4:	47c0      	blx	r8
 8003dd6:	4306      	orrs	r6, r0
 8003dd8:	3568      	adds	r5, #104	@ 0x68
 8003dda:	e7e9      	b.n	8003db0 <_fwalk_sglue+0x10>

08003ddc <siprintf>:
 8003ddc:	b40e      	push	{r1, r2, r3}
 8003dde:	b510      	push	{r4, lr}
 8003de0:	b09d      	sub	sp, #116	@ 0x74
 8003de2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003de4:	9002      	str	r0, [sp, #8]
 8003de6:	9006      	str	r0, [sp, #24]
 8003de8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003dec:	480a      	ldr	r0, [pc, #40]	@ (8003e18 <siprintf+0x3c>)
 8003dee:	9107      	str	r1, [sp, #28]
 8003df0:	9104      	str	r1, [sp, #16]
 8003df2:	490a      	ldr	r1, [pc, #40]	@ (8003e1c <siprintf+0x40>)
 8003df4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003df8:	9105      	str	r1, [sp, #20]
 8003dfa:	2400      	movs	r4, #0
 8003dfc:	a902      	add	r1, sp, #8
 8003dfe:	6800      	ldr	r0, [r0, #0]
 8003e00:	9301      	str	r3, [sp, #4]
 8003e02:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003e04:	f002 fba2 	bl	800654c <_svfiprintf_r>
 8003e08:	9b02      	ldr	r3, [sp, #8]
 8003e0a:	701c      	strb	r4, [r3, #0]
 8003e0c:	b01d      	add	sp, #116	@ 0x74
 8003e0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e12:	b003      	add	sp, #12
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	20000024 	.word	0x20000024
 8003e1c:	ffff0208 	.word	0xffff0208

08003e20 <__sread>:
 8003e20:	b510      	push	{r4, lr}
 8003e22:	460c      	mov	r4, r1
 8003e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e28:	f000 f86c 	bl	8003f04 <_read_r>
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	bfab      	itete	ge
 8003e30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003e32:	89a3      	ldrhlt	r3, [r4, #12]
 8003e34:	181b      	addge	r3, r3, r0
 8003e36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003e3a:	bfac      	ite	ge
 8003e3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003e3e:	81a3      	strhlt	r3, [r4, #12]
 8003e40:	bd10      	pop	{r4, pc}

08003e42 <__swrite>:
 8003e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e46:	461f      	mov	r7, r3
 8003e48:	898b      	ldrh	r3, [r1, #12]
 8003e4a:	05db      	lsls	r3, r3, #23
 8003e4c:	4605      	mov	r5, r0
 8003e4e:	460c      	mov	r4, r1
 8003e50:	4616      	mov	r6, r2
 8003e52:	d505      	bpl.n	8003e60 <__swrite+0x1e>
 8003e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e58:	2302      	movs	r3, #2
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f000 f840 	bl	8003ee0 <_lseek_r>
 8003e60:	89a3      	ldrh	r3, [r4, #12]
 8003e62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e6a:	81a3      	strh	r3, [r4, #12]
 8003e6c:	4632      	mov	r2, r6
 8003e6e:	463b      	mov	r3, r7
 8003e70:	4628      	mov	r0, r5
 8003e72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e76:	f000 b857 	b.w	8003f28 <_write_r>

08003e7a <__sseek>:
 8003e7a:	b510      	push	{r4, lr}
 8003e7c:	460c      	mov	r4, r1
 8003e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e82:	f000 f82d 	bl	8003ee0 <_lseek_r>
 8003e86:	1c43      	adds	r3, r0, #1
 8003e88:	89a3      	ldrh	r3, [r4, #12]
 8003e8a:	bf15      	itete	ne
 8003e8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003e8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003e92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003e96:	81a3      	strheq	r3, [r4, #12]
 8003e98:	bf18      	it	ne
 8003e9a:	81a3      	strhne	r3, [r4, #12]
 8003e9c:	bd10      	pop	{r4, pc}

08003e9e <__sclose>:
 8003e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ea2:	f000 b80d 	b.w	8003ec0 <_close_r>

08003ea6 <memset>:
 8003ea6:	4402      	add	r2, r0
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d100      	bne.n	8003eb0 <memset+0xa>
 8003eae:	4770      	bx	lr
 8003eb0:	f803 1b01 	strb.w	r1, [r3], #1
 8003eb4:	e7f9      	b.n	8003eaa <memset+0x4>
	...

08003eb8 <_localeconv_r>:
 8003eb8:	4800      	ldr	r0, [pc, #0]	@ (8003ebc <_localeconv_r+0x4>)
 8003eba:	4770      	bx	lr
 8003ebc:	20000164 	.word	0x20000164

08003ec0 <_close_r>:
 8003ec0:	b538      	push	{r3, r4, r5, lr}
 8003ec2:	4d06      	ldr	r5, [pc, #24]	@ (8003edc <_close_r+0x1c>)
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	4604      	mov	r4, r0
 8003ec8:	4608      	mov	r0, r1
 8003eca:	602b      	str	r3, [r5, #0]
 8003ecc:	f7fd fab5 	bl	800143a <_close>
 8003ed0:	1c43      	adds	r3, r0, #1
 8003ed2:	d102      	bne.n	8003eda <_close_r+0x1a>
 8003ed4:	682b      	ldr	r3, [r5, #0]
 8003ed6:	b103      	cbz	r3, 8003eda <_close_r+0x1a>
 8003ed8:	6023      	str	r3, [r4, #0]
 8003eda:	bd38      	pop	{r3, r4, r5, pc}
 8003edc:	200003c4 	.word	0x200003c4

08003ee0 <_lseek_r>:
 8003ee0:	b538      	push	{r3, r4, r5, lr}
 8003ee2:	4d07      	ldr	r5, [pc, #28]	@ (8003f00 <_lseek_r+0x20>)
 8003ee4:	4604      	mov	r4, r0
 8003ee6:	4608      	mov	r0, r1
 8003ee8:	4611      	mov	r1, r2
 8003eea:	2200      	movs	r2, #0
 8003eec:	602a      	str	r2, [r5, #0]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	f7fd fac7 	bl	8001482 <_lseek>
 8003ef4:	1c43      	adds	r3, r0, #1
 8003ef6:	d102      	bne.n	8003efe <_lseek_r+0x1e>
 8003ef8:	682b      	ldr	r3, [r5, #0]
 8003efa:	b103      	cbz	r3, 8003efe <_lseek_r+0x1e>
 8003efc:	6023      	str	r3, [r4, #0]
 8003efe:	bd38      	pop	{r3, r4, r5, pc}
 8003f00:	200003c4 	.word	0x200003c4

08003f04 <_read_r>:
 8003f04:	b538      	push	{r3, r4, r5, lr}
 8003f06:	4d07      	ldr	r5, [pc, #28]	@ (8003f24 <_read_r+0x20>)
 8003f08:	4604      	mov	r4, r0
 8003f0a:	4608      	mov	r0, r1
 8003f0c:	4611      	mov	r1, r2
 8003f0e:	2200      	movs	r2, #0
 8003f10:	602a      	str	r2, [r5, #0]
 8003f12:	461a      	mov	r2, r3
 8003f14:	f7fd fa58 	bl	80013c8 <_read>
 8003f18:	1c43      	adds	r3, r0, #1
 8003f1a:	d102      	bne.n	8003f22 <_read_r+0x1e>
 8003f1c:	682b      	ldr	r3, [r5, #0]
 8003f1e:	b103      	cbz	r3, 8003f22 <_read_r+0x1e>
 8003f20:	6023      	str	r3, [r4, #0]
 8003f22:	bd38      	pop	{r3, r4, r5, pc}
 8003f24:	200003c4 	.word	0x200003c4

08003f28 <_write_r>:
 8003f28:	b538      	push	{r3, r4, r5, lr}
 8003f2a:	4d07      	ldr	r5, [pc, #28]	@ (8003f48 <_write_r+0x20>)
 8003f2c:	4604      	mov	r4, r0
 8003f2e:	4608      	mov	r0, r1
 8003f30:	4611      	mov	r1, r2
 8003f32:	2200      	movs	r2, #0
 8003f34:	602a      	str	r2, [r5, #0]
 8003f36:	461a      	mov	r2, r3
 8003f38:	f7fd fa63 	bl	8001402 <_write>
 8003f3c:	1c43      	adds	r3, r0, #1
 8003f3e:	d102      	bne.n	8003f46 <_write_r+0x1e>
 8003f40:	682b      	ldr	r3, [r5, #0]
 8003f42:	b103      	cbz	r3, 8003f46 <_write_r+0x1e>
 8003f44:	6023      	str	r3, [r4, #0]
 8003f46:	bd38      	pop	{r3, r4, r5, pc}
 8003f48:	200003c4 	.word	0x200003c4

08003f4c <__errno>:
 8003f4c:	4b01      	ldr	r3, [pc, #4]	@ (8003f54 <__errno+0x8>)
 8003f4e:	6818      	ldr	r0, [r3, #0]
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	20000024 	.word	0x20000024

08003f58 <__libc_init_array>:
 8003f58:	b570      	push	{r4, r5, r6, lr}
 8003f5a:	4d0d      	ldr	r5, [pc, #52]	@ (8003f90 <__libc_init_array+0x38>)
 8003f5c:	4c0d      	ldr	r4, [pc, #52]	@ (8003f94 <__libc_init_array+0x3c>)
 8003f5e:	1b64      	subs	r4, r4, r5
 8003f60:	10a4      	asrs	r4, r4, #2
 8003f62:	2600      	movs	r6, #0
 8003f64:	42a6      	cmp	r6, r4
 8003f66:	d109      	bne.n	8003f7c <__libc_init_array+0x24>
 8003f68:	4d0b      	ldr	r5, [pc, #44]	@ (8003f98 <__libc_init_array+0x40>)
 8003f6a:	4c0c      	ldr	r4, [pc, #48]	@ (8003f9c <__libc_init_array+0x44>)
 8003f6c:	f003 fd7a 	bl	8007a64 <_init>
 8003f70:	1b64      	subs	r4, r4, r5
 8003f72:	10a4      	asrs	r4, r4, #2
 8003f74:	2600      	movs	r6, #0
 8003f76:	42a6      	cmp	r6, r4
 8003f78:	d105      	bne.n	8003f86 <__libc_init_array+0x2e>
 8003f7a:	bd70      	pop	{r4, r5, r6, pc}
 8003f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f80:	4798      	blx	r3
 8003f82:	3601      	adds	r6, #1
 8003f84:	e7ee      	b.n	8003f64 <__libc_init_array+0xc>
 8003f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f8a:	4798      	blx	r3
 8003f8c:	3601      	adds	r6, #1
 8003f8e:	e7f2      	b.n	8003f76 <__libc_init_array+0x1e>
 8003f90:	08007ef4 	.word	0x08007ef4
 8003f94:	08007ef4 	.word	0x08007ef4
 8003f98:	08007ef4 	.word	0x08007ef4
 8003f9c:	08007ef8 	.word	0x08007ef8

08003fa0 <__retarget_lock_init_recursive>:
 8003fa0:	4770      	bx	lr

08003fa2 <__retarget_lock_acquire_recursive>:
 8003fa2:	4770      	bx	lr

08003fa4 <__retarget_lock_release_recursive>:
 8003fa4:	4770      	bx	lr
	...

08003fa8 <nanf>:
 8003fa8:	4800      	ldr	r0, [pc, #0]	@ (8003fac <nanf+0x4>)
 8003faa:	4770      	bx	lr
 8003fac:	7fc00000 	.word	0x7fc00000

08003fb0 <quorem>:
 8003fb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb4:	6903      	ldr	r3, [r0, #16]
 8003fb6:	690c      	ldr	r4, [r1, #16]
 8003fb8:	42a3      	cmp	r3, r4
 8003fba:	4607      	mov	r7, r0
 8003fbc:	db7e      	blt.n	80040bc <quorem+0x10c>
 8003fbe:	3c01      	subs	r4, #1
 8003fc0:	f101 0814 	add.w	r8, r1, #20
 8003fc4:	00a3      	lsls	r3, r4, #2
 8003fc6:	f100 0514 	add.w	r5, r0, #20
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003fd0:	9301      	str	r3, [sp, #4]
 8003fd2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003fd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003fda:	3301      	adds	r3, #1
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003fe2:	fbb2 f6f3 	udiv	r6, r2, r3
 8003fe6:	d32e      	bcc.n	8004046 <quorem+0x96>
 8003fe8:	f04f 0a00 	mov.w	sl, #0
 8003fec:	46c4      	mov	ip, r8
 8003fee:	46ae      	mov	lr, r5
 8003ff0:	46d3      	mov	fp, sl
 8003ff2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003ff6:	b298      	uxth	r0, r3
 8003ff8:	fb06 a000 	mla	r0, r6, r0, sl
 8003ffc:	0c02      	lsrs	r2, r0, #16
 8003ffe:	0c1b      	lsrs	r3, r3, #16
 8004000:	fb06 2303 	mla	r3, r6, r3, r2
 8004004:	f8de 2000 	ldr.w	r2, [lr]
 8004008:	b280      	uxth	r0, r0
 800400a:	b292      	uxth	r2, r2
 800400c:	1a12      	subs	r2, r2, r0
 800400e:	445a      	add	r2, fp
 8004010:	f8de 0000 	ldr.w	r0, [lr]
 8004014:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004018:	b29b      	uxth	r3, r3
 800401a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800401e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004022:	b292      	uxth	r2, r2
 8004024:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004028:	45e1      	cmp	r9, ip
 800402a:	f84e 2b04 	str.w	r2, [lr], #4
 800402e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004032:	d2de      	bcs.n	8003ff2 <quorem+0x42>
 8004034:	9b00      	ldr	r3, [sp, #0]
 8004036:	58eb      	ldr	r3, [r5, r3]
 8004038:	b92b      	cbnz	r3, 8004046 <quorem+0x96>
 800403a:	9b01      	ldr	r3, [sp, #4]
 800403c:	3b04      	subs	r3, #4
 800403e:	429d      	cmp	r5, r3
 8004040:	461a      	mov	r2, r3
 8004042:	d32f      	bcc.n	80040a4 <quorem+0xf4>
 8004044:	613c      	str	r4, [r7, #16]
 8004046:	4638      	mov	r0, r7
 8004048:	f001 f9c6 	bl	80053d8 <__mcmp>
 800404c:	2800      	cmp	r0, #0
 800404e:	db25      	blt.n	800409c <quorem+0xec>
 8004050:	4629      	mov	r1, r5
 8004052:	2000      	movs	r0, #0
 8004054:	f858 2b04 	ldr.w	r2, [r8], #4
 8004058:	f8d1 c000 	ldr.w	ip, [r1]
 800405c:	fa1f fe82 	uxth.w	lr, r2
 8004060:	fa1f f38c 	uxth.w	r3, ip
 8004064:	eba3 030e 	sub.w	r3, r3, lr
 8004068:	4403      	add	r3, r0
 800406a:	0c12      	lsrs	r2, r2, #16
 800406c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004070:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004074:	b29b      	uxth	r3, r3
 8004076:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800407a:	45c1      	cmp	r9, r8
 800407c:	f841 3b04 	str.w	r3, [r1], #4
 8004080:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004084:	d2e6      	bcs.n	8004054 <quorem+0xa4>
 8004086:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800408a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800408e:	b922      	cbnz	r2, 800409a <quorem+0xea>
 8004090:	3b04      	subs	r3, #4
 8004092:	429d      	cmp	r5, r3
 8004094:	461a      	mov	r2, r3
 8004096:	d30b      	bcc.n	80040b0 <quorem+0x100>
 8004098:	613c      	str	r4, [r7, #16]
 800409a:	3601      	adds	r6, #1
 800409c:	4630      	mov	r0, r6
 800409e:	b003      	add	sp, #12
 80040a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040a4:	6812      	ldr	r2, [r2, #0]
 80040a6:	3b04      	subs	r3, #4
 80040a8:	2a00      	cmp	r2, #0
 80040aa:	d1cb      	bne.n	8004044 <quorem+0x94>
 80040ac:	3c01      	subs	r4, #1
 80040ae:	e7c6      	b.n	800403e <quorem+0x8e>
 80040b0:	6812      	ldr	r2, [r2, #0]
 80040b2:	3b04      	subs	r3, #4
 80040b4:	2a00      	cmp	r2, #0
 80040b6:	d1ef      	bne.n	8004098 <quorem+0xe8>
 80040b8:	3c01      	subs	r4, #1
 80040ba:	e7ea      	b.n	8004092 <quorem+0xe2>
 80040bc:	2000      	movs	r0, #0
 80040be:	e7ee      	b.n	800409e <quorem+0xee>

080040c0 <_dtoa_r>:
 80040c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040c4:	69c7      	ldr	r7, [r0, #28]
 80040c6:	b097      	sub	sp, #92	@ 0x5c
 80040c8:	4614      	mov	r4, r2
 80040ca:	461d      	mov	r5, r3
 80040cc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80040d0:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80040d2:	4681      	mov	r9, r0
 80040d4:	b97f      	cbnz	r7, 80040f6 <_dtoa_r+0x36>
 80040d6:	2010      	movs	r0, #16
 80040d8:	f000 fe0c 	bl	8004cf4 <malloc>
 80040dc:	4602      	mov	r2, r0
 80040de:	f8c9 001c 	str.w	r0, [r9, #28]
 80040e2:	b920      	cbnz	r0, 80040ee <_dtoa_r+0x2e>
 80040e4:	4baa      	ldr	r3, [pc, #680]	@ (8004390 <_dtoa_r+0x2d0>)
 80040e6:	21ef      	movs	r1, #239	@ 0xef
 80040e8:	48aa      	ldr	r0, [pc, #680]	@ (8004394 <_dtoa_r+0x2d4>)
 80040ea:	f002 fc23 	bl	8006934 <__assert_func>
 80040ee:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80040f2:	6007      	str	r7, [r0, #0]
 80040f4:	60c7      	str	r7, [r0, #12]
 80040f6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80040fa:	6819      	ldr	r1, [r3, #0]
 80040fc:	b159      	cbz	r1, 8004116 <_dtoa_r+0x56>
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	604a      	str	r2, [r1, #4]
 8004102:	2301      	movs	r3, #1
 8004104:	4093      	lsls	r3, r2
 8004106:	608b      	str	r3, [r1, #8]
 8004108:	4648      	mov	r0, r9
 800410a:	f000 fee9 	bl	8004ee0 <_Bfree>
 800410e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	1e2b      	subs	r3, r5, #0
 8004118:	bfb9      	ittee	lt
 800411a:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800411e:	9307      	strlt	r3, [sp, #28]
 8004120:	2300      	movge	r3, #0
 8004122:	6033      	strge	r3, [r6, #0]
 8004124:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8004128:	4b9b      	ldr	r3, [pc, #620]	@ (8004398 <_dtoa_r+0x2d8>)
 800412a:	bfbc      	itt	lt
 800412c:	2201      	movlt	r2, #1
 800412e:	6032      	strlt	r2, [r6, #0]
 8004130:	ea33 0308 	bics.w	r3, r3, r8
 8004134:	d112      	bne.n	800415c <_dtoa_r+0x9c>
 8004136:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004138:	f242 730f 	movw	r3, #9999	@ 0x270f
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004142:	4323      	orrs	r3, r4
 8004144:	f000 855b 	beq.w	8004bfe <_dtoa_r+0xb3e>
 8004148:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800414a:	f8df a250 	ldr.w	sl, [pc, #592]	@ 800439c <_dtoa_r+0x2dc>
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 855d 	beq.w	8004c0e <_dtoa_r+0xb4e>
 8004154:	f10a 0303 	add.w	r3, sl, #3
 8004158:	f000 bd57 	b.w	8004c0a <_dtoa_r+0xb4a>
 800415c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004160:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004164:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004168:	2200      	movs	r2, #0
 800416a:	2300      	movs	r3, #0
 800416c:	f7fc fcac 	bl	8000ac8 <__aeabi_dcmpeq>
 8004170:	4607      	mov	r7, r0
 8004172:	b158      	cbz	r0, 800418c <_dtoa_r+0xcc>
 8004174:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004176:	2301      	movs	r3, #1
 8004178:	6013      	str	r3, [r2, #0]
 800417a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800417c:	b113      	cbz	r3, 8004184 <_dtoa_r+0xc4>
 800417e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004180:	4b87      	ldr	r3, [pc, #540]	@ (80043a0 <_dtoa_r+0x2e0>)
 8004182:	6013      	str	r3, [r2, #0]
 8004184:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 80043a4 <_dtoa_r+0x2e4>
 8004188:	f000 bd41 	b.w	8004c0e <_dtoa_r+0xb4e>
 800418c:	ab14      	add	r3, sp, #80	@ 0x50
 800418e:	9301      	str	r3, [sp, #4]
 8004190:	ab15      	add	r3, sp, #84	@ 0x54
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	4648      	mov	r0, r9
 8004196:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800419a:	f001 fa35 	bl	8005608 <__d2b>
 800419e:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80041a2:	9003      	str	r0, [sp, #12]
 80041a4:	2e00      	cmp	r6, #0
 80041a6:	d077      	beq.n	8004298 <_dtoa_r+0x1d8>
 80041a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80041aa:	9712      	str	r7, [sp, #72]	@ 0x48
 80041ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80041b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80041b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80041bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80041c0:	4619      	mov	r1, r3
 80041c2:	2200      	movs	r2, #0
 80041c4:	4b78      	ldr	r3, [pc, #480]	@ (80043a8 <_dtoa_r+0x2e8>)
 80041c6:	f7fc f85f 	bl	8000288 <__aeabi_dsub>
 80041ca:	a36b      	add	r3, pc, #428	@ (adr r3, 8004378 <_dtoa_r+0x2b8>)
 80041cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d0:	f7fc fa12 	bl	80005f8 <__aeabi_dmul>
 80041d4:	a36a      	add	r3, pc, #424	@ (adr r3, 8004380 <_dtoa_r+0x2c0>)
 80041d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041da:	f7fc f857 	bl	800028c <__adddf3>
 80041de:	4604      	mov	r4, r0
 80041e0:	4630      	mov	r0, r6
 80041e2:	460d      	mov	r5, r1
 80041e4:	f7fc f99e 	bl	8000524 <__aeabi_i2d>
 80041e8:	a367      	add	r3, pc, #412	@ (adr r3, 8004388 <_dtoa_r+0x2c8>)
 80041ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ee:	f7fc fa03 	bl	80005f8 <__aeabi_dmul>
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	4620      	mov	r0, r4
 80041f8:	4629      	mov	r1, r5
 80041fa:	f7fc f847 	bl	800028c <__adddf3>
 80041fe:	4604      	mov	r4, r0
 8004200:	460d      	mov	r5, r1
 8004202:	f7fc fca9 	bl	8000b58 <__aeabi_d2iz>
 8004206:	2200      	movs	r2, #0
 8004208:	4607      	mov	r7, r0
 800420a:	2300      	movs	r3, #0
 800420c:	4620      	mov	r0, r4
 800420e:	4629      	mov	r1, r5
 8004210:	f7fc fc64 	bl	8000adc <__aeabi_dcmplt>
 8004214:	b140      	cbz	r0, 8004228 <_dtoa_r+0x168>
 8004216:	4638      	mov	r0, r7
 8004218:	f7fc f984 	bl	8000524 <__aeabi_i2d>
 800421c:	4622      	mov	r2, r4
 800421e:	462b      	mov	r3, r5
 8004220:	f7fc fc52 	bl	8000ac8 <__aeabi_dcmpeq>
 8004224:	b900      	cbnz	r0, 8004228 <_dtoa_r+0x168>
 8004226:	3f01      	subs	r7, #1
 8004228:	2f16      	cmp	r7, #22
 800422a:	d853      	bhi.n	80042d4 <_dtoa_r+0x214>
 800422c:	4b5f      	ldr	r3, [pc, #380]	@ (80043ac <_dtoa_r+0x2ec>)
 800422e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004236:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800423a:	f7fc fc4f 	bl	8000adc <__aeabi_dcmplt>
 800423e:	2800      	cmp	r0, #0
 8004240:	d04a      	beq.n	80042d8 <_dtoa_r+0x218>
 8004242:	3f01      	subs	r7, #1
 8004244:	2300      	movs	r3, #0
 8004246:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004248:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800424a:	1b9b      	subs	r3, r3, r6
 800424c:	1e5a      	subs	r2, r3, #1
 800424e:	bf45      	ittet	mi
 8004250:	f1c3 0301 	rsbmi	r3, r3, #1
 8004254:	9304      	strmi	r3, [sp, #16]
 8004256:	2300      	movpl	r3, #0
 8004258:	2300      	movmi	r3, #0
 800425a:	9209      	str	r2, [sp, #36]	@ 0x24
 800425c:	bf54      	ite	pl
 800425e:	9304      	strpl	r3, [sp, #16]
 8004260:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004262:	2f00      	cmp	r7, #0
 8004264:	db3a      	blt.n	80042dc <_dtoa_r+0x21c>
 8004266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004268:	970e      	str	r7, [sp, #56]	@ 0x38
 800426a:	443b      	add	r3, r7
 800426c:	9309      	str	r3, [sp, #36]	@ 0x24
 800426e:	2300      	movs	r3, #0
 8004270:	930a      	str	r3, [sp, #40]	@ 0x28
 8004272:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004274:	2b09      	cmp	r3, #9
 8004276:	d864      	bhi.n	8004342 <_dtoa_r+0x282>
 8004278:	2b05      	cmp	r3, #5
 800427a:	bfc4      	itt	gt
 800427c:	3b04      	subgt	r3, #4
 800427e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004280:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004282:	f1a3 0302 	sub.w	r3, r3, #2
 8004286:	bfcc      	ite	gt
 8004288:	2400      	movgt	r4, #0
 800428a:	2401      	movle	r4, #1
 800428c:	2b03      	cmp	r3, #3
 800428e:	d864      	bhi.n	800435a <_dtoa_r+0x29a>
 8004290:	e8df f003 	tbb	[pc, r3]
 8004294:	2c385553 	.word	0x2c385553
 8004298:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800429c:	441e      	add	r6, r3
 800429e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80042a2:	2b20      	cmp	r3, #32
 80042a4:	bfc1      	itttt	gt
 80042a6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80042aa:	fa08 f803 	lslgt.w	r8, r8, r3
 80042ae:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80042b2:	fa24 f303 	lsrgt.w	r3, r4, r3
 80042b6:	bfd6      	itet	le
 80042b8:	f1c3 0320 	rsble	r3, r3, #32
 80042bc:	ea48 0003 	orrgt.w	r0, r8, r3
 80042c0:	fa04 f003 	lslle.w	r0, r4, r3
 80042c4:	f7fc f91e 	bl	8000504 <__aeabi_ui2d>
 80042c8:	2201      	movs	r2, #1
 80042ca:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80042ce:	3e01      	subs	r6, #1
 80042d0:	9212      	str	r2, [sp, #72]	@ 0x48
 80042d2:	e775      	b.n	80041c0 <_dtoa_r+0x100>
 80042d4:	2301      	movs	r3, #1
 80042d6:	e7b6      	b.n	8004246 <_dtoa_r+0x186>
 80042d8:	900f      	str	r0, [sp, #60]	@ 0x3c
 80042da:	e7b5      	b.n	8004248 <_dtoa_r+0x188>
 80042dc:	9b04      	ldr	r3, [sp, #16]
 80042de:	1bdb      	subs	r3, r3, r7
 80042e0:	9304      	str	r3, [sp, #16]
 80042e2:	427b      	negs	r3, r7
 80042e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80042e6:	2300      	movs	r3, #0
 80042e8:	930e      	str	r3, [sp, #56]	@ 0x38
 80042ea:	e7c2      	b.n	8004272 <_dtoa_r+0x1b2>
 80042ec:	2301      	movs	r3, #1
 80042ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80042f0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80042f2:	eb07 0b03 	add.w	fp, r7, r3
 80042f6:	f10b 0301 	add.w	r3, fp, #1
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	9308      	str	r3, [sp, #32]
 80042fe:	bfb8      	it	lt
 8004300:	2301      	movlt	r3, #1
 8004302:	e006      	b.n	8004312 <_dtoa_r+0x252>
 8004304:	2301      	movs	r3, #1
 8004306:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004308:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800430a:	2b00      	cmp	r3, #0
 800430c:	dd28      	ble.n	8004360 <_dtoa_r+0x2a0>
 800430e:	469b      	mov	fp, r3
 8004310:	9308      	str	r3, [sp, #32]
 8004312:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8004316:	2100      	movs	r1, #0
 8004318:	2204      	movs	r2, #4
 800431a:	f102 0514 	add.w	r5, r2, #20
 800431e:	429d      	cmp	r5, r3
 8004320:	d926      	bls.n	8004370 <_dtoa_r+0x2b0>
 8004322:	6041      	str	r1, [r0, #4]
 8004324:	4648      	mov	r0, r9
 8004326:	f000 fd9b 	bl	8004e60 <_Balloc>
 800432a:	4682      	mov	sl, r0
 800432c:	2800      	cmp	r0, #0
 800432e:	d141      	bne.n	80043b4 <_dtoa_r+0x2f4>
 8004330:	4b1f      	ldr	r3, [pc, #124]	@ (80043b0 <_dtoa_r+0x2f0>)
 8004332:	4602      	mov	r2, r0
 8004334:	f240 11af 	movw	r1, #431	@ 0x1af
 8004338:	e6d6      	b.n	80040e8 <_dtoa_r+0x28>
 800433a:	2300      	movs	r3, #0
 800433c:	e7e3      	b.n	8004306 <_dtoa_r+0x246>
 800433e:	2300      	movs	r3, #0
 8004340:	e7d5      	b.n	80042ee <_dtoa_r+0x22e>
 8004342:	2401      	movs	r4, #1
 8004344:	2300      	movs	r3, #0
 8004346:	9320      	str	r3, [sp, #128]	@ 0x80
 8004348:	940b      	str	r4, [sp, #44]	@ 0x2c
 800434a:	f04f 3bff 	mov.w	fp, #4294967295
 800434e:	2200      	movs	r2, #0
 8004350:	f8cd b020 	str.w	fp, [sp, #32]
 8004354:	2312      	movs	r3, #18
 8004356:	9221      	str	r2, [sp, #132]	@ 0x84
 8004358:	e7db      	b.n	8004312 <_dtoa_r+0x252>
 800435a:	2301      	movs	r3, #1
 800435c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800435e:	e7f4      	b.n	800434a <_dtoa_r+0x28a>
 8004360:	f04f 0b01 	mov.w	fp, #1
 8004364:	f8cd b020 	str.w	fp, [sp, #32]
 8004368:	465b      	mov	r3, fp
 800436a:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800436e:	e7d0      	b.n	8004312 <_dtoa_r+0x252>
 8004370:	3101      	adds	r1, #1
 8004372:	0052      	lsls	r2, r2, #1
 8004374:	e7d1      	b.n	800431a <_dtoa_r+0x25a>
 8004376:	bf00      	nop
 8004378:	636f4361 	.word	0x636f4361
 800437c:	3fd287a7 	.word	0x3fd287a7
 8004380:	8b60c8b3 	.word	0x8b60c8b3
 8004384:	3fc68a28 	.word	0x3fc68a28
 8004388:	509f79fb 	.word	0x509f79fb
 800438c:	3fd34413 	.word	0x3fd34413
 8004390:	08007ac6 	.word	0x08007ac6
 8004394:	08007add 	.word	0x08007add
 8004398:	7ff00000 	.word	0x7ff00000
 800439c:	08007ac2 	.word	0x08007ac2
 80043a0:	08007a91 	.word	0x08007a91
 80043a4:	08007a90 	.word	0x08007a90
 80043a8:	3ff80000 	.word	0x3ff80000
 80043ac:	08007c90 	.word	0x08007c90
 80043b0:	08007b35 	.word	0x08007b35
 80043b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80043b8:	6018      	str	r0, [r3, #0]
 80043ba:	9b08      	ldr	r3, [sp, #32]
 80043bc:	2b0e      	cmp	r3, #14
 80043be:	f200 80a1 	bhi.w	8004504 <_dtoa_r+0x444>
 80043c2:	2c00      	cmp	r4, #0
 80043c4:	f000 809e 	beq.w	8004504 <_dtoa_r+0x444>
 80043c8:	2f00      	cmp	r7, #0
 80043ca:	dd33      	ble.n	8004434 <_dtoa_r+0x374>
 80043cc:	4b9c      	ldr	r3, [pc, #624]	@ (8004640 <_dtoa_r+0x580>)
 80043ce:	f007 020f 	and.w	r2, r7, #15
 80043d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80043d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80043da:	05f8      	lsls	r0, r7, #23
 80043dc:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80043e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80043e4:	d516      	bpl.n	8004414 <_dtoa_r+0x354>
 80043e6:	4b97      	ldr	r3, [pc, #604]	@ (8004644 <_dtoa_r+0x584>)
 80043e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80043ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80043f0:	f7fc fa2c 	bl	800084c <__aeabi_ddiv>
 80043f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80043f8:	f004 040f 	and.w	r4, r4, #15
 80043fc:	2603      	movs	r6, #3
 80043fe:	4d91      	ldr	r5, [pc, #580]	@ (8004644 <_dtoa_r+0x584>)
 8004400:	b954      	cbnz	r4, 8004418 <_dtoa_r+0x358>
 8004402:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004406:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800440a:	f7fc fa1f 	bl	800084c <__aeabi_ddiv>
 800440e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004412:	e028      	b.n	8004466 <_dtoa_r+0x3a6>
 8004414:	2602      	movs	r6, #2
 8004416:	e7f2      	b.n	80043fe <_dtoa_r+0x33e>
 8004418:	07e1      	lsls	r1, r4, #31
 800441a:	d508      	bpl.n	800442e <_dtoa_r+0x36e>
 800441c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004420:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004424:	f7fc f8e8 	bl	80005f8 <__aeabi_dmul>
 8004428:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800442c:	3601      	adds	r6, #1
 800442e:	1064      	asrs	r4, r4, #1
 8004430:	3508      	adds	r5, #8
 8004432:	e7e5      	b.n	8004400 <_dtoa_r+0x340>
 8004434:	f000 80af 	beq.w	8004596 <_dtoa_r+0x4d6>
 8004438:	427c      	negs	r4, r7
 800443a:	4b81      	ldr	r3, [pc, #516]	@ (8004640 <_dtoa_r+0x580>)
 800443c:	4d81      	ldr	r5, [pc, #516]	@ (8004644 <_dtoa_r+0x584>)
 800443e:	f004 020f 	and.w	r2, r4, #15
 8004442:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800444e:	f7fc f8d3 	bl	80005f8 <__aeabi_dmul>
 8004452:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004456:	1124      	asrs	r4, r4, #4
 8004458:	2300      	movs	r3, #0
 800445a:	2602      	movs	r6, #2
 800445c:	2c00      	cmp	r4, #0
 800445e:	f040 808f 	bne.w	8004580 <_dtoa_r+0x4c0>
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1d3      	bne.n	800440e <_dtoa_r+0x34e>
 8004466:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004468:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 8094 	beq.w	800459a <_dtoa_r+0x4da>
 8004472:	4b75      	ldr	r3, [pc, #468]	@ (8004648 <_dtoa_r+0x588>)
 8004474:	2200      	movs	r2, #0
 8004476:	4620      	mov	r0, r4
 8004478:	4629      	mov	r1, r5
 800447a:	f7fc fb2f 	bl	8000adc <__aeabi_dcmplt>
 800447e:	2800      	cmp	r0, #0
 8004480:	f000 808b 	beq.w	800459a <_dtoa_r+0x4da>
 8004484:	9b08      	ldr	r3, [sp, #32]
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 8087 	beq.w	800459a <_dtoa_r+0x4da>
 800448c:	f1bb 0f00 	cmp.w	fp, #0
 8004490:	dd34      	ble.n	80044fc <_dtoa_r+0x43c>
 8004492:	4620      	mov	r0, r4
 8004494:	4b6d      	ldr	r3, [pc, #436]	@ (800464c <_dtoa_r+0x58c>)
 8004496:	2200      	movs	r2, #0
 8004498:	4629      	mov	r1, r5
 800449a:	f7fc f8ad 	bl	80005f8 <__aeabi_dmul>
 800449e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80044a2:	f107 38ff 	add.w	r8, r7, #4294967295
 80044a6:	3601      	adds	r6, #1
 80044a8:	465c      	mov	r4, fp
 80044aa:	4630      	mov	r0, r6
 80044ac:	f7fc f83a 	bl	8000524 <__aeabi_i2d>
 80044b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80044b4:	f7fc f8a0 	bl	80005f8 <__aeabi_dmul>
 80044b8:	4b65      	ldr	r3, [pc, #404]	@ (8004650 <_dtoa_r+0x590>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	f7fb fee6 	bl	800028c <__adddf3>
 80044c0:	4605      	mov	r5, r0
 80044c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80044c6:	2c00      	cmp	r4, #0
 80044c8:	d16a      	bne.n	80045a0 <_dtoa_r+0x4e0>
 80044ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80044ce:	4b61      	ldr	r3, [pc, #388]	@ (8004654 <_dtoa_r+0x594>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	f7fb fed9 	bl	8000288 <__aeabi_dsub>
 80044d6:	4602      	mov	r2, r0
 80044d8:	460b      	mov	r3, r1
 80044da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80044de:	462a      	mov	r2, r5
 80044e0:	4633      	mov	r3, r6
 80044e2:	f7fc fb19 	bl	8000b18 <__aeabi_dcmpgt>
 80044e6:	2800      	cmp	r0, #0
 80044e8:	f040 8298 	bne.w	8004a1c <_dtoa_r+0x95c>
 80044ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80044f0:	462a      	mov	r2, r5
 80044f2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80044f6:	f7fc faf1 	bl	8000adc <__aeabi_dcmplt>
 80044fa:	bb38      	cbnz	r0, 800454c <_dtoa_r+0x48c>
 80044fc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004500:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004504:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004506:	2b00      	cmp	r3, #0
 8004508:	f2c0 8157 	blt.w	80047ba <_dtoa_r+0x6fa>
 800450c:	2f0e      	cmp	r7, #14
 800450e:	f300 8154 	bgt.w	80047ba <_dtoa_r+0x6fa>
 8004512:	4b4b      	ldr	r3, [pc, #300]	@ (8004640 <_dtoa_r+0x580>)
 8004514:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004518:	e9d3 3400 	ldrd	r3, r4, [r3]
 800451c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004520:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004522:	2b00      	cmp	r3, #0
 8004524:	f280 80e5 	bge.w	80046f2 <_dtoa_r+0x632>
 8004528:	9b08      	ldr	r3, [sp, #32]
 800452a:	2b00      	cmp	r3, #0
 800452c:	f300 80e1 	bgt.w	80046f2 <_dtoa_r+0x632>
 8004530:	d10c      	bne.n	800454c <_dtoa_r+0x48c>
 8004532:	4b48      	ldr	r3, [pc, #288]	@ (8004654 <_dtoa_r+0x594>)
 8004534:	2200      	movs	r2, #0
 8004536:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800453a:	f7fc f85d 	bl	80005f8 <__aeabi_dmul>
 800453e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004542:	f7fc fadf 	bl	8000b04 <__aeabi_dcmpge>
 8004546:	2800      	cmp	r0, #0
 8004548:	f000 8266 	beq.w	8004a18 <_dtoa_r+0x958>
 800454c:	2400      	movs	r4, #0
 800454e:	4625      	mov	r5, r4
 8004550:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004552:	4656      	mov	r6, sl
 8004554:	ea6f 0803 	mvn.w	r8, r3
 8004558:	2700      	movs	r7, #0
 800455a:	4621      	mov	r1, r4
 800455c:	4648      	mov	r0, r9
 800455e:	f000 fcbf 	bl	8004ee0 <_Bfree>
 8004562:	2d00      	cmp	r5, #0
 8004564:	f000 80bd 	beq.w	80046e2 <_dtoa_r+0x622>
 8004568:	b12f      	cbz	r7, 8004576 <_dtoa_r+0x4b6>
 800456a:	42af      	cmp	r7, r5
 800456c:	d003      	beq.n	8004576 <_dtoa_r+0x4b6>
 800456e:	4639      	mov	r1, r7
 8004570:	4648      	mov	r0, r9
 8004572:	f000 fcb5 	bl	8004ee0 <_Bfree>
 8004576:	4629      	mov	r1, r5
 8004578:	4648      	mov	r0, r9
 800457a:	f000 fcb1 	bl	8004ee0 <_Bfree>
 800457e:	e0b0      	b.n	80046e2 <_dtoa_r+0x622>
 8004580:	07e2      	lsls	r2, r4, #31
 8004582:	d505      	bpl.n	8004590 <_dtoa_r+0x4d0>
 8004584:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004588:	f7fc f836 	bl	80005f8 <__aeabi_dmul>
 800458c:	3601      	adds	r6, #1
 800458e:	2301      	movs	r3, #1
 8004590:	1064      	asrs	r4, r4, #1
 8004592:	3508      	adds	r5, #8
 8004594:	e762      	b.n	800445c <_dtoa_r+0x39c>
 8004596:	2602      	movs	r6, #2
 8004598:	e765      	b.n	8004466 <_dtoa_r+0x3a6>
 800459a:	9c08      	ldr	r4, [sp, #32]
 800459c:	46b8      	mov	r8, r7
 800459e:	e784      	b.n	80044aa <_dtoa_r+0x3ea>
 80045a0:	4b27      	ldr	r3, [pc, #156]	@ (8004640 <_dtoa_r+0x580>)
 80045a2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80045a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80045a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80045ac:	4454      	add	r4, sl
 80045ae:	2900      	cmp	r1, #0
 80045b0:	d054      	beq.n	800465c <_dtoa_r+0x59c>
 80045b2:	4929      	ldr	r1, [pc, #164]	@ (8004658 <_dtoa_r+0x598>)
 80045b4:	2000      	movs	r0, #0
 80045b6:	f7fc f949 	bl	800084c <__aeabi_ddiv>
 80045ba:	4633      	mov	r3, r6
 80045bc:	462a      	mov	r2, r5
 80045be:	f7fb fe63 	bl	8000288 <__aeabi_dsub>
 80045c2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80045c6:	4656      	mov	r6, sl
 80045c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045cc:	f7fc fac4 	bl	8000b58 <__aeabi_d2iz>
 80045d0:	4605      	mov	r5, r0
 80045d2:	f7fb ffa7 	bl	8000524 <__aeabi_i2d>
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
 80045da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045de:	f7fb fe53 	bl	8000288 <__aeabi_dsub>
 80045e2:	3530      	adds	r5, #48	@ 0x30
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80045ec:	f806 5b01 	strb.w	r5, [r6], #1
 80045f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80045f4:	f7fc fa72 	bl	8000adc <__aeabi_dcmplt>
 80045f8:	2800      	cmp	r0, #0
 80045fa:	d172      	bne.n	80046e2 <_dtoa_r+0x622>
 80045fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004600:	4911      	ldr	r1, [pc, #68]	@ (8004648 <_dtoa_r+0x588>)
 8004602:	2000      	movs	r0, #0
 8004604:	f7fb fe40 	bl	8000288 <__aeabi_dsub>
 8004608:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800460c:	f7fc fa66 	bl	8000adc <__aeabi_dcmplt>
 8004610:	2800      	cmp	r0, #0
 8004612:	f040 80b4 	bne.w	800477e <_dtoa_r+0x6be>
 8004616:	42a6      	cmp	r6, r4
 8004618:	f43f af70 	beq.w	80044fc <_dtoa_r+0x43c>
 800461c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004620:	4b0a      	ldr	r3, [pc, #40]	@ (800464c <_dtoa_r+0x58c>)
 8004622:	2200      	movs	r2, #0
 8004624:	f7fb ffe8 	bl	80005f8 <__aeabi_dmul>
 8004628:	4b08      	ldr	r3, [pc, #32]	@ (800464c <_dtoa_r+0x58c>)
 800462a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800462e:	2200      	movs	r2, #0
 8004630:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004634:	f7fb ffe0 	bl	80005f8 <__aeabi_dmul>
 8004638:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800463c:	e7c4      	b.n	80045c8 <_dtoa_r+0x508>
 800463e:	bf00      	nop
 8004640:	08007c90 	.word	0x08007c90
 8004644:	08007c68 	.word	0x08007c68
 8004648:	3ff00000 	.word	0x3ff00000
 800464c:	40240000 	.word	0x40240000
 8004650:	401c0000 	.word	0x401c0000
 8004654:	40140000 	.word	0x40140000
 8004658:	3fe00000 	.word	0x3fe00000
 800465c:	4631      	mov	r1, r6
 800465e:	4628      	mov	r0, r5
 8004660:	f7fb ffca 	bl	80005f8 <__aeabi_dmul>
 8004664:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004668:	9413      	str	r4, [sp, #76]	@ 0x4c
 800466a:	4656      	mov	r6, sl
 800466c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004670:	f7fc fa72 	bl	8000b58 <__aeabi_d2iz>
 8004674:	4605      	mov	r5, r0
 8004676:	f7fb ff55 	bl	8000524 <__aeabi_i2d>
 800467a:	4602      	mov	r2, r0
 800467c:	460b      	mov	r3, r1
 800467e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004682:	f7fb fe01 	bl	8000288 <__aeabi_dsub>
 8004686:	3530      	adds	r5, #48	@ 0x30
 8004688:	f806 5b01 	strb.w	r5, [r6], #1
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	42a6      	cmp	r6, r4
 8004692:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004696:	f04f 0200 	mov.w	r2, #0
 800469a:	d124      	bne.n	80046e6 <_dtoa_r+0x626>
 800469c:	4baf      	ldr	r3, [pc, #700]	@ (800495c <_dtoa_r+0x89c>)
 800469e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80046a2:	f7fb fdf3 	bl	800028c <__adddf3>
 80046a6:	4602      	mov	r2, r0
 80046a8:	460b      	mov	r3, r1
 80046aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046ae:	f7fc fa33 	bl	8000b18 <__aeabi_dcmpgt>
 80046b2:	2800      	cmp	r0, #0
 80046b4:	d163      	bne.n	800477e <_dtoa_r+0x6be>
 80046b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80046ba:	49a8      	ldr	r1, [pc, #672]	@ (800495c <_dtoa_r+0x89c>)
 80046bc:	2000      	movs	r0, #0
 80046be:	f7fb fde3 	bl	8000288 <__aeabi_dsub>
 80046c2:	4602      	mov	r2, r0
 80046c4:	460b      	mov	r3, r1
 80046c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046ca:	f7fc fa07 	bl	8000adc <__aeabi_dcmplt>
 80046ce:	2800      	cmp	r0, #0
 80046d0:	f43f af14 	beq.w	80044fc <_dtoa_r+0x43c>
 80046d4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80046d6:	1e73      	subs	r3, r6, #1
 80046d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80046da:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80046de:	2b30      	cmp	r3, #48	@ 0x30
 80046e0:	d0f8      	beq.n	80046d4 <_dtoa_r+0x614>
 80046e2:	4647      	mov	r7, r8
 80046e4:	e03b      	b.n	800475e <_dtoa_r+0x69e>
 80046e6:	4b9e      	ldr	r3, [pc, #632]	@ (8004960 <_dtoa_r+0x8a0>)
 80046e8:	f7fb ff86 	bl	80005f8 <__aeabi_dmul>
 80046ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80046f0:	e7bc      	b.n	800466c <_dtoa_r+0x5ac>
 80046f2:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80046f6:	4656      	mov	r6, sl
 80046f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046fc:	4620      	mov	r0, r4
 80046fe:	4629      	mov	r1, r5
 8004700:	f7fc f8a4 	bl	800084c <__aeabi_ddiv>
 8004704:	f7fc fa28 	bl	8000b58 <__aeabi_d2iz>
 8004708:	4680      	mov	r8, r0
 800470a:	f7fb ff0b 	bl	8000524 <__aeabi_i2d>
 800470e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004712:	f7fb ff71 	bl	80005f8 <__aeabi_dmul>
 8004716:	4602      	mov	r2, r0
 8004718:	460b      	mov	r3, r1
 800471a:	4620      	mov	r0, r4
 800471c:	4629      	mov	r1, r5
 800471e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004722:	f7fb fdb1 	bl	8000288 <__aeabi_dsub>
 8004726:	f806 4b01 	strb.w	r4, [r6], #1
 800472a:	9d08      	ldr	r5, [sp, #32]
 800472c:	eba6 040a 	sub.w	r4, r6, sl
 8004730:	42a5      	cmp	r5, r4
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	d133      	bne.n	80047a0 <_dtoa_r+0x6e0>
 8004738:	f7fb fda8 	bl	800028c <__adddf3>
 800473c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004740:	4604      	mov	r4, r0
 8004742:	460d      	mov	r5, r1
 8004744:	f7fc f9e8 	bl	8000b18 <__aeabi_dcmpgt>
 8004748:	b9c0      	cbnz	r0, 800477c <_dtoa_r+0x6bc>
 800474a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800474e:	4620      	mov	r0, r4
 8004750:	4629      	mov	r1, r5
 8004752:	f7fc f9b9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004756:	b110      	cbz	r0, 800475e <_dtoa_r+0x69e>
 8004758:	f018 0f01 	tst.w	r8, #1
 800475c:	d10e      	bne.n	800477c <_dtoa_r+0x6bc>
 800475e:	9903      	ldr	r1, [sp, #12]
 8004760:	4648      	mov	r0, r9
 8004762:	f000 fbbd 	bl	8004ee0 <_Bfree>
 8004766:	2300      	movs	r3, #0
 8004768:	7033      	strb	r3, [r6, #0]
 800476a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800476c:	3701      	adds	r7, #1
 800476e:	601f      	str	r7, [r3, #0]
 8004770:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 824b 	beq.w	8004c0e <_dtoa_r+0xb4e>
 8004778:	601e      	str	r6, [r3, #0]
 800477a:	e248      	b.n	8004c0e <_dtoa_r+0xb4e>
 800477c:	46b8      	mov	r8, r7
 800477e:	4633      	mov	r3, r6
 8004780:	461e      	mov	r6, r3
 8004782:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004786:	2a39      	cmp	r2, #57	@ 0x39
 8004788:	d106      	bne.n	8004798 <_dtoa_r+0x6d8>
 800478a:	459a      	cmp	sl, r3
 800478c:	d1f8      	bne.n	8004780 <_dtoa_r+0x6c0>
 800478e:	2230      	movs	r2, #48	@ 0x30
 8004790:	f108 0801 	add.w	r8, r8, #1
 8004794:	f88a 2000 	strb.w	r2, [sl]
 8004798:	781a      	ldrb	r2, [r3, #0]
 800479a:	3201      	adds	r2, #1
 800479c:	701a      	strb	r2, [r3, #0]
 800479e:	e7a0      	b.n	80046e2 <_dtoa_r+0x622>
 80047a0:	4b6f      	ldr	r3, [pc, #444]	@ (8004960 <_dtoa_r+0x8a0>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	f7fb ff28 	bl	80005f8 <__aeabi_dmul>
 80047a8:	2200      	movs	r2, #0
 80047aa:	2300      	movs	r3, #0
 80047ac:	4604      	mov	r4, r0
 80047ae:	460d      	mov	r5, r1
 80047b0:	f7fc f98a 	bl	8000ac8 <__aeabi_dcmpeq>
 80047b4:	2800      	cmp	r0, #0
 80047b6:	d09f      	beq.n	80046f8 <_dtoa_r+0x638>
 80047b8:	e7d1      	b.n	800475e <_dtoa_r+0x69e>
 80047ba:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80047bc:	2a00      	cmp	r2, #0
 80047be:	f000 80ea 	beq.w	8004996 <_dtoa_r+0x8d6>
 80047c2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80047c4:	2a01      	cmp	r2, #1
 80047c6:	f300 80cd 	bgt.w	8004964 <_dtoa_r+0x8a4>
 80047ca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80047cc:	2a00      	cmp	r2, #0
 80047ce:	f000 80c1 	beq.w	8004954 <_dtoa_r+0x894>
 80047d2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80047d6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80047d8:	9e04      	ldr	r6, [sp, #16]
 80047da:	9a04      	ldr	r2, [sp, #16]
 80047dc:	441a      	add	r2, r3
 80047de:	9204      	str	r2, [sp, #16]
 80047e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80047e2:	2101      	movs	r1, #1
 80047e4:	441a      	add	r2, r3
 80047e6:	4648      	mov	r0, r9
 80047e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80047ea:	f000 fc77 	bl	80050dc <__i2b>
 80047ee:	4605      	mov	r5, r0
 80047f0:	b166      	cbz	r6, 800480c <_dtoa_r+0x74c>
 80047f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	dd09      	ble.n	800480c <_dtoa_r+0x74c>
 80047f8:	42b3      	cmp	r3, r6
 80047fa:	9a04      	ldr	r2, [sp, #16]
 80047fc:	bfa8      	it	ge
 80047fe:	4633      	movge	r3, r6
 8004800:	1ad2      	subs	r2, r2, r3
 8004802:	9204      	str	r2, [sp, #16]
 8004804:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004806:	1af6      	subs	r6, r6, r3
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	9309      	str	r3, [sp, #36]	@ 0x24
 800480c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800480e:	b30b      	cbz	r3, 8004854 <_dtoa_r+0x794>
 8004810:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 80c6 	beq.w	80049a4 <_dtoa_r+0x8e4>
 8004818:	2c00      	cmp	r4, #0
 800481a:	f000 80c0 	beq.w	800499e <_dtoa_r+0x8de>
 800481e:	4629      	mov	r1, r5
 8004820:	4622      	mov	r2, r4
 8004822:	4648      	mov	r0, r9
 8004824:	f000 fd12 	bl	800524c <__pow5mult>
 8004828:	9a03      	ldr	r2, [sp, #12]
 800482a:	4601      	mov	r1, r0
 800482c:	4605      	mov	r5, r0
 800482e:	4648      	mov	r0, r9
 8004830:	f000 fc6a 	bl	8005108 <__multiply>
 8004834:	9903      	ldr	r1, [sp, #12]
 8004836:	4680      	mov	r8, r0
 8004838:	4648      	mov	r0, r9
 800483a:	f000 fb51 	bl	8004ee0 <_Bfree>
 800483e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004840:	1b1b      	subs	r3, r3, r4
 8004842:	930a      	str	r3, [sp, #40]	@ 0x28
 8004844:	f000 80b1 	beq.w	80049aa <_dtoa_r+0x8ea>
 8004848:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800484a:	4641      	mov	r1, r8
 800484c:	4648      	mov	r0, r9
 800484e:	f000 fcfd 	bl	800524c <__pow5mult>
 8004852:	9003      	str	r0, [sp, #12]
 8004854:	2101      	movs	r1, #1
 8004856:	4648      	mov	r0, r9
 8004858:	f000 fc40 	bl	80050dc <__i2b>
 800485c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800485e:	4604      	mov	r4, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 81d8 	beq.w	8004c16 <_dtoa_r+0xb56>
 8004866:	461a      	mov	r2, r3
 8004868:	4601      	mov	r1, r0
 800486a:	4648      	mov	r0, r9
 800486c:	f000 fcee 	bl	800524c <__pow5mult>
 8004870:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004872:	2b01      	cmp	r3, #1
 8004874:	4604      	mov	r4, r0
 8004876:	f300 809f 	bgt.w	80049b8 <_dtoa_r+0x8f8>
 800487a:	9b06      	ldr	r3, [sp, #24]
 800487c:	2b00      	cmp	r3, #0
 800487e:	f040 8097 	bne.w	80049b0 <_dtoa_r+0x8f0>
 8004882:	9b07      	ldr	r3, [sp, #28]
 8004884:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004888:	2b00      	cmp	r3, #0
 800488a:	f040 8093 	bne.w	80049b4 <_dtoa_r+0x8f4>
 800488e:	9b07      	ldr	r3, [sp, #28]
 8004890:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004894:	0d1b      	lsrs	r3, r3, #20
 8004896:	051b      	lsls	r3, r3, #20
 8004898:	b133      	cbz	r3, 80048a8 <_dtoa_r+0x7e8>
 800489a:	9b04      	ldr	r3, [sp, #16]
 800489c:	3301      	adds	r3, #1
 800489e:	9304      	str	r3, [sp, #16]
 80048a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048a2:	3301      	adds	r3, #1
 80048a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80048a6:	2301      	movs	r3, #1
 80048a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80048aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 81b8 	beq.w	8004c22 <_dtoa_r+0xb62>
 80048b2:	6923      	ldr	r3, [r4, #16]
 80048b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80048b8:	6918      	ldr	r0, [r3, #16]
 80048ba:	f000 fbc3 	bl	8005044 <__hi0bits>
 80048be:	f1c0 0020 	rsb	r0, r0, #32
 80048c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048c4:	4418      	add	r0, r3
 80048c6:	f010 001f 	ands.w	r0, r0, #31
 80048ca:	f000 8082 	beq.w	80049d2 <_dtoa_r+0x912>
 80048ce:	f1c0 0320 	rsb	r3, r0, #32
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	dd73      	ble.n	80049be <_dtoa_r+0x8fe>
 80048d6:	9b04      	ldr	r3, [sp, #16]
 80048d8:	f1c0 001c 	rsb	r0, r0, #28
 80048dc:	4403      	add	r3, r0
 80048de:	9304      	str	r3, [sp, #16]
 80048e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048e2:	4403      	add	r3, r0
 80048e4:	4406      	add	r6, r0
 80048e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80048e8:	9b04      	ldr	r3, [sp, #16]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	dd05      	ble.n	80048fa <_dtoa_r+0x83a>
 80048ee:	9903      	ldr	r1, [sp, #12]
 80048f0:	461a      	mov	r2, r3
 80048f2:	4648      	mov	r0, r9
 80048f4:	f000 fd04 	bl	8005300 <__lshift>
 80048f8:	9003      	str	r0, [sp, #12]
 80048fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	dd05      	ble.n	800490c <_dtoa_r+0x84c>
 8004900:	4621      	mov	r1, r4
 8004902:	461a      	mov	r2, r3
 8004904:	4648      	mov	r0, r9
 8004906:	f000 fcfb 	bl	8005300 <__lshift>
 800490a:	4604      	mov	r4, r0
 800490c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800490e:	2b00      	cmp	r3, #0
 8004910:	d061      	beq.n	80049d6 <_dtoa_r+0x916>
 8004912:	9803      	ldr	r0, [sp, #12]
 8004914:	4621      	mov	r1, r4
 8004916:	f000 fd5f 	bl	80053d8 <__mcmp>
 800491a:	2800      	cmp	r0, #0
 800491c:	da5b      	bge.n	80049d6 <_dtoa_r+0x916>
 800491e:	2300      	movs	r3, #0
 8004920:	9903      	ldr	r1, [sp, #12]
 8004922:	220a      	movs	r2, #10
 8004924:	4648      	mov	r0, r9
 8004926:	f000 fafd 	bl	8004f24 <__multadd>
 800492a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800492c:	9003      	str	r0, [sp, #12]
 800492e:	f107 38ff 	add.w	r8, r7, #4294967295
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 8177 	beq.w	8004c26 <_dtoa_r+0xb66>
 8004938:	4629      	mov	r1, r5
 800493a:	2300      	movs	r3, #0
 800493c:	220a      	movs	r2, #10
 800493e:	4648      	mov	r0, r9
 8004940:	f000 faf0 	bl	8004f24 <__multadd>
 8004944:	f1bb 0f00 	cmp.w	fp, #0
 8004948:	4605      	mov	r5, r0
 800494a:	dc6f      	bgt.n	8004a2c <_dtoa_r+0x96c>
 800494c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800494e:	2b02      	cmp	r3, #2
 8004950:	dc49      	bgt.n	80049e6 <_dtoa_r+0x926>
 8004952:	e06b      	b.n	8004a2c <_dtoa_r+0x96c>
 8004954:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004956:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800495a:	e73c      	b.n	80047d6 <_dtoa_r+0x716>
 800495c:	3fe00000 	.word	0x3fe00000
 8004960:	40240000 	.word	0x40240000
 8004964:	9b08      	ldr	r3, [sp, #32]
 8004966:	1e5c      	subs	r4, r3, #1
 8004968:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800496a:	42a3      	cmp	r3, r4
 800496c:	db09      	blt.n	8004982 <_dtoa_r+0x8c2>
 800496e:	1b1c      	subs	r4, r3, r4
 8004970:	9b08      	ldr	r3, [sp, #32]
 8004972:	2b00      	cmp	r3, #0
 8004974:	f6bf af30 	bge.w	80047d8 <_dtoa_r+0x718>
 8004978:	9b04      	ldr	r3, [sp, #16]
 800497a:	9a08      	ldr	r2, [sp, #32]
 800497c:	1a9e      	subs	r6, r3, r2
 800497e:	2300      	movs	r3, #0
 8004980:	e72b      	b.n	80047da <_dtoa_r+0x71a>
 8004982:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004984:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004986:	940a      	str	r4, [sp, #40]	@ 0x28
 8004988:	1ae3      	subs	r3, r4, r3
 800498a:	441a      	add	r2, r3
 800498c:	9e04      	ldr	r6, [sp, #16]
 800498e:	9b08      	ldr	r3, [sp, #32]
 8004990:	920e      	str	r2, [sp, #56]	@ 0x38
 8004992:	2400      	movs	r4, #0
 8004994:	e721      	b.n	80047da <_dtoa_r+0x71a>
 8004996:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004998:	9e04      	ldr	r6, [sp, #16]
 800499a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800499c:	e728      	b.n	80047f0 <_dtoa_r+0x730>
 800499e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80049a2:	e751      	b.n	8004848 <_dtoa_r+0x788>
 80049a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80049a6:	9903      	ldr	r1, [sp, #12]
 80049a8:	e750      	b.n	800484c <_dtoa_r+0x78c>
 80049aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80049ae:	e751      	b.n	8004854 <_dtoa_r+0x794>
 80049b0:	2300      	movs	r3, #0
 80049b2:	e779      	b.n	80048a8 <_dtoa_r+0x7e8>
 80049b4:	9b06      	ldr	r3, [sp, #24]
 80049b6:	e777      	b.n	80048a8 <_dtoa_r+0x7e8>
 80049b8:	2300      	movs	r3, #0
 80049ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80049bc:	e779      	b.n	80048b2 <_dtoa_r+0x7f2>
 80049be:	d093      	beq.n	80048e8 <_dtoa_r+0x828>
 80049c0:	9a04      	ldr	r2, [sp, #16]
 80049c2:	331c      	adds	r3, #28
 80049c4:	441a      	add	r2, r3
 80049c6:	9204      	str	r2, [sp, #16]
 80049c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049ca:	441a      	add	r2, r3
 80049cc:	441e      	add	r6, r3
 80049ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80049d0:	e78a      	b.n	80048e8 <_dtoa_r+0x828>
 80049d2:	4603      	mov	r3, r0
 80049d4:	e7f4      	b.n	80049c0 <_dtoa_r+0x900>
 80049d6:	9b08      	ldr	r3, [sp, #32]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	46b8      	mov	r8, r7
 80049dc:	dc20      	bgt.n	8004a20 <_dtoa_r+0x960>
 80049de:	469b      	mov	fp, r3
 80049e0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	dd1e      	ble.n	8004a24 <_dtoa_r+0x964>
 80049e6:	f1bb 0f00 	cmp.w	fp, #0
 80049ea:	f47f adb1 	bne.w	8004550 <_dtoa_r+0x490>
 80049ee:	4621      	mov	r1, r4
 80049f0:	465b      	mov	r3, fp
 80049f2:	2205      	movs	r2, #5
 80049f4:	4648      	mov	r0, r9
 80049f6:	f000 fa95 	bl	8004f24 <__multadd>
 80049fa:	4601      	mov	r1, r0
 80049fc:	4604      	mov	r4, r0
 80049fe:	9803      	ldr	r0, [sp, #12]
 8004a00:	f000 fcea 	bl	80053d8 <__mcmp>
 8004a04:	2800      	cmp	r0, #0
 8004a06:	f77f ada3 	ble.w	8004550 <_dtoa_r+0x490>
 8004a0a:	4656      	mov	r6, sl
 8004a0c:	2331      	movs	r3, #49	@ 0x31
 8004a0e:	f806 3b01 	strb.w	r3, [r6], #1
 8004a12:	f108 0801 	add.w	r8, r8, #1
 8004a16:	e59f      	b.n	8004558 <_dtoa_r+0x498>
 8004a18:	9c08      	ldr	r4, [sp, #32]
 8004a1a:	46b8      	mov	r8, r7
 8004a1c:	4625      	mov	r5, r4
 8004a1e:	e7f4      	b.n	8004a0a <_dtoa_r+0x94a>
 8004a20:	f8dd b020 	ldr.w	fp, [sp, #32]
 8004a24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 8101 	beq.w	8004c2e <_dtoa_r+0xb6e>
 8004a2c:	2e00      	cmp	r6, #0
 8004a2e:	dd05      	ble.n	8004a3c <_dtoa_r+0x97c>
 8004a30:	4629      	mov	r1, r5
 8004a32:	4632      	mov	r2, r6
 8004a34:	4648      	mov	r0, r9
 8004a36:	f000 fc63 	bl	8005300 <__lshift>
 8004a3a:	4605      	mov	r5, r0
 8004a3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d05c      	beq.n	8004afc <_dtoa_r+0xa3c>
 8004a42:	6869      	ldr	r1, [r5, #4]
 8004a44:	4648      	mov	r0, r9
 8004a46:	f000 fa0b 	bl	8004e60 <_Balloc>
 8004a4a:	4606      	mov	r6, r0
 8004a4c:	b928      	cbnz	r0, 8004a5a <_dtoa_r+0x99a>
 8004a4e:	4b82      	ldr	r3, [pc, #520]	@ (8004c58 <_dtoa_r+0xb98>)
 8004a50:	4602      	mov	r2, r0
 8004a52:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004a56:	f7ff bb47 	b.w	80040e8 <_dtoa_r+0x28>
 8004a5a:	692a      	ldr	r2, [r5, #16]
 8004a5c:	3202      	adds	r2, #2
 8004a5e:	0092      	lsls	r2, r2, #2
 8004a60:	f105 010c 	add.w	r1, r5, #12
 8004a64:	300c      	adds	r0, #12
 8004a66:	f001 ff51 	bl	800690c <memcpy>
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	4631      	mov	r1, r6
 8004a6e:	4648      	mov	r0, r9
 8004a70:	f000 fc46 	bl	8005300 <__lshift>
 8004a74:	f10a 0301 	add.w	r3, sl, #1
 8004a78:	9304      	str	r3, [sp, #16]
 8004a7a:	eb0a 030b 	add.w	r3, sl, fp
 8004a7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a80:	9b06      	ldr	r3, [sp, #24]
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	462f      	mov	r7, r5
 8004a88:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a8a:	4605      	mov	r5, r0
 8004a8c:	9b04      	ldr	r3, [sp, #16]
 8004a8e:	9803      	ldr	r0, [sp, #12]
 8004a90:	4621      	mov	r1, r4
 8004a92:	f103 3bff 	add.w	fp, r3, #4294967295
 8004a96:	f7ff fa8b 	bl	8003fb0 <quorem>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	3330      	adds	r3, #48	@ 0x30
 8004a9e:	9006      	str	r0, [sp, #24]
 8004aa0:	4639      	mov	r1, r7
 8004aa2:	9803      	ldr	r0, [sp, #12]
 8004aa4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004aa6:	f000 fc97 	bl	80053d8 <__mcmp>
 8004aaa:	462a      	mov	r2, r5
 8004aac:	9008      	str	r0, [sp, #32]
 8004aae:	4621      	mov	r1, r4
 8004ab0:	4648      	mov	r0, r9
 8004ab2:	f000 fcad 	bl	8005410 <__mdiff>
 8004ab6:	68c2      	ldr	r2, [r0, #12]
 8004ab8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004aba:	4606      	mov	r6, r0
 8004abc:	bb02      	cbnz	r2, 8004b00 <_dtoa_r+0xa40>
 8004abe:	4601      	mov	r1, r0
 8004ac0:	9803      	ldr	r0, [sp, #12]
 8004ac2:	f000 fc89 	bl	80053d8 <__mcmp>
 8004ac6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ac8:	4602      	mov	r2, r0
 8004aca:	4631      	mov	r1, r6
 8004acc:	4648      	mov	r0, r9
 8004ace:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8004ad2:	f000 fa05 	bl	8004ee0 <_Bfree>
 8004ad6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004ad8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004ada:	9e04      	ldr	r6, [sp, #16]
 8004adc:	ea42 0103 	orr.w	r1, r2, r3
 8004ae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ae2:	4319      	orrs	r1, r3
 8004ae4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ae6:	d10d      	bne.n	8004b04 <_dtoa_r+0xa44>
 8004ae8:	2b39      	cmp	r3, #57	@ 0x39
 8004aea:	d027      	beq.n	8004b3c <_dtoa_r+0xa7c>
 8004aec:	9a08      	ldr	r2, [sp, #32]
 8004aee:	2a00      	cmp	r2, #0
 8004af0:	dd01      	ble.n	8004af6 <_dtoa_r+0xa36>
 8004af2:	9b06      	ldr	r3, [sp, #24]
 8004af4:	3331      	adds	r3, #49	@ 0x31
 8004af6:	f88b 3000 	strb.w	r3, [fp]
 8004afa:	e52e      	b.n	800455a <_dtoa_r+0x49a>
 8004afc:	4628      	mov	r0, r5
 8004afe:	e7b9      	b.n	8004a74 <_dtoa_r+0x9b4>
 8004b00:	2201      	movs	r2, #1
 8004b02:	e7e2      	b.n	8004aca <_dtoa_r+0xa0a>
 8004b04:	9908      	ldr	r1, [sp, #32]
 8004b06:	2900      	cmp	r1, #0
 8004b08:	db04      	blt.n	8004b14 <_dtoa_r+0xa54>
 8004b0a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8004b0c:	4301      	orrs	r1, r0
 8004b0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b10:	4301      	orrs	r1, r0
 8004b12:	d120      	bne.n	8004b56 <_dtoa_r+0xa96>
 8004b14:	2a00      	cmp	r2, #0
 8004b16:	ddee      	ble.n	8004af6 <_dtoa_r+0xa36>
 8004b18:	9903      	ldr	r1, [sp, #12]
 8004b1a:	9304      	str	r3, [sp, #16]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	4648      	mov	r0, r9
 8004b20:	f000 fbee 	bl	8005300 <__lshift>
 8004b24:	4621      	mov	r1, r4
 8004b26:	9003      	str	r0, [sp, #12]
 8004b28:	f000 fc56 	bl	80053d8 <__mcmp>
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	9b04      	ldr	r3, [sp, #16]
 8004b30:	dc02      	bgt.n	8004b38 <_dtoa_r+0xa78>
 8004b32:	d1e0      	bne.n	8004af6 <_dtoa_r+0xa36>
 8004b34:	07da      	lsls	r2, r3, #31
 8004b36:	d5de      	bpl.n	8004af6 <_dtoa_r+0xa36>
 8004b38:	2b39      	cmp	r3, #57	@ 0x39
 8004b3a:	d1da      	bne.n	8004af2 <_dtoa_r+0xa32>
 8004b3c:	2339      	movs	r3, #57	@ 0x39
 8004b3e:	f88b 3000 	strb.w	r3, [fp]
 8004b42:	4633      	mov	r3, r6
 8004b44:	461e      	mov	r6, r3
 8004b46:	3b01      	subs	r3, #1
 8004b48:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004b4c:	2a39      	cmp	r2, #57	@ 0x39
 8004b4e:	d04e      	beq.n	8004bee <_dtoa_r+0xb2e>
 8004b50:	3201      	adds	r2, #1
 8004b52:	701a      	strb	r2, [r3, #0]
 8004b54:	e501      	b.n	800455a <_dtoa_r+0x49a>
 8004b56:	2a00      	cmp	r2, #0
 8004b58:	dd03      	ble.n	8004b62 <_dtoa_r+0xaa2>
 8004b5a:	2b39      	cmp	r3, #57	@ 0x39
 8004b5c:	d0ee      	beq.n	8004b3c <_dtoa_r+0xa7c>
 8004b5e:	3301      	adds	r3, #1
 8004b60:	e7c9      	b.n	8004af6 <_dtoa_r+0xa36>
 8004b62:	9a04      	ldr	r2, [sp, #16]
 8004b64:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004b66:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004b6a:	428a      	cmp	r2, r1
 8004b6c:	d028      	beq.n	8004bc0 <_dtoa_r+0xb00>
 8004b6e:	9903      	ldr	r1, [sp, #12]
 8004b70:	2300      	movs	r3, #0
 8004b72:	220a      	movs	r2, #10
 8004b74:	4648      	mov	r0, r9
 8004b76:	f000 f9d5 	bl	8004f24 <__multadd>
 8004b7a:	42af      	cmp	r7, r5
 8004b7c:	9003      	str	r0, [sp, #12]
 8004b7e:	f04f 0300 	mov.w	r3, #0
 8004b82:	f04f 020a 	mov.w	r2, #10
 8004b86:	4639      	mov	r1, r7
 8004b88:	4648      	mov	r0, r9
 8004b8a:	d107      	bne.n	8004b9c <_dtoa_r+0xadc>
 8004b8c:	f000 f9ca 	bl	8004f24 <__multadd>
 8004b90:	4607      	mov	r7, r0
 8004b92:	4605      	mov	r5, r0
 8004b94:	9b04      	ldr	r3, [sp, #16]
 8004b96:	3301      	adds	r3, #1
 8004b98:	9304      	str	r3, [sp, #16]
 8004b9a:	e777      	b.n	8004a8c <_dtoa_r+0x9cc>
 8004b9c:	f000 f9c2 	bl	8004f24 <__multadd>
 8004ba0:	4629      	mov	r1, r5
 8004ba2:	4607      	mov	r7, r0
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	220a      	movs	r2, #10
 8004ba8:	4648      	mov	r0, r9
 8004baa:	f000 f9bb 	bl	8004f24 <__multadd>
 8004bae:	4605      	mov	r5, r0
 8004bb0:	e7f0      	b.n	8004b94 <_dtoa_r+0xad4>
 8004bb2:	f1bb 0f00 	cmp.w	fp, #0
 8004bb6:	bfcc      	ite	gt
 8004bb8:	465e      	movgt	r6, fp
 8004bba:	2601      	movle	r6, #1
 8004bbc:	4456      	add	r6, sl
 8004bbe:	2700      	movs	r7, #0
 8004bc0:	9903      	ldr	r1, [sp, #12]
 8004bc2:	9304      	str	r3, [sp, #16]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	4648      	mov	r0, r9
 8004bc8:	f000 fb9a 	bl	8005300 <__lshift>
 8004bcc:	4621      	mov	r1, r4
 8004bce:	9003      	str	r0, [sp, #12]
 8004bd0:	f000 fc02 	bl	80053d8 <__mcmp>
 8004bd4:	2800      	cmp	r0, #0
 8004bd6:	dcb4      	bgt.n	8004b42 <_dtoa_r+0xa82>
 8004bd8:	d102      	bne.n	8004be0 <_dtoa_r+0xb20>
 8004bda:	9b04      	ldr	r3, [sp, #16]
 8004bdc:	07db      	lsls	r3, r3, #31
 8004bde:	d4b0      	bmi.n	8004b42 <_dtoa_r+0xa82>
 8004be0:	4633      	mov	r3, r6
 8004be2:	461e      	mov	r6, r3
 8004be4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004be8:	2a30      	cmp	r2, #48	@ 0x30
 8004bea:	d0fa      	beq.n	8004be2 <_dtoa_r+0xb22>
 8004bec:	e4b5      	b.n	800455a <_dtoa_r+0x49a>
 8004bee:	459a      	cmp	sl, r3
 8004bf0:	d1a8      	bne.n	8004b44 <_dtoa_r+0xa84>
 8004bf2:	2331      	movs	r3, #49	@ 0x31
 8004bf4:	f108 0801 	add.w	r8, r8, #1
 8004bf8:	f88a 3000 	strb.w	r3, [sl]
 8004bfc:	e4ad      	b.n	800455a <_dtoa_r+0x49a>
 8004bfe:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004c00:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8004c5c <_dtoa_r+0xb9c>
 8004c04:	b11b      	cbz	r3, 8004c0e <_dtoa_r+0xb4e>
 8004c06:	f10a 0308 	add.w	r3, sl, #8
 8004c0a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	4650      	mov	r0, sl
 8004c10:	b017      	add	sp, #92	@ 0x5c
 8004c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c16:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	f77f ae2e 	ble.w	800487a <_dtoa_r+0x7ba>
 8004c1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004c20:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c22:	2001      	movs	r0, #1
 8004c24:	e64d      	b.n	80048c2 <_dtoa_r+0x802>
 8004c26:	f1bb 0f00 	cmp.w	fp, #0
 8004c2a:	f77f aed9 	ble.w	80049e0 <_dtoa_r+0x920>
 8004c2e:	4656      	mov	r6, sl
 8004c30:	9803      	ldr	r0, [sp, #12]
 8004c32:	4621      	mov	r1, r4
 8004c34:	f7ff f9bc 	bl	8003fb0 <quorem>
 8004c38:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8004c3c:	f806 3b01 	strb.w	r3, [r6], #1
 8004c40:	eba6 020a 	sub.w	r2, r6, sl
 8004c44:	4593      	cmp	fp, r2
 8004c46:	ddb4      	ble.n	8004bb2 <_dtoa_r+0xaf2>
 8004c48:	9903      	ldr	r1, [sp, #12]
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	220a      	movs	r2, #10
 8004c4e:	4648      	mov	r0, r9
 8004c50:	f000 f968 	bl	8004f24 <__multadd>
 8004c54:	9003      	str	r0, [sp, #12]
 8004c56:	e7eb      	b.n	8004c30 <_dtoa_r+0xb70>
 8004c58:	08007b35 	.word	0x08007b35
 8004c5c:	08007ab9 	.word	0x08007ab9

08004c60 <_free_r>:
 8004c60:	b538      	push	{r3, r4, r5, lr}
 8004c62:	4605      	mov	r5, r0
 8004c64:	2900      	cmp	r1, #0
 8004c66:	d041      	beq.n	8004cec <_free_r+0x8c>
 8004c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c6c:	1f0c      	subs	r4, r1, #4
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	bfb8      	it	lt
 8004c72:	18e4      	addlt	r4, r4, r3
 8004c74:	f000 f8e8 	bl	8004e48 <__malloc_lock>
 8004c78:	4a1d      	ldr	r2, [pc, #116]	@ (8004cf0 <_free_r+0x90>)
 8004c7a:	6813      	ldr	r3, [r2, #0]
 8004c7c:	b933      	cbnz	r3, 8004c8c <_free_r+0x2c>
 8004c7e:	6063      	str	r3, [r4, #4]
 8004c80:	6014      	str	r4, [r2, #0]
 8004c82:	4628      	mov	r0, r5
 8004c84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c88:	f000 b8e4 	b.w	8004e54 <__malloc_unlock>
 8004c8c:	42a3      	cmp	r3, r4
 8004c8e:	d908      	bls.n	8004ca2 <_free_r+0x42>
 8004c90:	6820      	ldr	r0, [r4, #0]
 8004c92:	1821      	adds	r1, r4, r0
 8004c94:	428b      	cmp	r3, r1
 8004c96:	bf01      	itttt	eq
 8004c98:	6819      	ldreq	r1, [r3, #0]
 8004c9a:	685b      	ldreq	r3, [r3, #4]
 8004c9c:	1809      	addeq	r1, r1, r0
 8004c9e:	6021      	streq	r1, [r4, #0]
 8004ca0:	e7ed      	b.n	8004c7e <_free_r+0x1e>
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	b10b      	cbz	r3, 8004cac <_free_r+0x4c>
 8004ca8:	42a3      	cmp	r3, r4
 8004caa:	d9fa      	bls.n	8004ca2 <_free_r+0x42>
 8004cac:	6811      	ldr	r1, [r2, #0]
 8004cae:	1850      	adds	r0, r2, r1
 8004cb0:	42a0      	cmp	r0, r4
 8004cb2:	d10b      	bne.n	8004ccc <_free_r+0x6c>
 8004cb4:	6820      	ldr	r0, [r4, #0]
 8004cb6:	4401      	add	r1, r0
 8004cb8:	1850      	adds	r0, r2, r1
 8004cba:	4283      	cmp	r3, r0
 8004cbc:	6011      	str	r1, [r2, #0]
 8004cbe:	d1e0      	bne.n	8004c82 <_free_r+0x22>
 8004cc0:	6818      	ldr	r0, [r3, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	6053      	str	r3, [r2, #4]
 8004cc6:	4408      	add	r0, r1
 8004cc8:	6010      	str	r0, [r2, #0]
 8004cca:	e7da      	b.n	8004c82 <_free_r+0x22>
 8004ccc:	d902      	bls.n	8004cd4 <_free_r+0x74>
 8004cce:	230c      	movs	r3, #12
 8004cd0:	602b      	str	r3, [r5, #0]
 8004cd2:	e7d6      	b.n	8004c82 <_free_r+0x22>
 8004cd4:	6820      	ldr	r0, [r4, #0]
 8004cd6:	1821      	adds	r1, r4, r0
 8004cd8:	428b      	cmp	r3, r1
 8004cda:	bf04      	itt	eq
 8004cdc:	6819      	ldreq	r1, [r3, #0]
 8004cde:	685b      	ldreq	r3, [r3, #4]
 8004ce0:	6063      	str	r3, [r4, #4]
 8004ce2:	bf04      	itt	eq
 8004ce4:	1809      	addeq	r1, r1, r0
 8004ce6:	6021      	streq	r1, [r4, #0]
 8004ce8:	6054      	str	r4, [r2, #4]
 8004cea:	e7ca      	b.n	8004c82 <_free_r+0x22>
 8004cec:	bd38      	pop	{r3, r4, r5, pc}
 8004cee:	bf00      	nop
 8004cf0:	200003d0 	.word	0x200003d0

08004cf4 <malloc>:
 8004cf4:	4b02      	ldr	r3, [pc, #8]	@ (8004d00 <malloc+0xc>)
 8004cf6:	4601      	mov	r1, r0
 8004cf8:	6818      	ldr	r0, [r3, #0]
 8004cfa:	f000 b825 	b.w	8004d48 <_malloc_r>
 8004cfe:	bf00      	nop
 8004d00:	20000024 	.word	0x20000024

08004d04 <sbrk_aligned>:
 8004d04:	b570      	push	{r4, r5, r6, lr}
 8004d06:	4e0f      	ldr	r6, [pc, #60]	@ (8004d44 <sbrk_aligned+0x40>)
 8004d08:	460c      	mov	r4, r1
 8004d0a:	6831      	ldr	r1, [r6, #0]
 8004d0c:	4605      	mov	r5, r0
 8004d0e:	b911      	cbnz	r1, 8004d16 <sbrk_aligned+0x12>
 8004d10:	f001 fdec 	bl	80068ec <_sbrk_r>
 8004d14:	6030      	str	r0, [r6, #0]
 8004d16:	4621      	mov	r1, r4
 8004d18:	4628      	mov	r0, r5
 8004d1a:	f001 fde7 	bl	80068ec <_sbrk_r>
 8004d1e:	1c43      	adds	r3, r0, #1
 8004d20:	d103      	bne.n	8004d2a <sbrk_aligned+0x26>
 8004d22:	f04f 34ff 	mov.w	r4, #4294967295
 8004d26:	4620      	mov	r0, r4
 8004d28:	bd70      	pop	{r4, r5, r6, pc}
 8004d2a:	1cc4      	adds	r4, r0, #3
 8004d2c:	f024 0403 	bic.w	r4, r4, #3
 8004d30:	42a0      	cmp	r0, r4
 8004d32:	d0f8      	beq.n	8004d26 <sbrk_aligned+0x22>
 8004d34:	1a21      	subs	r1, r4, r0
 8004d36:	4628      	mov	r0, r5
 8004d38:	f001 fdd8 	bl	80068ec <_sbrk_r>
 8004d3c:	3001      	adds	r0, #1
 8004d3e:	d1f2      	bne.n	8004d26 <sbrk_aligned+0x22>
 8004d40:	e7ef      	b.n	8004d22 <sbrk_aligned+0x1e>
 8004d42:	bf00      	nop
 8004d44:	200003cc 	.word	0x200003cc

08004d48 <_malloc_r>:
 8004d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d4c:	1ccd      	adds	r5, r1, #3
 8004d4e:	f025 0503 	bic.w	r5, r5, #3
 8004d52:	3508      	adds	r5, #8
 8004d54:	2d0c      	cmp	r5, #12
 8004d56:	bf38      	it	cc
 8004d58:	250c      	movcc	r5, #12
 8004d5a:	2d00      	cmp	r5, #0
 8004d5c:	4606      	mov	r6, r0
 8004d5e:	db01      	blt.n	8004d64 <_malloc_r+0x1c>
 8004d60:	42a9      	cmp	r1, r5
 8004d62:	d904      	bls.n	8004d6e <_malloc_r+0x26>
 8004d64:	230c      	movs	r3, #12
 8004d66:	6033      	str	r3, [r6, #0]
 8004d68:	2000      	movs	r0, #0
 8004d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004e44 <_malloc_r+0xfc>
 8004d72:	f000 f869 	bl	8004e48 <__malloc_lock>
 8004d76:	f8d8 3000 	ldr.w	r3, [r8]
 8004d7a:	461c      	mov	r4, r3
 8004d7c:	bb44      	cbnz	r4, 8004dd0 <_malloc_r+0x88>
 8004d7e:	4629      	mov	r1, r5
 8004d80:	4630      	mov	r0, r6
 8004d82:	f7ff ffbf 	bl	8004d04 <sbrk_aligned>
 8004d86:	1c43      	adds	r3, r0, #1
 8004d88:	4604      	mov	r4, r0
 8004d8a:	d158      	bne.n	8004e3e <_malloc_r+0xf6>
 8004d8c:	f8d8 4000 	ldr.w	r4, [r8]
 8004d90:	4627      	mov	r7, r4
 8004d92:	2f00      	cmp	r7, #0
 8004d94:	d143      	bne.n	8004e1e <_malloc_r+0xd6>
 8004d96:	2c00      	cmp	r4, #0
 8004d98:	d04b      	beq.n	8004e32 <_malloc_r+0xea>
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	4639      	mov	r1, r7
 8004d9e:	4630      	mov	r0, r6
 8004da0:	eb04 0903 	add.w	r9, r4, r3
 8004da4:	f001 fda2 	bl	80068ec <_sbrk_r>
 8004da8:	4581      	cmp	r9, r0
 8004daa:	d142      	bne.n	8004e32 <_malloc_r+0xea>
 8004dac:	6821      	ldr	r1, [r4, #0]
 8004dae:	1a6d      	subs	r5, r5, r1
 8004db0:	4629      	mov	r1, r5
 8004db2:	4630      	mov	r0, r6
 8004db4:	f7ff ffa6 	bl	8004d04 <sbrk_aligned>
 8004db8:	3001      	adds	r0, #1
 8004dba:	d03a      	beq.n	8004e32 <_malloc_r+0xea>
 8004dbc:	6823      	ldr	r3, [r4, #0]
 8004dbe:	442b      	add	r3, r5
 8004dc0:	6023      	str	r3, [r4, #0]
 8004dc2:	f8d8 3000 	ldr.w	r3, [r8]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	bb62      	cbnz	r2, 8004e24 <_malloc_r+0xdc>
 8004dca:	f8c8 7000 	str.w	r7, [r8]
 8004dce:	e00f      	b.n	8004df0 <_malloc_r+0xa8>
 8004dd0:	6822      	ldr	r2, [r4, #0]
 8004dd2:	1b52      	subs	r2, r2, r5
 8004dd4:	d420      	bmi.n	8004e18 <_malloc_r+0xd0>
 8004dd6:	2a0b      	cmp	r2, #11
 8004dd8:	d917      	bls.n	8004e0a <_malloc_r+0xc2>
 8004dda:	1961      	adds	r1, r4, r5
 8004ddc:	42a3      	cmp	r3, r4
 8004dde:	6025      	str	r5, [r4, #0]
 8004de0:	bf18      	it	ne
 8004de2:	6059      	strne	r1, [r3, #4]
 8004de4:	6863      	ldr	r3, [r4, #4]
 8004de6:	bf08      	it	eq
 8004de8:	f8c8 1000 	streq.w	r1, [r8]
 8004dec:	5162      	str	r2, [r4, r5]
 8004dee:	604b      	str	r3, [r1, #4]
 8004df0:	4630      	mov	r0, r6
 8004df2:	f000 f82f 	bl	8004e54 <__malloc_unlock>
 8004df6:	f104 000b 	add.w	r0, r4, #11
 8004dfa:	1d23      	adds	r3, r4, #4
 8004dfc:	f020 0007 	bic.w	r0, r0, #7
 8004e00:	1ac2      	subs	r2, r0, r3
 8004e02:	bf1c      	itt	ne
 8004e04:	1a1b      	subne	r3, r3, r0
 8004e06:	50a3      	strne	r3, [r4, r2]
 8004e08:	e7af      	b.n	8004d6a <_malloc_r+0x22>
 8004e0a:	6862      	ldr	r2, [r4, #4]
 8004e0c:	42a3      	cmp	r3, r4
 8004e0e:	bf0c      	ite	eq
 8004e10:	f8c8 2000 	streq.w	r2, [r8]
 8004e14:	605a      	strne	r2, [r3, #4]
 8004e16:	e7eb      	b.n	8004df0 <_malloc_r+0xa8>
 8004e18:	4623      	mov	r3, r4
 8004e1a:	6864      	ldr	r4, [r4, #4]
 8004e1c:	e7ae      	b.n	8004d7c <_malloc_r+0x34>
 8004e1e:	463c      	mov	r4, r7
 8004e20:	687f      	ldr	r7, [r7, #4]
 8004e22:	e7b6      	b.n	8004d92 <_malloc_r+0x4a>
 8004e24:	461a      	mov	r2, r3
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	42a3      	cmp	r3, r4
 8004e2a:	d1fb      	bne.n	8004e24 <_malloc_r+0xdc>
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	6053      	str	r3, [r2, #4]
 8004e30:	e7de      	b.n	8004df0 <_malloc_r+0xa8>
 8004e32:	230c      	movs	r3, #12
 8004e34:	6033      	str	r3, [r6, #0]
 8004e36:	4630      	mov	r0, r6
 8004e38:	f000 f80c 	bl	8004e54 <__malloc_unlock>
 8004e3c:	e794      	b.n	8004d68 <_malloc_r+0x20>
 8004e3e:	6005      	str	r5, [r0, #0]
 8004e40:	e7d6      	b.n	8004df0 <_malloc_r+0xa8>
 8004e42:	bf00      	nop
 8004e44:	200003d0 	.word	0x200003d0

08004e48 <__malloc_lock>:
 8004e48:	4801      	ldr	r0, [pc, #4]	@ (8004e50 <__malloc_lock+0x8>)
 8004e4a:	f7ff b8aa 	b.w	8003fa2 <__retarget_lock_acquire_recursive>
 8004e4e:	bf00      	nop
 8004e50:	200003c8 	.word	0x200003c8

08004e54 <__malloc_unlock>:
 8004e54:	4801      	ldr	r0, [pc, #4]	@ (8004e5c <__malloc_unlock+0x8>)
 8004e56:	f7ff b8a5 	b.w	8003fa4 <__retarget_lock_release_recursive>
 8004e5a:	bf00      	nop
 8004e5c:	200003c8 	.word	0x200003c8

08004e60 <_Balloc>:
 8004e60:	b570      	push	{r4, r5, r6, lr}
 8004e62:	69c6      	ldr	r6, [r0, #28]
 8004e64:	4604      	mov	r4, r0
 8004e66:	460d      	mov	r5, r1
 8004e68:	b976      	cbnz	r6, 8004e88 <_Balloc+0x28>
 8004e6a:	2010      	movs	r0, #16
 8004e6c:	f7ff ff42 	bl	8004cf4 <malloc>
 8004e70:	4602      	mov	r2, r0
 8004e72:	61e0      	str	r0, [r4, #28]
 8004e74:	b920      	cbnz	r0, 8004e80 <_Balloc+0x20>
 8004e76:	4b18      	ldr	r3, [pc, #96]	@ (8004ed8 <_Balloc+0x78>)
 8004e78:	4818      	ldr	r0, [pc, #96]	@ (8004edc <_Balloc+0x7c>)
 8004e7a:	216b      	movs	r1, #107	@ 0x6b
 8004e7c:	f001 fd5a 	bl	8006934 <__assert_func>
 8004e80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004e84:	6006      	str	r6, [r0, #0]
 8004e86:	60c6      	str	r6, [r0, #12]
 8004e88:	69e6      	ldr	r6, [r4, #28]
 8004e8a:	68f3      	ldr	r3, [r6, #12]
 8004e8c:	b183      	cbz	r3, 8004eb0 <_Balloc+0x50>
 8004e8e:	69e3      	ldr	r3, [r4, #28]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004e96:	b9b8      	cbnz	r0, 8004ec8 <_Balloc+0x68>
 8004e98:	2101      	movs	r1, #1
 8004e9a:	fa01 f605 	lsl.w	r6, r1, r5
 8004e9e:	1d72      	adds	r2, r6, #5
 8004ea0:	0092      	lsls	r2, r2, #2
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	f001 fd64 	bl	8006970 <_calloc_r>
 8004ea8:	b160      	cbz	r0, 8004ec4 <_Balloc+0x64>
 8004eaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004eae:	e00e      	b.n	8004ece <_Balloc+0x6e>
 8004eb0:	2221      	movs	r2, #33	@ 0x21
 8004eb2:	2104      	movs	r1, #4
 8004eb4:	4620      	mov	r0, r4
 8004eb6:	f001 fd5b 	bl	8006970 <_calloc_r>
 8004eba:	69e3      	ldr	r3, [r4, #28]
 8004ebc:	60f0      	str	r0, [r6, #12]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1e4      	bne.n	8004e8e <_Balloc+0x2e>
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	bd70      	pop	{r4, r5, r6, pc}
 8004ec8:	6802      	ldr	r2, [r0, #0]
 8004eca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004ece:	2300      	movs	r3, #0
 8004ed0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004ed4:	e7f7      	b.n	8004ec6 <_Balloc+0x66>
 8004ed6:	bf00      	nop
 8004ed8:	08007ac6 	.word	0x08007ac6
 8004edc:	08007b46 	.word	0x08007b46

08004ee0 <_Bfree>:
 8004ee0:	b570      	push	{r4, r5, r6, lr}
 8004ee2:	69c6      	ldr	r6, [r0, #28]
 8004ee4:	4605      	mov	r5, r0
 8004ee6:	460c      	mov	r4, r1
 8004ee8:	b976      	cbnz	r6, 8004f08 <_Bfree+0x28>
 8004eea:	2010      	movs	r0, #16
 8004eec:	f7ff ff02 	bl	8004cf4 <malloc>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	61e8      	str	r0, [r5, #28]
 8004ef4:	b920      	cbnz	r0, 8004f00 <_Bfree+0x20>
 8004ef6:	4b09      	ldr	r3, [pc, #36]	@ (8004f1c <_Bfree+0x3c>)
 8004ef8:	4809      	ldr	r0, [pc, #36]	@ (8004f20 <_Bfree+0x40>)
 8004efa:	218f      	movs	r1, #143	@ 0x8f
 8004efc:	f001 fd1a 	bl	8006934 <__assert_func>
 8004f00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004f04:	6006      	str	r6, [r0, #0]
 8004f06:	60c6      	str	r6, [r0, #12]
 8004f08:	b13c      	cbz	r4, 8004f1a <_Bfree+0x3a>
 8004f0a:	69eb      	ldr	r3, [r5, #28]
 8004f0c:	6862      	ldr	r2, [r4, #4]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f14:	6021      	str	r1, [r4, #0]
 8004f16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004f1a:	bd70      	pop	{r4, r5, r6, pc}
 8004f1c:	08007ac6 	.word	0x08007ac6
 8004f20:	08007b46 	.word	0x08007b46

08004f24 <__multadd>:
 8004f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f28:	690d      	ldr	r5, [r1, #16]
 8004f2a:	4607      	mov	r7, r0
 8004f2c:	460c      	mov	r4, r1
 8004f2e:	461e      	mov	r6, r3
 8004f30:	f101 0c14 	add.w	ip, r1, #20
 8004f34:	2000      	movs	r0, #0
 8004f36:	f8dc 3000 	ldr.w	r3, [ip]
 8004f3a:	b299      	uxth	r1, r3
 8004f3c:	fb02 6101 	mla	r1, r2, r1, r6
 8004f40:	0c1e      	lsrs	r6, r3, #16
 8004f42:	0c0b      	lsrs	r3, r1, #16
 8004f44:	fb02 3306 	mla	r3, r2, r6, r3
 8004f48:	b289      	uxth	r1, r1
 8004f4a:	3001      	adds	r0, #1
 8004f4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004f50:	4285      	cmp	r5, r0
 8004f52:	f84c 1b04 	str.w	r1, [ip], #4
 8004f56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004f5a:	dcec      	bgt.n	8004f36 <__multadd+0x12>
 8004f5c:	b30e      	cbz	r6, 8004fa2 <__multadd+0x7e>
 8004f5e:	68a3      	ldr	r3, [r4, #8]
 8004f60:	42ab      	cmp	r3, r5
 8004f62:	dc19      	bgt.n	8004f98 <__multadd+0x74>
 8004f64:	6861      	ldr	r1, [r4, #4]
 8004f66:	4638      	mov	r0, r7
 8004f68:	3101      	adds	r1, #1
 8004f6a:	f7ff ff79 	bl	8004e60 <_Balloc>
 8004f6e:	4680      	mov	r8, r0
 8004f70:	b928      	cbnz	r0, 8004f7e <__multadd+0x5a>
 8004f72:	4602      	mov	r2, r0
 8004f74:	4b0c      	ldr	r3, [pc, #48]	@ (8004fa8 <__multadd+0x84>)
 8004f76:	480d      	ldr	r0, [pc, #52]	@ (8004fac <__multadd+0x88>)
 8004f78:	21ba      	movs	r1, #186	@ 0xba
 8004f7a:	f001 fcdb 	bl	8006934 <__assert_func>
 8004f7e:	6922      	ldr	r2, [r4, #16]
 8004f80:	3202      	adds	r2, #2
 8004f82:	f104 010c 	add.w	r1, r4, #12
 8004f86:	0092      	lsls	r2, r2, #2
 8004f88:	300c      	adds	r0, #12
 8004f8a:	f001 fcbf 	bl	800690c <memcpy>
 8004f8e:	4621      	mov	r1, r4
 8004f90:	4638      	mov	r0, r7
 8004f92:	f7ff ffa5 	bl	8004ee0 <_Bfree>
 8004f96:	4644      	mov	r4, r8
 8004f98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004f9c:	3501      	adds	r5, #1
 8004f9e:	615e      	str	r6, [r3, #20]
 8004fa0:	6125      	str	r5, [r4, #16]
 8004fa2:	4620      	mov	r0, r4
 8004fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fa8:	08007b35 	.word	0x08007b35
 8004fac:	08007b46 	.word	0x08007b46

08004fb0 <__s2b>:
 8004fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fb4:	460c      	mov	r4, r1
 8004fb6:	4615      	mov	r5, r2
 8004fb8:	461f      	mov	r7, r3
 8004fba:	2209      	movs	r2, #9
 8004fbc:	3308      	adds	r3, #8
 8004fbe:	4606      	mov	r6, r0
 8004fc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	db09      	blt.n	8004fe0 <__s2b+0x30>
 8004fcc:	4630      	mov	r0, r6
 8004fce:	f7ff ff47 	bl	8004e60 <_Balloc>
 8004fd2:	b940      	cbnz	r0, 8004fe6 <__s2b+0x36>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	4b19      	ldr	r3, [pc, #100]	@ (800503c <__s2b+0x8c>)
 8004fd8:	4819      	ldr	r0, [pc, #100]	@ (8005040 <__s2b+0x90>)
 8004fda:	21d3      	movs	r1, #211	@ 0xd3
 8004fdc:	f001 fcaa 	bl	8006934 <__assert_func>
 8004fe0:	0052      	lsls	r2, r2, #1
 8004fe2:	3101      	adds	r1, #1
 8004fe4:	e7f0      	b.n	8004fc8 <__s2b+0x18>
 8004fe6:	9b08      	ldr	r3, [sp, #32]
 8004fe8:	6143      	str	r3, [r0, #20]
 8004fea:	2d09      	cmp	r5, #9
 8004fec:	f04f 0301 	mov.w	r3, #1
 8004ff0:	6103      	str	r3, [r0, #16]
 8004ff2:	dd16      	ble.n	8005022 <__s2b+0x72>
 8004ff4:	f104 0909 	add.w	r9, r4, #9
 8004ff8:	46c8      	mov	r8, r9
 8004ffa:	442c      	add	r4, r5
 8004ffc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005000:	4601      	mov	r1, r0
 8005002:	3b30      	subs	r3, #48	@ 0x30
 8005004:	220a      	movs	r2, #10
 8005006:	4630      	mov	r0, r6
 8005008:	f7ff ff8c 	bl	8004f24 <__multadd>
 800500c:	45a0      	cmp	r8, r4
 800500e:	d1f5      	bne.n	8004ffc <__s2b+0x4c>
 8005010:	f1a5 0408 	sub.w	r4, r5, #8
 8005014:	444c      	add	r4, r9
 8005016:	1b2d      	subs	r5, r5, r4
 8005018:	1963      	adds	r3, r4, r5
 800501a:	42bb      	cmp	r3, r7
 800501c:	db04      	blt.n	8005028 <__s2b+0x78>
 800501e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005022:	340a      	adds	r4, #10
 8005024:	2509      	movs	r5, #9
 8005026:	e7f6      	b.n	8005016 <__s2b+0x66>
 8005028:	f814 3b01 	ldrb.w	r3, [r4], #1
 800502c:	4601      	mov	r1, r0
 800502e:	3b30      	subs	r3, #48	@ 0x30
 8005030:	220a      	movs	r2, #10
 8005032:	4630      	mov	r0, r6
 8005034:	f7ff ff76 	bl	8004f24 <__multadd>
 8005038:	e7ee      	b.n	8005018 <__s2b+0x68>
 800503a:	bf00      	nop
 800503c:	08007b35 	.word	0x08007b35
 8005040:	08007b46 	.word	0x08007b46

08005044 <__hi0bits>:
 8005044:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005048:	4603      	mov	r3, r0
 800504a:	bf36      	itet	cc
 800504c:	0403      	lslcc	r3, r0, #16
 800504e:	2000      	movcs	r0, #0
 8005050:	2010      	movcc	r0, #16
 8005052:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005056:	bf3c      	itt	cc
 8005058:	021b      	lslcc	r3, r3, #8
 800505a:	3008      	addcc	r0, #8
 800505c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005060:	bf3c      	itt	cc
 8005062:	011b      	lslcc	r3, r3, #4
 8005064:	3004      	addcc	r0, #4
 8005066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800506a:	bf3c      	itt	cc
 800506c:	009b      	lslcc	r3, r3, #2
 800506e:	3002      	addcc	r0, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	db05      	blt.n	8005080 <__hi0bits+0x3c>
 8005074:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005078:	f100 0001 	add.w	r0, r0, #1
 800507c:	bf08      	it	eq
 800507e:	2020      	moveq	r0, #32
 8005080:	4770      	bx	lr

08005082 <__lo0bits>:
 8005082:	6803      	ldr	r3, [r0, #0]
 8005084:	4602      	mov	r2, r0
 8005086:	f013 0007 	ands.w	r0, r3, #7
 800508a:	d00b      	beq.n	80050a4 <__lo0bits+0x22>
 800508c:	07d9      	lsls	r1, r3, #31
 800508e:	d421      	bmi.n	80050d4 <__lo0bits+0x52>
 8005090:	0798      	lsls	r0, r3, #30
 8005092:	bf49      	itett	mi
 8005094:	085b      	lsrmi	r3, r3, #1
 8005096:	089b      	lsrpl	r3, r3, #2
 8005098:	2001      	movmi	r0, #1
 800509a:	6013      	strmi	r3, [r2, #0]
 800509c:	bf5c      	itt	pl
 800509e:	6013      	strpl	r3, [r2, #0]
 80050a0:	2002      	movpl	r0, #2
 80050a2:	4770      	bx	lr
 80050a4:	b299      	uxth	r1, r3
 80050a6:	b909      	cbnz	r1, 80050ac <__lo0bits+0x2a>
 80050a8:	0c1b      	lsrs	r3, r3, #16
 80050aa:	2010      	movs	r0, #16
 80050ac:	b2d9      	uxtb	r1, r3
 80050ae:	b909      	cbnz	r1, 80050b4 <__lo0bits+0x32>
 80050b0:	3008      	adds	r0, #8
 80050b2:	0a1b      	lsrs	r3, r3, #8
 80050b4:	0719      	lsls	r1, r3, #28
 80050b6:	bf04      	itt	eq
 80050b8:	091b      	lsreq	r3, r3, #4
 80050ba:	3004      	addeq	r0, #4
 80050bc:	0799      	lsls	r1, r3, #30
 80050be:	bf04      	itt	eq
 80050c0:	089b      	lsreq	r3, r3, #2
 80050c2:	3002      	addeq	r0, #2
 80050c4:	07d9      	lsls	r1, r3, #31
 80050c6:	d403      	bmi.n	80050d0 <__lo0bits+0x4e>
 80050c8:	085b      	lsrs	r3, r3, #1
 80050ca:	f100 0001 	add.w	r0, r0, #1
 80050ce:	d003      	beq.n	80050d8 <__lo0bits+0x56>
 80050d0:	6013      	str	r3, [r2, #0]
 80050d2:	4770      	bx	lr
 80050d4:	2000      	movs	r0, #0
 80050d6:	4770      	bx	lr
 80050d8:	2020      	movs	r0, #32
 80050da:	4770      	bx	lr

080050dc <__i2b>:
 80050dc:	b510      	push	{r4, lr}
 80050de:	460c      	mov	r4, r1
 80050e0:	2101      	movs	r1, #1
 80050e2:	f7ff febd 	bl	8004e60 <_Balloc>
 80050e6:	4602      	mov	r2, r0
 80050e8:	b928      	cbnz	r0, 80050f6 <__i2b+0x1a>
 80050ea:	4b05      	ldr	r3, [pc, #20]	@ (8005100 <__i2b+0x24>)
 80050ec:	4805      	ldr	r0, [pc, #20]	@ (8005104 <__i2b+0x28>)
 80050ee:	f240 1145 	movw	r1, #325	@ 0x145
 80050f2:	f001 fc1f 	bl	8006934 <__assert_func>
 80050f6:	2301      	movs	r3, #1
 80050f8:	6144      	str	r4, [r0, #20]
 80050fa:	6103      	str	r3, [r0, #16]
 80050fc:	bd10      	pop	{r4, pc}
 80050fe:	bf00      	nop
 8005100:	08007b35 	.word	0x08007b35
 8005104:	08007b46 	.word	0x08007b46

08005108 <__multiply>:
 8005108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800510c:	4617      	mov	r7, r2
 800510e:	690a      	ldr	r2, [r1, #16]
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	429a      	cmp	r2, r3
 8005114:	bfa8      	it	ge
 8005116:	463b      	movge	r3, r7
 8005118:	4689      	mov	r9, r1
 800511a:	bfa4      	itt	ge
 800511c:	460f      	movge	r7, r1
 800511e:	4699      	movge	r9, r3
 8005120:	693d      	ldr	r5, [r7, #16]
 8005122:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	6879      	ldr	r1, [r7, #4]
 800512a:	eb05 060a 	add.w	r6, r5, sl
 800512e:	42b3      	cmp	r3, r6
 8005130:	b085      	sub	sp, #20
 8005132:	bfb8      	it	lt
 8005134:	3101      	addlt	r1, #1
 8005136:	f7ff fe93 	bl	8004e60 <_Balloc>
 800513a:	b930      	cbnz	r0, 800514a <__multiply+0x42>
 800513c:	4602      	mov	r2, r0
 800513e:	4b41      	ldr	r3, [pc, #260]	@ (8005244 <__multiply+0x13c>)
 8005140:	4841      	ldr	r0, [pc, #260]	@ (8005248 <__multiply+0x140>)
 8005142:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005146:	f001 fbf5 	bl	8006934 <__assert_func>
 800514a:	f100 0414 	add.w	r4, r0, #20
 800514e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005152:	4623      	mov	r3, r4
 8005154:	2200      	movs	r2, #0
 8005156:	4573      	cmp	r3, lr
 8005158:	d320      	bcc.n	800519c <__multiply+0x94>
 800515a:	f107 0814 	add.w	r8, r7, #20
 800515e:	f109 0114 	add.w	r1, r9, #20
 8005162:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005166:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800516a:	9302      	str	r3, [sp, #8]
 800516c:	1beb      	subs	r3, r5, r7
 800516e:	3b15      	subs	r3, #21
 8005170:	f023 0303 	bic.w	r3, r3, #3
 8005174:	3304      	adds	r3, #4
 8005176:	3715      	adds	r7, #21
 8005178:	42bd      	cmp	r5, r7
 800517a:	bf38      	it	cc
 800517c:	2304      	movcc	r3, #4
 800517e:	9301      	str	r3, [sp, #4]
 8005180:	9b02      	ldr	r3, [sp, #8]
 8005182:	9103      	str	r1, [sp, #12]
 8005184:	428b      	cmp	r3, r1
 8005186:	d80c      	bhi.n	80051a2 <__multiply+0x9a>
 8005188:	2e00      	cmp	r6, #0
 800518a:	dd03      	ble.n	8005194 <__multiply+0x8c>
 800518c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005190:	2b00      	cmp	r3, #0
 8005192:	d055      	beq.n	8005240 <__multiply+0x138>
 8005194:	6106      	str	r6, [r0, #16]
 8005196:	b005      	add	sp, #20
 8005198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800519c:	f843 2b04 	str.w	r2, [r3], #4
 80051a0:	e7d9      	b.n	8005156 <__multiply+0x4e>
 80051a2:	f8b1 a000 	ldrh.w	sl, [r1]
 80051a6:	f1ba 0f00 	cmp.w	sl, #0
 80051aa:	d01f      	beq.n	80051ec <__multiply+0xe4>
 80051ac:	46c4      	mov	ip, r8
 80051ae:	46a1      	mov	r9, r4
 80051b0:	2700      	movs	r7, #0
 80051b2:	f85c 2b04 	ldr.w	r2, [ip], #4
 80051b6:	f8d9 3000 	ldr.w	r3, [r9]
 80051ba:	fa1f fb82 	uxth.w	fp, r2
 80051be:	b29b      	uxth	r3, r3
 80051c0:	fb0a 330b 	mla	r3, sl, fp, r3
 80051c4:	443b      	add	r3, r7
 80051c6:	f8d9 7000 	ldr.w	r7, [r9]
 80051ca:	0c12      	lsrs	r2, r2, #16
 80051cc:	0c3f      	lsrs	r7, r7, #16
 80051ce:	fb0a 7202 	mla	r2, sl, r2, r7
 80051d2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051dc:	4565      	cmp	r5, ip
 80051de:	f849 3b04 	str.w	r3, [r9], #4
 80051e2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80051e6:	d8e4      	bhi.n	80051b2 <__multiply+0xaa>
 80051e8:	9b01      	ldr	r3, [sp, #4]
 80051ea:	50e7      	str	r7, [r4, r3]
 80051ec:	9b03      	ldr	r3, [sp, #12]
 80051ee:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80051f2:	3104      	adds	r1, #4
 80051f4:	f1b9 0f00 	cmp.w	r9, #0
 80051f8:	d020      	beq.n	800523c <__multiply+0x134>
 80051fa:	6823      	ldr	r3, [r4, #0]
 80051fc:	4647      	mov	r7, r8
 80051fe:	46a4      	mov	ip, r4
 8005200:	f04f 0a00 	mov.w	sl, #0
 8005204:	f8b7 b000 	ldrh.w	fp, [r7]
 8005208:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800520c:	fb09 220b 	mla	r2, r9, fp, r2
 8005210:	4452      	add	r2, sl
 8005212:	b29b      	uxth	r3, r3
 8005214:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005218:	f84c 3b04 	str.w	r3, [ip], #4
 800521c:	f857 3b04 	ldr.w	r3, [r7], #4
 8005220:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005224:	f8bc 3000 	ldrh.w	r3, [ip]
 8005228:	fb09 330a 	mla	r3, r9, sl, r3
 800522c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005230:	42bd      	cmp	r5, r7
 8005232:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005236:	d8e5      	bhi.n	8005204 <__multiply+0xfc>
 8005238:	9a01      	ldr	r2, [sp, #4]
 800523a:	50a3      	str	r3, [r4, r2]
 800523c:	3404      	adds	r4, #4
 800523e:	e79f      	b.n	8005180 <__multiply+0x78>
 8005240:	3e01      	subs	r6, #1
 8005242:	e7a1      	b.n	8005188 <__multiply+0x80>
 8005244:	08007b35 	.word	0x08007b35
 8005248:	08007b46 	.word	0x08007b46

0800524c <__pow5mult>:
 800524c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005250:	4615      	mov	r5, r2
 8005252:	f012 0203 	ands.w	r2, r2, #3
 8005256:	4607      	mov	r7, r0
 8005258:	460e      	mov	r6, r1
 800525a:	d007      	beq.n	800526c <__pow5mult+0x20>
 800525c:	4c25      	ldr	r4, [pc, #148]	@ (80052f4 <__pow5mult+0xa8>)
 800525e:	3a01      	subs	r2, #1
 8005260:	2300      	movs	r3, #0
 8005262:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005266:	f7ff fe5d 	bl	8004f24 <__multadd>
 800526a:	4606      	mov	r6, r0
 800526c:	10ad      	asrs	r5, r5, #2
 800526e:	d03d      	beq.n	80052ec <__pow5mult+0xa0>
 8005270:	69fc      	ldr	r4, [r7, #28]
 8005272:	b97c      	cbnz	r4, 8005294 <__pow5mult+0x48>
 8005274:	2010      	movs	r0, #16
 8005276:	f7ff fd3d 	bl	8004cf4 <malloc>
 800527a:	4602      	mov	r2, r0
 800527c:	61f8      	str	r0, [r7, #28]
 800527e:	b928      	cbnz	r0, 800528c <__pow5mult+0x40>
 8005280:	4b1d      	ldr	r3, [pc, #116]	@ (80052f8 <__pow5mult+0xac>)
 8005282:	481e      	ldr	r0, [pc, #120]	@ (80052fc <__pow5mult+0xb0>)
 8005284:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005288:	f001 fb54 	bl	8006934 <__assert_func>
 800528c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005290:	6004      	str	r4, [r0, #0]
 8005292:	60c4      	str	r4, [r0, #12]
 8005294:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005298:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800529c:	b94c      	cbnz	r4, 80052b2 <__pow5mult+0x66>
 800529e:	f240 2171 	movw	r1, #625	@ 0x271
 80052a2:	4638      	mov	r0, r7
 80052a4:	f7ff ff1a 	bl	80050dc <__i2b>
 80052a8:	2300      	movs	r3, #0
 80052aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80052ae:	4604      	mov	r4, r0
 80052b0:	6003      	str	r3, [r0, #0]
 80052b2:	f04f 0900 	mov.w	r9, #0
 80052b6:	07eb      	lsls	r3, r5, #31
 80052b8:	d50a      	bpl.n	80052d0 <__pow5mult+0x84>
 80052ba:	4631      	mov	r1, r6
 80052bc:	4622      	mov	r2, r4
 80052be:	4638      	mov	r0, r7
 80052c0:	f7ff ff22 	bl	8005108 <__multiply>
 80052c4:	4631      	mov	r1, r6
 80052c6:	4680      	mov	r8, r0
 80052c8:	4638      	mov	r0, r7
 80052ca:	f7ff fe09 	bl	8004ee0 <_Bfree>
 80052ce:	4646      	mov	r6, r8
 80052d0:	106d      	asrs	r5, r5, #1
 80052d2:	d00b      	beq.n	80052ec <__pow5mult+0xa0>
 80052d4:	6820      	ldr	r0, [r4, #0]
 80052d6:	b938      	cbnz	r0, 80052e8 <__pow5mult+0x9c>
 80052d8:	4622      	mov	r2, r4
 80052da:	4621      	mov	r1, r4
 80052dc:	4638      	mov	r0, r7
 80052de:	f7ff ff13 	bl	8005108 <__multiply>
 80052e2:	6020      	str	r0, [r4, #0]
 80052e4:	f8c0 9000 	str.w	r9, [r0]
 80052e8:	4604      	mov	r4, r0
 80052ea:	e7e4      	b.n	80052b6 <__pow5mult+0x6a>
 80052ec:	4630      	mov	r0, r6
 80052ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052f2:	bf00      	nop
 80052f4:	08007c58 	.word	0x08007c58
 80052f8:	08007ac6 	.word	0x08007ac6
 80052fc:	08007b46 	.word	0x08007b46

08005300 <__lshift>:
 8005300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005304:	460c      	mov	r4, r1
 8005306:	6849      	ldr	r1, [r1, #4]
 8005308:	6923      	ldr	r3, [r4, #16]
 800530a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800530e:	68a3      	ldr	r3, [r4, #8]
 8005310:	4607      	mov	r7, r0
 8005312:	4691      	mov	r9, r2
 8005314:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005318:	f108 0601 	add.w	r6, r8, #1
 800531c:	42b3      	cmp	r3, r6
 800531e:	db0b      	blt.n	8005338 <__lshift+0x38>
 8005320:	4638      	mov	r0, r7
 8005322:	f7ff fd9d 	bl	8004e60 <_Balloc>
 8005326:	4605      	mov	r5, r0
 8005328:	b948      	cbnz	r0, 800533e <__lshift+0x3e>
 800532a:	4602      	mov	r2, r0
 800532c:	4b28      	ldr	r3, [pc, #160]	@ (80053d0 <__lshift+0xd0>)
 800532e:	4829      	ldr	r0, [pc, #164]	@ (80053d4 <__lshift+0xd4>)
 8005330:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005334:	f001 fafe 	bl	8006934 <__assert_func>
 8005338:	3101      	adds	r1, #1
 800533a:	005b      	lsls	r3, r3, #1
 800533c:	e7ee      	b.n	800531c <__lshift+0x1c>
 800533e:	2300      	movs	r3, #0
 8005340:	f100 0114 	add.w	r1, r0, #20
 8005344:	f100 0210 	add.w	r2, r0, #16
 8005348:	4618      	mov	r0, r3
 800534a:	4553      	cmp	r3, sl
 800534c:	db33      	blt.n	80053b6 <__lshift+0xb6>
 800534e:	6920      	ldr	r0, [r4, #16]
 8005350:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005354:	f104 0314 	add.w	r3, r4, #20
 8005358:	f019 091f 	ands.w	r9, r9, #31
 800535c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005360:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005364:	d02b      	beq.n	80053be <__lshift+0xbe>
 8005366:	f1c9 0e20 	rsb	lr, r9, #32
 800536a:	468a      	mov	sl, r1
 800536c:	2200      	movs	r2, #0
 800536e:	6818      	ldr	r0, [r3, #0]
 8005370:	fa00 f009 	lsl.w	r0, r0, r9
 8005374:	4310      	orrs	r0, r2
 8005376:	f84a 0b04 	str.w	r0, [sl], #4
 800537a:	f853 2b04 	ldr.w	r2, [r3], #4
 800537e:	459c      	cmp	ip, r3
 8005380:	fa22 f20e 	lsr.w	r2, r2, lr
 8005384:	d8f3      	bhi.n	800536e <__lshift+0x6e>
 8005386:	ebac 0304 	sub.w	r3, ip, r4
 800538a:	3b15      	subs	r3, #21
 800538c:	f023 0303 	bic.w	r3, r3, #3
 8005390:	3304      	adds	r3, #4
 8005392:	f104 0015 	add.w	r0, r4, #21
 8005396:	4560      	cmp	r0, ip
 8005398:	bf88      	it	hi
 800539a:	2304      	movhi	r3, #4
 800539c:	50ca      	str	r2, [r1, r3]
 800539e:	b10a      	cbz	r2, 80053a4 <__lshift+0xa4>
 80053a0:	f108 0602 	add.w	r6, r8, #2
 80053a4:	3e01      	subs	r6, #1
 80053a6:	4638      	mov	r0, r7
 80053a8:	612e      	str	r6, [r5, #16]
 80053aa:	4621      	mov	r1, r4
 80053ac:	f7ff fd98 	bl	8004ee0 <_Bfree>
 80053b0:	4628      	mov	r0, r5
 80053b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80053ba:	3301      	adds	r3, #1
 80053bc:	e7c5      	b.n	800534a <__lshift+0x4a>
 80053be:	3904      	subs	r1, #4
 80053c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80053c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80053c8:	459c      	cmp	ip, r3
 80053ca:	d8f9      	bhi.n	80053c0 <__lshift+0xc0>
 80053cc:	e7ea      	b.n	80053a4 <__lshift+0xa4>
 80053ce:	bf00      	nop
 80053d0:	08007b35 	.word	0x08007b35
 80053d4:	08007b46 	.word	0x08007b46

080053d8 <__mcmp>:
 80053d8:	690a      	ldr	r2, [r1, #16]
 80053da:	4603      	mov	r3, r0
 80053dc:	6900      	ldr	r0, [r0, #16]
 80053de:	1a80      	subs	r0, r0, r2
 80053e0:	b530      	push	{r4, r5, lr}
 80053e2:	d10e      	bne.n	8005402 <__mcmp+0x2a>
 80053e4:	3314      	adds	r3, #20
 80053e6:	3114      	adds	r1, #20
 80053e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80053ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80053f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80053f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80053f8:	4295      	cmp	r5, r2
 80053fa:	d003      	beq.n	8005404 <__mcmp+0x2c>
 80053fc:	d205      	bcs.n	800540a <__mcmp+0x32>
 80053fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005402:	bd30      	pop	{r4, r5, pc}
 8005404:	42a3      	cmp	r3, r4
 8005406:	d3f3      	bcc.n	80053f0 <__mcmp+0x18>
 8005408:	e7fb      	b.n	8005402 <__mcmp+0x2a>
 800540a:	2001      	movs	r0, #1
 800540c:	e7f9      	b.n	8005402 <__mcmp+0x2a>
	...

08005410 <__mdiff>:
 8005410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005414:	4689      	mov	r9, r1
 8005416:	4606      	mov	r6, r0
 8005418:	4611      	mov	r1, r2
 800541a:	4648      	mov	r0, r9
 800541c:	4614      	mov	r4, r2
 800541e:	f7ff ffdb 	bl	80053d8 <__mcmp>
 8005422:	1e05      	subs	r5, r0, #0
 8005424:	d112      	bne.n	800544c <__mdiff+0x3c>
 8005426:	4629      	mov	r1, r5
 8005428:	4630      	mov	r0, r6
 800542a:	f7ff fd19 	bl	8004e60 <_Balloc>
 800542e:	4602      	mov	r2, r0
 8005430:	b928      	cbnz	r0, 800543e <__mdiff+0x2e>
 8005432:	4b3e      	ldr	r3, [pc, #248]	@ (800552c <__mdiff+0x11c>)
 8005434:	f240 2137 	movw	r1, #567	@ 0x237
 8005438:	483d      	ldr	r0, [pc, #244]	@ (8005530 <__mdiff+0x120>)
 800543a:	f001 fa7b 	bl	8006934 <__assert_func>
 800543e:	2301      	movs	r3, #1
 8005440:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005444:	4610      	mov	r0, r2
 8005446:	b003      	add	sp, #12
 8005448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800544c:	bfbc      	itt	lt
 800544e:	464b      	movlt	r3, r9
 8005450:	46a1      	movlt	r9, r4
 8005452:	4630      	mov	r0, r6
 8005454:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005458:	bfba      	itte	lt
 800545a:	461c      	movlt	r4, r3
 800545c:	2501      	movlt	r5, #1
 800545e:	2500      	movge	r5, #0
 8005460:	f7ff fcfe 	bl	8004e60 <_Balloc>
 8005464:	4602      	mov	r2, r0
 8005466:	b918      	cbnz	r0, 8005470 <__mdiff+0x60>
 8005468:	4b30      	ldr	r3, [pc, #192]	@ (800552c <__mdiff+0x11c>)
 800546a:	f240 2145 	movw	r1, #581	@ 0x245
 800546e:	e7e3      	b.n	8005438 <__mdiff+0x28>
 8005470:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005474:	6926      	ldr	r6, [r4, #16]
 8005476:	60c5      	str	r5, [r0, #12]
 8005478:	f109 0310 	add.w	r3, r9, #16
 800547c:	f109 0514 	add.w	r5, r9, #20
 8005480:	f104 0e14 	add.w	lr, r4, #20
 8005484:	f100 0b14 	add.w	fp, r0, #20
 8005488:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800548c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005490:	9301      	str	r3, [sp, #4]
 8005492:	46d9      	mov	r9, fp
 8005494:	f04f 0c00 	mov.w	ip, #0
 8005498:	9b01      	ldr	r3, [sp, #4]
 800549a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800549e:	f853 af04 	ldr.w	sl, [r3, #4]!
 80054a2:	9301      	str	r3, [sp, #4]
 80054a4:	b281      	uxth	r1, r0
 80054a6:	fa1f f38a 	uxth.w	r3, sl
 80054aa:	1a5b      	subs	r3, r3, r1
 80054ac:	0c00      	lsrs	r0, r0, #16
 80054ae:	4463      	add	r3, ip
 80054b0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80054b4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80054be:	4576      	cmp	r6, lr
 80054c0:	f849 3b04 	str.w	r3, [r9], #4
 80054c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80054c8:	d8e6      	bhi.n	8005498 <__mdiff+0x88>
 80054ca:	1b33      	subs	r3, r6, r4
 80054cc:	3b15      	subs	r3, #21
 80054ce:	f023 0303 	bic.w	r3, r3, #3
 80054d2:	3415      	adds	r4, #21
 80054d4:	3304      	adds	r3, #4
 80054d6:	42a6      	cmp	r6, r4
 80054d8:	bf38      	it	cc
 80054da:	2304      	movcc	r3, #4
 80054dc:	441d      	add	r5, r3
 80054de:	445b      	add	r3, fp
 80054e0:	461e      	mov	r6, r3
 80054e2:	462c      	mov	r4, r5
 80054e4:	4544      	cmp	r4, r8
 80054e6:	d30e      	bcc.n	8005506 <__mdiff+0xf6>
 80054e8:	f108 0103 	add.w	r1, r8, #3
 80054ec:	1b49      	subs	r1, r1, r5
 80054ee:	f021 0103 	bic.w	r1, r1, #3
 80054f2:	3d03      	subs	r5, #3
 80054f4:	45a8      	cmp	r8, r5
 80054f6:	bf38      	it	cc
 80054f8:	2100      	movcc	r1, #0
 80054fa:	440b      	add	r3, r1
 80054fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005500:	b191      	cbz	r1, 8005528 <__mdiff+0x118>
 8005502:	6117      	str	r7, [r2, #16]
 8005504:	e79e      	b.n	8005444 <__mdiff+0x34>
 8005506:	f854 1b04 	ldr.w	r1, [r4], #4
 800550a:	46e6      	mov	lr, ip
 800550c:	0c08      	lsrs	r0, r1, #16
 800550e:	fa1c fc81 	uxtah	ip, ip, r1
 8005512:	4471      	add	r1, lr
 8005514:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005518:	b289      	uxth	r1, r1
 800551a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800551e:	f846 1b04 	str.w	r1, [r6], #4
 8005522:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005526:	e7dd      	b.n	80054e4 <__mdiff+0xd4>
 8005528:	3f01      	subs	r7, #1
 800552a:	e7e7      	b.n	80054fc <__mdiff+0xec>
 800552c:	08007b35 	.word	0x08007b35
 8005530:	08007b46 	.word	0x08007b46

08005534 <__ulp>:
 8005534:	4b0e      	ldr	r3, [pc, #56]	@ (8005570 <__ulp+0x3c>)
 8005536:	400b      	ands	r3, r1
 8005538:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800553c:	2b00      	cmp	r3, #0
 800553e:	dc08      	bgt.n	8005552 <__ulp+0x1e>
 8005540:	425b      	negs	r3, r3
 8005542:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8005546:	ea4f 5223 	mov.w	r2, r3, asr #20
 800554a:	da04      	bge.n	8005556 <__ulp+0x22>
 800554c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005550:	4113      	asrs	r3, r2
 8005552:	2200      	movs	r2, #0
 8005554:	e008      	b.n	8005568 <__ulp+0x34>
 8005556:	f1a2 0314 	sub.w	r3, r2, #20
 800555a:	2b1e      	cmp	r3, #30
 800555c:	bfda      	itte	le
 800555e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8005562:	40da      	lsrle	r2, r3
 8005564:	2201      	movgt	r2, #1
 8005566:	2300      	movs	r3, #0
 8005568:	4619      	mov	r1, r3
 800556a:	4610      	mov	r0, r2
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	7ff00000 	.word	0x7ff00000

08005574 <__b2d>:
 8005574:	6902      	ldr	r2, [r0, #16]
 8005576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005578:	f100 0614 	add.w	r6, r0, #20
 800557c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8005580:	4f20      	ldr	r7, [pc, #128]	@ (8005604 <__b2d+0x90>)
 8005582:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8005586:	4620      	mov	r0, r4
 8005588:	f7ff fd5c 	bl	8005044 <__hi0bits>
 800558c:	4603      	mov	r3, r0
 800558e:	2b0a      	cmp	r3, #10
 8005590:	f1c0 0020 	rsb	r0, r0, #32
 8005594:	f1a2 0504 	sub.w	r5, r2, #4
 8005598:	6008      	str	r0, [r1, #0]
 800559a:	dc13      	bgt.n	80055c4 <__b2d+0x50>
 800559c:	42ae      	cmp	r6, r5
 800559e:	bf38      	it	cc
 80055a0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80055a4:	f1c3 0c0b 	rsb	ip, r3, #11
 80055a8:	bf28      	it	cs
 80055aa:	2200      	movcs	r2, #0
 80055ac:	3315      	adds	r3, #21
 80055ae:	fa24 fe0c 	lsr.w	lr, r4, ip
 80055b2:	fa04 f303 	lsl.w	r3, r4, r3
 80055b6:	fa22 f20c 	lsr.w	r2, r2, ip
 80055ba:	ea4e 0107 	orr.w	r1, lr, r7
 80055be:	431a      	orrs	r2, r3
 80055c0:	4610      	mov	r0, r2
 80055c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055c4:	42ae      	cmp	r6, r5
 80055c6:	bf36      	itet	cc
 80055c8:	f1a2 0508 	subcc.w	r5, r2, #8
 80055cc:	2200      	movcs	r2, #0
 80055ce:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80055d2:	3b0b      	subs	r3, #11
 80055d4:	d012      	beq.n	80055fc <__b2d+0x88>
 80055d6:	f1c3 0720 	rsb	r7, r3, #32
 80055da:	fa22 f107 	lsr.w	r1, r2, r7
 80055de:	409c      	lsls	r4, r3
 80055e0:	430c      	orrs	r4, r1
 80055e2:	42b5      	cmp	r5, r6
 80055e4:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80055e8:	bf8c      	ite	hi
 80055ea:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80055ee:	2400      	movls	r4, #0
 80055f0:	409a      	lsls	r2, r3
 80055f2:	40fc      	lsrs	r4, r7
 80055f4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80055f8:	4322      	orrs	r2, r4
 80055fa:	e7e1      	b.n	80055c0 <__b2d+0x4c>
 80055fc:	ea44 0107 	orr.w	r1, r4, r7
 8005600:	e7de      	b.n	80055c0 <__b2d+0x4c>
 8005602:	bf00      	nop
 8005604:	3ff00000 	.word	0x3ff00000

08005608 <__d2b>:
 8005608:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800560c:	2101      	movs	r1, #1
 800560e:	9e08      	ldr	r6, [sp, #32]
 8005610:	4690      	mov	r8, r2
 8005612:	4699      	mov	r9, r3
 8005614:	f7ff fc24 	bl	8004e60 <_Balloc>
 8005618:	4604      	mov	r4, r0
 800561a:	b930      	cbnz	r0, 800562a <__d2b+0x22>
 800561c:	4602      	mov	r2, r0
 800561e:	4b24      	ldr	r3, [pc, #144]	@ (80056b0 <__d2b+0xa8>)
 8005620:	4824      	ldr	r0, [pc, #144]	@ (80056b4 <__d2b+0xac>)
 8005622:	f240 310f 	movw	r1, #783	@ 0x30f
 8005626:	f001 f985 	bl	8006934 <__assert_func>
 800562a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800562e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005632:	b10d      	cbz	r5, 8005638 <__d2b+0x30>
 8005634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005638:	9301      	str	r3, [sp, #4]
 800563a:	f1b8 0300 	subs.w	r3, r8, #0
 800563e:	d024      	beq.n	800568a <__d2b+0x82>
 8005640:	4668      	mov	r0, sp
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	f7ff fd1d 	bl	8005082 <__lo0bits>
 8005648:	e9dd 1200 	ldrd	r1, r2, [sp]
 800564c:	b1d8      	cbz	r0, 8005686 <__d2b+0x7e>
 800564e:	f1c0 0320 	rsb	r3, r0, #32
 8005652:	fa02 f303 	lsl.w	r3, r2, r3
 8005656:	430b      	orrs	r3, r1
 8005658:	40c2      	lsrs	r2, r0
 800565a:	6163      	str	r3, [r4, #20]
 800565c:	9201      	str	r2, [sp, #4]
 800565e:	9b01      	ldr	r3, [sp, #4]
 8005660:	61a3      	str	r3, [r4, #24]
 8005662:	2b00      	cmp	r3, #0
 8005664:	bf0c      	ite	eq
 8005666:	2201      	moveq	r2, #1
 8005668:	2202      	movne	r2, #2
 800566a:	6122      	str	r2, [r4, #16]
 800566c:	b1ad      	cbz	r5, 800569a <__d2b+0x92>
 800566e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005672:	4405      	add	r5, r0
 8005674:	6035      	str	r5, [r6, #0]
 8005676:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800567a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800567c:	6018      	str	r0, [r3, #0]
 800567e:	4620      	mov	r0, r4
 8005680:	b002      	add	sp, #8
 8005682:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005686:	6161      	str	r1, [r4, #20]
 8005688:	e7e9      	b.n	800565e <__d2b+0x56>
 800568a:	a801      	add	r0, sp, #4
 800568c:	f7ff fcf9 	bl	8005082 <__lo0bits>
 8005690:	9b01      	ldr	r3, [sp, #4]
 8005692:	6163      	str	r3, [r4, #20]
 8005694:	3020      	adds	r0, #32
 8005696:	2201      	movs	r2, #1
 8005698:	e7e7      	b.n	800566a <__d2b+0x62>
 800569a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800569e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80056a2:	6030      	str	r0, [r6, #0]
 80056a4:	6918      	ldr	r0, [r3, #16]
 80056a6:	f7ff fccd 	bl	8005044 <__hi0bits>
 80056aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80056ae:	e7e4      	b.n	800567a <__d2b+0x72>
 80056b0:	08007b35 	.word	0x08007b35
 80056b4:	08007b46 	.word	0x08007b46

080056b8 <__ratio>:
 80056b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056bc:	b085      	sub	sp, #20
 80056be:	e9cd 1000 	strd	r1, r0, [sp]
 80056c2:	a902      	add	r1, sp, #8
 80056c4:	f7ff ff56 	bl	8005574 <__b2d>
 80056c8:	468b      	mov	fp, r1
 80056ca:	4606      	mov	r6, r0
 80056cc:	460f      	mov	r7, r1
 80056ce:	9800      	ldr	r0, [sp, #0]
 80056d0:	a903      	add	r1, sp, #12
 80056d2:	f7ff ff4f 	bl	8005574 <__b2d>
 80056d6:	9b01      	ldr	r3, [sp, #4]
 80056d8:	4689      	mov	r9, r1
 80056da:	460d      	mov	r5, r1
 80056dc:	6919      	ldr	r1, [r3, #16]
 80056de:	9b00      	ldr	r3, [sp, #0]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	1ac9      	subs	r1, r1, r3
 80056e4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80056e8:	1a9b      	subs	r3, r3, r2
 80056ea:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	bfcd      	iteet	gt
 80056f2:	463a      	movgt	r2, r7
 80056f4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80056f8:	462a      	movle	r2, r5
 80056fa:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80056fe:	bfd8      	it	le
 8005700:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8005704:	4604      	mov	r4, r0
 8005706:	4622      	mov	r2, r4
 8005708:	464b      	mov	r3, r9
 800570a:	4630      	mov	r0, r6
 800570c:	4659      	mov	r1, fp
 800570e:	f7fb f89d 	bl	800084c <__aeabi_ddiv>
 8005712:	b005      	add	sp, #20
 8005714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005718 <__copybits>:
 8005718:	3901      	subs	r1, #1
 800571a:	b570      	push	{r4, r5, r6, lr}
 800571c:	1149      	asrs	r1, r1, #5
 800571e:	6914      	ldr	r4, [r2, #16]
 8005720:	3101      	adds	r1, #1
 8005722:	f102 0314 	add.w	r3, r2, #20
 8005726:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800572a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800572e:	1f05      	subs	r5, r0, #4
 8005730:	42a3      	cmp	r3, r4
 8005732:	d30c      	bcc.n	800574e <__copybits+0x36>
 8005734:	1aa3      	subs	r3, r4, r2
 8005736:	3b11      	subs	r3, #17
 8005738:	f023 0303 	bic.w	r3, r3, #3
 800573c:	3211      	adds	r2, #17
 800573e:	42a2      	cmp	r2, r4
 8005740:	bf88      	it	hi
 8005742:	2300      	movhi	r3, #0
 8005744:	4418      	add	r0, r3
 8005746:	2300      	movs	r3, #0
 8005748:	4288      	cmp	r0, r1
 800574a:	d305      	bcc.n	8005758 <__copybits+0x40>
 800574c:	bd70      	pop	{r4, r5, r6, pc}
 800574e:	f853 6b04 	ldr.w	r6, [r3], #4
 8005752:	f845 6f04 	str.w	r6, [r5, #4]!
 8005756:	e7eb      	b.n	8005730 <__copybits+0x18>
 8005758:	f840 3b04 	str.w	r3, [r0], #4
 800575c:	e7f4      	b.n	8005748 <__copybits+0x30>

0800575e <__any_on>:
 800575e:	f100 0214 	add.w	r2, r0, #20
 8005762:	6900      	ldr	r0, [r0, #16]
 8005764:	114b      	asrs	r3, r1, #5
 8005766:	4298      	cmp	r0, r3
 8005768:	b510      	push	{r4, lr}
 800576a:	db11      	blt.n	8005790 <__any_on+0x32>
 800576c:	dd0a      	ble.n	8005784 <__any_on+0x26>
 800576e:	f011 011f 	ands.w	r1, r1, #31
 8005772:	d007      	beq.n	8005784 <__any_on+0x26>
 8005774:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005778:	fa24 f001 	lsr.w	r0, r4, r1
 800577c:	fa00 f101 	lsl.w	r1, r0, r1
 8005780:	428c      	cmp	r4, r1
 8005782:	d10b      	bne.n	800579c <__any_on+0x3e>
 8005784:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005788:	4293      	cmp	r3, r2
 800578a:	d803      	bhi.n	8005794 <__any_on+0x36>
 800578c:	2000      	movs	r0, #0
 800578e:	bd10      	pop	{r4, pc}
 8005790:	4603      	mov	r3, r0
 8005792:	e7f7      	b.n	8005784 <__any_on+0x26>
 8005794:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005798:	2900      	cmp	r1, #0
 800579a:	d0f5      	beq.n	8005788 <__any_on+0x2a>
 800579c:	2001      	movs	r0, #1
 800579e:	e7f6      	b.n	800578e <__any_on+0x30>

080057a0 <sulp>:
 80057a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057a4:	460f      	mov	r7, r1
 80057a6:	4690      	mov	r8, r2
 80057a8:	f7ff fec4 	bl	8005534 <__ulp>
 80057ac:	4604      	mov	r4, r0
 80057ae:	460d      	mov	r5, r1
 80057b0:	f1b8 0f00 	cmp.w	r8, #0
 80057b4:	d011      	beq.n	80057da <sulp+0x3a>
 80057b6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80057ba:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80057be:	2b00      	cmp	r3, #0
 80057c0:	dd0b      	ble.n	80057da <sulp+0x3a>
 80057c2:	051b      	lsls	r3, r3, #20
 80057c4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80057c8:	2400      	movs	r4, #0
 80057ca:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80057ce:	4622      	mov	r2, r4
 80057d0:	462b      	mov	r3, r5
 80057d2:	f7fa ff11 	bl	80005f8 <__aeabi_dmul>
 80057d6:	4604      	mov	r4, r0
 80057d8:	460d      	mov	r5, r1
 80057da:	4620      	mov	r0, r4
 80057dc:	4629      	mov	r1, r5
 80057de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057e2:	0000      	movs	r0, r0
 80057e4:	0000      	movs	r0, r0
	...

080057e8 <_strtod_l>:
 80057e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ec:	b09f      	sub	sp, #124	@ 0x7c
 80057ee:	460c      	mov	r4, r1
 80057f0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80057f2:	2200      	movs	r2, #0
 80057f4:	921a      	str	r2, [sp, #104]	@ 0x68
 80057f6:	9005      	str	r0, [sp, #20]
 80057f8:	f04f 0a00 	mov.w	sl, #0
 80057fc:	f04f 0b00 	mov.w	fp, #0
 8005800:	460a      	mov	r2, r1
 8005802:	9219      	str	r2, [sp, #100]	@ 0x64
 8005804:	7811      	ldrb	r1, [r2, #0]
 8005806:	292b      	cmp	r1, #43	@ 0x2b
 8005808:	d048      	beq.n	800589c <_strtod_l+0xb4>
 800580a:	d836      	bhi.n	800587a <_strtod_l+0x92>
 800580c:	290d      	cmp	r1, #13
 800580e:	d830      	bhi.n	8005872 <_strtod_l+0x8a>
 8005810:	2908      	cmp	r1, #8
 8005812:	d830      	bhi.n	8005876 <_strtod_l+0x8e>
 8005814:	2900      	cmp	r1, #0
 8005816:	d039      	beq.n	800588c <_strtod_l+0xa4>
 8005818:	2200      	movs	r2, #0
 800581a:	920e      	str	r2, [sp, #56]	@ 0x38
 800581c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800581e:	782a      	ldrb	r2, [r5, #0]
 8005820:	2a30      	cmp	r2, #48	@ 0x30
 8005822:	f040 80b0 	bne.w	8005986 <_strtod_l+0x19e>
 8005826:	786a      	ldrb	r2, [r5, #1]
 8005828:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800582c:	2a58      	cmp	r2, #88	@ 0x58
 800582e:	d16c      	bne.n	800590a <_strtod_l+0x122>
 8005830:	9302      	str	r3, [sp, #8]
 8005832:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005834:	9301      	str	r3, [sp, #4]
 8005836:	ab1a      	add	r3, sp, #104	@ 0x68
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	4a8e      	ldr	r2, [pc, #568]	@ (8005a74 <_strtod_l+0x28c>)
 800583c:	9805      	ldr	r0, [sp, #20]
 800583e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005840:	a919      	add	r1, sp, #100	@ 0x64
 8005842:	f001 f911 	bl	8006a68 <__gethex>
 8005846:	f010 060f 	ands.w	r6, r0, #15
 800584a:	4604      	mov	r4, r0
 800584c:	d005      	beq.n	800585a <_strtod_l+0x72>
 800584e:	2e06      	cmp	r6, #6
 8005850:	d126      	bne.n	80058a0 <_strtod_l+0xb8>
 8005852:	3501      	adds	r5, #1
 8005854:	2300      	movs	r3, #0
 8005856:	9519      	str	r5, [sp, #100]	@ 0x64
 8005858:	930e      	str	r3, [sp, #56]	@ 0x38
 800585a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800585c:	2b00      	cmp	r3, #0
 800585e:	f040 857e 	bne.w	800635e <_strtod_l+0xb76>
 8005862:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005864:	b1bb      	cbz	r3, 8005896 <_strtod_l+0xae>
 8005866:	4650      	mov	r0, sl
 8005868:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800586c:	b01f      	add	sp, #124	@ 0x7c
 800586e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005872:	2920      	cmp	r1, #32
 8005874:	d1d0      	bne.n	8005818 <_strtod_l+0x30>
 8005876:	3201      	adds	r2, #1
 8005878:	e7c3      	b.n	8005802 <_strtod_l+0x1a>
 800587a:	292d      	cmp	r1, #45	@ 0x2d
 800587c:	d1cc      	bne.n	8005818 <_strtod_l+0x30>
 800587e:	2101      	movs	r1, #1
 8005880:	910e      	str	r1, [sp, #56]	@ 0x38
 8005882:	1c51      	adds	r1, r2, #1
 8005884:	9119      	str	r1, [sp, #100]	@ 0x64
 8005886:	7852      	ldrb	r2, [r2, #1]
 8005888:	2a00      	cmp	r2, #0
 800588a:	d1c7      	bne.n	800581c <_strtod_l+0x34>
 800588c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800588e:	9419      	str	r4, [sp, #100]	@ 0x64
 8005890:	2b00      	cmp	r3, #0
 8005892:	f040 8562 	bne.w	800635a <_strtod_l+0xb72>
 8005896:	4650      	mov	r0, sl
 8005898:	4659      	mov	r1, fp
 800589a:	e7e7      	b.n	800586c <_strtod_l+0x84>
 800589c:	2100      	movs	r1, #0
 800589e:	e7ef      	b.n	8005880 <_strtod_l+0x98>
 80058a0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80058a2:	b13a      	cbz	r2, 80058b4 <_strtod_l+0xcc>
 80058a4:	2135      	movs	r1, #53	@ 0x35
 80058a6:	a81c      	add	r0, sp, #112	@ 0x70
 80058a8:	f7ff ff36 	bl	8005718 <__copybits>
 80058ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80058ae:	9805      	ldr	r0, [sp, #20]
 80058b0:	f7ff fb16 	bl	8004ee0 <_Bfree>
 80058b4:	3e01      	subs	r6, #1
 80058b6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80058b8:	2e04      	cmp	r6, #4
 80058ba:	d806      	bhi.n	80058ca <_strtod_l+0xe2>
 80058bc:	e8df f006 	tbb	[pc, r6]
 80058c0:	201d0314 	.word	0x201d0314
 80058c4:	14          	.byte	0x14
 80058c5:	00          	.byte	0x00
 80058c6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80058ca:	05e1      	lsls	r1, r4, #23
 80058cc:	bf48      	it	mi
 80058ce:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80058d2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80058d6:	0d1b      	lsrs	r3, r3, #20
 80058d8:	051b      	lsls	r3, r3, #20
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1bd      	bne.n	800585a <_strtod_l+0x72>
 80058de:	f7fe fb35 	bl	8003f4c <__errno>
 80058e2:	2322      	movs	r3, #34	@ 0x22
 80058e4:	6003      	str	r3, [r0, #0]
 80058e6:	e7b8      	b.n	800585a <_strtod_l+0x72>
 80058e8:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80058ec:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80058f0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80058f4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80058f8:	e7e7      	b.n	80058ca <_strtod_l+0xe2>
 80058fa:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8005a78 <_strtod_l+0x290>
 80058fe:	e7e4      	b.n	80058ca <_strtod_l+0xe2>
 8005900:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005904:	f04f 3aff 	mov.w	sl, #4294967295
 8005908:	e7df      	b.n	80058ca <_strtod_l+0xe2>
 800590a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005910:	785b      	ldrb	r3, [r3, #1]
 8005912:	2b30      	cmp	r3, #48	@ 0x30
 8005914:	d0f9      	beq.n	800590a <_strtod_l+0x122>
 8005916:	2b00      	cmp	r3, #0
 8005918:	d09f      	beq.n	800585a <_strtod_l+0x72>
 800591a:	2301      	movs	r3, #1
 800591c:	2700      	movs	r7, #0
 800591e:	9308      	str	r3, [sp, #32]
 8005920:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005922:	930c      	str	r3, [sp, #48]	@ 0x30
 8005924:	970b      	str	r7, [sp, #44]	@ 0x2c
 8005926:	46b9      	mov	r9, r7
 8005928:	220a      	movs	r2, #10
 800592a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800592c:	7805      	ldrb	r5, [r0, #0]
 800592e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005932:	b2d9      	uxtb	r1, r3
 8005934:	2909      	cmp	r1, #9
 8005936:	d928      	bls.n	800598a <_strtod_l+0x1a2>
 8005938:	4950      	ldr	r1, [pc, #320]	@ (8005a7c <_strtod_l+0x294>)
 800593a:	2201      	movs	r2, #1
 800593c:	f000 ffc4 	bl	80068c8 <strncmp>
 8005940:	2800      	cmp	r0, #0
 8005942:	d032      	beq.n	80059aa <_strtod_l+0x1c2>
 8005944:	2000      	movs	r0, #0
 8005946:	462a      	mov	r2, r5
 8005948:	900a      	str	r0, [sp, #40]	@ 0x28
 800594a:	464d      	mov	r5, r9
 800594c:	4603      	mov	r3, r0
 800594e:	2a65      	cmp	r2, #101	@ 0x65
 8005950:	d001      	beq.n	8005956 <_strtod_l+0x16e>
 8005952:	2a45      	cmp	r2, #69	@ 0x45
 8005954:	d114      	bne.n	8005980 <_strtod_l+0x198>
 8005956:	b91d      	cbnz	r5, 8005960 <_strtod_l+0x178>
 8005958:	9a08      	ldr	r2, [sp, #32]
 800595a:	4302      	orrs	r2, r0
 800595c:	d096      	beq.n	800588c <_strtod_l+0xa4>
 800595e:	2500      	movs	r5, #0
 8005960:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005962:	1c62      	adds	r2, r4, #1
 8005964:	9219      	str	r2, [sp, #100]	@ 0x64
 8005966:	7862      	ldrb	r2, [r4, #1]
 8005968:	2a2b      	cmp	r2, #43	@ 0x2b
 800596a:	d07a      	beq.n	8005a62 <_strtod_l+0x27a>
 800596c:	2a2d      	cmp	r2, #45	@ 0x2d
 800596e:	d07e      	beq.n	8005a6e <_strtod_l+0x286>
 8005970:	f04f 0c00 	mov.w	ip, #0
 8005974:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005978:	2909      	cmp	r1, #9
 800597a:	f240 8085 	bls.w	8005a88 <_strtod_l+0x2a0>
 800597e:	9419      	str	r4, [sp, #100]	@ 0x64
 8005980:	f04f 0800 	mov.w	r8, #0
 8005984:	e0a5      	b.n	8005ad2 <_strtod_l+0x2ea>
 8005986:	2300      	movs	r3, #0
 8005988:	e7c8      	b.n	800591c <_strtod_l+0x134>
 800598a:	f1b9 0f08 	cmp.w	r9, #8
 800598e:	bfd8      	it	le
 8005990:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8005992:	f100 0001 	add.w	r0, r0, #1
 8005996:	bfda      	itte	le
 8005998:	fb02 3301 	mlale	r3, r2, r1, r3
 800599c:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800599e:	fb02 3707 	mlagt	r7, r2, r7, r3
 80059a2:	f109 0901 	add.w	r9, r9, #1
 80059a6:	9019      	str	r0, [sp, #100]	@ 0x64
 80059a8:	e7bf      	b.n	800592a <_strtod_l+0x142>
 80059aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80059ac:	1c5a      	adds	r2, r3, #1
 80059ae:	9219      	str	r2, [sp, #100]	@ 0x64
 80059b0:	785a      	ldrb	r2, [r3, #1]
 80059b2:	f1b9 0f00 	cmp.w	r9, #0
 80059b6:	d03b      	beq.n	8005a30 <_strtod_l+0x248>
 80059b8:	900a      	str	r0, [sp, #40]	@ 0x28
 80059ba:	464d      	mov	r5, r9
 80059bc:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80059c0:	2b09      	cmp	r3, #9
 80059c2:	d912      	bls.n	80059ea <_strtod_l+0x202>
 80059c4:	2301      	movs	r3, #1
 80059c6:	e7c2      	b.n	800594e <_strtod_l+0x166>
 80059c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80059ca:	1c5a      	adds	r2, r3, #1
 80059cc:	9219      	str	r2, [sp, #100]	@ 0x64
 80059ce:	785a      	ldrb	r2, [r3, #1]
 80059d0:	3001      	adds	r0, #1
 80059d2:	2a30      	cmp	r2, #48	@ 0x30
 80059d4:	d0f8      	beq.n	80059c8 <_strtod_l+0x1e0>
 80059d6:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80059da:	2b08      	cmp	r3, #8
 80059dc:	f200 84c4 	bhi.w	8006368 <_strtod_l+0xb80>
 80059e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80059e2:	900a      	str	r0, [sp, #40]	@ 0x28
 80059e4:	2000      	movs	r0, #0
 80059e6:	930c      	str	r3, [sp, #48]	@ 0x30
 80059e8:	4605      	mov	r5, r0
 80059ea:	3a30      	subs	r2, #48	@ 0x30
 80059ec:	f100 0301 	add.w	r3, r0, #1
 80059f0:	d018      	beq.n	8005a24 <_strtod_l+0x23c>
 80059f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80059f4:	4419      	add	r1, r3
 80059f6:	910a      	str	r1, [sp, #40]	@ 0x28
 80059f8:	462e      	mov	r6, r5
 80059fa:	f04f 0e0a 	mov.w	lr, #10
 80059fe:	1c71      	adds	r1, r6, #1
 8005a00:	eba1 0c05 	sub.w	ip, r1, r5
 8005a04:	4563      	cmp	r3, ip
 8005a06:	dc15      	bgt.n	8005a34 <_strtod_l+0x24c>
 8005a08:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8005a0c:	182b      	adds	r3, r5, r0
 8005a0e:	2b08      	cmp	r3, #8
 8005a10:	f105 0501 	add.w	r5, r5, #1
 8005a14:	4405      	add	r5, r0
 8005a16:	dc1a      	bgt.n	8005a4e <_strtod_l+0x266>
 8005a18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005a1a:	230a      	movs	r3, #10
 8005a1c:	fb03 2301 	mla	r3, r3, r1, r2
 8005a20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a22:	2300      	movs	r3, #0
 8005a24:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005a26:	1c51      	adds	r1, r2, #1
 8005a28:	9119      	str	r1, [sp, #100]	@ 0x64
 8005a2a:	7852      	ldrb	r2, [r2, #1]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	e7c5      	b.n	80059bc <_strtod_l+0x1d4>
 8005a30:	4648      	mov	r0, r9
 8005a32:	e7ce      	b.n	80059d2 <_strtod_l+0x1ea>
 8005a34:	2e08      	cmp	r6, #8
 8005a36:	dc05      	bgt.n	8005a44 <_strtod_l+0x25c>
 8005a38:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005a3a:	fb0e f606 	mul.w	r6, lr, r6
 8005a3e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8005a40:	460e      	mov	r6, r1
 8005a42:	e7dc      	b.n	80059fe <_strtod_l+0x216>
 8005a44:	2910      	cmp	r1, #16
 8005a46:	bfd8      	it	le
 8005a48:	fb0e f707 	mulle.w	r7, lr, r7
 8005a4c:	e7f8      	b.n	8005a40 <_strtod_l+0x258>
 8005a4e:	2b0f      	cmp	r3, #15
 8005a50:	bfdc      	itt	le
 8005a52:	230a      	movle	r3, #10
 8005a54:	fb03 2707 	mlale	r7, r3, r7, r2
 8005a58:	e7e3      	b.n	8005a22 <_strtod_l+0x23a>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e77a      	b.n	8005958 <_strtod_l+0x170>
 8005a62:	f04f 0c00 	mov.w	ip, #0
 8005a66:	1ca2      	adds	r2, r4, #2
 8005a68:	9219      	str	r2, [sp, #100]	@ 0x64
 8005a6a:	78a2      	ldrb	r2, [r4, #2]
 8005a6c:	e782      	b.n	8005974 <_strtod_l+0x18c>
 8005a6e:	f04f 0c01 	mov.w	ip, #1
 8005a72:	e7f8      	b.n	8005a66 <_strtod_l+0x27e>
 8005a74:	08007d6c 	.word	0x08007d6c
 8005a78:	7ff00000 	.word	0x7ff00000
 8005a7c:	08007b9f 	.word	0x08007b9f
 8005a80:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005a82:	1c51      	adds	r1, r2, #1
 8005a84:	9119      	str	r1, [sp, #100]	@ 0x64
 8005a86:	7852      	ldrb	r2, [r2, #1]
 8005a88:	2a30      	cmp	r2, #48	@ 0x30
 8005a8a:	d0f9      	beq.n	8005a80 <_strtod_l+0x298>
 8005a8c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005a90:	2908      	cmp	r1, #8
 8005a92:	f63f af75 	bhi.w	8005980 <_strtod_l+0x198>
 8005a96:	3a30      	subs	r2, #48	@ 0x30
 8005a98:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a9a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005a9c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005a9e:	f04f 080a 	mov.w	r8, #10
 8005aa2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005aa4:	1c56      	adds	r6, r2, #1
 8005aa6:	9619      	str	r6, [sp, #100]	@ 0x64
 8005aa8:	7852      	ldrb	r2, [r2, #1]
 8005aaa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005aae:	f1be 0f09 	cmp.w	lr, #9
 8005ab2:	d939      	bls.n	8005b28 <_strtod_l+0x340>
 8005ab4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005ab6:	1a76      	subs	r6, r6, r1
 8005ab8:	2e08      	cmp	r6, #8
 8005aba:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005abe:	dc03      	bgt.n	8005ac8 <_strtod_l+0x2e0>
 8005ac0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005ac2:	4588      	cmp	r8, r1
 8005ac4:	bfa8      	it	ge
 8005ac6:	4688      	movge	r8, r1
 8005ac8:	f1bc 0f00 	cmp.w	ip, #0
 8005acc:	d001      	beq.n	8005ad2 <_strtod_l+0x2ea>
 8005ace:	f1c8 0800 	rsb	r8, r8, #0
 8005ad2:	2d00      	cmp	r5, #0
 8005ad4:	d14e      	bne.n	8005b74 <_strtod_l+0x38c>
 8005ad6:	9908      	ldr	r1, [sp, #32]
 8005ad8:	4308      	orrs	r0, r1
 8005ada:	f47f aebe 	bne.w	800585a <_strtod_l+0x72>
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f47f aed4 	bne.w	800588c <_strtod_l+0xa4>
 8005ae4:	2a69      	cmp	r2, #105	@ 0x69
 8005ae6:	d028      	beq.n	8005b3a <_strtod_l+0x352>
 8005ae8:	dc25      	bgt.n	8005b36 <_strtod_l+0x34e>
 8005aea:	2a49      	cmp	r2, #73	@ 0x49
 8005aec:	d025      	beq.n	8005b3a <_strtod_l+0x352>
 8005aee:	2a4e      	cmp	r2, #78	@ 0x4e
 8005af0:	f47f aecc 	bne.w	800588c <_strtod_l+0xa4>
 8005af4:	4999      	ldr	r1, [pc, #612]	@ (8005d5c <_strtod_l+0x574>)
 8005af6:	a819      	add	r0, sp, #100	@ 0x64
 8005af8:	f001 f9d8 	bl	8006eac <__match>
 8005afc:	2800      	cmp	r0, #0
 8005afe:	f43f aec5 	beq.w	800588c <_strtod_l+0xa4>
 8005b02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	2b28      	cmp	r3, #40	@ 0x28
 8005b08:	d12e      	bne.n	8005b68 <_strtod_l+0x380>
 8005b0a:	4995      	ldr	r1, [pc, #596]	@ (8005d60 <_strtod_l+0x578>)
 8005b0c:	aa1c      	add	r2, sp, #112	@ 0x70
 8005b0e:	a819      	add	r0, sp, #100	@ 0x64
 8005b10:	f001 f9e0 	bl	8006ed4 <__hexnan>
 8005b14:	2805      	cmp	r0, #5
 8005b16:	d127      	bne.n	8005b68 <_strtod_l+0x380>
 8005b18:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005b1a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005b1e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005b22:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005b26:	e698      	b.n	800585a <_strtod_l+0x72>
 8005b28:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005b2a:	fb08 2101 	mla	r1, r8, r1, r2
 8005b2e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005b32:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b34:	e7b5      	b.n	8005aa2 <_strtod_l+0x2ba>
 8005b36:	2a6e      	cmp	r2, #110	@ 0x6e
 8005b38:	e7da      	b.n	8005af0 <_strtod_l+0x308>
 8005b3a:	498a      	ldr	r1, [pc, #552]	@ (8005d64 <_strtod_l+0x57c>)
 8005b3c:	a819      	add	r0, sp, #100	@ 0x64
 8005b3e:	f001 f9b5 	bl	8006eac <__match>
 8005b42:	2800      	cmp	r0, #0
 8005b44:	f43f aea2 	beq.w	800588c <_strtod_l+0xa4>
 8005b48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005b4a:	4987      	ldr	r1, [pc, #540]	@ (8005d68 <_strtod_l+0x580>)
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	a819      	add	r0, sp, #100	@ 0x64
 8005b50:	9319      	str	r3, [sp, #100]	@ 0x64
 8005b52:	f001 f9ab 	bl	8006eac <__match>
 8005b56:	b910      	cbnz	r0, 8005b5e <_strtod_l+0x376>
 8005b58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	9319      	str	r3, [sp, #100]	@ 0x64
 8005b5e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8005d6c <_strtod_l+0x584>
 8005b62:	f04f 0a00 	mov.w	sl, #0
 8005b66:	e678      	b.n	800585a <_strtod_l+0x72>
 8005b68:	4881      	ldr	r0, [pc, #516]	@ (8005d70 <_strtod_l+0x588>)
 8005b6a:	f000 fedd 	bl	8006928 <nan>
 8005b6e:	4682      	mov	sl, r0
 8005b70:	468b      	mov	fp, r1
 8005b72:	e672      	b.n	800585a <_strtod_l+0x72>
 8005b74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b76:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8005b78:	eba8 0303 	sub.w	r3, r8, r3
 8005b7c:	f1b9 0f00 	cmp.w	r9, #0
 8005b80:	bf08      	it	eq
 8005b82:	46a9      	moveq	r9, r5
 8005b84:	2d10      	cmp	r5, #16
 8005b86:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b88:	462c      	mov	r4, r5
 8005b8a:	bfa8      	it	ge
 8005b8c:	2410      	movge	r4, #16
 8005b8e:	f7fa fcb9 	bl	8000504 <__aeabi_ui2d>
 8005b92:	2d09      	cmp	r5, #9
 8005b94:	4682      	mov	sl, r0
 8005b96:	468b      	mov	fp, r1
 8005b98:	dc11      	bgt.n	8005bbe <_strtod_l+0x3d6>
 8005b9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f43f ae5c 	beq.w	800585a <_strtod_l+0x72>
 8005ba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ba4:	dd76      	ble.n	8005c94 <_strtod_l+0x4ac>
 8005ba6:	2b16      	cmp	r3, #22
 8005ba8:	dc5d      	bgt.n	8005c66 <_strtod_l+0x47e>
 8005baa:	4972      	ldr	r1, [pc, #456]	@ (8005d74 <_strtod_l+0x58c>)
 8005bac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005bb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005bb4:	4652      	mov	r2, sl
 8005bb6:	465b      	mov	r3, fp
 8005bb8:	f7fa fd1e 	bl	80005f8 <__aeabi_dmul>
 8005bbc:	e7d7      	b.n	8005b6e <_strtod_l+0x386>
 8005bbe:	4b6d      	ldr	r3, [pc, #436]	@ (8005d74 <_strtod_l+0x58c>)
 8005bc0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005bc4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005bc8:	f7fa fd16 	bl	80005f8 <__aeabi_dmul>
 8005bcc:	4682      	mov	sl, r0
 8005bce:	4638      	mov	r0, r7
 8005bd0:	468b      	mov	fp, r1
 8005bd2:	f7fa fc97 	bl	8000504 <__aeabi_ui2d>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	460b      	mov	r3, r1
 8005bda:	4650      	mov	r0, sl
 8005bdc:	4659      	mov	r1, fp
 8005bde:	f7fa fb55 	bl	800028c <__adddf3>
 8005be2:	2d0f      	cmp	r5, #15
 8005be4:	4682      	mov	sl, r0
 8005be6:	468b      	mov	fp, r1
 8005be8:	ddd7      	ble.n	8005b9a <_strtod_l+0x3b2>
 8005bea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bec:	1b2c      	subs	r4, r5, r4
 8005bee:	441c      	add	r4, r3
 8005bf0:	2c00      	cmp	r4, #0
 8005bf2:	f340 8093 	ble.w	8005d1c <_strtod_l+0x534>
 8005bf6:	f014 030f 	ands.w	r3, r4, #15
 8005bfa:	d00a      	beq.n	8005c12 <_strtod_l+0x42a>
 8005bfc:	495d      	ldr	r1, [pc, #372]	@ (8005d74 <_strtod_l+0x58c>)
 8005bfe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005c02:	4652      	mov	r2, sl
 8005c04:	465b      	mov	r3, fp
 8005c06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c0a:	f7fa fcf5 	bl	80005f8 <__aeabi_dmul>
 8005c0e:	4682      	mov	sl, r0
 8005c10:	468b      	mov	fp, r1
 8005c12:	f034 040f 	bics.w	r4, r4, #15
 8005c16:	d073      	beq.n	8005d00 <_strtod_l+0x518>
 8005c18:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005c1c:	dd49      	ble.n	8005cb2 <_strtod_l+0x4ca>
 8005c1e:	2400      	movs	r4, #0
 8005c20:	46a0      	mov	r8, r4
 8005c22:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005c24:	46a1      	mov	r9, r4
 8005c26:	9a05      	ldr	r2, [sp, #20]
 8005c28:	f8df b140 	ldr.w	fp, [pc, #320]	@ 8005d6c <_strtod_l+0x584>
 8005c2c:	2322      	movs	r3, #34	@ 0x22
 8005c2e:	6013      	str	r3, [r2, #0]
 8005c30:	f04f 0a00 	mov.w	sl, #0
 8005c34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	f43f ae0f 	beq.w	800585a <_strtod_l+0x72>
 8005c3c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005c3e:	9805      	ldr	r0, [sp, #20]
 8005c40:	f7ff f94e 	bl	8004ee0 <_Bfree>
 8005c44:	9805      	ldr	r0, [sp, #20]
 8005c46:	4649      	mov	r1, r9
 8005c48:	f7ff f94a 	bl	8004ee0 <_Bfree>
 8005c4c:	9805      	ldr	r0, [sp, #20]
 8005c4e:	4641      	mov	r1, r8
 8005c50:	f7ff f946 	bl	8004ee0 <_Bfree>
 8005c54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005c56:	9805      	ldr	r0, [sp, #20]
 8005c58:	f7ff f942 	bl	8004ee0 <_Bfree>
 8005c5c:	9805      	ldr	r0, [sp, #20]
 8005c5e:	4621      	mov	r1, r4
 8005c60:	f7ff f93e 	bl	8004ee0 <_Bfree>
 8005c64:	e5f9      	b.n	800585a <_strtod_l+0x72>
 8005c66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c68:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	dbbc      	blt.n	8005bea <_strtod_l+0x402>
 8005c70:	4c40      	ldr	r4, [pc, #256]	@ (8005d74 <_strtod_l+0x58c>)
 8005c72:	f1c5 050f 	rsb	r5, r5, #15
 8005c76:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005c7a:	4652      	mov	r2, sl
 8005c7c:	465b      	mov	r3, fp
 8005c7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c82:	f7fa fcb9 	bl	80005f8 <__aeabi_dmul>
 8005c86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c88:	1b5d      	subs	r5, r3, r5
 8005c8a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005c8e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005c92:	e791      	b.n	8005bb8 <_strtod_l+0x3d0>
 8005c94:	3316      	adds	r3, #22
 8005c96:	dba8      	blt.n	8005bea <_strtod_l+0x402>
 8005c98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c9a:	eba3 0808 	sub.w	r8, r3, r8
 8005c9e:	4b35      	ldr	r3, [pc, #212]	@ (8005d74 <_strtod_l+0x58c>)
 8005ca0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005ca4:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005ca8:	4650      	mov	r0, sl
 8005caa:	4659      	mov	r1, fp
 8005cac:	f7fa fdce 	bl	800084c <__aeabi_ddiv>
 8005cb0:	e75d      	b.n	8005b6e <_strtod_l+0x386>
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	4f30      	ldr	r7, [pc, #192]	@ (8005d78 <_strtod_l+0x590>)
 8005cb6:	1124      	asrs	r4, r4, #4
 8005cb8:	4650      	mov	r0, sl
 8005cba:	4659      	mov	r1, fp
 8005cbc:	461e      	mov	r6, r3
 8005cbe:	2c01      	cmp	r4, #1
 8005cc0:	dc21      	bgt.n	8005d06 <_strtod_l+0x51e>
 8005cc2:	b10b      	cbz	r3, 8005cc8 <_strtod_l+0x4e0>
 8005cc4:	4682      	mov	sl, r0
 8005cc6:	468b      	mov	fp, r1
 8005cc8:	492b      	ldr	r1, [pc, #172]	@ (8005d78 <_strtod_l+0x590>)
 8005cca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005cce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005cd2:	4652      	mov	r2, sl
 8005cd4:	465b      	mov	r3, fp
 8005cd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cda:	f7fa fc8d 	bl	80005f8 <__aeabi_dmul>
 8005cde:	4b23      	ldr	r3, [pc, #140]	@ (8005d6c <_strtod_l+0x584>)
 8005ce0:	460a      	mov	r2, r1
 8005ce2:	400b      	ands	r3, r1
 8005ce4:	4925      	ldr	r1, [pc, #148]	@ (8005d7c <_strtod_l+0x594>)
 8005ce6:	428b      	cmp	r3, r1
 8005ce8:	4682      	mov	sl, r0
 8005cea:	d898      	bhi.n	8005c1e <_strtod_l+0x436>
 8005cec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005cf0:	428b      	cmp	r3, r1
 8005cf2:	bf86      	itte	hi
 8005cf4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8005d80 <_strtod_l+0x598>
 8005cf8:	f04f 3aff 	movhi.w	sl, #4294967295
 8005cfc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005d00:	2300      	movs	r3, #0
 8005d02:	9308      	str	r3, [sp, #32]
 8005d04:	e076      	b.n	8005df4 <_strtod_l+0x60c>
 8005d06:	07e2      	lsls	r2, r4, #31
 8005d08:	d504      	bpl.n	8005d14 <_strtod_l+0x52c>
 8005d0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d0e:	f7fa fc73 	bl	80005f8 <__aeabi_dmul>
 8005d12:	2301      	movs	r3, #1
 8005d14:	3601      	adds	r6, #1
 8005d16:	1064      	asrs	r4, r4, #1
 8005d18:	3708      	adds	r7, #8
 8005d1a:	e7d0      	b.n	8005cbe <_strtod_l+0x4d6>
 8005d1c:	d0f0      	beq.n	8005d00 <_strtod_l+0x518>
 8005d1e:	4264      	negs	r4, r4
 8005d20:	f014 020f 	ands.w	r2, r4, #15
 8005d24:	d00a      	beq.n	8005d3c <_strtod_l+0x554>
 8005d26:	4b13      	ldr	r3, [pc, #76]	@ (8005d74 <_strtod_l+0x58c>)
 8005d28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d2c:	4650      	mov	r0, sl
 8005d2e:	4659      	mov	r1, fp
 8005d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d34:	f7fa fd8a 	bl	800084c <__aeabi_ddiv>
 8005d38:	4682      	mov	sl, r0
 8005d3a:	468b      	mov	fp, r1
 8005d3c:	1124      	asrs	r4, r4, #4
 8005d3e:	d0df      	beq.n	8005d00 <_strtod_l+0x518>
 8005d40:	2c1f      	cmp	r4, #31
 8005d42:	dd1f      	ble.n	8005d84 <_strtod_l+0x59c>
 8005d44:	2400      	movs	r4, #0
 8005d46:	46a0      	mov	r8, r4
 8005d48:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005d4a:	46a1      	mov	r9, r4
 8005d4c:	9a05      	ldr	r2, [sp, #20]
 8005d4e:	2322      	movs	r3, #34	@ 0x22
 8005d50:	f04f 0a00 	mov.w	sl, #0
 8005d54:	f04f 0b00 	mov.w	fp, #0
 8005d58:	6013      	str	r3, [r2, #0]
 8005d5a:	e76b      	b.n	8005c34 <_strtod_l+0x44c>
 8005d5c:	08007a8d 	.word	0x08007a8d
 8005d60:	08007d58 	.word	0x08007d58
 8005d64:	08007a85 	.word	0x08007a85
 8005d68:	08007abc 	.word	0x08007abc
 8005d6c:	7ff00000 	.word	0x7ff00000
 8005d70:	08007bf5 	.word	0x08007bf5
 8005d74:	08007c90 	.word	0x08007c90
 8005d78:	08007c68 	.word	0x08007c68
 8005d7c:	7ca00000 	.word	0x7ca00000
 8005d80:	7fefffff 	.word	0x7fefffff
 8005d84:	f014 0310 	ands.w	r3, r4, #16
 8005d88:	bf18      	it	ne
 8005d8a:	236a      	movne	r3, #106	@ 0x6a
 8005d8c:	4e78      	ldr	r6, [pc, #480]	@ (8005f70 <_strtod_l+0x788>)
 8005d8e:	9308      	str	r3, [sp, #32]
 8005d90:	4650      	mov	r0, sl
 8005d92:	4659      	mov	r1, fp
 8005d94:	2300      	movs	r3, #0
 8005d96:	07e7      	lsls	r7, r4, #31
 8005d98:	d504      	bpl.n	8005da4 <_strtod_l+0x5bc>
 8005d9a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005d9e:	f7fa fc2b 	bl	80005f8 <__aeabi_dmul>
 8005da2:	2301      	movs	r3, #1
 8005da4:	1064      	asrs	r4, r4, #1
 8005da6:	f106 0608 	add.w	r6, r6, #8
 8005daa:	d1f4      	bne.n	8005d96 <_strtod_l+0x5ae>
 8005dac:	b10b      	cbz	r3, 8005db2 <_strtod_l+0x5ca>
 8005dae:	4682      	mov	sl, r0
 8005db0:	468b      	mov	fp, r1
 8005db2:	9b08      	ldr	r3, [sp, #32]
 8005db4:	b1b3      	cbz	r3, 8005de4 <_strtod_l+0x5fc>
 8005db6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005dba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	4659      	mov	r1, fp
 8005dc2:	dd0f      	ble.n	8005de4 <_strtod_l+0x5fc>
 8005dc4:	2b1f      	cmp	r3, #31
 8005dc6:	dd58      	ble.n	8005e7a <_strtod_l+0x692>
 8005dc8:	2b34      	cmp	r3, #52	@ 0x34
 8005dca:	bfde      	ittt	le
 8005dcc:	f04f 33ff 	movle.w	r3, #4294967295
 8005dd0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8005dd4:	4093      	lslle	r3, r2
 8005dd6:	f04f 0a00 	mov.w	sl, #0
 8005dda:	bfcc      	ite	gt
 8005ddc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005de0:	ea03 0b01 	andle.w	fp, r3, r1
 8005de4:	2200      	movs	r2, #0
 8005de6:	2300      	movs	r3, #0
 8005de8:	4650      	mov	r0, sl
 8005dea:	4659      	mov	r1, fp
 8005dec:	f7fa fe6c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005df0:	2800      	cmp	r0, #0
 8005df2:	d1a7      	bne.n	8005d44 <_strtod_l+0x55c>
 8005df4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005dfa:	9805      	ldr	r0, [sp, #20]
 8005dfc:	462b      	mov	r3, r5
 8005dfe:	464a      	mov	r2, r9
 8005e00:	f7ff f8d6 	bl	8004fb0 <__s2b>
 8005e04:	900b      	str	r0, [sp, #44]	@ 0x2c
 8005e06:	2800      	cmp	r0, #0
 8005e08:	f43f af09 	beq.w	8005c1e <_strtod_l+0x436>
 8005e0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e10:	2a00      	cmp	r2, #0
 8005e12:	eba3 0308 	sub.w	r3, r3, r8
 8005e16:	bfa8      	it	ge
 8005e18:	2300      	movge	r3, #0
 8005e1a:	9312      	str	r3, [sp, #72]	@ 0x48
 8005e1c:	2400      	movs	r4, #0
 8005e1e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005e22:	9316      	str	r3, [sp, #88]	@ 0x58
 8005e24:	46a0      	mov	r8, r4
 8005e26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e28:	9805      	ldr	r0, [sp, #20]
 8005e2a:	6859      	ldr	r1, [r3, #4]
 8005e2c:	f7ff f818 	bl	8004e60 <_Balloc>
 8005e30:	4681      	mov	r9, r0
 8005e32:	2800      	cmp	r0, #0
 8005e34:	f43f aef7 	beq.w	8005c26 <_strtod_l+0x43e>
 8005e38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e3a:	691a      	ldr	r2, [r3, #16]
 8005e3c:	3202      	adds	r2, #2
 8005e3e:	f103 010c 	add.w	r1, r3, #12
 8005e42:	0092      	lsls	r2, r2, #2
 8005e44:	300c      	adds	r0, #12
 8005e46:	f000 fd61 	bl	800690c <memcpy>
 8005e4a:	ab1c      	add	r3, sp, #112	@ 0x70
 8005e4c:	9301      	str	r3, [sp, #4]
 8005e4e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	9805      	ldr	r0, [sp, #20]
 8005e54:	4652      	mov	r2, sl
 8005e56:	465b      	mov	r3, fp
 8005e58:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8005e5c:	f7ff fbd4 	bl	8005608 <__d2b>
 8005e60:	901a      	str	r0, [sp, #104]	@ 0x68
 8005e62:	2800      	cmp	r0, #0
 8005e64:	f43f aedf 	beq.w	8005c26 <_strtod_l+0x43e>
 8005e68:	9805      	ldr	r0, [sp, #20]
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	f7ff f936 	bl	80050dc <__i2b>
 8005e70:	4680      	mov	r8, r0
 8005e72:	b948      	cbnz	r0, 8005e88 <_strtod_l+0x6a0>
 8005e74:	f04f 0800 	mov.w	r8, #0
 8005e78:	e6d5      	b.n	8005c26 <_strtod_l+0x43e>
 8005e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e82:	ea03 0a0a 	and.w	sl, r3, sl
 8005e86:	e7ad      	b.n	8005de4 <_strtod_l+0x5fc>
 8005e88:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8005e8a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8005e8c:	2d00      	cmp	r5, #0
 8005e8e:	bfab      	itete	ge
 8005e90:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8005e92:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8005e94:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005e96:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8005e98:	bfac      	ite	ge
 8005e9a:	18ef      	addge	r7, r5, r3
 8005e9c:	1b5e      	sublt	r6, r3, r5
 8005e9e:	9b08      	ldr	r3, [sp, #32]
 8005ea0:	1aed      	subs	r5, r5, r3
 8005ea2:	4415      	add	r5, r2
 8005ea4:	4b33      	ldr	r3, [pc, #204]	@ (8005f74 <_strtod_l+0x78c>)
 8005ea6:	3d01      	subs	r5, #1
 8005ea8:	429d      	cmp	r5, r3
 8005eaa:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005eae:	da50      	bge.n	8005f52 <_strtod_l+0x76a>
 8005eb0:	1b5b      	subs	r3, r3, r5
 8005eb2:	2b1f      	cmp	r3, #31
 8005eb4:	eba2 0203 	sub.w	r2, r2, r3
 8005eb8:	f04f 0101 	mov.w	r1, #1
 8005ebc:	dc3d      	bgt.n	8005f3a <_strtod_l+0x752>
 8005ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	9310      	str	r3, [sp, #64]	@ 0x40
 8005ec8:	18bd      	adds	r5, r7, r2
 8005eca:	9b08      	ldr	r3, [sp, #32]
 8005ecc:	42af      	cmp	r7, r5
 8005ece:	4416      	add	r6, r2
 8005ed0:	441e      	add	r6, r3
 8005ed2:	463b      	mov	r3, r7
 8005ed4:	bfa8      	it	ge
 8005ed6:	462b      	movge	r3, r5
 8005ed8:	42b3      	cmp	r3, r6
 8005eda:	bfa8      	it	ge
 8005edc:	4633      	movge	r3, r6
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	bfc2      	ittt	gt
 8005ee2:	1aed      	subgt	r5, r5, r3
 8005ee4:	1af6      	subgt	r6, r6, r3
 8005ee6:	1aff      	subgt	r7, r7, r3
 8005ee8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	dd16      	ble.n	8005f1c <_strtod_l+0x734>
 8005eee:	4641      	mov	r1, r8
 8005ef0:	9805      	ldr	r0, [sp, #20]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	f7ff f9aa 	bl	800524c <__pow5mult>
 8005ef8:	4680      	mov	r8, r0
 8005efa:	2800      	cmp	r0, #0
 8005efc:	d0ba      	beq.n	8005e74 <_strtod_l+0x68c>
 8005efe:	4601      	mov	r1, r0
 8005f00:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005f02:	9805      	ldr	r0, [sp, #20]
 8005f04:	f7ff f900 	bl	8005108 <__multiply>
 8005f08:	900a      	str	r0, [sp, #40]	@ 0x28
 8005f0a:	2800      	cmp	r0, #0
 8005f0c:	f43f ae8b 	beq.w	8005c26 <_strtod_l+0x43e>
 8005f10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005f12:	9805      	ldr	r0, [sp, #20]
 8005f14:	f7fe ffe4 	bl	8004ee0 <_Bfree>
 8005f18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f1c:	2d00      	cmp	r5, #0
 8005f1e:	dc1d      	bgt.n	8005f5c <_strtod_l+0x774>
 8005f20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	dd28      	ble.n	8005f78 <_strtod_l+0x790>
 8005f26:	4649      	mov	r1, r9
 8005f28:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8005f2a:	9805      	ldr	r0, [sp, #20]
 8005f2c:	f7ff f98e 	bl	800524c <__pow5mult>
 8005f30:	4681      	mov	r9, r0
 8005f32:	bb08      	cbnz	r0, 8005f78 <_strtod_l+0x790>
 8005f34:	f04f 0900 	mov.w	r9, #0
 8005f38:	e675      	b.n	8005c26 <_strtod_l+0x43e>
 8005f3a:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8005f3e:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8005f42:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8005f46:	35e2      	adds	r5, #226	@ 0xe2
 8005f48:	fa01 f305 	lsl.w	r3, r1, r5
 8005f4c:	9310      	str	r3, [sp, #64]	@ 0x40
 8005f4e:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005f50:	e7ba      	b.n	8005ec8 <_strtod_l+0x6e0>
 8005f52:	2300      	movs	r3, #0
 8005f54:	9310      	str	r3, [sp, #64]	@ 0x40
 8005f56:	2301      	movs	r3, #1
 8005f58:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005f5a:	e7b5      	b.n	8005ec8 <_strtod_l+0x6e0>
 8005f5c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005f5e:	9805      	ldr	r0, [sp, #20]
 8005f60:	462a      	mov	r2, r5
 8005f62:	f7ff f9cd 	bl	8005300 <__lshift>
 8005f66:	901a      	str	r0, [sp, #104]	@ 0x68
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	d1d9      	bne.n	8005f20 <_strtod_l+0x738>
 8005f6c:	e65b      	b.n	8005c26 <_strtod_l+0x43e>
 8005f6e:	bf00      	nop
 8005f70:	08007d80 	.word	0x08007d80
 8005f74:	fffffc02 	.word	0xfffffc02
 8005f78:	2e00      	cmp	r6, #0
 8005f7a:	dd07      	ble.n	8005f8c <_strtod_l+0x7a4>
 8005f7c:	4649      	mov	r1, r9
 8005f7e:	9805      	ldr	r0, [sp, #20]
 8005f80:	4632      	mov	r2, r6
 8005f82:	f7ff f9bd 	bl	8005300 <__lshift>
 8005f86:	4681      	mov	r9, r0
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	d0d3      	beq.n	8005f34 <_strtod_l+0x74c>
 8005f8c:	2f00      	cmp	r7, #0
 8005f8e:	dd08      	ble.n	8005fa2 <_strtod_l+0x7ba>
 8005f90:	4641      	mov	r1, r8
 8005f92:	9805      	ldr	r0, [sp, #20]
 8005f94:	463a      	mov	r2, r7
 8005f96:	f7ff f9b3 	bl	8005300 <__lshift>
 8005f9a:	4680      	mov	r8, r0
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	f43f ae42 	beq.w	8005c26 <_strtod_l+0x43e>
 8005fa2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005fa4:	9805      	ldr	r0, [sp, #20]
 8005fa6:	464a      	mov	r2, r9
 8005fa8:	f7ff fa32 	bl	8005410 <__mdiff>
 8005fac:	4604      	mov	r4, r0
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	f43f ae39 	beq.w	8005c26 <_strtod_l+0x43e>
 8005fb4:	68c3      	ldr	r3, [r0, #12]
 8005fb6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005fb8:	2300      	movs	r3, #0
 8005fba:	60c3      	str	r3, [r0, #12]
 8005fbc:	4641      	mov	r1, r8
 8005fbe:	f7ff fa0b 	bl	80053d8 <__mcmp>
 8005fc2:	2800      	cmp	r0, #0
 8005fc4:	da3d      	bge.n	8006042 <_strtod_l+0x85a>
 8005fc6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005fc8:	ea53 030a 	orrs.w	r3, r3, sl
 8005fcc:	d163      	bne.n	8006096 <_strtod_l+0x8ae>
 8005fce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d15f      	bne.n	8006096 <_strtod_l+0x8ae>
 8005fd6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005fda:	0d1b      	lsrs	r3, r3, #20
 8005fdc:	051b      	lsls	r3, r3, #20
 8005fde:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005fe2:	d958      	bls.n	8006096 <_strtod_l+0x8ae>
 8005fe4:	6963      	ldr	r3, [r4, #20]
 8005fe6:	b913      	cbnz	r3, 8005fee <_strtod_l+0x806>
 8005fe8:	6923      	ldr	r3, [r4, #16]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	dd53      	ble.n	8006096 <_strtod_l+0x8ae>
 8005fee:	4621      	mov	r1, r4
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	9805      	ldr	r0, [sp, #20]
 8005ff4:	f7ff f984 	bl	8005300 <__lshift>
 8005ff8:	4641      	mov	r1, r8
 8005ffa:	4604      	mov	r4, r0
 8005ffc:	f7ff f9ec 	bl	80053d8 <__mcmp>
 8006000:	2800      	cmp	r0, #0
 8006002:	dd48      	ble.n	8006096 <_strtod_l+0x8ae>
 8006004:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006008:	9a08      	ldr	r2, [sp, #32]
 800600a:	0d1b      	lsrs	r3, r3, #20
 800600c:	051b      	lsls	r3, r3, #20
 800600e:	2a00      	cmp	r2, #0
 8006010:	d062      	beq.n	80060d8 <_strtod_l+0x8f0>
 8006012:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006016:	d85f      	bhi.n	80060d8 <_strtod_l+0x8f0>
 8006018:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800601c:	f67f ae96 	bls.w	8005d4c <_strtod_l+0x564>
 8006020:	4ba3      	ldr	r3, [pc, #652]	@ (80062b0 <_strtod_l+0xac8>)
 8006022:	4650      	mov	r0, sl
 8006024:	4659      	mov	r1, fp
 8006026:	2200      	movs	r2, #0
 8006028:	f7fa fae6 	bl	80005f8 <__aeabi_dmul>
 800602c:	4ba1      	ldr	r3, [pc, #644]	@ (80062b4 <_strtod_l+0xacc>)
 800602e:	400b      	ands	r3, r1
 8006030:	4682      	mov	sl, r0
 8006032:	468b      	mov	fp, r1
 8006034:	2b00      	cmp	r3, #0
 8006036:	f47f ae01 	bne.w	8005c3c <_strtod_l+0x454>
 800603a:	9a05      	ldr	r2, [sp, #20]
 800603c:	2322      	movs	r3, #34	@ 0x22
 800603e:	6013      	str	r3, [r2, #0]
 8006040:	e5fc      	b.n	8005c3c <_strtod_l+0x454>
 8006042:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006046:	d165      	bne.n	8006114 <_strtod_l+0x92c>
 8006048:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800604a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800604e:	b35a      	cbz	r2, 80060a8 <_strtod_l+0x8c0>
 8006050:	4a99      	ldr	r2, [pc, #612]	@ (80062b8 <_strtod_l+0xad0>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d12b      	bne.n	80060ae <_strtod_l+0x8c6>
 8006056:	9b08      	ldr	r3, [sp, #32]
 8006058:	4651      	mov	r1, sl
 800605a:	b303      	cbz	r3, 800609e <_strtod_l+0x8b6>
 800605c:	4b95      	ldr	r3, [pc, #596]	@ (80062b4 <_strtod_l+0xacc>)
 800605e:	465a      	mov	r2, fp
 8006060:	4013      	ands	r3, r2
 8006062:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006066:	f04f 32ff 	mov.w	r2, #4294967295
 800606a:	d81b      	bhi.n	80060a4 <_strtod_l+0x8bc>
 800606c:	0d1b      	lsrs	r3, r3, #20
 800606e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006072:	fa02 f303 	lsl.w	r3, r2, r3
 8006076:	4299      	cmp	r1, r3
 8006078:	d119      	bne.n	80060ae <_strtod_l+0x8c6>
 800607a:	4b90      	ldr	r3, [pc, #576]	@ (80062bc <_strtod_l+0xad4>)
 800607c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800607e:	429a      	cmp	r2, r3
 8006080:	d102      	bne.n	8006088 <_strtod_l+0x8a0>
 8006082:	3101      	adds	r1, #1
 8006084:	f43f adcf 	beq.w	8005c26 <_strtod_l+0x43e>
 8006088:	4b8a      	ldr	r3, [pc, #552]	@ (80062b4 <_strtod_l+0xacc>)
 800608a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800608c:	401a      	ands	r2, r3
 800608e:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006092:	f04f 0a00 	mov.w	sl, #0
 8006096:	9b08      	ldr	r3, [sp, #32]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1c1      	bne.n	8006020 <_strtod_l+0x838>
 800609c:	e5ce      	b.n	8005c3c <_strtod_l+0x454>
 800609e:	f04f 33ff 	mov.w	r3, #4294967295
 80060a2:	e7e8      	b.n	8006076 <_strtod_l+0x88e>
 80060a4:	4613      	mov	r3, r2
 80060a6:	e7e6      	b.n	8006076 <_strtod_l+0x88e>
 80060a8:	ea53 030a 	orrs.w	r3, r3, sl
 80060ac:	d0aa      	beq.n	8006004 <_strtod_l+0x81c>
 80060ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80060b0:	b1db      	cbz	r3, 80060ea <_strtod_l+0x902>
 80060b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80060b4:	4213      	tst	r3, r2
 80060b6:	d0ee      	beq.n	8006096 <_strtod_l+0x8ae>
 80060b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80060ba:	9a08      	ldr	r2, [sp, #32]
 80060bc:	4650      	mov	r0, sl
 80060be:	4659      	mov	r1, fp
 80060c0:	b1bb      	cbz	r3, 80060f2 <_strtod_l+0x90a>
 80060c2:	f7ff fb6d 	bl	80057a0 <sulp>
 80060c6:	4602      	mov	r2, r0
 80060c8:	460b      	mov	r3, r1
 80060ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80060ce:	f7fa f8dd 	bl	800028c <__adddf3>
 80060d2:	4682      	mov	sl, r0
 80060d4:	468b      	mov	fp, r1
 80060d6:	e7de      	b.n	8006096 <_strtod_l+0x8ae>
 80060d8:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80060dc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80060e0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80060e4:	f04f 3aff 	mov.w	sl, #4294967295
 80060e8:	e7d5      	b.n	8006096 <_strtod_l+0x8ae>
 80060ea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80060ec:	ea13 0f0a 	tst.w	r3, sl
 80060f0:	e7e1      	b.n	80060b6 <_strtod_l+0x8ce>
 80060f2:	f7ff fb55 	bl	80057a0 <sulp>
 80060f6:	4602      	mov	r2, r0
 80060f8:	460b      	mov	r3, r1
 80060fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80060fe:	f7fa f8c3 	bl	8000288 <__aeabi_dsub>
 8006102:	2200      	movs	r2, #0
 8006104:	2300      	movs	r3, #0
 8006106:	4682      	mov	sl, r0
 8006108:	468b      	mov	fp, r1
 800610a:	f7fa fcdd 	bl	8000ac8 <__aeabi_dcmpeq>
 800610e:	2800      	cmp	r0, #0
 8006110:	d0c1      	beq.n	8006096 <_strtod_l+0x8ae>
 8006112:	e61b      	b.n	8005d4c <_strtod_l+0x564>
 8006114:	4641      	mov	r1, r8
 8006116:	4620      	mov	r0, r4
 8006118:	f7ff face 	bl	80056b8 <__ratio>
 800611c:	2200      	movs	r2, #0
 800611e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006122:	4606      	mov	r6, r0
 8006124:	460f      	mov	r7, r1
 8006126:	f7fa fce3 	bl	8000af0 <__aeabi_dcmple>
 800612a:	2800      	cmp	r0, #0
 800612c:	d06d      	beq.n	800620a <_strtod_l+0xa22>
 800612e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006130:	2b00      	cmp	r3, #0
 8006132:	d178      	bne.n	8006226 <_strtod_l+0xa3e>
 8006134:	f1ba 0f00 	cmp.w	sl, #0
 8006138:	d156      	bne.n	80061e8 <_strtod_l+0xa00>
 800613a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800613c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006140:	2b00      	cmp	r3, #0
 8006142:	d158      	bne.n	80061f6 <_strtod_l+0xa0e>
 8006144:	4b5e      	ldr	r3, [pc, #376]	@ (80062c0 <_strtod_l+0xad8>)
 8006146:	2200      	movs	r2, #0
 8006148:	4630      	mov	r0, r6
 800614a:	4639      	mov	r1, r7
 800614c:	f7fa fcc6 	bl	8000adc <__aeabi_dcmplt>
 8006150:	2800      	cmp	r0, #0
 8006152:	d157      	bne.n	8006204 <_strtod_l+0xa1c>
 8006154:	4630      	mov	r0, r6
 8006156:	4639      	mov	r1, r7
 8006158:	4b5a      	ldr	r3, [pc, #360]	@ (80062c4 <_strtod_l+0xadc>)
 800615a:	2200      	movs	r2, #0
 800615c:	f7fa fa4c 	bl	80005f8 <__aeabi_dmul>
 8006160:	4606      	mov	r6, r0
 8006162:	460f      	mov	r7, r1
 8006164:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006168:	9606      	str	r6, [sp, #24]
 800616a:	9307      	str	r3, [sp, #28]
 800616c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006170:	4d50      	ldr	r5, [pc, #320]	@ (80062b4 <_strtod_l+0xacc>)
 8006172:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006176:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006178:	401d      	ands	r5, r3
 800617a:	4b53      	ldr	r3, [pc, #332]	@ (80062c8 <_strtod_l+0xae0>)
 800617c:	429d      	cmp	r5, r3
 800617e:	f040 80a9 	bne.w	80062d4 <_strtod_l+0xaec>
 8006182:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006184:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006188:	4650      	mov	r0, sl
 800618a:	4659      	mov	r1, fp
 800618c:	f7ff f9d2 	bl	8005534 <__ulp>
 8006190:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006194:	f7fa fa30 	bl	80005f8 <__aeabi_dmul>
 8006198:	4652      	mov	r2, sl
 800619a:	465b      	mov	r3, fp
 800619c:	f7fa f876 	bl	800028c <__adddf3>
 80061a0:	460b      	mov	r3, r1
 80061a2:	4944      	ldr	r1, [pc, #272]	@ (80062b4 <_strtod_l+0xacc>)
 80061a4:	4a49      	ldr	r2, [pc, #292]	@ (80062cc <_strtod_l+0xae4>)
 80061a6:	4019      	ands	r1, r3
 80061a8:	4291      	cmp	r1, r2
 80061aa:	4682      	mov	sl, r0
 80061ac:	d942      	bls.n	8006234 <_strtod_l+0xa4c>
 80061ae:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80061b0:	4b42      	ldr	r3, [pc, #264]	@ (80062bc <_strtod_l+0xad4>)
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d103      	bne.n	80061be <_strtod_l+0x9d6>
 80061b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80061b8:	3301      	adds	r3, #1
 80061ba:	f43f ad34 	beq.w	8005c26 <_strtod_l+0x43e>
 80061be:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 80062bc <_strtod_l+0xad4>
 80061c2:	f04f 3aff 	mov.w	sl, #4294967295
 80061c6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80061c8:	9805      	ldr	r0, [sp, #20]
 80061ca:	f7fe fe89 	bl	8004ee0 <_Bfree>
 80061ce:	9805      	ldr	r0, [sp, #20]
 80061d0:	4649      	mov	r1, r9
 80061d2:	f7fe fe85 	bl	8004ee0 <_Bfree>
 80061d6:	9805      	ldr	r0, [sp, #20]
 80061d8:	4641      	mov	r1, r8
 80061da:	f7fe fe81 	bl	8004ee0 <_Bfree>
 80061de:	9805      	ldr	r0, [sp, #20]
 80061e0:	4621      	mov	r1, r4
 80061e2:	f7fe fe7d 	bl	8004ee0 <_Bfree>
 80061e6:	e61e      	b.n	8005e26 <_strtod_l+0x63e>
 80061e8:	f1ba 0f01 	cmp.w	sl, #1
 80061ec:	d103      	bne.n	80061f6 <_strtod_l+0xa0e>
 80061ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f43f adab 	beq.w	8005d4c <_strtod_l+0x564>
 80061f6:	4b36      	ldr	r3, [pc, #216]	@ (80062d0 <_strtod_l+0xae8>)
 80061f8:	4f31      	ldr	r7, [pc, #196]	@ (80062c0 <_strtod_l+0xad8>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006200:	2600      	movs	r6, #0
 8006202:	e7b3      	b.n	800616c <_strtod_l+0x984>
 8006204:	4f2f      	ldr	r7, [pc, #188]	@ (80062c4 <_strtod_l+0xadc>)
 8006206:	2600      	movs	r6, #0
 8006208:	e7ac      	b.n	8006164 <_strtod_l+0x97c>
 800620a:	4b2e      	ldr	r3, [pc, #184]	@ (80062c4 <_strtod_l+0xadc>)
 800620c:	4630      	mov	r0, r6
 800620e:	4639      	mov	r1, r7
 8006210:	2200      	movs	r2, #0
 8006212:	f7fa f9f1 	bl	80005f8 <__aeabi_dmul>
 8006216:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006218:	4606      	mov	r6, r0
 800621a:	460f      	mov	r7, r1
 800621c:	2b00      	cmp	r3, #0
 800621e:	d0a1      	beq.n	8006164 <_strtod_l+0x97c>
 8006220:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006224:	e7a2      	b.n	800616c <_strtod_l+0x984>
 8006226:	4b26      	ldr	r3, [pc, #152]	@ (80062c0 <_strtod_l+0xad8>)
 8006228:	2200      	movs	r2, #0
 800622a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800622e:	4616      	mov	r6, r2
 8006230:	461f      	mov	r7, r3
 8006232:	e79b      	b.n	800616c <_strtod_l+0x984>
 8006234:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006238:	9b08      	ldr	r3, [sp, #32]
 800623a:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1c1      	bne.n	80061c6 <_strtod_l+0x9de>
 8006242:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006246:	0d1b      	lsrs	r3, r3, #20
 8006248:	051b      	lsls	r3, r3, #20
 800624a:	429d      	cmp	r5, r3
 800624c:	d1bb      	bne.n	80061c6 <_strtod_l+0x9de>
 800624e:	4630      	mov	r0, r6
 8006250:	4639      	mov	r1, r7
 8006252:	f7fb f803 	bl	800125c <__aeabi_d2lz>
 8006256:	f7fa f9a1 	bl	800059c <__aeabi_l2d>
 800625a:	4602      	mov	r2, r0
 800625c:	460b      	mov	r3, r1
 800625e:	4630      	mov	r0, r6
 8006260:	4639      	mov	r1, r7
 8006262:	f7fa f811 	bl	8000288 <__aeabi_dsub>
 8006266:	460b      	mov	r3, r1
 8006268:	4602      	mov	r2, r0
 800626a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800626e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006272:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006274:	ea46 060a 	orr.w	r6, r6, sl
 8006278:	431e      	orrs	r6, r3
 800627a:	d068      	beq.n	800634e <_strtod_l+0xb66>
 800627c:	a308      	add	r3, pc, #32	@ (adr r3, 80062a0 <_strtod_l+0xab8>)
 800627e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006282:	f7fa fc2b 	bl	8000adc <__aeabi_dcmplt>
 8006286:	2800      	cmp	r0, #0
 8006288:	f47f acd8 	bne.w	8005c3c <_strtod_l+0x454>
 800628c:	a306      	add	r3, pc, #24	@ (adr r3, 80062a8 <_strtod_l+0xac0>)
 800628e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006292:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006296:	f7fa fc3f 	bl	8000b18 <__aeabi_dcmpgt>
 800629a:	2800      	cmp	r0, #0
 800629c:	d093      	beq.n	80061c6 <_strtod_l+0x9de>
 800629e:	e4cd      	b.n	8005c3c <_strtod_l+0x454>
 80062a0:	94a03595 	.word	0x94a03595
 80062a4:	3fdfffff 	.word	0x3fdfffff
 80062a8:	35afe535 	.word	0x35afe535
 80062ac:	3fe00000 	.word	0x3fe00000
 80062b0:	39500000 	.word	0x39500000
 80062b4:	7ff00000 	.word	0x7ff00000
 80062b8:	000fffff 	.word	0x000fffff
 80062bc:	7fefffff 	.word	0x7fefffff
 80062c0:	3ff00000 	.word	0x3ff00000
 80062c4:	3fe00000 	.word	0x3fe00000
 80062c8:	7fe00000 	.word	0x7fe00000
 80062cc:	7c9fffff 	.word	0x7c9fffff
 80062d0:	bff00000 	.word	0xbff00000
 80062d4:	9b08      	ldr	r3, [sp, #32]
 80062d6:	b323      	cbz	r3, 8006322 <_strtod_l+0xb3a>
 80062d8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80062dc:	d821      	bhi.n	8006322 <_strtod_l+0xb3a>
 80062de:	a328      	add	r3, pc, #160	@ (adr r3, 8006380 <_strtod_l+0xb98>)
 80062e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e4:	4630      	mov	r0, r6
 80062e6:	4639      	mov	r1, r7
 80062e8:	f7fa fc02 	bl	8000af0 <__aeabi_dcmple>
 80062ec:	b1a0      	cbz	r0, 8006318 <_strtod_l+0xb30>
 80062ee:	4639      	mov	r1, r7
 80062f0:	4630      	mov	r0, r6
 80062f2:	f7fa fc59 	bl	8000ba8 <__aeabi_d2uiz>
 80062f6:	2801      	cmp	r0, #1
 80062f8:	bf38      	it	cc
 80062fa:	2001      	movcc	r0, #1
 80062fc:	f7fa f902 	bl	8000504 <__aeabi_ui2d>
 8006300:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006302:	4606      	mov	r6, r0
 8006304:	460f      	mov	r7, r1
 8006306:	b9fb      	cbnz	r3, 8006348 <_strtod_l+0xb60>
 8006308:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800630c:	9014      	str	r0, [sp, #80]	@ 0x50
 800630e:	9315      	str	r3, [sp, #84]	@ 0x54
 8006310:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006314:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006318:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800631a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800631e:	1b5b      	subs	r3, r3, r5
 8006320:	9311      	str	r3, [sp, #68]	@ 0x44
 8006322:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006326:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800632a:	f7ff f903 	bl	8005534 <__ulp>
 800632e:	4602      	mov	r2, r0
 8006330:	460b      	mov	r3, r1
 8006332:	4650      	mov	r0, sl
 8006334:	4659      	mov	r1, fp
 8006336:	f7fa f95f 	bl	80005f8 <__aeabi_dmul>
 800633a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800633e:	f7f9 ffa5 	bl	800028c <__adddf3>
 8006342:	4682      	mov	sl, r0
 8006344:	468b      	mov	fp, r1
 8006346:	e777      	b.n	8006238 <_strtod_l+0xa50>
 8006348:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800634c:	e7e0      	b.n	8006310 <_strtod_l+0xb28>
 800634e:	a30e      	add	r3, pc, #56	@ (adr r3, 8006388 <_strtod_l+0xba0>)
 8006350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006354:	f7fa fbc2 	bl	8000adc <__aeabi_dcmplt>
 8006358:	e79f      	b.n	800629a <_strtod_l+0xab2>
 800635a:	2300      	movs	r3, #0
 800635c:	930e      	str	r3, [sp, #56]	@ 0x38
 800635e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006360:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006362:	6013      	str	r3, [r2, #0]
 8006364:	f7ff ba7d 	b.w	8005862 <_strtod_l+0x7a>
 8006368:	2a65      	cmp	r2, #101	@ 0x65
 800636a:	f43f ab76 	beq.w	8005a5a <_strtod_l+0x272>
 800636e:	2a45      	cmp	r2, #69	@ 0x45
 8006370:	f43f ab73 	beq.w	8005a5a <_strtod_l+0x272>
 8006374:	2301      	movs	r3, #1
 8006376:	f7ff bbae 	b.w	8005ad6 <_strtod_l+0x2ee>
 800637a:	bf00      	nop
 800637c:	f3af 8000 	nop.w
 8006380:	ffc00000 	.word	0xffc00000
 8006384:	41dfffff 	.word	0x41dfffff
 8006388:	94a03595 	.word	0x94a03595
 800638c:	3fcfffff 	.word	0x3fcfffff

08006390 <_strtod_r>:
 8006390:	4b01      	ldr	r3, [pc, #4]	@ (8006398 <_strtod_r+0x8>)
 8006392:	f7ff ba29 	b.w	80057e8 <_strtod_l>
 8006396:	bf00      	nop
 8006398:	20000074 	.word	0x20000074

0800639c <_strtol_l.isra.0>:
 800639c:	2b24      	cmp	r3, #36	@ 0x24
 800639e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063a2:	4686      	mov	lr, r0
 80063a4:	4690      	mov	r8, r2
 80063a6:	d801      	bhi.n	80063ac <_strtol_l.isra.0+0x10>
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d106      	bne.n	80063ba <_strtol_l.isra.0+0x1e>
 80063ac:	f7fd fdce 	bl	8003f4c <__errno>
 80063b0:	2316      	movs	r3, #22
 80063b2:	6003      	str	r3, [r0, #0]
 80063b4:	2000      	movs	r0, #0
 80063b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063ba:	4834      	ldr	r0, [pc, #208]	@ (800648c <_strtol_l.isra.0+0xf0>)
 80063bc:	460d      	mov	r5, r1
 80063be:	462a      	mov	r2, r5
 80063c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80063c4:	5d06      	ldrb	r6, [r0, r4]
 80063c6:	f016 0608 	ands.w	r6, r6, #8
 80063ca:	d1f8      	bne.n	80063be <_strtol_l.isra.0+0x22>
 80063cc:	2c2d      	cmp	r4, #45	@ 0x2d
 80063ce:	d110      	bne.n	80063f2 <_strtol_l.isra.0+0x56>
 80063d0:	782c      	ldrb	r4, [r5, #0]
 80063d2:	2601      	movs	r6, #1
 80063d4:	1c95      	adds	r5, r2, #2
 80063d6:	f033 0210 	bics.w	r2, r3, #16
 80063da:	d115      	bne.n	8006408 <_strtol_l.isra.0+0x6c>
 80063dc:	2c30      	cmp	r4, #48	@ 0x30
 80063de:	d10d      	bne.n	80063fc <_strtol_l.isra.0+0x60>
 80063e0:	782a      	ldrb	r2, [r5, #0]
 80063e2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80063e6:	2a58      	cmp	r2, #88	@ 0x58
 80063e8:	d108      	bne.n	80063fc <_strtol_l.isra.0+0x60>
 80063ea:	786c      	ldrb	r4, [r5, #1]
 80063ec:	3502      	adds	r5, #2
 80063ee:	2310      	movs	r3, #16
 80063f0:	e00a      	b.n	8006408 <_strtol_l.isra.0+0x6c>
 80063f2:	2c2b      	cmp	r4, #43	@ 0x2b
 80063f4:	bf04      	itt	eq
 80063f6:	782c      	ldrbeq	r4, [r5, #0]
 80063f8:	1c95      	addeq	r5, r2, #2
 80063fa:	e7ec      	b.n	80063d6 <_strtol_l.isra.0+0x3a>
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1f6      	bne.n	80063ee <_strtol_l.isra.0+0x52>
 8006400:	2c30      	cmp	r4, #48	@ 0x30
 8006402:	bf14      	ite	ne
 8006404:	230a      	movne	r3, #10
 8006406:	2308      	moveq	r3, #8
 8006408:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800640c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006410:	2200      	movs	r2, #0
 8006412:	fbbc f9f3 	udiv	r9, ip, r3
 8006416:	4610      	mov	r0, r2
 8006418:	fb03 ca19 	mls	sl, r3, r9, ip
 800641c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006420:	2f09      	cmp	r7, #9
 8006422:	d80f      	bhi.n	8006444 <_strtol_l.isra.0+0xa8>
 8006424:	463c      	mov	r4, r7
 8006426:	42a3      	cmp	r3, r4
 8006428:	dd1b      	ble.n	8006462 <_strtol_l.isra.0+0xc6>
 800642a:	1c57      	adds	r7, r2, #1
 800642c:	d007      	beq.n	800643e <_strtol_l.isra.0+0xa2>
 800642e:	4581      	cmp	r9, r0
 8006430:	d314      	bcc.n	800645c <_strtol_l.isra.0+0xc0>
 8006432:	d101      	bne.n	8006438 <_strtol_l.isra.0+0x9c>
 8006434:	45a2      	cmp	sl, r4
 8006436:	db11      	blt.n	800645c <_strtol_l.isra.0+0xc0>
 8006438:	fb00 4003 	mla	r0, r0, r3, r4
 800643c:	2201      	movs	r2, #1
 800643e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006442:	e7eb      	b.n	800641c <_strtol_l.isra.0+0x80>
 8006444:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006448:	2f19      	cmp	r7, #25
 800644a:	d801      	bhi.n	8006450 <_strtol_l.isra.0+0xb4>
 800644c:	3c37      	subs	r4, #55	@ 0x37
 800644e:	e7ea      	b.n	8006426 <_strtol_l.isra.0+0x8a>
 8006450:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006454:	2f19      	cmp	r7, #25
 8006456:	d804      	bhi.n	8006462 <_strtol_l.isra.0+0xc6>
 8006458:	3c57      	subs	r4, #87	@ 0x57
 800645a:	e7e4      	b.n	8006426 <_strtol_l.isra.0+0x8a>
 800645c:	f04f 32ff 	mov.w	r2, #4294967295
 8006460:	e7ed      	b.n	800643e <_strtol_l.isra.0+0xa2>
 8006462:	1c53      	adds	r3, r2, #1
 8006464:	d108      	bne.n	8006478 <_strtol_l.isra.0+0xdc>
 8006466:	2322      	movs	r3, #34	@ 0x22
 8006468:	f8ce 3000 	str.w	r3, [lr]
 800646c:	4660      	mov	r0, ip
 800646e:	f1b8 0f00 	cmp.w	r8, #0
 8006472:	d0a0      	beq.n	80063b6 <_strtol_l.isra.0+0x1a>
 8006474:	1e69      	subs	r1, r5, #1
 8006476:	e006      	b.n	8006486 <_strtol_l.isra.0+0xea>
 8006478:	b106      	cbz	r6, 800647c <_strtol_l.isra.0+0xe0>
 800647a:	4240      	negs	r0, r0
 800647c:	f1b8 0f00 	cmp.w	r8, #0
 8006480:	d099      	beq.n	80063b6 <_strtol_l.isra.0+0x1a>
 8006482:	2a00      	cmp	r2, #0
 8006484:	d1f6      	bne.n	8006474 <_strtol_l.isra.0+0xd8>
 8006486:	f8c8 1000 	str.w	r1, [r8]
 800648a:	e794      	b.n	80063b6 <_strtol_l.isra.0+0x1a>
 800648c:	08007da9 	.word	0x08007da9

08006490 <_strtol_r>:
 8006490:	f7ff bf84 	b.w	800639c <_strtol_l.isra.0>

08006494 <__ssputs_r>:
 8006494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006498:	688e      	ldr	r6, [r1, #8]
 800649a:	461f      	mov	r7, r3
 800649c:	42be      	cmp	r6, r7
 800649e:	680b      	ldr	r3, [r1, #0]
 80064a0:	4682      	mov	sl, r0
 80064a2:	460c      	mov	r4, r1
 80064a4:	4690      	mov	r8, r2
 80064a6:	d82d      	bhi.n	8006504 <__ssputs_r+0x70>
 80064a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80064ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80064b0:	d026      	beq.n	8006500 <__ssputs_r+0x6c>
 80064b2:	6965      	ldr	r5, [r4, #20]
 80064b4:	6909      	ldr	r1, [r1, #16]
 80064b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064ba:	eba3 0901 	sub.w	r9, r3, r1
 80064be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064c2:	1c7b      	adds	r3, r7, #1
 80064c4:	444b      	add	r3, r9
 80064c6:	106d      	asrs	r5, r5, #1
 80064c8:	429d      	cmp	r5, r3
 80064ca:	bf38      	it	cc
 80064cc:	461d      	movcc	r5, r3
 80064ce:	0553      	lsls	r3, r2, #21
 80064d0:	d527      	bpl.n	8006522 <__ssputs_r+0x8e>
 80064d2:	4629      	mov	r1, r5
 80064d4:	f7fe fc38 	bl	8004d48 <_malloc_r>
 80064d8:	4606      	mov	r6, r0
 80064da:	b360      	cbz	r0, 8006536 <__ssputs_r+0xa2>
 80064dc:	6921      	ldr	r1, [r4, #16]
 80064de:	464a      	mov	r2, r9
 80064e0:	f000 fa14 	bl	800690c <memcpy>
 80064e4:	89a3      	ldrh	r3, [r4, #12]
 80064e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80064ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064ee:	81a3      	strh	r3, [r4, #12]
 80064f0:	6126      	str	r6, [r4, #16]
 80064f2:	6165      	str	r5, [r4, #20]
 80064f4:	444e      	add	r6, r9
 80064f6:	eba5 0509 	sub.w	r5, r5, r9
 80064fa:	6026      	str	r6, [r4, #0]
 80064fc:	60a5      	str	r5, [r4, #8]
 80064fe:	463e      	mov	r6, r7
 8006500:	42be      	cmp	r6, r7
 8006502:	d900      	bls.n	8006506 <__ssputs_r+0x72>
 8006504:	463e      	mov	r6, r7
 8006506:	6820      	ldr	r0, [r4, #0]
 8006508:	4632      	mov	r2, r6
 800650a:	4641      	mov	r1, r8
 800650c:	f000 f9c2 	bl	8006894 <memmove>
 8006510:	68a3      	ldr	r3, [r4, #8]
 8006512:	1b9b      	subs	r3, r3, r6
 8006514:	60a3      	str	r3, [r4, #8]
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	4433      	add	r3, r6
 800651a:	6023      	str	r3, [r4, #0]
 800651c:	2000      	movs	r0, #0
 800651e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006522:	462a      	mov	r2, r5
 8006524:	f000 fd83 	bl	800702e <_realloc_r>
 8006528:	4606      	mov	r6, r0
 800652a:	2800      	cmp	r0, #0
 800652c:	d1e0      	bne.n	80064f0 <__ssputs_r+0x5c>
 800652e:	6921      	ldr	r1, [r4, #16]
 8006530:	4650      	mov	r0, sl
 8006532:	f7fe fb95 	bl	8004c60 <_free_r>
 8006536:	230c      	movs	r3, #12
 8006538:	f8ca 3000 	str.w	r3, [sl]
 800653c:	89a3      	ldrh	r3, [r4, #12]
 800653e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006542:	81a3      	strh	r3, [r4, #12]
 8006544:	f04f 30ff 	mov.w	r0, #4294967295
 8006548:	e7e9      	b.n	800651e <__ssputs_r+0x8a>
	...

0800654c <_svfiprintf_r>:
 800654c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006550:	4698      	mov	r8, r3
 8006552:	898b      	ldrh	r3, [r1, #12]
 8006554:	061b      	lsls	r3, r3, #24
 8006556:	b09d      	sub	sp, #116	@ 0x74
 8006558:	4607      	mov	r7, r0
 800655a:	460d      	mov	r5, r1
 800655c:	4614      	mov	r4, r2
 800655e:	d510      	bpl.n	8006582 <_svfiprintf_r+0x36>
 8006560:	690b      	ldr	r3, [r1, #16]
 8006562:	b973      	cbnz	r3, 8006582 <_svfiprintf_r+0x36>
 8006564:	2140      	movs	r1, #64	@ 0x40
 8006566:	f7fe fbef 	bl	8004d48 <_malloc_r>
 800656a:	6028      	str	r0, [r5, #0]
 800656c:	6128      	str	r0, [r5, #16]
 800656e:	b930      	cbnz	r0, 800657e <_svfiprintf_r+0x32>
 8006570:	230c      	movs	r3, #12
 8006572:	603b      	str	r3, [r7, #0]
 8006574:	f04f 30ff 	mov.w	r0, #4294967295
 8006578:	b01d      	add	sp, #116	@ 0x74
 800657a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800657e:	2340      	movs	r3, #64	@ 0x40
 8006580:	616b      	str	r3, [r5, #20]
 8006582:	2300      	movs	r3, #0
 8006584:	9309      	str	r3, [sp, #36]	@ 0x24
 8006586:	2320      	movs	r3, #32
 8006588:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800658c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006590:	2330      	movs	r3, #48	@ 0x30
 8006592:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006730 <_svfiprintf_r+0x1e4>
 8006596:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800659a:	f04f 0901 	mov.w	r9, #1
 800659e:	4623      	mov	r3, r4
 80065a0:	469a      	mov	sl, r3
 80065a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065a6:	b10a      	cbz	r2, 80065ac <_svfiprintf_r+0x60>
 80065a8:	2a25      	cmp	r2, #37	@ 0x25
 80065aa:	d1f9      	bne.n	80065a0 <_svfiprintf_r+0x54>
 80065ac:	ebba 0b04 	subs.w	fp, sl, r4
 80065b0:	d00b      	beq.n	80065ca <_svfiprintf_r+0x7e>
 80065b2:	465b      	mov	r3, fp
 80065b4:	4622      	mov	r2, r4
 80065b6:	4629      	mov	r1, r5
 80065b8:	4638      	mov	r0, r7
 80065ba:	f7ff ff6b 	bl	8006494 <__ssputs_r>
 80065be:	3001      	adds	r0, #1
 80065c0:	f000 80a7 	beq.w	8006712 <_svfiprintf_r+0x1c6>
 80065c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065c6:	445a      	add	r2, fp
 80065c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80065ca:	f89a 3000 	ldrb.w	r3, [sl]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f000 809f 	beq.w	8006712 <_svfiprintf_r+0x1c6>
 80065d4:	2300      	movs	r3, #0
 80065d6:	f04f 32ff 	mov.w	r2, #4294967295
 80065da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065de:	f10a 0a01 	add.w	sl, sl, #1
 80065e2:	9304      	str	r3, [sp, #16]
 80065e4:	9307      	str	r3, [sp, #28]
 80065e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80065ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80065ec:	4654      	mov	r4, sl
 80065ee:	2205      	movs	r2, #5
 80065f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065f4:	484e      	ldr	r0, [pc, #312]	@ (8006730 <_svfiprintf_r+0x1e4>)
 80065f6:	f7f9 fdeb 	bl	80001d0 <memchr>
 80065fa:	9a04      	ldr	r2, [sp, #16]
 80065fc:	b9d8      	cbnz	r0, 8006636 <_svfiprintf_r+0xea>
 80065fe:	06d0      	lsls	r0, r2, #27
 8006600:	bf44      	itt	mi
 8006602:	2320      	movmi	r3, #32
 8006604:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006608:	0711      	lsls	r1, r2, #28
 800660a:	bf44      	itt	mi
 800660c:	232b      	movmi	r3, #43	@ 0x2b
 800660e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006612:	f89a 3000 	ldrb.w	r3, [sl]
 8006616:	2b2a      	cmp	r3, #42	@ 0x2a
 8006618:	d015      	beq.n	8006646 <_svfiprintf_r+0xfa>
 800661a:	9a07      	ldr	r2, [sp, #28]
 800661c:	4654      	mov	r4, sl
 800661e:	2000      	movs	r0, #0
 8006620:	f04f 0c0a 	mov.w	ip, #10
 8006624:	4621      	mov	r1, r4
 8006626:	f811 3b01 	ldrb.w	r3, [r1], #1
 800662a:	3b30      	subs	r3, #48	@ 0x30
 800662c:	2b09      	cmp	r3, #9
 800662e:	d94b      	bls.n	80066c8 <_svfiprintf_r+0x17c>
 8006630:	b1b0      	cbz	r0, 8006660 <_svfiprintf_r+0x114>
 8006632:	9207      	str	r2, [sp, #28]
 8006634:	e014      	b.n	8006660 <_svfiprintf_r+0x114>
 8006636:	eba0 0308 	sub.w	r3, r0, r8
 800663a:	fa09 f303 	lsl.w	r3, r9, r3
 800663e:	4313      	orrs	r3, r2
 8006640:	9304      	str	r3, [sp, #16]
 8006642:	46a2      	mov	sl, r4
 8006644:	e7d2      	b.n	80065ec <_svfiprintf_r+0xa0>
 8006646:	9b03      	ldr	r3, [sp, #12]
 8006648:	1d19      	adds	r1, r3, #4
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	9103      	str	r1, [sp, #12]
 800664e:	2b00      	cmp	r3, #0
 8006650:	bfbb      	ittet	lt
 8006652:	425b      	neglt	r3, r3
 8006654:	f042 0202 	orrlt.w	r2, r2, #2
 8006658:	9307      	strge	r3, [sp, #28]
 800665a:	9307      	strlt	r3, [sp, #28]
 800665c:	bfb8      	it	lt
 800665e:	9204      	strlt	r2, [sp, #16]
 8006660:	7823      	ldrb	r3, [r4, #0]
 8006662:	2b2e      	cmp	r3, #46	@ 0x2e
 8006664:	d10a      	bne.n	800667c <_svfiprintf_r+0x130>
 8006666:	7863      	ldrb	r3, [r4, #1]
 8006668:	2b2a      	cmp	r3, #42	@ 0x2a
 800666a:	d132      	bne.n	80066d2 <_svfiprintf_r+0x186>
 800666c:	9b03      	ldr	r3, [sp, #12]
 800666e:	1d1a      	adds	r2, r3, #4
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	9203      	str	r2, [sp, #12]
 8006674:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006678:	3402      	adds	r4, #2
 800667a:	9305      	str	r3, [sp, #20]
 800667c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006734 <_svfiprintf_r+0x1e8>
 8006680:	7821      	ldrb	r1, [r4, #0]
 8006682:	2203      	movs	r2, #3
 8006684:	4650      	mov	r0, sl
 8006686:	f7f9 fda3 	bl	80001d0 <memchr>
 800668a:	b138      	cbz	r0, 800669c <_svfiprintf_r+0x150>
 800668c:	9b04      	ldr	r3, [sp, #16]
 800668e:	eba0 000a 	sub.w	r0, r0, sl
 8006692:	2240      	movs	r2, #64	@ 0x40
 8006694:	4082      	lsls	r2, r0
 8006696:	4313      	orrs	r3, r2
 8006698:	3401      	adds	r4, #1
 800669a:	9304      	str	r3, [sp, #16]
 800669c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066a0:	4825      	ldr	r0, [pc, #148]	@ (8006738 <_svfiprintf_r+0x1ec>)
 80066a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80066a6:	2206      	movs	r2, #6
 80066a8:	f7f9 fd92 	bl	80001d0 <memchr>
 80066ac:	2800      	cmp	r0, #0
 80066ae:	d036      	beq.n	800671e <_svfiprintf_r+0x1d2>
 80066b0:	4b22      	ldr	r3, [pc, #136]	@ (800673c <_svfiprintf_r+0x1f0>)
 80066b2:	bb1b      	cbnz	r3, 80066fc <_svfiprintf_r+0x1b0>
 80066b4:	9b03      	ldr	r3, [sp, #12]
 80066b6:	3307      	adds	r3, #7
 80066b8:	f023 0307 	bic.w	r3, r3, #7
 80066bc:	3308      	adds	r3, #8
 80066be:	9303      	str	r3, [sp, #12]
 80066c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066c2:	4433      	add	r3, r6
 80066c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80066c6:	e76a      	b.n	800659e <_svfiprintf_r+0x52>
 80066c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80066cc:	460c      	mov	r4, r1
 80066ce:	2001      	movs	r0, #1
 80066d0:	e7a8      	b.n	8006624 <_svfiprintf_r+0xd8>
 80066d2:	2300      	movs	r3, #0
 80066d4:	3401      	adds	r4, #1
 80066d6:	9305      	str	r3, [sp, #20]
 80066d8:	4619      	mov	r1, r3
 80066da:	f04f 0c0a 	mov.w	ip, #10
 80066de:	4620      	mov	r0, r4
 80066e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066e4:	3a30      	subs	r2, #48	@ 0x30
 80066e6:	2a09      	cmp	r2, #9
 80066e8:	d903      	bls.n	80066f2 <_svfiprintf_r+0x1a6>
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d0c6      	beq.n	800667c <_svfiprintf_r+0x130>
 80066ee:	9105      	str	r1, [sp, #20]
 80066f0:	e7c4      	b.n	800667c <_svfiprintf_r+0x130>
 80066f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80066f6:	4604      	mov	r4, r0
 80066f8:	2301      	movs	r3, #1
 80066fa:	e7f0      	b.n	80066de <_svfiprintf_r+0x192>
 80066fc:	ab03      	add	r3, sp, #12
 80066fe:	9300      	str	r3, [sp, #0]
 8006700:	462a      	mov	r2, r5
 8006702:	4b0f      	ldr	r3, [pc, #60]	@ (8006740 <_svfiprintf_r+0x1f4>)
 8006704:	a904      	add	r1, sp, #16
 8006706:	4638      	mov	r0, r7
 8006708:	f7fc fce6 	bl	80030d8 <_printf_float>
 800670c:	1c42      	adds	r2, r0, #1
 800670e:	4606      	mov	r6, r0
 8006710:	d1d6      	bne.n	80066c0 <_svfiprintf_r+0x174>
 8006712:	89ab      	ldrh	r3, [r5, #12]
 8006714:	065b      	lsls	r3, r3, #25
 8006716:	f53f af2d 	bmi.w	8006574 <_svfiprintf_r+0x28>
 800671a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800671c:	e72c      	b.n	8006578 <_svfiprintf_r+0x2c>
 800671e:	ab03      	add	r3, sp, #12
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	462a      	mov	r2, r5
 8006724:	4b06      	ldr	r3, [pc, #24]	@ (8006740 <_svfiprintf_r+0x1f4>)
 8006726:	a904      	add	r1, sp, #16
 8006728:	4638      	mov	r0, r7
 800672a:	f7fc ff6f 	bl	800360c <_printf_i>
 800672e:	e7ed      	b.n	800670c <_svfiprintf_r+0x1c0>
 8006730:	08007ba1 	.word	0x08007ba1
 8006734:	08007ba7 	.word	0x08007ba7
 8006738:	08007bab 	.word	0x08007bab
 800673c:	080030d9 	.word	0x080030d9
 8006740:	08006495 	.word	0x08006495

08006744 <__sflush_r>:
 8006744:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674a:	0716      	lsls	r6, r2, #28
 800674c:	4605      	mov	r5, r0
 800674e:	460c      	mov	r4, r1
 8006750:	d454      	bmi.n	80067fc <__sflush_r+0xb8>
 8006752:	684b      	ldr	r3, [r1, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	dc02      	bgt.n	800675e <__sflush_r+0x1a>
 8006758:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800675a:	2b00      	cmp	r3, #0
 800675c:	dd48      	ble.n	80067f0 <__sflush_r+0xac>
 800675e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006760:	2e00      	cmp	r6, #0
 8006762:	d045      	beq.n	80067f0 <__sflush_r+0xac>
 8006764:	2300      	movs	r3, #0
 8006766:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800676a:	682f      	ldr	r7, [r5, #0]
 800676c:	6a21      	ldr	r1, [r4, #32]
 800676e:	602b      	str	r3, [r5, #0]
 8006770:	d030      	beq.n	80067d4 <__sflush_r+0x90>
 8006772:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006774:	89a3      	ldrh	r3, [r4, #12]
 8006776:	0759      	lsls	r1, r3, #29
 8006778:	d505      	bpl.n	8006786 <__sflush_r+0x42>
 800677a:	6863      	ldr	r3, [r4, #4]
 800677c:	1ad2      	subs	r2, r2, r3
 800677e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006780:	b10b      	cbz	r3, 8006786 <__sflush_r+0x42>
 8006782:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006784:	1ad2      	subs	r2, r2, r3
 8006786:	2300      	movs	r3, #0
 8006788:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800678a:	6a21      	ldr	r1, [r4, #32]
 800678c:	4628      	mov	r0, r5
 800678e:	47b0      	blx	r6
 8006790:	1c43      	adds	r3, r0, #1
 8006792:	89a3      	ldrh	r3, [r4, #12]
 8006794:	d106      	bne.n	80067a4 <__sflush_r+0x60>
 8006796:	6829      	ldr	r1, [r5, #0]
 8006798:	291d      	cmp	r1, #29
 800679a:	d82b      	bhi.n	80067f4 <__sflush_r+0xb0>
 800679c:	4a28      	ldr	r2, [pc, #160]	@ (8006840 <__sflush_r+0xfc>)
 800679e:	40ca      	lsrs	r2, r1
 80067a0:	07d6      	lsls	r6, r2, #31
 80067a2:	d527      	bpl.n	80067f4 <__sflush_r+0xb0>
 80067a4:	2200      	movs	r2, #0
 80067a6:	6062      	str	r2, [r4, #4]
 80067a8:	04d9      	lsls	r1, r3, #19
 80067aa:	6922      	ldr	r2, [r4, #16]
 80067ac:	6022      	str	r2, [r4, #0]
 80067ae:	d504      	bpl.n	80067ba <__sflush_r+0x76>
 80067b0:	1c42      	adds	r2, r0, #1
 80067b2:	d101      	bne.n	80067b8 <__sflush_r+0x74>
 80067b4:	682b      	ldr	r3, [r5, #0]
 80067b6:	b903      	cbnz	r3, 80067ba <__sflush_r+0x76>
 80067b8:	6560      	str	r0, [r4, #84]	@ 0x54
 80067ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80067bc:	602f      	str	r7, [r5, #0]
 80067be:	b1b9      	cbz	r1, 80067f0 <__sflush_r+0xac>
 80067c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80067c4:	4299      	cmp	r1, r3
 80067c6:	d002      	beq.n	80067ce <__sflush_r+0x8a>
 80067c8:	4628      	mov	r0, r5
 80067ca:	f7fe fa49 	bl	8004c60 <_free_r>
 80067ce:	2300      	movs	r3, #0
 80067d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80067d2:	e00d      	b.n	80067f0 <__sflush_r+0xac>
 80067d4:	2301      	movs	r3, #1
 80067d6:	4628      	mov	r0, r5
 80067d8:	47b0      	blx	r6
 80067da:	4602      	mov	r2, r0
 80067dc:	1c50      	adds	r0, r2, #1
 80067de:	d1c9      	bne.n	8006774 <__sflush_r+0x30>
 80067e0:	682b      	ldr	r3, [r5, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d0c6      	beq.n	8006774 <__sflush_r+0x30>
 80067e6:	2b1d      	cmp	r3, #29
 80067e8:	d001      	beq.n	80067ee <__sflush_r+0xaa>
 80067ea:	2b16      	cmp	r3, #22
 80067ec:	d11d      	bne.n	800682a <__sflush_r+0xe6>
 80067ee:	602f      	str	r7, [r5, #0]
 80067f0:	2000      	movs	r0, #0
 80067f2:	e021      	b.n	8006838 <__sflush_r+0xf4>
 80067f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067f8:	b21b      	sxth	r3, r3
 80067fa:	e01a      	b.n	8006832 <__sflush_r+0xee>
 80067fc:	690f      	ldr	r7, [r1, #16]
 80067fe:	2f00      	cmp	r7, #0
 8006800:	d0f6      	beq.n	80067f0 <__sflush_r+0xac>
 8006802:	0793      	lsls	r3, r2, #30
 8006804:	680e      	ldr	r6, [r1, #0]
 8006806:	bf08      	it	eq
 8006808:	694b      	ldreq	r3, [r1, #20]
 800680a:	600f      	str	r7, [r1, #0]
 800680c:	bf18      	it	ne
 800680e:	2300      	movne	r3, #0
 8006810:	1bf6      	subs	r6, r6, r7
 8006812:	608b      	str	r3, [r1, #8]
 8006814:	2e00      	cmp	r6, #0
 8006816:	ddeb      	ble.n	80067f0 <__sflush_r+0xac>
 8006818:	6a21      	ldr	r1, [r4, #32]
 800681a:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800681e:	4633      	mov	r3, r6
 8006820:	463a      	mov	r2, r7
 8006822:	4628      	mov	r0, r5
 8006824:	47e0      	blx	ip
 8006826:	2800      	cmp	r0, #0
 8006828:	dc07      	bgt.n	800683a <__sflush_r+0xf6>
 800682a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800682e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006832:	81a3      	strh	r3, [r4, #12]
 8006834:	f04f 30ff 	mov.w	r0, #4294967295
 8006838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800683a:	4407      	add	r7, r0
 800683c:	1a36      	subs	r6, r6, r0
 800683e:	e7e9      	b.n	8006814 <__sflush_r+0xd0>
 8006840:	20400001 	.word	0x20400001

08006844 <_fflush_r>:
 8006844:	b538      	push	{r3, r4, r5, lr}
 8006846:	690b      	ldr	r3, [r1, #16]
 8006848:	4605      	mov	r5, r0
 800684a:	460c      	mov	r4, r1
 800684c:	b913      	cbnz	r3, 8006854 <_fflush_r+0x10>
 800684e:	2500      	movs	r5, #0
 8006850:	4628      	mov	r0, r5
 8006852:	bd38      	pop	{r3, r4, r5, pc}
 8006854:	b118      	cbz	r0, 800685e <_fflush_r+0x1a>
 8006856:	6a03      	ldr	r3, [r0, #32]
 8006858:	b90b      	cbnz	r3, 800685e <_fflush_r+0x1a>
 800685a:	f7fd fa89 	bl	8003d70 <__sinit>
 800685e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d0f3      	beq.n	800684e <_fflush_r+0xa>
 8006866:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006868:	07d0      	lsls	r0, r2, #31
 800686a:	d404      	bmi.n	8006876 <_fflush_r+0x32>
 800686c:	0599      	lsls	r1, r3, #22
 800686e:	d402      	bmi.n	8006876 <_fflush_r+0x32>
 8006870:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006872:	f7fd fb96 	bl	8003fa2 <__retarget_lock_acquire_recursive>
 8006876:	4628      	mov	r0, r5
 8006878:	4621      	mov	r1, r4
 800687a:	f7ff ff63 	bl	8006744 <__sflush_r>
 800687e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006880:	07da      	lsls	r2, r3, #31
 8006882:	4605      	mov	r5, r0
 8006884:	d4e4      	bmi.n	8006850 <_fflush_r+0xc>
 8006886:	89a3      	ldrh	r3, [r4, #12]
 8006888:	059b      	lsls	r3, r3, #22
 800688a:	d4e1      	bmi.n	8006850 <_fflush_r+0xc>
 800688c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800688e:	f7fd fb89 	bl	8003fa4 <__retarget_lock_release_recursive>
 8006892:	e7dd      	b.n	8006850 <_fflush_r+0xc>

08006894 <memmove>:
 8006894:	4288      	cmp	r0, r1
 8006896:	b510      	push	{r4, lr}
 8006898:	eb01 0402 	add.w	r4, r1, r2
 800689c:	d902      	bls.n	80068a4 <memmove+0x10>
 800689e:	4284      	cmp	r4, r0
 80068a0:	4623      	mov	r3, r4
 80068a2:	d807      	bhi.n	80068b4 <memmove+0x20>
 80068a4:	1e43      	subs	r3, r0, #1
 80068a6:	42a1      	cmp	r1, r4
 80068a8:	d008      	beq.n	80068bc <memmove+0x28>
 80068aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80068b2:	e7f8      	b.n	80068a6 <memmove+0x12>
 80068b4:	4402      	add	r2, r0
 80068b6:	4601      	mov	r1, r0
 80068b8:	428a      	cmp	r2, r1
 80068ba:	d100      	bne.n	80068be <memmove+0x2a>
 80068bc:	bd10      	pop	{r4, pc}
 80068be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80068c6:	e7f7      	b.n	80068b8 <memmove+0x24>

080068c8 <strncmp>:
 80068c8:	b510      	push	{r4, lr}
 80068ca:	b16a      	cbz	r2, 80068e8 <strncmp+0x20>
 80068cc:	3901      	subs	r1, #1
 80068ce:	1884      	adds	r4, r0, r2
 80068d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068d4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80068d8:	429a      	cmp	r2, r3
 80068da:	d103      	bne.n	80068e4 <strncmp+0x1c>
 80068dc:	42a0      	cmp	r0, r4
 80068de:	d001      	beq.n	80068e4 <strncmp+0x1c>
 80068e0:	2a00      	cmp	r2, #0
 80068e2:	d1f5      	bne.n	80068d0 <strncmp+0x8>
 80068e4:	1ad0      	subs	r0, r2, r3
 80068e6:	bd10      	pop	{r4, pc}
 80068e8:	4610      	mov	r0, r2
 80068ea:	e7fc      	b.n	80068e6 <strncmp+0x1e>

080068ec <_sbrk_r>:
 80068ec:	b538      	push	{r3, r4, r5, lr}
 80068ee:	4d06      	ldr	r5, [pc, #24]	@ (8006908 <_sbrk_r+0x1c>)
 80068f0:	2300      	movs	r3, #0
 80068f2:	4604      	mov	r4, r0
 80068f4:	4608      	mov	r0, r1
 80068f6:	602b      	str	r3, [r5, #0]
 80068f8:	f7fa fdd0 	bl	800149c <_sbrk>
 80068fc:	1c43      	adds	r3, r0, #1
 80068fe:	d102      	bne.n	8006906 <_sbrk_r+0x1a>
 8006900:	682b      	ldr	r3, [r5, #0]
 8006902:	b103      	cbz	r3, 8006906 <_sbrk_r+0x1a>
 8006904:	6023      	str	r3, [r4, #0]
 8006906:	bd38      	pop	{r3, r4, r5, pc}
 8006908:	200003c4 	.word	0x200003c4

0800690c <memcpy>:
 800690c:	440a      	add	r2, r1
 800690e:	4291      	cmp	r1, r2
 8006910:	f100 33ff 	add.w	r3, r0, #4294967295
 8006914:	d100      	bne.n	8006918 <memcpy+0xc>
 8006916:	4770      	bx	lr
 8006918:	b510      	push	{r4, lr}
 800691a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800691e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006922:	4291      	cmp	r1, r2
 8006924:	d1f9      	bne.n	800691a <memcpy+0xe>
 8006926:	bd10      	pop	{r4, pc}

08006928 <nan>:
 8006928:	4901      	ldr	r1, [pc, #4]	@ (8006930 <nan+0x8>)
 800692a:	2000      	movs	r0, #0
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	7ff80000 	.word	0x7ff80000

08006934 <__assert_func>:
 8006934:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006936:	4614      	mov	r4, r2
 8006938:	461a      	mov	r2, r3
 800693a:	4b09      	ldr	r3, [pc, #36]	@ (8006960 <__assert_func+0x2c>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4605      	mov	r5, r0
 8006940:	68d8      	ldr	r0, [r3, #12]
 8006942:	b14c      	cbz	r4, 8006958 <__assert_func+0x24>
 8006944:	4b07      	ldr	r3, [pc, #28]	@ (8006964 <__assert_func+0x30>)
 8006946:	9100      	str	r1, [sp, #0]
 8006948:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800694c:	4906      	ldr	r1, [pc, #24]	@ (8006968 <__assert_func+0x34>)
 800694e:	462b      	mov	r3, r5
 8006950:	f000 fba8 	bl	80070a4 <fiprintf>
 8006954:	f000 fbb8 	bl	80070c8 <abort>
 8006958:	4b04      	ldr	r3, [pc, #16]	@ (800696c <__assert_func+0x38>)
 800695a:	461c      	mov	r4, r3
 800695c:	e7f3      	b.n	8006946 <__assert_func+0x12>
 800695e:	bf00      	nop
 8006960:	20000024 	.word	0x20000024
 8006964:	08007bba 	.word	0x08007bba
 8006968:	08007bc7 	.word	0x08007bc7
 800696c:	08007bf5 	.word	0x08007bf5

08006970 <_calloc_r>:
 8006970:	b570      	push	{r4, r5, r6, lr}
 8006972:	fba1 5402 	umull	r5, r4, r1, r2
 8006976:	b934      	cbnz	r4, 8006986 <_calloc_r+0x16>
 8006978:	4629      	mov	r1, r5
 800697a:	f7fe f9e5 	bl	8004d48 <_malloc_r>
 800697e:	4606      	mov	r6, r0
 8006980:	b928      	cbnz	r0, 800698e <_calloc_r+0x1e>
 8006982:	4630      	mov	r0, r6
 8006984:	bd70      	pop	{r4, r5, r6, pc}
 8006986:	220c      	movs	r2, #12
 8006988:	6002      	str	r2, [r0, #0]
 800698a:	2600      	movs	r6, #0
 800698c:	e7f9      	b.n	8006982 <_calloc_r+0x12>
 800698e:	462a      	mov	r2, r5
 8006990:	4621      	mov	r1, r4
 8006992:	f7fd fa88 	bl	8003ea6 <memset>
 8006996:	e7f4      	b.n	8006982 <_calloc_r+0x12>

08006998 <rshift>:
 8006998:	6903      	ldr	r3, [r0, #16]
 800699a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800699e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80069a2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80069a6:	f100 0414 	add.w	r4, r0, #20
 80069aa:	dd45      	ble.n	8006a38 <rshift+0xa0>
 80069ac:	f011 011f 	ands.w	r1, r1, #31
 80069b0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80069b4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80069b8:	d10c      	bne.n	80069d4 <rshift+0x3c>
 80069ba:	f100 0710 	add.w	r7, r0, #16
 80069be:	4629      	mov	r1, r5
 80069c0:	42b1      	cmp	r1, r6
 80069c2:	d334      	bcc.n	8006a2e <rshift+0x96>
 80069c4:	1a9b      	subs	r3, r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	1eea      	subs	r2, r5, #3
 80069ca:	4296      	cmp	r6, r2
 80069cc:	bf38      	it	cc
 80069ce:	2300      	movcc	r3, #0
 80069d0:	4423      	add	r3, r4
 80069d2:	e015      	b.n	8006a00 <rshift+0x68>
 80069d4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80069d8:	f1c1 0820 	rsb	r8, r1, #32
 80069dc:	40cf      	lsrs	r7, r1
 80069de:	f105 0e04 	add.w	lr, r5, #4
 80069e2:	46a1      	mov	r9, r4
 80069e4:	4576      	cmp	r6, lr
 80069e6:	46f4      	mov	ip, lr
 80069e8:	d815      	bhi.n	8006a16 <rshift+0x7e>
 80069ea:	1a9a      	subs	r2, r3, r2
 80069ec:	0092      	lsls	r2, r2, #2
 80069ee:	3a04      	subs	r2, #4
 80069f0:	3501      	adds	r5, #1
 80069f2:	42ae      	cmp	r6, r5
 80069f4:	bf38      	it	cc
 80069f6:	2200      	movcc	r2, #0
 80069f8:	18a3      	adds	r3, r4, r2
 80069fa:	50a7      	str	r7, [r4, r2]
 80069fc:	b107      	cbz	r7, 8006a00 <rshift+0x68>
 80069fe:	3304      	adds	r3, #4
 8006a00:	1b1a      	subs	r2, r3, r4
 8006a02:	42a3      	cmp	r3, r4
 8006a04:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006a08:	bf08      	it	eq
 8006a0a:	2300      	moveq	r3, #0
 8006a0c:	6102      	str	r2, [r0, #16]
 8006a0e:	bf08      	it	eq
 8006a10:	6143      	streq	r3, [r0, #20]
 8006a12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a16:	f8dc c000 	ldr.w	ip, [ip]
 8006a1a:	fa0c fc08 	lsl.w	ip, ip, r8
 8006a1e:	ea4c 0707 	orr.w	r7, ip, r7
 8006a22:	f849 7b04 	str.w	r7, [r9], #4
 8006a26:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006a2a:	40cf      	lsrs	r7, r1
 8006a2c:	e7da      	b.n	80069e4 <rshift+0x4c>
 8006a2e:	f851 cb04 	ldr.w	ip, [r1], #4
 8006a32:	f847 cf04 	str.w	ip, [r7, #4]!
 8006a36:	e7c3      	b.n	80069c0 <rshift+0x28>
 8006a38:	4623      	mov	r3, r4
 8006a3a:	e7e1      	b.n	8006a00 <rshift+0x68>

08006a3c <__hexdig_fun>:
 8006a3c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8006a40:	2b09      	cmp	r3, #9
 8006a42:	d802      	bhi.n	8006a4a <__hexdig_fun+0xe>
 8006a44:	3820      	subs	r0, #32
 8006a46:	b2c0      	uxtb	r0, r0
 8006a48:	4770      	bx	lr
 8006a4a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8006a4e:	2b05      	cmp	r3, #5
 8006a50:	d801      	bhi.n	8006a56 <__hexdig_fun+0x1a>
 8006a52:	3847      	subs	r0, #71	@ 0x47
 8006a54:	e7f7      	b.n	8006a46 <__hexdig_fun+0xa>
 8006a56:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8006a5a:	2b05      	cmp	r3, #5
 8006a5c:	d801      	bhi.n	8006a62 <__hexdig_fun+0x26>
 8006a5e:	3827      	subs	r0, #39	@ 0x27
 8006a60:	e7f1      	b.n	8006a46 <__hexdig_fun+0xa>
 8006a62:	2000      	movs	r0, #0
 8006a64:	4770      	bx	lr
	...

08006a68 <__gethex>:
 8006a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a6c:	b085      	sub	sp, #20
 8006a6e:	468a      	mov	sl, r1
 8006a70:	9302      	str	r3, [sp, #8]
 8006a72:	680b      	ldr	r3, [r1, #0]
 8006a74:	9001      	str	r0, [sp, #4]
 8006a76:	4690      	mov	r8, r2
 8006a78:	1c9c      	adds	r4, r3, #2
 8006a7a:	46a1      	mov	r9, r4
 8006a7c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006a80:	2830      	cmp	r0, #48	@ 0x30
 8006a82:	d0fa      	beq.n	8006a7a <__gethex+0x12>
 8006a84:	eba9 0303 	sub.w	r3, r9, r3
 8006a88:	f1a3 0b02 	sub.w	fp, r3, #2
 8006a8c:	f7ff ffd6 	bl	8006a3c <__hexdig_fun>
 8006a90:	4605      	mov	r5, r0
 8006a92:	2800      	cmp	r0, #0
 8006a94:	d168      	bne.n	8006b68 <__gethex+0x100>
 8006a96:	49a0      	ldr	r1, [pc, #640]	@ (8006d18 <__gethex+0x2b0>)
 8006a98:	2201      	movs	r2, #1
 8006a9a:	4648      	mov	r0, r9
 8006a9c:	f7ff ff14 	bl	80068c8 <strncmp>
 8006aa0:	4607      	mov	r7, r0
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	d167      	bne.n	8006b76 <__gethex+0x10e>
 8006aa6:	f899 0001 	ldrb.w	r0, [r9, #1]
 8006aaa:	4626      	mov	r6, r4
 8006aac:	f7ff ffc6 	bl	8006a3c <__hexdig_fun>
 8006ab0:	2800      	cmp	r0, #0
 8006ab2:	d062      	beq.n	8006b7a <__gethex+0x112>
 8006ab4:	4623      	mov	r3, r4
 8006ab6:	7818      	ldrb	r0, [r3, #0]
 8006ab8:	2830      	cmp	r0, #48	@ 0x30
 8006aba:	4699      	mov	r9, r3
 8006abc:	f103 0301 	add.w	r3, r3, #1
 8006ac0:	d0f9      	beq.n	8006ab6 <__gethex+0x4e>
 8006ac2:	f7ff ffbb 	bl	8006a3c <__hexdig_fun>
 8006ac6:	fab0 f580 	clz	r5, r0
 8006aca:	096d      	lsrs	r5, r5, #5
 8006acc:	f04f 0b01 	mov.w	fp, #1
 8006ad0:	464a      	mov	r2, r9
 8006ad2:	4616      	mov	r6, r2
 8006ad4:	3201      	adds	r2, #1
 8006ad6:	7830      	ldrb	r0, [r6, #0]
 8006ad8:	f7ff ffb0 	bl	8006a3c <__hexdig_fun>
 8006adc:	2800      	cmp	r0, #0
 8006ade:	d1f8      	bne.n	8006ad2 <__gethex+0x6a>
 8006ae0:	498d      	ldr	r1, [pc, #564]	@ (8006d18 <__gethex+0x2b0>)
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	4630      	mov	r0, r6
 8006ae6:	f7ff feef 	bl	80068c8 <strncmp>
 8006aea:	2800      	cmp	r0, #0
 8006aec:	d13f      	bne.n	8006b6e <__gethex+0x106>
 8006aee:	b944      	cbnz	r4, 8006b02 <__gethex+0x9a>
 8006af0:	1c74      	adds	r4, r6, #1
 8006af2:	4622      	mov	r2, r4
 8006af4:	4616      	mov	r6, r2
 8006af6:	3201      	adds	r2, #1
 8006af8:	7830      	ldrb	r0, [r6, #0]
 8006afa:	f7ff ff9f 	bl	8006a3c <__hexdig_fun>
 8006afe:	2800      	cmp	r0, #0
 8006b00:	d1f8      	bne.n	8006af4 <__gethex+0x8c>
 8006b02:	1ba4      	subs	r4, r4, r6
 8006b04:	00a7      	lsls	r7, r4, #2
 8006b06:	7833      	ldrb	r3, [r6, #0]
 8006b08:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8006b0c:	2b50      	cmp	r3, #80	@ 0x50
 8006b0e:	d13e      	bne.n	8006b8e <__gethex+0x126>
 8006b10:	7873      	ldrb	r3, [r6, #1]
 8006b12:	2b2b      	cmp	r3, #43	@ 0x2b
 8006b14:	d033      	beq.n	8006b7e <__gethex+0x116>
 8006b16:	2b2d      	cmp	r3, #45	@ 0x2d
 8006b18:	d034      	beq.n	8006b84 <__gethex+0x11c>
 8006b1a:	1c71      	adds	r1, r6, #1
 8006b1c:	2400      	movs	r4, #0
 8006b1e:	7808      	ldrb	r0, [r1, #0]
 8006b20:	f7ff ff8c 	bl	8006a3c <__hexdig_fun>
 8006b24:	1e43      	subs	r3, r0, #1
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	2b18      	cmp	r3, #24
 8006b2a:	d830      	bhi.n	8006b8e <__gethex+0x126>
 8006b2c:	f1a0 0210 	sub.w	r2, r0, #16
 8006b30:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006b34:	f7ff ff82 	bl	8006a3c <__hexdig_fun>
 8006b38:	f100 3cff 	add.w	ip, r0, #4294967295
 8006b3c:	fa5f fc8c 	uxtb.w	ip, ip
 8006b40:	f1bc 0f18 	cmp.w	ip, #24
 8006b44:	f04f 030a 	mov.w	r3, #10
 8006b48:	d91e      	bls.n	8006b88 <__gethex+0x120>
 8006b4a:	b104      	cbz	r4, 8006b4e <__gethex+0xe6>
 8006b4c:	4252      	negs	r2, r2
 8006b4e:	4417      	add	r7, r2
 8006b50:	f8ca 1000 	str.w	r1, [sl]
 8006b54:	b1ed      	cbz	r5, 8006b92 <__gethex+0x12a>
 8006b56:	f1bb 0f00 	cmp.w	fp, #0
 8006b5a:	bf0c      	ite	eq
 8006b5c:	2506      	moveq	r5, #6
 8006b5e:	2500      	movne	r5, #0
 8006b60:	4628      	mov	r0, r5
 8006b62:	b005      	add	sp, #20
 8006b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b68:	2500      	movs	r5, #0
 8006b6a:	462c      	mov	r4, r5
 8006b6c:	e7b0      	b.n	8006ad0 <__gethex+0x68>
 8006b6e:	2c00      	cmp	r4, #0
 8006b70:	d1c7      	bne.n	8006b02 <__gethex+0x9a>
 8006b72:	4627      	mov	r7, r4
 8006b74:	e7c7      	b.n	8006b06 <__gethex+0x9e>
 8006b76:	464e      	mov	r6, r9
 8006b78:	462f      	mov	r7, r5
 8006b7a:	2501      	movs	r5, #1
 8006b7c:	e7c3      	b.n	8006b06 <__gethex+0x9e>
 8006b7e:	2400      	movs	r4, #0
 8006b80:	1cb1      	adds	r1, r6, #2
 8006b82:	e7cc      	b.n	8006b1e <__gethex+0xb6>
 8006b84:	2401      	movs	r4, #1
 8006b86:	e7fb      	b.n	8006b80 <__gethex+0x118>
 8006b88:	fb03 0002 	mla	r0, r3, r2, r0
 8006b8c:	e7ce      	b.n	8006b2c <__gethex+0xc4>
 8006b8e:	4631      	mov	r1, r6
 8006b90:	e7de      	b.n	8006b50 <__gethex+0xe8>
 8006b92:	eba6 0309 	sub.w	r3, r6, r9
 8006b96:	3b01      	subs	r3, #1
 8006b98:	4629      	mov	r1, r5
 8006b9a:	2b07      	cmp	r3, #7
 8006b9c:	dc0a      	bgt.n	8006bb4 <__gethex+0x14c>
 8006b9e:	9801      	ldr	r0, [sp, #4]
 8006ba0:	f7fe f95e 	bl	8004e60 <_Balloc>
 8006ba4:	4604      	mov	r4, r0
 8006ba6:	b940      	cbnz	r0, 8006bba <__gethex+0x152>
 8006ba8:	4b5c      	ldr	r3, [pc, #368]	@ (8006d1c <__gethex+0x2b4>)
 8006baa:	4602      	mov	r2, r0
 8006bac:	21e4      	movs	r1, #228	@ 0xe4
 8006bae:	485c      	ldr	r0, [pc, #368]	@ (8006d20 <__gethex+0x2b8>)
 8006bb0:	f7ff fec0 	bl	8006934 <__assert_func>
 8006bb4:	3101      	adds	r1, #1
 8006bb6:	105b      	asrs	r3, r3, #1
 8006bb8:	e7ef      	b.n	8006b9a <__gethex+0x132>
 8006bba:	f100 0a14 	add.w	sl, r0, #20
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	4655      	mov	r5, sl
 8006bc2:	469b      	mov	fp, r3
 8006bc4:	45b1      	cmp	r9, r6
 8006bc6:	d337      	bcc.n	8006c38 <__gethex+0x1d0>
 8006bc8:	f845 bb04 	str.w	fp, [r5], #4
 8006bcc:	eba5 050a 	sub.w	r5, r5, sl
 8006bd0:	10ad      	asrs	r5, r5, #2
 8006bd2:	6125      	str	r5, [r4, #16]
 8006bd4:	4658      	mov	r0, fp
 8006bd6:	f7fe fa35 	bl	8005044 <__hi0bits>
 8006bda:	016d      	lsls	r5, r5, #5
 8006bdc:	f8d8 6000 	ldr.w	r6, [r8]
 8006be0:	1a2d      	subs	r5, r5, r0
 8006be2:	42b5      	cmp	r5, r6
 8006be4:	dd54      	ble.n	8006c90 <__gethex+0x228>
 8006be6:	1bad      	subs	r5, r5, r6
 8006be8:	4629      	mov	r1, r5
 8006bea:	4620      	mov	r0, r4
 8006bec:	f7fe fdb7 	bl	800575e <__any_on>
 8006bf0:	4681      	mov	r9, r0
 8006bf2:	b178      	cbz	r0, 8006c14 <__gethex+0x1ac>
 8006bf4:	1e6b      	subs	r3, r5, #1
 8006bf6:	1159      	asrs	r1, r3, #5
 8006bf8:	f003 021f 	and.w	r2, r3, #31
 8006bfc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8006c00:	f04f 0901 	mov.w	r9, #1
 8006c04:	fa09 f202 	lsl.w	r2, r9, r2
 8006c08:	420a      	tst	r2, r1
 8006c0a:	d003      	beq.n	8006c14 <__gethex+0x1ac>
 8006c0c:	454b      	cmp	r3, r9
 8006c0e:	dc36      	bgt.n	8006c7e <__gethex+0x216>
 8006c10:	f04f 0902 	mov.w	r9, #2
 8006c14:	4629      	mov	r1, r5
 8006c16:	4620      	mov	r0, r4
 8006c18:	f7ff febe 	bl	8006998 <rshift>
 8006c1c:	442f      	add	r7, r5
 8006c1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006c22:	42bb      	cmp	r3, r7
 8006c24:	da42      	bge.n	8006cac <__gethex+0x244>
 8006c26:	9801      	ldr	r0, [sp, #4]
 8006c28:	4621      	mov	r1, r4
 8006c2a:	f7fe f959 	bl	8004ee0 <_Bfree>
 8006c2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006c30:	2300      	movs	r3, #0
 8006c32:	6013      	str	r3, [r2, #0]
 8006c34:	25a3      	movs	r5, #163	@ 0xa3
 8006c36:	e793      	b.n	8006b60 <__gethex+0xf8>
 8006c38:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8006c3c:	2a2e      	cmp	r2, #46	@ 0x2e
 8006c3e:	d012      	beq.n	8006c66 <__gethex+0x1fe>
 8006c40:	2b20      	cmp	r3, #32
 8006c42:	d104      	bne.n	8006c4e <__gethex+0x1e6>
 8006c44:	f845 bb04 	str.w	fp, [r5], #4
 8006c48:	f04f 0b00 	mov.w	fp, #0
 8006c4c:	465b      	mov	r3, fp
 8006c4e:	7830      	ldrb	r0, [r6, #0]
 8006c50:	9303      	str	r3, [sp, #12]
 8006c52:	f7ff fef3 	bl	8006a3c <__hexdig_fun>
 8006c56:	9b03      	ldr	r3, [sp, #12]
 8006c58:	f000 000f 	and.w	r0, r0, #15
 8006c5c:	4098      	lsls	r0, r3
 8006c5e:	ea4b 0b00 	orr.w	fp, fp, r0
 8006c62:	3304      	adds	r3, #4
 8006c64:	e7ae      	b.n	8006bc4 <__gethex+0x15c>
 8006c66:	45b1      	cmp	r9, r6
 8006c68:	d8ea      	bhi.n	8006c40 <__gethex+0x1d8>
 8006c6a:	492b      	ldr	r1, [pc, #172]	@ (8006d18 <__gethex+0x2b0>)
 8006c6c:	9303      	str	r3, [sp, #12]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	4630      	mov	r0, r6
 8006c72:	f7ff fe29 	bl	80068c8 <strncmp>
 8006c76:	9b03      	ldr	r3, [sp, #12]
 8006c78:	2800      	cmp	r0, #0
 8006c7a:	d1e1      	bne.n	8006c40 <__gethex+0x1d8>
 8006c7c:	e7a2      	b.n	8006bc4 <__gethex+0x15c>
 8006c7e:	1ea9      	subs	r1, r5, #2
 8006c80:	4620      	mov	r0, r4
 8006c82:	f7fe fd6c 	bl	800575e <__any_on>
 8006c86:	2800      	cmp	r0, #0
 8006c88:	d0c2      	beq.n	8006c10 <__gethex+0x1a8>
 8006c8a:	f04f 0903 	mov.w	r9, #3
 8006c8e:	e7c1      	b.n	8006c14 <__gethex+0x1ac>
 8006c90:	da09      	bge.n	8006ca6 <__gethex+0x23e>
 8006c92:	1b75      	subs	r5, r6, r5
 8006c94:	4621      	mov	r1, r4
 8006c96:	9801      	ldr	r0, [sp, #4]
 8006c98:	462a      	mov	r2, r5
 8006c9a:	f7fe fb31 	bl	8005300 <__lshift>
 8006c9e:	1b7f      	subs	r7, r7, r5
 8006ca0:	4604      	mov	r4, r0
 8006ca2:	f100 0a14 	add.w	sl, r0, #20
 8006ca6:	f04f 0900 	mov.w	r9, #0
 8006caa:	e7b8      	b.n	8006c1e <__gethex+0x1b6>
 8006cac:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006cb0:	42bd      	cmp	r5, r7
 8006cb2:	dd6f      	ble.n	8006d94 <__gethex+0x32c>
 8006cb4:	1bed      	subs	r5, r5, r7
 8006cb6:	42ae      	cmp	r6, r5
 8006cb8:	dc34      	bgt.n	8006d24 <__gethex+0x2bc>
 8006cba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d022      	beq.n	8006d08 <__gethex+0x2a0>
 8006cc2:	2b03      	cmp	r3, #3
 8006cc4:	d024      	beq.n	8006d10 <__gethex+0x2a8>
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d115      	bne.n	8006cf6 <__gethex+0x28e>
 8006cca:	42ae      	cmp	r6, r5
 8006ccc:	d113      	bne.n	8006cf6 <__gethex+0x28e>
 8006cce:	2e01      	cmp	r6, #1
 8006cd0:	d10b      	bne.n	8006cea <__gethex+0x282>
 8006cd2:	9a02      	ldr	r2, [sp, #8]
 8006cd4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006cd8:	6013      	str	r3, [r2, #0]
 8006cda:	2301      	movs	r3, #1
 8006cdc:	6123      	str	r3, [r4, #16]
 8006cde:	f8ca 3000 	str.w	r3, [sl]
 8006ce2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ce4:	2562      	movs	r5, #98	@ 0x62
 8006ce6:	601c      	str	r4, [r3, #0]
 8006ce8:	e73a      	b.n	8006b60 <__gethex+0xf8>
 8006cea:	1e71      	subs	r1, r6, #1
 8006cec:	4620      	mov	r0, r4
 8006cee:	f7fe fd36 	bl	800575e <__any_on>
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	d1ed      	bne.n	8006cd2 <__gethex+0x26a>
 8006cf6:	9801      	ldr	r0, [sp, #4]
 8006cf8:	4621      	mov	r1, r4
 8006cfa:	f7fe f8f1 	bl	8004ee0 <_Bfree>
 8006cfe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006d00:	2300      	movs	r3, #0
 8006d02:	6013      	str	r3, [r2, #0]
 8006d04:	2550      	movs	r5, #80	@ 0x50
 8006d06:	e72b      	b.n	8006b60 <__gethex+0xf8>
 8006d08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1f3      	bne.n	8006cf6 <__gethex+0x28e>
 8006d0e:	e7e0      	b.n	8006cd2 <__gethex+0x26a>
 8006d10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1dd      	bne.n	8006cd2 <__gethex+0x26a>
 8006d16:	e7ee      	b.n	8006cf6 <__gethex+0x28e>
 8006d18:	08007b9f 	.word	0x08007b9f
 8006d1c:	08007b35 	.word	0x08007b35
 8006d20:	08007bf6 	.word	0x08007bf6
 8006d24:	1e6f      	subs	r7, r5, #1
 8006d26:	f1b9 0f00 	cmp.w	r9, #0
 8006d2a:	d130      	bne.n	8006d8e <__gethex+0x326>
 8006d2c:	b127      	cbz	r7, 8006d38 <__gethex+0x2d0>
 8006d2e:	4639      	mov	r1, r7
 8006d30:	4620      	mov	r0, r4
 8006d32:	f7fe fd14 	bl	800575e <__any_on>
 8006d36:	4681      	mov	r9, r0
 8006d38:	117a      	asrs	r2, r7, #5
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8006d40:	f007 071f 	and.w	r7, r7, #31
 8006d44:	40bb      	lsls	r3, r7
 8006d46:	4213      	tst	r3, r2
 8006d48:	4629      	mov	r1, r5
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	bf18      	it	ne
 8006d4e:	f049 0902 	orrne.w	r9, r9, #2
 8006d52:	f7ff fe21 	bl	8006998 <rshift>
 8006d56:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8006d5a:	1b76      	subs	r6, r6, r5
 8006d5c:	2502      	movs	r5, #2
 8006d5e:	f1b9 0f00 	cmp.w	r9, #0
 8006d62:	d047      	beq.n	8006df4 <__gethex+0x38c>
 8006d64:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d015      	beq.n	8006d98 <__gethex+0x330>
 8006d6c:	2b03      	cmp	r3, #3
 8006d6e:	d017      	beq.n	8006da0 <__gethex+0x338>
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d109      	bne.n	8006d88 <__gethex+0x320>
 8006d74:	f019 0f02 	tst.w	r9, #2
 8006d78:	d006      	beq.n	8006d88 <__gethex+0x320>
 8006d7a:	f8da 3000 	ldr.w	r3, [sl]
 8006d7e:	ea49 0903 	orr.w	r9, r9, r3
 8006d82:	f019 0f01 	tst.w	r9, #1
 8006d86:	d10e      	bne.n	8006da6 <__gethex+0x33e>
 8006d88:	f045 0510 	orr.w	r5, r5, #16
 8006d8c:	e032      	b.n	8006df4 <__gethex+0x38c>
 8006d8e:	f04f 0901 	mov.w	r9, #1
 8006d92:	e7d1      	b.n	8006d38 <__gethex+0x2d0>
 8006d94:	2501      	movs	r5, #1
 8006d96:	e7e2      	b.n	8006d5e <__gethex+0x2f6>
 8006d98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d9a:	f1c3 0301 	rsb	r3, r3, #1
 8006d9e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006da0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d0f0      	beq.n	8006d88 <__gethex+0x320>
 8006da6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006daa:	f104 0314 	add.w	r3, r4, #20
 8006dae:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006db2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006db6:	f04f 0c00 	mov.w	ip, #0
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dc0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006dc4:	d01b      	beq.n	8006dfe <__gethex+0x396>
 8006dc6:	3201      	adds	r2, #1
 8006dc8:	6002      	str	r2, [r0, #0]
 8006dca:	2d02      	cmp	r5, #2
 8006dcc:	f104 0314 	add.w	r3, r4, #20
 8006dd0:	d13c      	bne.n	8006e4c <__gethex+0x3e4>
 8006dd2:	f8d8 2000 	ldr.w	r2, [r8]
 8006dd6:	3a01      	subs	r2, #1
 8006dd8:	42b2      	cmp	r2, r6
 8006dda:	d109      	bne.n	8006df0 <__gethex+0x388>
 8006ddc:	1171      	asrs	r1, r6, #5
 8006dde:	2201      	movs	r2, #1
 8006de0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006de4:	f006 061f 	and.w	r6, r6, #31
 8006de8:	fa02 f606 	lsl.w	r6, r2, r6
 8006dec:	421e      	tst	r6, r3
 8006dee:	d13a      	bne.n	8006e66 <__gethex+0x3fe>
 8006df0:	f045 0520 	orr.w	r5, r5, #32
 8006df4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006df6:	601c      	str	r4, [r3, #0]
 8006df8:	9b02      	ldr	r3, [sp, #8]
 8006dfa:	601f      	str	r7, [r3, #0]
 8006dfc:	e6b0      	b.n	8006b60 <__gethex+0xf8>
 8006dfe:	4299      	cmp	r1, r3
 8006e00:	f843 cc04 	str.w	ip, [r3, #-4]
 8006e04:	d8d9      	bhi.n	8006dba <__gethex+0x352>
 8006e06:	68a3      	ldr	r3, [r4, #8]
 8006e08:	459b      	cmp	fp, r3
 8006e0a:	db17      	blt.n	8006e3c <__gethex+0x3d4>
 8006e0c:	6861      	ldr	r1, [r4, #4]
 8006e0e:	9801      	ldr	r0, [sp, #4]
 8006e10:	3101      	adds	r1, #1
 8006e12:	f7fe f825 	bl	8004e60 <_Balloc>
 8006e16:	4681      	mov	r9, r0
 8006e18:	b918      	cbnz	r0, 8006e22 <__gethex+0x3ba>
 8006e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8006e84 <__gethex+0x41c>)
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	2184      	movs	r1, #132	@ 0x84
 8006e20:	e6c5      	b.n	8006bae <__gethex+0x146>
 8006e22:	6922      	ldr	r2, [r4, #16]
 8006e24:	3202      	adds	r2, #2
 8006e26:	f104 010c 	add.w	r1, r4, #12
 8006e2a:	0092      	lsls	r2, r2, #2
 8006e2c:	300c      	adds	r0, #12
 8006e2e:	f7ff fd6d 	bl	800690c <memcpy>
 8006e32:	4621      	mov	r1, r4
 8006e34:	9801      	ldr	r0, [sp, #4]
 8006e36:	f7fe f853 	bl	8004ee0 <_Bfree>
 8006e3a:	464c      	mov	r4, r9
 8006e3c:	6923      	ldr	r3, [r4, #16]
 8006e3e:	1c5a      	adds	r2, r3, #1
 8006e40:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006e44:	6122      	str	r2, [r4, #16]
 8006e46:	2201      	movs	r2, #1
 8006e48:	615a      	str	r2, [r3, #20]
 8006e4a:	e7be      	b.n	8006dca <__gethex+0x362>
 8006e4c:	6922      	ldr	r2, [r4, #16]
 8006e4e:	455a      	cmp	r2, fp
 8006e50:	dd0b      	ble.n	8006e6a <__gethex+0x402>
 8006e52:	2101      	movs	r1, #1
 8006e54:	4620      	mov	r0, r4
 8006e56:	f7ff fd9f 	bl	8006998 <rshift>
 8006e5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006e5e:	3701      	adds	r7, #1
 8006e60:	42bb      	cmp	r3, r7
 8006e62:	f6ff aee0 	blt.w	8006c26 <__gethex+0x1be>
 8006e66:	2501      	movs	r5, #1
 8006e68:	e7c2      	b.n	8006df0 <__gethex+0x388>
 8006e6a:	f016 061f 	ands.w	r6, r6, #31
 8006e6e:	d0fa      	beq.n	8006e66 <__gethex+0x3fe>
 8006e70:	4453      	add	r3, sl
 8006e72:	f1c6 0620 	rsb	r6, r6, #32
 8006e76:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006e7a:	f7fe f8e3 	bl	8005044 <__hi0bits>
 8006e7e:	42b0      	cmp	r0, r6
 8006e80:	dbe7      	blt.n	8006e52 <__gethex+0x3ea>
 8006e82:	e7f0      	b.n	8006e66 <__gethex+0x3fe>
 8006e84:	08007b35 	.word	0x08007b35

08006e88 <L_shift>:
 8006e88:	f1c2 0208 	rsb	r2, r2, #8
 8006e8c:	0092      	lsls	r2, r2, #2
 8006e8e:	b570      	push	{r4, r5, r6, lr}
 8006e90:	f1c2 0620 	rsb	r6, r2, #32
 8006e94:	6843      	ldr	r3, [r0, #4]
 8006e96:	6804      	ldr	r4, [r0, #0]
 8006e98:	fa03 f506 	lsl.w	r5, r3, r6
 8006e9c:	432c      	orrs	r4, r5
 8006e9e:	40d3      	lsrs	r3, r2
 8006ea0:	6004      	str	r4, [r0, #0]
 8006ea2:	f840 3f04 	str.w	r3, [r0, #4]!
 8006ea6:	4288      	cmp	r0, r1
 8006ea8:	d3f4      	bcc.n	8006e94 <L_shift+0xc>
 8006eaa:	bd70      	pop	{r4, r5, r6, pc}

08006eac <__match>:
 8006eac:	b530      	push	{r4, r5, lr}
 8006eae:	6803      	ldr	r3, [r0, #0]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006eb6:	b914      	cbnz	r4, 8006ebe <__match+0x12>
 8006eb8:	6003      	str	r3, [r0, #0]
 8006eba:	2001      	movs	r0, #1
 8006ebc:	bd30      	pop	{r4, r5, pc}
 8006ebe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ec2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8006ec6:	2d19      	cmp	r5, #25
 8006ec8:	bf98      	it	ls
 8006eca:	3220      	addls	r2, #32
 8006ecc:	42a2      	cmp	r2, r4
 8006ece:	d0f0      	beq.n	8006eb2 <__match+0x6>
 8006ed0:	2000      	movs	r0, #0
 8006ed2:	e7f3      	b.n	8006ebc <__match+0x10>

08006ed4 <__hexnan>:
 8006ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed8:	680b      	ldr	r3, [r1, #0]
 8006eda:	6801      	ldr	r1, [r0, #0]
 8006edc:	115e      	asrs	r6, r3, #5
 8006ede:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006ee2:	f013 031f 	ands.w	r3, r3, #31
 8006ee6:	b087      	sub	sp, #28
 8006ee8:	bf18      	it	ne
 8006eea:	3604      	addne	r6, #4
 8006eec:	2500      	movs	r5, #0
 8006eee:	1f37      	subs	r7, r6, #4
 8006ef0:	4682      	mov	sl, r0
 8006ef2:	4690      	mov	r8, r2
 8006ef4:	9301      	str	r3, [sp, #4]
 8006ef6:	f846 5c04 	str.w	r5, [r6, #-4]
 8006efa:	46b9      	mov	r9, r7
 8006efc:	463c      	mov	r4, r7
 8006efe:	9502      	str	r5, [sp, #8]
 8006f00:	46ab      	mov	fp, r5
 8006f02:	784a      	ldrb	r2, [r1, #1]
 8006f04:	1c4b      	adds	r3, r1, #1
 8006f06:	9303      	str	r3, [sp, #12]
 8006f08:	b342      	cbz	r2, 8006f5c <__hexnan+0x88>
 8006f0a:	4610      	mov	r0, r2
 8006f0c:	9105      	str	r1, [sp, #20]
 8006f0e:	9204      	str	r2, [sp, #16]
 8006f10:	f7ff fd94 	bl	8006a3c <__hexdig_fun>
 8006f14:	2800      	cmp	r0, #0
 8006f16:	d151      	bne.n	8006fbc <__hexnan+0xe8>
 8006f18:	9a04      	ldr	r2, [sp, #16]
 8006f1a:	9905      	ldr	r1, [sp, #20]
 8006f1c:	2a20      	cmp	r2, #32
 8006f1e:	d818      	bhi.n	8006f52 <__hexnan+0x7e>
 8006f20:	9b02      	ldr	r3, [sp, #8]
 8006f22:	459b      	cmp	fp, r3
 8006f24:	dd13      	ble.n	8006f4e <__hexnan+0x7a>
 8006f26:	454c      	cmp	r4, r9
 8006f28:	d206      	bcs.n	8006f38 <__hexnan+0x64>
 8006f2a:	2d07      	cmp	r5, #7
 8006f2c:	dc04      	bgt.n	8006f38 <__hexnan+0x64>
 8006f2e:	462a      	mov	r2, r5
 8006f30:	4649      	mov	r1, r9
 8006f32:	4620      	mov	r0, r4
 8006f34:	f7ff ffa8 	bl	8006e88 <L_shift>
 8006f38:	4544      	cmp	r4, r8
 8006f3a:	d952      	bls.n	8006fe2 <__hexnan+0x10e>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	f1a4 0904 	sub.w	r9, r4, #4
 8006f42:	f844 3c04 	str.w	r3, [r4, #-4]
 8006f46:	f8cd b008 	str.w	fp, [sp, #8]
 8006f4a:	464c      	mov	r4, r9
 8006f4c:	461d      	mov	r5, r3
 8006f4e:	9903      	ldr	r1, [sp, #12]
 8006f50:	e7d7      	b.n	8006f02 <__hexnan+0x2e>
 8006f52:	2a29      	cmp	r2, #41	@ 0x29
 8006f54:	d157      	bne.n	8007006 <__hexnan+0x132>
 8006f56:	3102      	adds	r1, #2
 8006f58:	f8ca 1000 	str.w	r1, [sl]
 8006f5c:	f1bb 0f00 	cmp.w	fp, #0
 8006f60:	d051      	beq.n	8007006 <__hexnan+0x132>
 8006f62:	454c      	cmp	r4, r9
 8006f64:	d206      	bcs.n	8006f74 <__hexnan+0xa0>
 8006f66:	2d07      	cmp	r5, #7
 8006f68:	dc04      	bgt.n	8006f74 <__hexnan+0xa0>
 8006f6a:	462a      	mov	r2, r5
 8006f6c:	4649      	mov	r1, r9
 8006f6e:	4620      	mov	r0, r4
 8006f70:	f7ff ff8a 	bl	8006e88 <L_shift>
 8006f74:	4544      	cmp	r4, r8
 8006f76:	d936      	bls.n	8006fe6 <__hexnan+0x112>
 8006f78:	f1a8 0204 	sub.w	r2, r8, #4
 8006f7c:	4623      	mov	r3, r4
 8006f7e:	f853 1b04 	ldr.w	r1, [r3], #4
 8006f82:	f842 1f04 	str.w	r1, [r2, #4]!
 8006f86:	429f      	cmp	r7, r3
 8006f88:	d2f9      	bcs.n	8006f7e <__hexnan+0xaa>
 8006f8a:	1b3b      	subs	r3, r7, r4
 8006f8c:	f023 0303 	bic.w	r3, r3, #3
 8006f90:	3304      	adds	r3, #4
 8006f92:	3401      	adds	r4, #1
 8006f94:	3e03      	subs	r6, #3
 8006f96:	42b4      	cmp	r4, r6
 8006f98:	bf88      	it	hi
 8006f9a:	2304      	movhi	r3, #4
 8006f9c:	4443      	add	r3, r8
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f843 2b04 	str.w	r2, [r3], #4
 8006fa4:	429f      	cmp	r7, r3
 8006fa6:	d2fb      	bcs.n	8006fa0 <__hexnan+0xcc>
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	b91b      	cbnz	r3, 8006fb4 <__hexnan+0xe0>
 8006fac:	4547      	cmp	r7, r8
 8006fae:	d128      	bne.n	8007002 <__hexnan+0x12e>
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	603b      	str	r3, [r7, #0]
 8006fb4:	2005      	movs	r0, #5
 8006fb6:	b007      	add	sp, #28
 8006fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fbc:	3501      	adds	r5, #1
 8006fbe:	2d08      	cmp	r5, #8
 8006fc0:	f10b 0b01 	add.w	fp, fp, #1
 8006fc4:	dd06      	ble.n	8006fd4 <__hexnan+0x100>
 8006fc6:	4544      	cmp	r4, r8
 8006fc8:	d9c1      	bls.n	8006f4e <__hexnan+0x7a>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	f844 3c04 	str.w	r3, [r4, #-4]
 8006fd0:	2501      	movs	r5, #1
 8006fd2:	3c04      	subs	r4, #4
 8006fd4:	6822      	ldr	r2, [r4, #0]
 8006fd6:	f000 000f 	and.w	r0, r0, #15
 8006fda:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006fde:	6020      	str	r0, [r4, #0]
 8006fe0:	e7b5      	b.n	8006f4e <__hexnan+0x7a>
 8006fe2:	2508      	movs	r5, #8
 8006fe4:	e7b3      	b.n	8006f4e <__hexnan+0x7a>
 8006fe6:	9b01      	ldr	r3, [sp, #4]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d0dd      	beq.n	8006fa8 <__hexnan+0xd4>
 8006fec:	f1c3 0320 	rsb	r3, r3, #32
 8006ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ff4:	40da      	lsrs	r2, r3
 8006ff6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	f846 3c04 	str.w	r3, [r6, #-4]
 8007000:	e7d2      	b.n	8006fa8 <__hexnan+0xd4>
 8007002:	3f04      	subs	r7, #4
 8007004:	e7d0      	b.n	8006fa8 <__hexnan+0xd4>
 8007006:	2004      	movs	r0, #4
 8007008:	e7d5      	b.n	8006fb6 <__hexnan+0xe2>

0800700a <__ascii_mbtowc>:
 800700a:	b082      	sub	sp, #8
 800700c:	b901      	cbnz	r1, 8007010 <__ascii_mbtowc+0x6>
 800700e:	a901      	add	r1, sp, #4
 8007010:	b142      	cbz	r2, 8007024 <__ascii_mbtowc+0x1a>
 8007012:	b14b      	cbz	r3, 8007028 <__ascii_mbtowc+0x1e>
 8007014:	7813      	ldrb	r3, [r2, #0]
 8007016:	600b      	str	r3, [r1, #0]
 8007018:	7812      	ldrb	r2, [r2, #0]
 800701a:	1e10      	subs	r0, r2, #0
 800701c:	bf18      	it	ne
 800701e:	2001      	movne	r0, #1
 8007020:	b002      	add	sp, #8
 8007022:	4770      	bx	lr
 8007024:	4610      	mov	r0, r2
 8007026:	e7fb      	b.n	8007020 <__ascii_mbtowc+0x16>
 8007028:	f06f 0001 	mvn.w	r0, #1
 800702c:	e7f8      	b.n	8007020 <__ascii_mbtowc+0x16>

0800702e <_realloc_r>:
 800702e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007032:	4607      	mov	r7, r0
 8007034:	4614      	mov	r4, r2
 8007036:	460d      	mov	r5, r1
 8007038:	b921      	cbnz	r1, 8007044 <_realloc_r+0x16>
 800703a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800703e:	4611      	mov	r1, r2
 8007040:	f7fd be82 	b.w	8004d48 <_malloc_r>
 8007044:	b92a      	cbnz	r2, 8007052 <_realloc_r+0x24>
 8007046:	f7fd fe0b 	bl	8004c60 <_free_r>
 800704a:	4625      	mov	r5, r4
 800704c:	4628      	mov	r0, r5
 800704e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007052:	f000 f840 	bl	80070d6 <_malloc_usable_size_r>
 8007056:	4284      	cmp	r4, r0
 8007058:	4606      	mov	r6, r0
 800705a:	d802      	bhi.n	8007062 <_realloc_r+0x34>
 800705c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007060:	d8f4      	bhi.n	800704c <_realloc_r+0x1e>
 8007062:	4621      	mov	r1, r4
 8007064:	4638      	mov	r0, r7
 8007066:	f7fd fe6f 	bl	8004d48 <_malloc_r>
 800706a:	4680      	mov	r8, r0
 800706c:	b908      	cbnz	r0, 8007072 <_realloc_r+0x44>
 800706e:	4645      	mov	r5, r8
 8007070:	e7ec      	b.n	800704c <_realloc_r+0x1e>
 8007072:	42b4      	cmp	r4, r6
 8007074:	4622      	mov	r2, r4
 8007076:	4629      	mov	r1, r5
 8007078:	bf28      	it	cs
 800707a:	4632      	movcs	r2, r6
 800707c:	f7ff fc46 	bl	800690c <memcpy>
 8007080:	4629      	mov	r1, r5
 8007082:	4638      	mov	r0, r7
 8007084:	f7fd fdec 	bl	8004c60 <_free_r>
 8007088:	e7f1      	b.n	800706e <_realloc_r+0x40>

0800708a <__ascii_wctomb>:
 800708a:	4603      	mov	r3, r0
 800708c:	4608      	mov	r0, r1
 800708e:	b141      	cbz	r1, 80070a2 <__ascii_wctomb+0x18>
 8007090:	2aff      	cmp	r2, #255	@ 0xff
 8007092:	d904      	bls.n	800709e <__ascii_wctomb+0x14>
 8007094:	228a      	movs	r2, #138	@ 0x8a
 8007096:	601a      	str	r2, [r3, #0]
 8007098:	f04f 30ff 	mov.w	r0, #4294967295
 800709c:	4770      	bx	lr
 800709e:	700a      	strb	r2, [r1, #0]
 80070a0:	2001      	movs	r0, #1
 80070a2:	4770      	bx	lr

080070a4 <fiprintf>:
 80070a4:	b40e      	push	{r1, r2, r3}
 80070a6:	b503      	push	{r0, r1, lr}
 80070a8:	4601      	mov	r1, r0
 80070aa:	ab03      	add	r3, sp, #12
 80070ac:	4805      	ldr	r0, [pc, #20]	@ (80070c4 <fiprintf+0x20>)
 80070ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80070b2:	6800      	ldr	r0, [r0, #0]
 80070b4:	9301      	str	r3, [sp, #4]
 80070b6:	f000 f83d 	bl	8007134 <_vfiprintf_r>
 80070ba:	b002      	add	sp, #8
 80070bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80070c0:	b003      	add	sp, #12
 80070c2:	4770      	bx	lr
 80070c4:	20000024 	.word	0x20000024

080070c8 <abort>:
 80070c8:	b508      	push	{r3, lr}
 80070ca:	2006      	movs	r0, #6
 80070cc:	f000 fa06 	bl	80074dc <raise>
 80070d0:	2001      	movs	r0, #1
 80070d2:	f7fa f96e 	bl	80013b2 <_exit>

080070d6 <_malloc_usable_size_r>:
 80070d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070da:	1f18      	subs	r0, r3, #4
 80070dc:	2b00      	cmp	r3, #0
 80070de:	bfbc      	itt	lt
 80070e0:	580b      	ldrlt	r3, [r1, r0]
 80070e2:	18c0      	addlt	r0, r0, r3
 80070e4:	4770      	bx	lr

080070e6 <__sfputc_r>:
 80070e6:	6893      	ldr	r3, [r2, #8]
 80070e8:	3b01      	subs	r3, #1
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	b410      	push	{r4}
 80070ee:	6093      	str	r3, [r2, #8]
 80070f0:	da07      	bge.n	8007102 <__sfputc_r+0x1c>
 80070f2:	6994      	ldr	r4, [r2, #24]
 80070f4:	42a3      	cmp	r3, r4
 80070f6:	db01      	blt.n	80070fc <__sfputc_r+0x16>
 80070f8:	290a      	cmp	r1, #10
 80070fa:	d102      	bne.n	8007102 <__sfputc_r+0x1c>
 80070fc:	bc10      	pop	{r4}
 80070fe:	f000 b931 	b.w	8007364 <__swbuf_r>
 8007102:	6813      	ldr	r3, [r2, #0]
 8007104:	1c58      	adds	r0, r3, #1
 8007106:	6010      	str	r0, [r2, #0]
 8007108:	7019      	strb	r1, [r3, #0]
 800710a:	4608      	mov	r0, r1
 800710c:	bc10      	pop	{r4}
 800710e:	4770      	bx	lr

08007110 <__sfputs_r>:
 8007110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007112:	4606      	mov	r6, r0
 8007114:	460f      	mov	r7, r1
 8007116:	4614      	mov	r4, r2
 8007118:	18d5      	adds	r5, r2, r3
 800711a:	42ac      	cmp	r4, r5
 800711c:	d101      	bne.n	8007122 <__sfputs_r+0x12>
 800711e:	2000      	movs	r0, #0
 8007120:	e007      	b.n	8007132 <__sfputs_r+0x22>
 8007122:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007126:	463a      	mov	r2, r7
 8007128:	4630      	mov	r0, r6
 800712a:	f7ff ffdc 	bl	80070e6 <__sfputc_r>
 800712e:	1c43      	adds	r3, r0, #1
 8007130:	d1f3      	bne.n	800711a <__sfputs_r+0xa>
 8007132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007134 <_vfiprintf_r>:
 8007134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007138:	460d      	mov	r5, r1
 800713a:	b09d      	sub	sp, #116	@ 0x74
 800713c:	4614      	mov	r4, r2
 800713e:	4698      	mov	r8, r3
 8007140:	4606      	mov	r6, r0
 8007142:	b118      	cbz	r0, 800714c <_vfiprintf_r+0x18>
 8007144:	6a03      	ldr	r3, [r0, #32]
 8007146:	b90b      	cbnz	r3, 800714c <_vfiprintf_r+0x18>
 8007148:	f7fc fe12 	bl	8003d70 <__sinit>
 800714c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800714e:	07d9      	lsls	r1, r3, #31
 8007150:	d405      	bmi.n	800715e <_vfiprintf_r+0x2a>
 8007152:	89ab      	ldrh	r3, [r5, #12]
 8007154:	059a      	lsls	r2, r3, #22
 8007156:	d402      	bmi.n	800715e <_vfiprintf_r+0x2a>
 8007158:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800715a:	f7fc ff22 	bl	8003fa2 <__retarget_lock_acquire_recursive>
 800715e:	89ab      	ldrh	r3, [r5, #12]
 8007160:	071b      	lsls	r3, r3, #28
 8007162:	d501      	bpl.n	8007168 <_vfiprintf_r+0x34>
 8007164:	692b      	ldr	r3, [r5, #16]
 8007166:	b99b      	cbnz	r3, 8007190 <_vfiprintf_r+0x5c>
 8007168:	4629      	mov	r1, r5
 800716a:	4630      	mov	r0, r6
 800716c:	f000 f938 	bl	80073e0 <__swsetup_r>
 8007170:	b170      	cbz	r0, 8007190 <_vfiprintf_r+0x5c>
 8007172:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007174:	07dc      	lsls	r4, r3, #31
 8007176:	d504      	bpl.n	8007182 <_vfiprintf_r+0x4e>
 8007178:	f04f 30ff 	mov.w	r0, #4294967295
 800717c:	b01d      	add	sp, #116	@ 0x74
 800717e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007182:	89ab      	ldrh	r3, [r5, #12]
 8007184:	0598      	lsls	r0, r3, #22
 8007186:	d4f7      	bmi.n	8007178 <_vfiprintf_r+0x44>
 8007188:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800718a:	f7fc ff0b 	bl	8003fa4 <__retarget_lock_release_recursive>
 800718e:	e7f3      	b.n	8007178 <_vfiprintf_r+0x44>
 8007190:	2300      	movs	r3, #0
 8007192:	9309      	str	r3, [sp, #36]	@ 0x24
 8007194:	2320      	movs	r3, #32
 8007196:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800719a:	f8cd 800c 	str.w	r8, [sp, #12]
 800719e:	2330      	movs	r3, #48	@ 0x30
 80071a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007350 <_vfiprintf_r+0x21c>
 80071a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80071a8:	f04f 0901 	mov.w	r9, #1
 80071ac:	4623      	mov	r3, r4
 80071ae:	469a      	mov	sl, r3
 80071b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071b4:	b10a      	cbz	r2, 80071ba <_vfiprintf_r+0x86>
 80071b6:	2a25      	cmp	r2, #37	@ 0x25
 80071b8:	d1f9      	bne.n	80071ae <_vfiprintf_r+0x7a>
 80071ba:	ebba 0b04 	subs.w	fp, sl, r4
 80071be:	d00b      	beq.n	80071d8 <_vfiprintf_r+0xa4>
 80071c0:	465b      	mov	r3, fp
 80071c2:	4622      	mov	r2, r4
 80071c4:	4629      	mov	r1, r5
 80071c6:	4630      	mov	r0, r6
 80071c8:	f7ff ffa2 	bl	8007110 <__sfputs_r>
 80071cc:	3001      	adds	r0, #1
 80071ce:	f000 80a7 	beq.w	8007320 <_vfiprintf_r+0x1ec>
 80071d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071d4:	445a      	add	r2, fp
 80071d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80071d8:	f89a 3000 	ldrb.w	r3, [sl]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f000 809f 	beq.w	8007320 <_vfiprintf_r+0x1ec>
 80071e2:	2300      	movs	r3, #0
 80071e4:	f04f 32ff 	mov.w	r2, #4294967295
 80071e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071ec:	f10a 0a01 	add.w	sl, sl, #1
 80071f0:	9304      	str	r3, [sp, #16]
 80071f2:	9307      	str	r3, [sp, #28]
 80071f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80071f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80071fa:	4654      	mov	r4, sl
 80071fc:	2205      	movs	r2, #5
 80071fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007202:	4853      	ldr	r0, [pc, #332]	@ (8007350 <_vfiprintf_r+0x21c>)
 8007204:	f7f8 ffe4 	bl	80001d0 <memchr>
 8007208:	9a04      	ldr	r2, [sp, #16]
 800720a:	b9d8      	cbnz	r0, 8007244 <_vfiprintf_r+0x110>
 800720c:	06d1      	lsls	r1, r2, #27
 800720e:	bf44      	itt	mi
 8007210:	2320      	movmi	r3, #32
 8007212:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007216:	0713      	lsls	r3, r2, #28
 8007218:	bf44      	itt	mi
 800721a:	232b      	movmi	r3, #43	@ 0x2b
 800721c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007220:	f89a 3000 	ldrb.w	r3, [sl]
 8007224:	2b2a      	cmp	r3, #42	@ 0x2a
 8007226:	d015      	beq.n	8007254 <_vfiprintf_r+0x120>
 8007228:	9a07      	ldr	r2, [sp, #28]
 800722a:	4654      	mov	r4, sl
 800722c:	2000      	movs	r0, #0
 800722e:	f04f 0c0a 	mov.w	ip, #10
 8007232:	4621      	mov	r1, r4
 8007234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007238:	3b30      	subs	r3, #48	@ 0x30
 800723a:	2b09      	cmp	r3, #9
 800723c:	d94b      	bls.n	80072d6 <_vfiprintf_r+0x1a2>
 800723e:	b1b0      	cbz	r0, 800726e <_vfiprintf_r+0x13a>
 8007240:	9207      	str	r2, [sp, #28]
 8007242:	e014      	b.n	800726e <_vfiprintf_r+0x13a>
 8007244:	eba0 0308 	sub.w	r3, r0, r8
 8007248:	fa09 f303 	lsl.w	r3, r9, r3
 800724c:	4313      	orrs	r3, r2
 800724e:	9304      	str	r3, [sp, #16]
 8007250:	46a2      	mov	sl, r4
 8007252:	e7d2      	b.n	80071fa <_vfiprintf_r+0xc6>
 8007254:	9b03      	ldr	r3, [sp, #12]
 8007256:	1d19      	adds	r1, r3, #4
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	9103      	str	r1, [sp, #12]
 800725c:	2b00      	cmp	r3, #0
 800725e:	bfbb      	ittet	lt
 8007260:	425b      	neglt	r3, r3
 8007262:	f042 0202 	orrlt.w	r2, r2, #2
 8007266:	9307      	strge	r3, [sp, #28]
 8007268:	9307      	strlt	r3, [sp, #28]
 800726a:	bfb8      	it	lt
 800726c:	9204      	strlt	r2, [sp, #16]
 800726e:	7823      	ldrb	r3, [r4, #0]
 8007270:	2b2e      	cmp	r3, #46	@ 0x2e
 8007272:	d10a      	bne.n	800728a <_vfiprintf_r+0x156>
 8007274:	7863      	ldrb	r3, [r4, #1]
 8007276:	2b2a      	cmp	r3, #42	@ 0x2a
 8007278:	d132      	bne.n	80072e0 <_vfiprintf_r+0x1ac>
 800727a:	9b03      	ldr	r3, [sp, #12]
 800727c:	1d1a      	adds	r2, r3, #4
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	9203      	str	r2, [sp, #12]
 8007282:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007286:	3402      	adds	r4, #2
 8007288:	9305      	str	r3, [sp, #20]
 800728a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007354 <_vfiprintf_r+0x220>
 800728e:	7821      	ldrb	r1, [r4, #0]
 8007290:	2203      	movs	r2, #3
 8007292:	4650      	mov	r0, sl
 8007294:	f7f8 ff9c 	bl	80001d0 <memchr>
 8007298:	b138      	cbz	r0, 80072aa <_vfiprintf_r+0x176>
 800729a:	9b04      	ldr	r3, [sp, #16]
 800729c:	eba0 000a 	sub.w	r0, r0, sl
 80072a0:	2240      	movs	r2, #64	@ 0x40
 80072a2:	4082      	lsls	r2, r0
 80072a4:	4313      	orrs	r3, r2
 80072a6:	3401      	adds	r4, #1
 80072a8:	9304      	str	r3, [sp, #16]
 80072aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072ae:	482a      	ldr	r0, [pc, #168]	@ (8007358 <_vfiprintf_r+0x224>)
 80072b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80072b4:	2206      	movs	r2, #6
 80072b6:	f7f8 ff8b 	bl	80001d0 <memchr>
 80072ba:	2800      	cmp	r0, #0
 80072bc:	d03f      	beq.n	800733e <_vfiprintf_r+0x20a>
 80072be:	4b27      	ldr	r3, [pc, #156]	@ (800735c <_vfiprintf_r+0x228>)
 80072c0:	bb1b      	cbnz	r3, 800730a <_vfiprintf_r+0x1d6>
 80072c2:	9b03      	ldr	r3, [sp, #12]
 80072c4:	3307      	adds	r3, #7
 80072c6:	f023 0307 	bic.w	r3, r3, #7
 80072ca:	3308      	adds	r3, #8
 80072cc:	9303      	str	r3, [sp, #12]
 80072ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072d0:	443b      	add	r3, r7
 80072d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80072d4:	e76a      	b.n	80071ac <_vfiprintf_r+0x78>
 80072d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80072da:	460c      	mov	r4, r1
 80072dc:	2001      	movs	r0, #1
 80072de:	e7a8      	b.n	8007232 <_vfiprintf_r+0xfe>
 80072e0:	2300      	movs	r3, #0
 80072e2:	3401      	adds	r4, #1
 80072e4:	9305      	str	r3, [sp, #20]
 80072e6:	4619      	mov	r1, r3
 80072e8:	f04f 0c0a 	mov.w	ip, #10
 80072ec:	4620      	mov	r0, r4
 80072ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072f2:	3a30      	subs	r2, #48	@ 0x30
 80072f4:	2a09      	cmp	r2, #9
 80072f6:	d903      	bls.n	8007300 <_vfiprintf_r+0x1cc>
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d0c6      	beq.n	800728a <_vfiprintf_r+0x156>
 80072fc:	9105      	str	r1, [sp, #20]
 80072fe:	e7c4      	b.n	800728a <_vfiprintf_r+0x156>
 8007300:	fb0c 2101 	mla	r1, ip, r1, r2
 8007304:	4604      	mov	r4, r0
 8007306:	2301      	movs	r3, #1
 8007308:	e7f0      	b.n	80072ec <_vfiprintf_r+0x1b8>
 800730a:	ab03      	add	r3, sp, #12
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	462a      	mov	r2, r5
 8007310:	4b13      	ldr	r3, [pc, #76]	@ (8007360 <_vfiprintf_r+0x22c>)
 8007312:	a904      	add	r1, sp, #16
 8007314:	4630      	mov	r0, r6
 8007316:	f7fb fedf 	bl	80030d8 <_printf_float>
 800731a:	4607      	mov	r7, r0
 800731c:	1c78      	adds	r0, r7, #1
 800731e:	d1d6      	bne.n	80072ce <_vfiprintf_r+0x19a>
 8007320:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007322:	07d9      	lsls	r1, r3, #31
 8007324:	d405      	bmi.n	8007332 <_vfiprintf_r+0x1fe>
 8007326:	89ab      	ldrh	r3, [r5, #12]
 8007328:	059a      	lsls	r2, r3, #22
 800732a:	d402      	bmi.n	8007332 <_vfiprintf_r+0x1fe>
 800732c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800732e:	f7fc fe39 	bl	8003fa4 <__retarget_lock_release_recursive>
 8007332:	89ab      	ldrh	r3, [r5, #12]
 8007334:	065b      	lsls	r3, r3, #25
 8007336:	f53f af1f 	bmi.w	8007178 <_vfiprintf_r+0x44>
 800733a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800733c:	e71e      	b.n	800717c <_vfiprintf_r+0x48>
 800733e:	ab03      	add	r3, sp, #12
 8007340:	9300      	str	r3, [sp, #0]
 8007342:	462a      	mov	r2, r5
 8007344:	4b06      	ldr	r3, [pc, #24]	@ (8007360 <_vfiprintf_r+0x22c>)
 8007346:	a904      	add	r1, sp, #16
 8007348:	4630      	mov	r0, r6
 800734a:	f7fc f95f 	bl	800360c <_printf_i>
 800734e:	e7e4      	b.n	800731a <_vfiprintf_r+0x1e6>
 8007350:	08007ba1 	.word	0x08007ba1
 8007354:	08007ba7 	.word	0x08007ba7
 8007358:	08007bab 	.word	0x08007bab
 800735c:	080030d9 	.word	0x080030d9
 8007360:	08007111 	.word	0x08007111

08007364 <__swbuf_r>:
 8007364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007366:	460e      	mov	r6, r1
 8007368:	4614      	mov	r4, r2
 800736a:	4605      	mov	r5, r0
 800736c:	b118      	cbz	r0, 8007376 <__swbuf_r+0x12>
 800736e:	6a03      	ldr	r3, [r0, #32]
 8007370:	b90b      	cbnz	r3, 8007376 <__swbuf_r+0x12>
 8007372:	f7fc fcfd 	bl	8003d70 <__sinit>
 8007376:	69a3      	ldr	r3, [r4, #24]
 8007378:	60a3      	str	r3, [r4, #8]
 800737a:	89a3      	ldrh	r3, [r4, #12]
 800737c:	071a      	lsls	r2, r3, #28
 800737e:	d501      	bpl.n	8007384 <__swbuf_r+0x20>
 8007380:	6923      	ldr	r3, [r4, #16]
 8007382:	b943      	cbnz	r3, 8007396 <__swbuf_r+0x32>
 8007384:	4621      	mov	r1, r4
 8007386:	4628      	mov	r0, r5
 8007388:	f000 f82a 	bl	80073e0 <__swsetup_r>
 800738c:	b118      	cbz	r0, 8007396 <__swbuf_r+0x32>
 800738e:	f04f 37ff 	mov.w	r7, #4294967295
 8007392:	4638      	mov	r0, r7
 8007394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007396:	6823      	ldr	r3, [r4, #0]
 8007398:	6922      	ldr	r2, [r4, #16]
 800739a:	1a98      	subs	r0, r3, r2
 800739c:	6963      	ldr	r3, [r4, #20]
 800739e:	b2f6      	uxtb	r6, r6
 80073a0:	4283      	cmp	r3, r0
 80073a2:	4637      	mov	r7, r6
 80073a4:	dc05      	bgt.n	80073b2 <__swbuf_r+0x4e>
 80073a6:	4621      	mov	r1, r4
 80073a8:	4628      	mov	r0, r5
 80073aa:	f7ff fa4b 	bl	8006844 <_fflush_r>
 80073ae:	2800      	cmp	r0, #0
 80073b0:	d1ed      	bne.n	800738e <__swbuf_r+0x2a>
 80073b2:	68a3      	ldr	r3, [r4, #8]
 80073b4:	3b01      	subs	r3, #1
 80073b6:	60a3      	str	r3, [r4, #8]
 80073b8:	6823      	ldr	r3, [r4, #0]
 80073ba:	1c5a      	adds	r2, r3, #1
 80073bc:	6022      	str	r2, [r4, #0]
 80073be:	701e      	strb	r6, [r3, #0]
 80073c0:	6962      	ldr	r2, [r4, #20]
 80073c2:	1c43      	adds	r3, r0, #1
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d004      	beq.n	80073d2 <__swbuf_r+0x6e>
 80073c8:	89a3      	ldrh	r3, [r4, #12]
 80073ca:	07db      	lsls	r3, r3, #31
 80073cc:	d5e1      	bpl.n	8007392 <__swbuf_r+0x2e>
 80073ce:	2e0a      	cmp	r6, #10
 80073d0:	d1df      	bne.n	8007392 <__swbuf_r+0x2e>
 80073d2:	4621      	mov	r1, r4
 80073d4:	4628      	mov	r0, r5
 80073d6:	f7ff fa35 	bl	8006844 <_fflush_r>
 80073da:	2800      	cmp	r0, #0
 80073dc:	d0d9      	beq.n	8007392 <__swbuf_r+0x2e>
 80073de:	e7d6      	b.n	800738e <__swbuf_r+0x2a>

080073e0 <__swsetup_r>:
 80073e0:	b538      	push	{r3, r4, r5, lr}
 80073e2:	4b29      	ldr	r3, [pc, #164]	@ (8007488 <__swsetup_r+0xa8>)
 80073e4:	4605      	mov	r5, r0
 80073e6:	6818      	ldr	r0, [r3, #0]
 80073e8:	460c      	mov	r4, r1
 80073ea:	b118      	cbz	r0, 80073f4 <__swsetup_r+0x14>
 80073ec:	6a03      	ldr	r3, [r0, #32]
 80073ee:	b90b      	cbnz	r3, 80073f4 <__swsetup_r+0x14>
 80073f0:	f7fc fcbe 	bl	8003d70 <__sinit>
 80073f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073f8:	0719      	lsls	r1, r3, #28
 80073fa:	d422      	bmi.n	8007442 <__swsetup_r+0x62>
 80073fc:	06da      	lsls	r2, r3, #27
 80073fe:	d407      	bmi.n	8007410 <__swsetup_r+0x30>
 8007400:	2209      	movs	r2, #9
 8007402:	602a      	str	r2, [r5, #0]
 8007404:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007408:	81a3      	strh	r3, [r4, #12]
 800740a:	f04f 30ff 	mov.w	r0, #4294967295
 800740e:	e033      	b.n	8007478 <__swsetup_r+0x98>
 8007410:	0758      	lsls	r0, r3, #29
 8007412:	d512      	bpl.n	800743a <__swsetup_r+0x5a>
 8007414:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007416:	b141      	cbz	r1, 800742a <__swsetup_r+0x4a>
 8007418:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800741c:	4299      	cmp	r1, r3
 800741e:	d002      	beq.n	8007426 <__swsetup_r+0x46>
 8007420:	4628      	mov	r0, r5
 8007422:	f7fd fc1d 	bl	8004c60 <_free_r>
 8007426:	2300      	movs	r3, #0
 8007428:	6363      	str	r3, [r4, #52]	@ 0x34
 800742a:	89a3      	ldrh	r3, [r4, #12]
 800742c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007430:	81a3      	strh	r3, [r4, #12]
 8007432:	2300      	movs	r3, #0
 8007434:	6063      	str	r3, [r4, #4]
 8007436:	6923      	ldr	r3, [r4, #16]
 8007438:	6023      	str	r3, [r4, #0]
 800743a:	89a3      	ldrh	r3, [r4, #12]
 800743c:	f043 0308 	orr.w	r3, r3, #8
 8007440:	81a3      	strh	r3, [r4, #12]
 8007442:	6923      	ldr	r3, [r4, #16]
 8007444:	b94b      	cbnz	r3, 800745a <__swsetup_r+0x7a>
 8007446:	89a3      	ldrh	r3, [r4, #12]
 8007448:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800744c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007450:	d003      	beq.n	800745a <__swsetup_r+0x7a>
 8007452:	4621      	mov	r1, r4
 8007454:	4628      	mov	r0, r5
 8007456:	f000 f883 	bl	8007560 <__smakebuf_r>
 800745a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800745e:	f013 0201 	ands.w	r2, r3, #1
 8007462:	d00a      	beq.n	800747a <__swsetup_r+0x9a>
 8007464:	2200      	movs	r2, #0
 8007466:	60a2      	str	r2, [r4, #8]
 8007468:	6962      	ldr	r2, [r4, #20]
 800746a:	4252      	negs	r2, r2
 800746c:	61a2      	str	r2, [r4, #24]
 800746e:	6922      	ldr	r2, [r4, #16]
 8007470:	b942      	cbnz	r2, 8007484 <__swsetup_r+0xa4>
 8007472:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007476:	d1c5      	bne.n	8007404 <__swsetup_r+0x24>
 8007478:	bd38      	pop	{r3, r4, r5, pc}
 800747a:	0799      	lsls	r1, r3, #30
 800747c:	bf58      	it	pl
 800747e:	6962      	ldrpl	r2, [r4, #20]
 8007480:	60a2      	str	r2, [r4, #8]
 8007482:	e7f4      	b.n	800746e <__swsetup_r+0x8e>
 8007484:	2000      	movs	r0, #0
 8007486:	e7f7      	b.n	8007478 <__swsetup_r+0x98>
 8007488:	20000024 	.word	0x20000024

0800748c <_raise_r>:
 800748c:	291f      	cmp	r1, #31
 800748e:	b538      	push	{r3, r4, r5, lr}
 8007490:	4605      	mov	r5, r0
 8007492:	460c      	mov	r4, r1
 8007494:	d904      	bls.n	80074a0 <_raise_r+0x14>
 8007496:	2316      	movs	r3, #22
 8007498:	6003      	str	r3, [r0, #0]
 800749a:	f04f 30ff 	mov.w	r0, #4294967295
 800749e:	bd38      	pop	{r3, r4, r5, pc}
 80074a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80074a2:	b112      	cbz	r2, 80074aa <_raise_r+0x1e>
 80074a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80074a8:	b94b      	cbnz	r3, 80074be <_raise_r+0x32>
 80074aa:	4628      	mov	r0, r5
 80074ac:	f000 f830 	bl	8007510 <_getpid_r>
 80074b0:	4622      	mov	r2, r4
 80074b2:	4601      	mov	r1, r0
 80074b4:	4628      	mov	r0, r5
 80074b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074ba:	f000 b817 	b.w	80074ec <_kill_r>
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d00a      	beq.n	80074d8 <_raise_r+0x4c>
 80074c2:	1c59      	adds	r1, r3, #1
 80074c4:	d103      	bne.n	80074ce <_raise_r+0x42>
 80074c6:	2316      	movs	r3, #22
 80074c8:	6003      	str	r3, [r0, #0]
 80074ca:	2001      	movs	r0, #1
 80074cc:	e7e7      	b.n	800749e <_raise_r+0x12>
 80074ce:	2100      	movs	r1, #0
 80074d0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80074d4:	4620      	mov	r0, r4
 80074d6:	4798      	blx	r3
 80074d8:	2000      	movs	r0, #0
 80074da:	e7e0      	b.n	800749e <_raise_r+0x12>

080074dc <raise>:
 80074dc:	4b02      	ldr	r3, [pc, #8]	@ (80074e8 <raise+0xc>)
 80074de:	4601      	mov	r1, r0
 80074e0:	6818      	ldr	r0, [r3, #0]
 80074e2:	f7ff bfd3 	b.w	800748c <_raise_r>
 80074e6:	bf00      	nop
 80074e8:	20000024 	.word	0x20000024

080074ec <_kill_r>:
 80074ec:	b538      	push	{r3, r4, r5, lr}
 80074ee:	4d07      	ldr	r5, [pc, #28]	@ (800750c <_kill_r+0x20>)
 80074f0:	2300      	movs	r3, #0
 80074f2:	4604      	mov	r4, r0
 80074f4:	4608      	mov	r0, r1
 80074f6:	4611      	mov	r1, r2
 80074f8:	602b      	str	r3, [r5, #0]
 80074fa:	f7f9 ff4a 	bl	8001392 <_kill>
 80074fe:	1c43      	adds	r3, r0, #1
 8007500:	d102      	bne.n	8007508 <_kill_r+0x1c>
 8007502:	682b      	ldr	r3, [r5, #0]
 8007504:	b103      	cbz	r3, 8007508 <_kill_r+0x1c>
 8007506:	6023      	str	r3, [r4, #0]
 8007508:	bd38      	pop	{r3, r4, r5, pc}
 800750a:	bf00      	nop
 800750c:	200003c4 	.word	0x200003c4

08007510 <_getpid_r>:
 8007510:	f7f9 bf38 	b.w	8001384 <_getpid>

08007514 <__swhatbuf_r>:
 8007514:	b570      	push	{r4, r5, r6, lr}
 8007516:	460c      	mov	r4, r1
 8007518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800751c:	2900      	cmp	r1, #0
 800751e:	b096      	sub	sp, #88	@ 0x58
 8007520:	4615      	mov	r5, r2
 8007522:	461e      	mov	r6, r3
 8007524:	da0d      	bge.n	8007542 <__swhatbuf_r+0x2e>
 8007526:	89a3      	ldrh	r3, [r4, #12]
 8007528:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800752c:	f04f 0100 	mov.w	r1, #0
 8007530:	bf14      	ite	ne
 8007532:	2340      	movne	r3, #64	@ 0x40
 8007534:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007538:	2000      	movs	r0, #0
 800753a:	6031      	str	r1, [r6, #0]
 800753c:	602b      	str	r3, [r5, #0]
 800753e:	b016      	add	sp, #88	@ 0x58
 8007540:	bd70      	pop	{r4, r5, r6, pc}
 8007542:	466a      	mov	r2, sp
 8007544:	f000 f848 	bl	80075d8 <_fstat_r>
 8007548:	2800      	cmp	r0, #0
 800754a:	dbec      	blt.n	8007526 <__swhatbuf_r+0x12>
 800754c:	9901      	ldr	r1, [sp, #4]
 800754e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007552:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007556:	4259      	negs	r1, r3
 8007558:	4159      	adcs	r1, r3
 800755a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800755e:	e7eb      	b.n	8007538 <__swhatbuf_r+0x24>

08007560 <__smakebuf_r>:
 8007560:	898b      	ldrh	r3, [r1, #12]
 8007562:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007564:	079d      	lsls	r5, r3, #30
 8007566:	4606      	mov	r6, r0
 8007568:	460c      	mov	r4, r1
 800756a:	d507      	bpl.n	800757c <__smakebuf_r+0x1c>
 800756c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007570:	6023      	str	r3, [r4, #0]
 8007572:	6123      	str	r3, [r4, #16]
 8007574:	2301      	movs	r3, #1
 8007576:	6163      	str	r3, [r4, #20]
 8007578:	b003      	add	sp, #12
 800757a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800757c:	ab01      	add	r3, sp, #4
 800757e:	466a      	mov	r2, sp
 8007580:	f7ff ffc8 	bl	8007514 <__swhatbuf_r>
 8007584:	9f00      	ldr	r7, [sp, #0]
 8007586:	4605      	mov	r5, r0
 8007588:	4639      	mov	r1, r7
 800758a:	4630      	mov	r0, r6
 800758c:	f7fd fbdc 	bl	8004d48 <_malloc_r>
 8007590:	b948      	cbnz	r0, 80075a6 <__smakebuf_r+0x46>
 8007592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007596:	059a      	lsls	r2, r3, #22
 8007598:	d4ee      	bmi.n	8007578 <__smakebuf_r+0x18>
 800759a:	f023 0303 	bic.w	r3, r3, #3
 800759e:	f043 0302 	orr.w	r3, r3, #2
 80075a2:	81a3      	strh	r3, [r4, #12]
 80075a4:	e7e2      	b.n	800756c <__smakebuf_r+0xc>
 80075a6:	89a3      	ldrh	r3, [r4, #12]
 80075a8:	6020      	str	r0, [r4, #0]
 80075aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075ae:	81a3      	strh	r3, [r4, #12]
 80075b0:	9b01      	ldr	r3, [sp, #4]
 80075b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80075b6:	b15b      	cbz	r3, 80075d0 <__smakebuf_r+0x70>
 80075b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075bc:	4630      	mov	r0, r6
 80075be:	f000 f81d 	bl	80075fc <_isatty_r>
 80075c2:	b128      	cbz	r0, 80075d0 <__smakebuf_r+0x70>
 80075c4:	89a3      	ldrh	r3, [r4, #12]
 80075c6:	f023 0303 	bic.w	r3, r3, #3
 80075ca:	f043 0301 	orr.w	r3, r3, #1
 80075ce:	81a3      	strh	r3, [r4, #12]
 80075d0:	89a3      	ldrh	r3, [r4, #12]
 80075d2:	431d      	orrs	r5, r3
 80075d4:	81a5      	strh	r5, [r4, #12]
 80075d6:	e7cf      	b.n	8007578 <__smakebuf_r+0x18>

080075d8 <_fstat_r>:
 80075d8:	b538      	push	{r3, r4, r5, lr}
 80075da:	4d07      	ldr	r5, [pc, #28]	@ (80075f8 <_fstat_r+0x20>)
 80075dc:	2300      	movs	r3, #0
 80075de:	4604      	mov	r4, r0
 80075e0:	4608      	mov	r0, r1
 80075e2:	4611      	mov	r1, r2
 80075e4:	602b      	str	r3, [r5, #0]
 80075e6:	f7f9 ff33 	bl	8001450 <_fstat>
 80075ea:	1c43      	adds	r3, r0, #1
 80075ec:	d102      	bne.n	80075f4 <_fstat_r+0x1c>
 80075ee:	682b      	ldr	r3, [r5, #0]
 80075f0:	b103      	cbz	r3, 80075f4 <_fstat_r+0x1c>
 80075f2:	6023      	str	r3, [r4, #0]
 80075f4:	bd38      	pop	{r3, r4, r5, pc}
 80075f6:	bf00      	nop
 80075f8:	200003c4 	.word	0x200003c4

080075fc <_isatty_r>:
 80075fc:	b538      	push	{r3, r4, r5, lr}
 80075fe:	4d06      	ldr	r5, [pc, #24]	@ (8007618 <_isatty_r+0x1c>)
 8007600:	2300      	movs	r3, #0
 8007602:	4604      	mov	r4, r0
 8007604:	4608      	mov	r0, r1
 8007606:	602b      	str	r3, [r5, #0]
 8007608:	f7f9 ff31 	bl	800146e <_isatty>
 800760c:	1c43      	adds	r3, r0, #1
 800760e:	d102      	bne.n	8007616 <_isatty_r+0x1a>
 8007610:	682b      	ldr	r3, [r5, #0]
 8007612:	b103      	cbz	r3, 8007616 <_isatty_r+0x1a>
 8007614:	6023      	str	r3, [r4, #0]
 8007616:	bd38      	pop	{r3, r4, r5, pc}
 8007618:	200003c4 	.word	0x200003c4

0800761c <atan2f>:
 800761c:	f000 b88a 	b.w	8007734 <__ieee754_atan2f>

08007620 <sqrtf>:
 8007620:	b538      	push	{r3, r4, r5, lr}
 8007622:	4605      	mov	r5, r0
 8007624:	f000 f816 	bl	8007654 <__ieee754_sqrtf>
 8007628:	4629      	mov	r1, r5
 800762a:	4604      	mov	r4, r0
 800762c:	4628      	mov	r0, r5
 800762e:	f7f9 fdff 	bl	8001230 <__aeabi_fcmpun>
 8007632:	b968      	cbnz	r0, 8007650 <sqrtf+0x30>
 8007634:	2100      	movs	r1, #0
 8007636:	4628      	mov	r0, r5
 8007638:	f7f9 fdd2 	bl	80011e0 <__aeabi_fcmplt>
 800763c:	b140      	cbz	r0, 8007650 <sqrtf+0x30>
 800763e:	f7fc fc85 	bl	8003f4c <__errno>
 8007642:	2321      	movs	r3, #33	@ 0x21
 8007644:	2100      	movs	r1, #0
 8007646:	6003      	str	r3, [r0, #0]
 8007648:	4608      	mov	r0, r1
 800764a:	f7f9 fcdf 	bl	800100c <__aeabi_fdiv>
 800764e:	4604      	mov	r4, r0
 8007650:	4620      	mov	r0, r4
 8007652:	bd38      	pop	{r3, r4, r5, pc}

08007654 <__ieee754_sqrtf>:
 8007654:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8007658:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800765c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007660:	4603      	mov	r3, r0
 8007662:	4604      	mov	r4, r0
 8007664:	d30a      	bcc.n	800767c <__ieee754_sqrtf+0x28>
 8007666:	4601      	mov	r1, r0
 8007668:	f7f9 fc1c 	bl	8000ea4 <__aeabi_fmul>
 800766c:	4601      	mov	r1, r0
 800766e:	4620      	mov	r0, r4
 8007670:	f7f9 fb10 	bl	8000c94 <__addsf3>
 8007674:	4604      	mov	r4, r0
 8007676:	4620      	mov	r0, r4
 8007678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800767c:	2a00      	cmp	r2, #0
 800767e:	d0fa      	beq.n	8007676 <__ieee754_sqrtf+0x22>
 8007680:	2800      	cmp	r0, #0
 8007682:	da06      	bge.n	8007692 <__ieee754_sqrtf+0x3e>
 8007684:	4601      	mov	r1, r0
 8007686:	f7f9 fb03 	bl	8000c90 <__aeabi_fsub>
 800768a:	4601      	mov	r1, r0
 800768c:	f7f9 fcbe 	bl	800100c <__aeabi_fdiv>
 8007690:	e7f0      	b.n	8007674 <__ieee754_sqrtf+0x20>
 8007692:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 8007696:	d03c      	beq.n	8007712 <__ieee754_sqrtf+0xbe>
 8007698:	15c2      	asrs	r2, r0, #23
 800769a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800769e:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 80076a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80076a6:	07d2      	lsls	r2, r2, #31
 80076a8:	bf58      	it	pl
 80076aa:	005b      	lslpl	r3, r3, #1
 80076ac:	2400      	movs	r4, #0
 80076ae:	106d      	asrs	r5, r5, #1
 80076b0:	005b      	lsls	r3, r3, #1
 80076b2:	2019      	movs	r0, #25
 80076b4:	4626      	mov	r6, r4
 80076b6:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 80076ba:	1872      	adds	r2, r6, r1
 80076bc:	429a      	cmp	r2, r3
 80076be:	bfdd      	ittte	le
 80076c0:	1856      	addle	r6, r2, r1
 80076c2:	1864      	addle	r4, r4, r1
 80076c4:	1a9a      	suble	r2, r3, r2
 80076c6:	461a      	movgt	r2, r3
 80076c8:	3801      	subs	r0, #1
 80076ca:	ea4f 0342 	mov.w	r3, r2, lsl #1
 80076ce:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80076d2:	d1f2      	bne.n	80076ba <__ieee754_sqrtf+0x66>
 80076d4:	b1ba      	cbz	r2, 8007706 <__ieee754_sqrtf+0xb2>
 80076d6:	4e15      	ldr	r6, [pc, #84]	@ (800772c <__ieee754_sqrtf+0xd8>)
 80076d8:	4f15      	ldr	r7, [pc, #84]	@ (8007730 <__ieee754_sqrtf+0xdc>)
 80076da:	6830      	ldr	r0, [r6, #0]
 80076dc:	6839      	ldr	r1, [r7, #0]
 80076de:	f8d6 8000 	ldr.w	r8, [r6]
 80076e2:	f7f9 fad5 	bl	8000c90 <__aeabi_fsub>
 80076e6:	4601      	mov	r1, r0
 80076e8:	4640      	mov	r0, r8
 80076ea:	f7f9 fd83 	bl	80011f4 <__aeabi_fcmple>
 80076ee:	b150      	cbz	r0, 8007706 <__ieee754_sqrtf+0xb2>
 80076f0:	6830      	ldr	r0, [r6, #0]
 80076f2:	6839      	ldr	r1, [r7, #0]
 80076f4:	6836      	ldr	r6, [r6, #0]
 80076f6:	f7f9 facd 	bl	8000c94 <__addsf3>
 80076fa:	4601      	mov	r1, r0
 80076fc:	4630      	mov	r0, r6
 80076fe:	f7f9 fd6f 	bl	80011e0 <__aeabi_fcmplt>
 8007702:	b170      	cbz	r0, 8007722 <__ieee754_sqrtf+0xce>
 8007704:	3402      	adds	r4, #2
 8007706:	1064      	asrs	r4, r4, #1
 8007708:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 800770c:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8007710:	e7b1      	b.n	8007676 <__ieee754_sqrtf+0x22>
 8007712:	005b      	lsls	r3, r3, #1
 8007714:	0218      	lsls	r0, r3, #8
 8007716:	460a      	mov	r2, r1
 8007718:	f101 0101 	add.w	r1, r1, #1
 800771c:	d5f9      	bpl.n	8007712 <__ieee754_sqrtf+0xbe>
 800771e:	4252      	negs	r2, r2
 8007720:	e7bb      	b.n	800769a <__ieee754_sqrtf+0x46>
 8007722:	3401      	adds	r4, #1
 8007724:	f024 0401 	bic.w	r4, r4, #1
 8007728:	e7ed      	b.n	8007706 <__ieee754_sqrtf+0xb2>
 800772a:	bf00      	nop
 800772c:	08007eb0 	.word	0x08007eb0
 8007730:	08007eac 	.word	0x08007eac

08007734 <__ieee754_atan2f>:
 8007734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007736:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800773a:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800773e:	4603      	mov	r3, r0
 8007740:	d805      	bhi.n	800774e <__ieee754_atan2f+0x1a>
 8007742:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8007746:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800774a:	4607      	mov	r7, r0
 800774c:	d904      	bls.n	8007758 <__ieee754_atan2f+0x24>
 800774e:	4618      	mov	r0, r3
 8007750:	f7f9 faa0 	bl	8000c94 <__addsf3>
 8007754:	4603      	mov	r3, r0
 8007756:	e010      	b.n	800777a <__ieee754_atan2f+0x46>
 8007758:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 800775c:	d103      	bne.n	8007766 <__ieee754_atan2f+0x32>
 800775e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007762:	f000 b86f 	b.w	8007844 <atanf>
 8007766:	178c      	asrs	r4, r1, #30
 8007768:	f004 0402 	and.w	r4, r4, #2
 800776c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8007770:	b92a      	cbnz	r2, 800777e <__ieee754_atan2f+0x4a>
 8007772:	2c02      	cmp	r4, #2
 8007774:	d04b      	beq.n	800780e <__ieee754_atan2f+0xda>
 8007776:	2c03      	cmp	r4, #3
 8007778:	d04b      	beq.n	8007812 <__ieee754_atan2f+0xde>
 800777a:	4618      	mov	r0, r3
 800777c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800777e:	b91e      	cbnz	r6, 8007788 <__ieee754_atan2f+0x54>
 8007780:	2f00      	cmp	r7, #0
 8007782:	db4c      	blt.n	800781e <__ieee754_atan2f+0xea>
 8007784:	4b27      	ldr	r3, [pc, #156]	@ (8007824 <__ieee754_atan2f+0xf0>)
 8007786:	e7f8      	b.n	800777a <__ieee754_atan2f+0x46>
 8007788:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800778c:	d10e      	bne.n	80077ac <__ieee754_atan2f+0x78>
 800778e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8007792:	f104 34ff 	add.w	r4, r4, #4294967295
 8007796:	d105      	bne.n	80077a4 <__ieee754_atan2f+0x70>
 8007798:	2c02      	cmp	r4, #2
 800779a:	d83c      	bhi.n	8007816 <__ieee754_atan2f+0xe2>
 800779c:	4b22      	ldr	r3, [pc, #136]	@ (8007828 <__ieee754_atan2f+0xf4>)
 800779e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80077a2:	e7ea      	b.n	800777a <__ieee754_atan2f+0x46>
 80077a4:	2c02      	cmp	r4, #2
 80077a6:	d838      	bhi.n	800781a <__ieee754_atan2f+0xe6>
 80077a8:	4b20      	ldr	r3, [pc, #128]	@ (800782c <__ieee754_atan2f+0xf8>)
 80077aa:	e7f8      	b.n	800779e <__ieee754_atan2f+0x6a>
 80077ac:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80077b0:	d0e6      	beq.n	8007780 <__ieee754_atan2f+0x4c>
 80077b2:	1b92      	subs	r2, r2, r6
 80077b4:	f1b2 5ff4 	cmp.w	r2, #511705088	@ 0x1e800000
 80077b8:	ea4f 50e2 	mov.w	r0, r2, asr #23
 80077bc:	da17      	bge.n	80077ee <__ieee754_atan2f+0xba>
 80077be:	2900      	cmp	r1, #0
 80077c0:	da01      	bge.n	80077c6 <__ieee754_atan2f+0x92>
 80077c2:	303c      	adds	r0, #60	@ 0x3c
 80077c4:	db15      	blt.n	80077f2 <__ieee754_atan2f+0xbe>
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7f9 fc20 	bl	800100c <__aeabi_fdiv>
 80077cc:	f000 f946 	bl	8007a5c <fabsf>
 80077d0:	f000 f838 	bl	8007844 <atanf>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2c01      	cmp	r4, #1
 80077d8:	d00d      	beq.n	80077f6 <__ieee754_atan2f+0xc2>
 80077da:	2c02      	cmp	r4, #2
 80077dc:	d00e      	beq.n	80077fc <__ieee754_atan2f+0xc8>
 80077de:	2c00      	cmp	r4, #0
 80077e0:	d0cb      	beq.n	800777a <__ieee754_atan2f+0x46>
 80077e2:	4913      	ldr	r1, [pc, #76]	@ (8007830 <__ieee754_atan2f+0xfc>)
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7f9 fa55 	bl	8000c94 <__addsf3>
 80077ea:	4912      	ldr	r1, [pc, #72]	@ (8007834 <__ieee754_atan2f+0x100>)
 80077ec:	e00c      	b.n	8007808 <__ieee754_atan2f+0xd4>
 80077ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007824 <__ieee754_atan2f+0xf0>)
 80077f0:	e7f1      	b.n	80077d6 <__ieee754_atan2f+0xa2>
 80077f2:	2300      	movs	r3, #0
 80077f4:	e7ef      	b.n	80077d6 <__ieee754_atan2f+0xa2>
 80077f6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80077fa:	e7be      	b.n	800777a <__ieee754_atan2f+0x46>
 80077fc:	490c      	ldr	r1, [pc, #48]	@ (8007830 <__ieee754_atan2f+0xfc>)
 80077fe:	4618      	mov	r0, r3
 8007800:	f7f9 fa48 	bl	8000c94 <__addsf3>
 8007804:	4601      	mov	r1, r0
 8007806:	480b      	ldr	r0, [pc, #44]	@ (8007834 <__ieee754_atan2f+0x100>)
 8007808:	f7f9 fa42 	bl	8000c90 <__aeabi_fsub>
 800780c:	e7a2      	b.n	8007754 <__ieee754_atan2f+0x20>
 800780e:	4b09      	ldr	r3, [pc, #36]	@ (8007834 <__ieee754_atan2f+0x100>)
 8007810:	e7b3      	b.n	800777a <__ieee754_atan2f+0x46>
 8007812:	4b09      	ldr	r3, [pc, #36]	@ (8007838 <__ieee754_atan2f+0x104>)
 8007814:	e7b1      	b.n	800777a <__ieee754_atan2f+0x46>
 8007816:	4b09      	ldr	r3, [pc, #36]	@ (800783c <__ieee754_atan2f+0x108>)
 8007818:	e7af      	b.n	800777a <__ieee754_atan2f+0x46>
 800781a:	2300      	movs	r3, #0
 800781c:	e7ad      	b.n	800777a <__ieee754_atan2f+0x46>
 800781e:	4b08      	ldr	r3, [pc, #32]	@ (8007840 <__ieee754_atan2f+0x10c>)
 8007820:	e7ab      	b.n	800777a <__ieee754_atan2f+0x46>
 8007822:	bf00      	nop
 8007824:	3fc90fdb 	.word	0x3fc90fdb
 8007828:	08007ec0 	.word	0x08007ec0
 800782c:	08007eb4 	.word	0x08007eb4
 8007830:	33bbbd2e 	.word	0x33bbbd2e
 8007834:	40490fdb 	.word	0x40490fdb
 8007838:	c0490fdb 	.word	0xc0490fdb
 800783c:	3f490fdb 	.word	0x3f490fdb
 8007840:	bfc90fdb 	.word	0xbfc90fdb

08007844 <atanf>:
 8007844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007848:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800784c:	f1b5 4fa1 	cmp.w	r5, #1350565888	@ 0x50800000
 8007850:	4604      	mov	r4, r0
 8007852:	4680      	mov	r8, r0
 8007854:	d30e      	bcc.n	8007874 <atanf+0x30>
 8007856:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800785a:	d904      	bls.n	8007866 <atanf+0x22>
 800785c:	4601      	mov	r1, r0
 800785e:	f7f9 fa19 	bl	8000c94 <__addsf3>
 8007862:	4604      	mov	r4, r0
 8007864:	e003      	b.n	800786e <atanf+0x2a>
 8007866:	2800      	cmp	r0, #0
 8007868:	f340 80ce 	ble.w	8007a08 <atanf+0x1c4>
 800786c:	4c67      	ldr	r4, [pc, #412]	@ (8007a0c <atanf+0x1c8>)
 800786e:	4620      	mov	r0, r4
 8007870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007874:	4b66      	ldr	r3, [pc, #408]	@ (8007a10 <atanf+0x1cc>)
 8007876:	429d      	cmp	r5, r3
 8007878:	d80e      	bhi.n	8007898 <atanf+0x54>
 800787a:	f1b5 5f44 	cmp.w	r5, #822083584	@ 0x31000000
 800787e:	d208      	bcs.n	8007892 <atanf+0x4e>
 8007880:	4964      	ldr	r1, [pc, #400]	@ (8007a14 <atanf+0x1d0>)
 8007882:	f7f9 fa07 	bl	8000c94 <__addsf3>
 8007886:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800788a:	f7f9 fcc7 	bl	800121c <__aeabi_fcmpgt>
 800788e:	2800      	cmp	r0, #0
 8007890:	d1ed      	bne.n	800786e <atanf+0x2a>
 8007892:	f04f 36ff 	mov.w	r6, #4294967295
 8007896:	e01c      	b.n	80078d2 <atanf+0x8e>
 8007898:	f000 f8e0 	bl	8007a5c <fabsf>
 800789c:	4b5e      	ldr	r3, [pc, #376]	@ (8007a18 <atanf+0x1d4>)
 800789e:	429d      	cmp	r5, r3
 80078a0:	4604      	mov	r4, r0
 80078a2:	d87c      	bhi.n	800799e <atanf+0x15a>
 80078a4:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80078a8:	429d      	cmp	r5, r3
 80078aa:	d867      	bhi.n	800797c <atanf+0x138>
 80078ac:	4601      	mov	r1, r0
 80078ae:	f7f9 f9f1 	bl	8000c94 <__addsf3>
 80078b2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80078b6:	f7f9 f9eb 	bl	8000c90 <__aeabi_fsub>
 80078ba:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80078be:	4605      	mov	r5, r0
 80078c0:	4620      	mov	r0, r4
 80078c2:	f7f9 f9e7 	bl	8000c94 <__addsf3>
 80078c6:	4601      	mov	r1, r0
 80078c8:	4628      	mov	r0, r5
 80078ca:	f7f9 fb9f 	bl	800100c <__aeabi_fdiv>
 80078ce:	2600      	movs	r6, #0
 80078d0:	4604      	mov	r4, r0
 80078d2:	4621      	mov	r1, r4
 80078d4:	4620      	mov	r0, r4
 80078d6:	f7f9 fae5 	bl	8000ea4 <__aeabi_fmul>
 80078da:	4601      	mov	r1, r0
 80078dc:	4607      	mov	r7, r0
 80078de:	f7f9 fae1 	bl	8000ea4 <__aeabi_fmul>
 80078e2:	494e      	ldr	r1, [pc, #312]	@ (8007a1c <atanf+0x1d8>)
 80078e4:	4605      	mov	r5, r0
 80078e6:	f7f9 fadd 	bl	8000ea4 <__aeabi_fmul>
 80078ea:	494d      	ldr	r1, [pc, #308]	@ (8007a20 <atanf+0x1dc>)
 80078ec:	f7f9 f9d2 	bl	8000c94 <__addsf3>
 80078f0:	4629      	mov	r1, r5
 80078f2:	f7f9 fad7 	bl	8000ea4 <__aeabi_fmul>
 80078f6:	494b      	ldr	r1, [pc, #300]	@ (8007a24 <atanf+0x1e0>)
 80078f8:	f7f9 f9cc 	bl	8000c94 <__addsf3>
 80078fc:	4629      	mov	r1, r5
 80078fe:	f7f9 fad1 	bl	8000ea4 <__aeabi_fmul>
 8007902:	4949      	ldr	r1, [pc, #292]	@ (8007a28 <atanf+0x1e4>)
 8007904:	f7f9 f9c6 	bl	8000c94 <__addsf3>
 8007908:	4629      	mov	r1, r5
 800790a:	f7f9 facb 	bl	8000ea4 <__aeabi_fmul>
 800790e:	4947      	ldr	r1, [pc, #284]	@ (8007a2c <atanf+0x1e8>)
 8007910:	f7f9 f9c0 	bl	8000c94 <__addsf3>
 8007914:	4629      	mov	r1, r5
 8007916:	f7f9 fac5 	bl	8000ea4 <__aeabi_fmul>
 800791a:	4945      	ldr	r1, [pc, #276]	@ (8007a30 <atanf+0x1ec>)
 800791c:	f7f9 f9ba 	bl	8000c94 <__addsf3>
 8007920:	4639      	mov	r1, r7
 8007922:	f7f9 fabf 	bl	8000ea4 <__aeabi_fmul>
 8007926:	4943      	ldr	r1, [pc, #268]	@ (8007a34 <atanf+0x1f0>)
 8007928:	4607      	mov	r7, r0
 800792a:	4628      	mov	r0, r5
 800792c:	f7f9 faba 	bl	8000ea4 <__aeabi_fmul>
 8007930:	4941      	ldr	r1, [pc, #260]	@ (8007a38 <atanf+0x1f4>)
 8007932:	f7f9 f9ad 	bl	8000c90 <__aeabi_fsub>
 8007936:	4629      	mov	r1, r5
 8007938:	f7f9 fab4 	bl	8000ea4 <__aeabi_fmul>
 800793c:	493f      	ldr	r1, [pc, #252]	@ (8007a3c <atanf+0x1f8>)
 800793e:	f7f9 f9a7 	bl	8000c90 <__aeabi_fsub>
 8007942:	4629      	mov	r1, r5
 8007944:	f7f9 faae 	bl	8000ea4 <__aeabi_fmul>
 8007948:	493d      	ldr	r1, [pc, #244]	@ (8007a40 <atanf+0x1fc>)
 800794a:	f7f9 f9a1 	bl	8000c90 <__aeabi_fsub>
 800794e:	4629      	mov	r1, r5
 8007950:	f7f9 faa8 	bl	8000ea4 <__aeabi_fmul>
 8007954:	493b      	ldr	r1, [pc, #236]	@ (8007a44 <atanf+0x200>)
 8007956:	f7f9 f99b 	bl	8000c90 <__aeabi_fsub>
 800795a:	4629      	mov	r1, r5
 800795c:	f7f9 faa2 	bl	8000ea4 <__aeabi_fmul>
 8007960:	4601      	mov	r1, r0
 8007962:	4638      	mov	r0, r7
 8007964:	f7f9 f996 	bl	8000c94 <__addsf3>
 8007968:	4621      	mov	r1, r4
 800796a:	f7f9 fa9b 	bl	8000ea4 <__aeabi_fmul>
 800796e:	1c73      	adds	r3, r6, #1
 8007970:	4601      	mov	r1, r0
 8007972:	d133      	bne.n	80079dc <atanf+0x198>
 8007974:	4620      	mov	r0, r4
 8007976:	f7f9 f98b 	bl	8000c90 <__aeabi_fsub>
 800797a:	e772      	b.n	8007862 <atanf+0x1e>
 800797c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007980:	f7f9 f986 	bl	8000c90 <__aeabi_fsub>
 8007984:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007988:	4605      	mov	r5, r0
 800798a:	4620      	mov	r0, r4
 800798c:	f7f9 f982 	bl	8000c94 <__addsf3>
 8007990:	4601      	mov	r1, r0
 8007992:	4628      	mov	r0, r5
 8007994:	f7f9 fb3a 	bl	800100c <__aeabi_fdiv>
 8007998:	2601      	movs	r6, #1
 800799a:	4604      	mov	r4, r0
 800799c:	e799      	b.n	80078d2 <atanf+0x8e>
 800799e:	4b2a      	ldr	r3, [pc, #168]	@ (8007a48 <atanf+0x204>)
 80079a0:	429d      	cmp	r5, r3
 80079a2:	d814      	bhi.n	80079ce <atanf+0x18a>
 80079a4:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 80079a8:	f7f9 f972 	bl	8000c90 <__aeabi_fsub>
 80079ac:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 80079b0:	4605      	mov	r5, r0
 80079b2:	4620      	mov	r0, r4
 80079b4:	f7f9 fa76 	bl	8000ea4 <__aeabi_fmul>
 80079b8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80079bc:	f7f9 f96a 	bl	8000c94 <__addsf3>
 80079c0:	4601      	mov	r1, r0
 80079c2:	4628      	mov	r0, r5
 80079c4:	f7f9 fb22 	bl	800100c <__aeabi_fdiv>
 80079c8:	2602      	movs	r6, #2
 80079ca:	4604      	mov	r4, r0
 80079cc:	e781      	b.n	80078d2 <atanf+0x8e>
 80079ce:	4601      	mov	r1, r0
 80079d0:	481e      	ldr	r0, [pc, #120]	@ (8007a4c <atanf+0x208>)
 80079d2:	f7f9 fb1b 	bl	800100c <__aeabi_fdiv>
 80079d6:	2603      	movs	r6, #3
 80079d8:	4604      	mov	r4, r0
 80079da:	e77a      	b.n	80078d2 <atanf+0x8e>
 80079dc:	4b1c      	ldr	r3, [pc, #112]	@ (8007a50 <atanf+0x20c>)
 80079de:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 80079e2:	f7f9 f955 	bl	8000c90 <__aeabi_fsub>
 80079e6:	4621      	mov	r1, r4
 80079e8:	f7f9 f952 	bl	8000c90 <__aeabi_fsub>
 80079ec:	4b19      	ldr	r3, [pc, #100]	@ (8007a54 <atanf+0x210>)
 80079ee:	4601      	mov	r1, r0
 80079f0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80079f4:	f7f9 f94c 	bl	8000c90 <__aeabi_fsub>
 80079f8:	f1b8 0f00 	cmp.w	r8, #0
 80079fc:	4604      	mov	r4, r0
 80079fe:	f6bf af36 	bge.w	800786e <atanf+0x2a>
 8007a02:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8007a06:	e732      	b.n	800786e <atanf+0x2a>
 8007a08:	4c13      	ldr	r4, [pc, #76]	@ (8007a58 <atanf+0x214>)
 8007a0a:	e730      	b.n	800786e <atanf+0x2a>
 8007a0c:	3fc90fdb 	.word	0x3fc90fdb
 8007a10:	3edfffff 	.word	0x3edfffff
 8007a14:	7149f2ca 	.word	0x7149f2ca
 8007a18:	3f97ffff 	.word	0x3f97ffff
 8007a1c:	3c8569d7 	.word	0x3c8569d7
 8007a20:	3d4bda59 	.word	0x3d4bda59
 8007a24:	3d886b35 	.word	0x3d886b35
 8007a28:	3dba2e6e 	.word	0x3dba2e6e
 8007a2c:	3e124925 	.word	0x3e124925
 8007a30:	3eaaaaab 	.word	0x3eaaaaab
 8007a34:	bd15a221 	.word	0xbd15a221
 8007a38:	3d6ef16b 	.word	0x3d6ef16b
 8007a3c:	3d9d8795 	.word	0x3d9d8795
 8007a40:	3de38e38 	.word	0x3de38e38
 8007a44:	3e4ccccd 	.word	0x3e4ccccd
 8007a48:	401bffff 	.word	0x401bffff
 8007a4c:	bf800000 	.word	0xbf800000
 8007a50:	08007ecc 	.word	0x08007ecc
 8007a54:	08007edc 	.word	0x08007edc
 8007a58:	bfc90fdb 	.word	0xbfc90fdb

08007a5c <fabsf>:
 8007a5c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8007a60:	4770      	bx	lr
	...

08007a64 <_init>:
 8007a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a66:	bf00      	nop
 8007a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a6a:	bc08      	pop	{r3}
 8007a6c:	469e      	mov	lr, r3
 8007a6e:	4770      	bx	lr

08007a70 <_fini>:
 8007a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a72:	bf00      	nop
 8007a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a76:	bc08      	pop	{r3}
 8007a78:	469e      	mov	lr, r3
 8007a7a:	4770      	bx	lr
